/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka-clients-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Clients.Consumer.Internals
{
    #region AsyncClient
    public partial class AsyncClient
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/consumer/internals/AsyncClient.html#sendAsyncRequest(org.apache.kafka.common.Node,java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Node"/></param>
        /// <param name="arg1"><see cref="object"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Clients.Consumer.Internals.RequestFuture"/></returns>
        public Org.Apache.Kafka.Clients.Consumer.Internals.RequestFuture SendAsyncRequest(Org.Apache.Kafka.Common.Node arg0, object arg1)
        {
            return IExecute<Org.Apache.Kafka.Clients.Consumer.Internals.RequestFuture>("sendAsyncRequest", arg0, arg1);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion

    #region AsyncClient<T1, Req, Resp, T2>
    public partial class AsyncClient<T1, Req, Resp, T2>
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Org.Apache.Kafka.Clients.Consumer.Internals.AsyncClient{T1, Req, Resp, T2}"/> to <see cref="Org.Apache.Kafka.Clients.Consumer.Internals.AsyncClient"/>
        /// </summary>
        public static implicit operator Org.Apache.Kafka.Clients.Consumer.Internals.AsyncClient(Org.Apache.Kafka.Clients.Consumer.Internals.AsyncClient<T1, Req, Resp, T2> t) => t.Cast<Org.Apache.Kafka.Clients.Consumer.Internals.AsyncClient>();

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/consumer/internals/AsyncClient.html#sendAsyncRequest(org.apache.kafka.common.Node,java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Node"/></param>
        /// <param name="arg1"><typeparamref name="T1"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Clients.Consumer.Internals.RequestFuture"/></returns>
        public Org.Apache.Kafka.Clients.Consumer.Internals.RequestFuture<T2> SendAsyncRequest(Org.Apache.Kafka.Common.Node arg0, T1 arg1)
        {
            return IExecute<Org.Apache.Kafka.Clients.Consumer.Internals.RequestFuture<T2>>("sendAsyncRequest", arg0, arg1);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}