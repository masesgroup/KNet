/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka-clients-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Clients.Producer.Internals
{
    #region Sender
    public partial class Sender
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/producer/internals/Sender.html#%3Cinit%3E(org.apache.kafka.common.utils.LogContext,org.apache.kafka.clients.KafkaClient,org.apache.kafka.clients.producer.internals.ProducerMetadata,org.apache.kafka.clients.producer.internals.RecordAccumulator,boolean,int,short,int,org.apache.kafka.clients.producer.internals.SenderMetricsRegistry,org.apache.kafka.common.utils.Time,int,long,org.apache.kafka.clients.producer.internals.TransactionManager,org.apache.kafka.clients.ApiVersions)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Utils.LogContext"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Clients.KafkaClient"/></param>
        /// <param name="arg2"><see cref="Org.Apache.Kafka.Clients.Producer.Internals.ProducerMetadata"/></param>
        /// <param name="arg3"><see cref="Org.Apache.Kafka.Clients.Producer.Internals.RecordAccumulator"/></param>
        /// <param name="arg4"><see cref="bool"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        /// <param name="arg6"><see cref="short"/></param>
        /// <param name="arg7"><see cref="int"/></param>
        /// <param name="arg8"><see cref="Org.Apache.Kafka.Clients.Producer.Internals.SenderMetricsRegistry"/></param>
        /// <param name="arg9"><see cref="Org.Apache.Kafka.Common.Utils.Time"/></param>
        /// <param name="arg10"><see cref="int"/></param>
        /// <param name="arg11"><see cref="long"/></param>
        /// <param name="arg12"><see cref="Org.Apache.Kafka.Clients.Producer.Internals.TransactionManager"/></param>
        /// <param name="arg13"><see cref="Org.Apache.Kafka.Clients.ApiVersions"/></param>
        public Sender(Org.Apache.Kafka.Common.Utils.LogContext arg0, Org.Apache.Kafka.Clients.KafkaClient arg1, Org.Apache.Kafka.Clients.Producer.Internals.ProducerMetadata arg2, Org.Apache.Kafka.Clients.Producer.Internals.RecordAccumulator arg3, bool arg4, int arg5, short arg6, int arg7, Org.Apache.Kafka.Clients.Producer.Internals.SenderMetricsRegistry arg8, Org.Apache.Kafka.Common.Utils.Time arg9, int arg10, long arg11, Org.Apache.Kafka.Clients.Producer.Internals.TransactionManager arg12, Org.Apache.Kafka.Clients.ApiVersions arg13)
            : base(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13)
        {
        }

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Org.Apache.Kafka.Clients.Producer.Internals.Sender"/> to <see cref="Java.Lang.Runnable"/>
        /// </summary>
        public static implicit operator Java.Lang.Runnable(Org.Apache.Kafka.Clients.Producer.Internals.Sender t) => t.Cast<Java.Lang.Runnable>();

        #endregion

        #region Fields

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/producer/internals/Sender.html#throttleTimeSensor(org.apache.kafka.clients.producer.internals.SenderMetricsRegistry)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Clients.Producer.Internals.SenderMetricsRegistry"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Metrics.Sensor"/></returns>
        public static Org.Apache.Kafka.Common.Metrics.Sensor ThrottleTimeSensor(Org.Apache.Kafka.Clients.Producer.Internals.SenderMetricsRegistry arg0)
        {
            return SExecute<Org.Apache.Kafka.Common.Metrics.Sensor>(LocalBridgeClazz, "throttleTimeSensor", arg0);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/producer/internals/Sender.html#isRunning()"/> 
        /// </summary>
        public bool IsRunning
        {
            get { return IExecute<bool>("isRunning"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/producer/internals/Sender.html#inFlightBatches(org.apache.kafka.common.TopicPartition)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.TopicPartition"/></param>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Org.Apache.Kafka.Clients.Producer.Internals.ProducerBatch> InFlightBatches(Org.Apache.Kafka.Common.TopicPartition arg0)
        {
            return IExecute<Java.Util.List<Org.Apache.Kafka.Clients.Producer.Internals.ProducerBatch>>("inFlightBatches", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/producer/internals/Sender.html#addToInflightBatches(java.util.Map)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Map"/></param>
        public void AddToInflightBatches(Java.Util.Map<int?, Java.Util.List<Org.Apache.Kafka.Clients.Producer.Internals.ProducerBatch>> arg0)
        {
            IExecute("addToInflightBatches", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/producer/internals/Sender.html#forceClose()"/>
        /// </summary>
        public void ForceClose()
        {
            IExecute("forceClose");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/producer/internals/Sender.html#initiateClose()"/>
        /// </summary>
        public void InitiateClose()
        {
            IExecute("initiateClose");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/producer/internals/Sender.html#run()"/>
        /// </summary>
        public void Run()
        {
            IExecute("run");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/producer/internals/Sender.html#wakeup()"/>
        /// </summary>
        public void Wakeup()
        {
            IExecute("wakeup");
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}