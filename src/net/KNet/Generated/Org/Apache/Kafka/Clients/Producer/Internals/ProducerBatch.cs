/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka-clients-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Clients.Producer.Internals
{
    #region ProducerBatch
    public partial class ProducerBatch
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/producer/internals/ProducerBatch.html#%3Cinit%3E(org.apache.kafka.common.TopicPartition,org.apache.kafka.common.record.MemoryRecordsBuilder,long,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.TopicPartition"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Common.Record.MemoryRecordsBuilder"/></param>
        /// <param name="arg2"><see cref="long"/></param>
        /// <param name="arg3"><see cref="bool"/></param>
        public ProducerBatch(Org.Apache.Kafka.Common.TopicPartition arg0, Org.Apache.Kafka.Common.Record.MemoryRecordsBuilder arg1, long arg2, bool arg3)
            : base(arg0, arg1, arg2, arg3)
        {
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/producer/internals/ProducerBatch.html#%3Cinit%3E(org.apache.kafka.common.TopicPartition,org.apache.kafka.common.record.MemoryRecordsBuilder,long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.TopicPartition"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Common.Record.MemoryRecordsBuilder"/></param>
        /// <param name="arg2"><see cref="long"/></param>
        public ProducerBatch(Org.Apache.Kafka.Common.TopicPartition arg0, Org.Apache.Kafka.Common.Record.MemoryRecordsBuilder arg1, long arg2)
            : base(arg0, arg1, arg2)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/producer/internals/ProducerBatch.html#baseSequence()"/> 
        /// </summary>
        public int BaseSequence
        {
            get { return IExecute<int>("baseSequence"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/producer/internals/ProducerBatch.html#buffer()"/> 
        /// </summary>
        public Java.Nio.ByteBuffer Buffer
        {
            get { return IExecute<Java.Nio.ByteBuffer>("buffer"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/producer/internals/ProducerBatch.html#compressionRatio()"/> 
        /// </summary>
        public double CompressionRatio
        {
            get { return IExecute<double>("compressionRatio"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/producer/internals/ProducerBatch.html#estimatedSizeInBytes()"/> 
        /// </summary>
        public int EstimatedSizeInBytes
        {
            get { return IExecute<int>("estimatedSizeInBytes"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/producer/internals/ProducerBatch.html#hasSequence()"/> 
        /// </summary>
        public bool HasSequence
        {
            get { return IExecute<bool>("hasSequence"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/producer/internals/ProducerBatch.html#initialCapacity()"/> 
        /// </summary>
        public int InitialCapacity
        {
            get { return IExecute<int>("initialCapacity"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/producer/internals/ProducerBatch.html#inRetry()"/> 
        /// </summary>
        public bool InRetry
        {
            get { return IExecute<bool>("inRetry"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/producer/internals/ProducerBatch.html#isClosed()"/> 
        /// </summary>
        public bool IsClosed
        {
            get { return IExecute<bool>("isClosed"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/producer/internals/ProducerBatch.html#isCompressed()"/> 
        /// </summary>
        public bool IsCompressed
        {
            get { return IExecute<bool>("isCompressed"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/producer/internals/ProducerBatch.html#isDone()"/> 
        /// </summary>
        public bool IsDone
        {
            get { return IExecute<bool>("isDone"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/producer/internals/ProducerBatch.html#isFull()"/> 
        /// </summary>
        public bool IsFull
        {
            get { return IExecute<bool>("isFull"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/producer/internals/ProducerBatch.html#isTransactional()"/> 
        /// </summary>
        public bool IsTransactional
        {
            get { return IExecute<bool>("isTransactional"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/producer/internals/ProducerBatch.html#isWritable()"/> 
        /// </summary>
        public bool IsWritable
        {
            get { return IExecute<bool>("isWritable"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/producer/internals/ProducerBatch.html#lastSequence()"/> 
        /// </summary>
        public int LastSequence
        {
            get { return IExecute<int>("lastSequence"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/producer/internals/ProducerBatch.html#magic()"/> 
        /// </summary>
        public byte Magic
        {
            get { return IExecute<byte>("magic"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/producer/internals/ProducerBatch.html#producerEpoch()"/> 
        /// </summary>
        public short ProducerEpoch
        {
            get { return IExecute<short>("producerEpoch"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/producer/internals/ProducerBatch.html#producerId()"/> 
        /// </summary>
        public long ProducerId
        {
            get { return IExecute<long>("producerId"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/producer/internals/ProducerBatch.html#records()"/> 
        /// </summary>
        public Org.Apache.Kafka.Common.Record.MemoryRecords Records
        {
            get { return IExecute<Org.Apache.Kafka.Common.Record.MemoryRecords>("records"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/producer/internals/ProducerBatch.html#sequenceHasBeenReset()"/> 
        /// </summary>
        public bool SequenceHasBeenReset
        {
            get { return IExecute<bool>("sequenceHasBeenReset"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/producer/internals/ProducerBatch.html#complete(long,long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool Complete(long arg0, long arg1)
        {
            return IExecute<bool>("complete", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/producer/internals/ProducerBatch.html#completeExceptionally(java.lang.RuntimeException,java.util.function.Function)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.RuntimeException"/></param>
        /// <param name="arg1"><see cref="Java.Util.Function.Function"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool CompleteExceptionally(Java.Lang.RuntimeException arg0, Java.Util.Function.Function<int?, Java.Lang.RuntimeException> arg1)
        {
            return IExecute<bool>("completeExceptionally", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/producer/internals/ProducerBatch.html#split(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Java.Util.Deque"/></returns>
        public Java.Util.Deque<Org.Apache.Kafka.Clients.Producer.Internals.ProducerBatch> Split(int arg0)
        {
            return IExecute<Java.Util.Deque<Org.Apache.Kafka.Clients.Producer.Internals.ProducerBatch>>("split", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/producer/internals/ProducerBatch.html#tryAppend(long,byte[],byte[],org.apache.kafka.common.header.Header[],org.apache.kafka.clients.producer.Callback,long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <param name="arg1"><see cref="byte"/></param>
        /// <param name="arg2"><see cref="byte"/></param>
        /// <param name="arg3"><see cref="Org.Apache.Kafka.Common.Header.Header"/></param>
        /// <param name="arg4"><see cref="Org.Apache.Kafka.Clients.Producer.Callback"/></param>
        /// <param name="arg5"><see cref="long"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Clients.Producer.Internals.FutureRecordMetadata"/></returns>
        public Org.Apache.Kafka.Clients.Producer.Internals.FutureRecordMetadata TryAppend(long arg0, byte[] arg1, byte[] arg2, Org.Apache.Kafka.Common.Header.Header[] arg3, Org.Apache.Kafka.Clients.Producer.Callback arg4, long arg5)
        {
            return IExecute<Org.Apache.Kafka.Clients.Producer.Internals.FutureRecordMetadata>("tryAppend", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/producer/internals/ProducerBatch.html#abort(java.lang.RuntimeException)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.RuntimeException"/></param>
        public void Abort(Java.Lang.RuntimeException arg0)
        {
            IExecute("abort", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/producer/internals/ProducerBatch.html#abortRecordAppends()"/>
        /// </summary>
        public void AbortRecordAppends()
        {
            IExecute("abortRecordAppends");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/producer/internals/ProducerBatch.html#close()"/>
        /// </summary>
        public void Close()
        {
            IExecute("close");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/producer/internals/ProducerBatch.html#closeForRecordAppends()"/>
        /// </summary>
        public void CloseForRecordAppends()
        {
            IExecute("closeForRecordAppends");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/producer/internals/ProducerBatch.html#resetProducerState(org.apache.kafka.common.utils.ProducerIdAndEpoch,int,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Utils.ProducerIdAndEpoch"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="bool"/></param>
        public void ResetProducerState(Org.Apache.Kafka.Common.Utils.ProducerIdAndEpoch arg0, int arg1, bool arg2)
        {
            IExecute("resetProducerState", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/producer/internals/ProducerBatch.html#setProducerState(org.apache.kafka.common.utils.ProducerIdAndEpoch,int,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Utils.ProducerIdAndEpoch"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="bool"/></param>
        public void SetProducerState(Org.Apache.Kafka.Common.Utils.ProducerIdAndEpoch arg0, int arg1, bool arg2)
        {
            IExecute("setProducerState", arg0, arg1, arg2);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}