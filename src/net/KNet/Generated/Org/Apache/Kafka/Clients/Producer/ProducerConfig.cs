/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.11.0)
*  using kafka-clients-3.9.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Clients.Producer
{
    #region ProducerConfig declaration
    /// <summary>
    /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.9.0/org/apache/kafka/clients/producer/ProducerConfig.html"/>
    /// </summary>
    public partial class ProducerConfig : Org.Apache.Kafka.Common.Config.AbstractConfig, MASES.JCOBridge.C2JBridge.IJVMBridgeMain
    {
        const string _bridgeClassName = "org.apache.kafka.clients.producer.ProducerConfig";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public ProducerConfig() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public ProducerConfig(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class

    }
    #endregion

    #region ProducerConfig implementation
    public partial class ProducerConfig
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.9.0/org/apache/kafka/clients/producer/ProducerConfig.html#org.apache.kafka.clients.producer.ProducerConfig(java.util.Map)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Map"/></param>
        public ProducerConfig(Java.Util.Map<Java.Lang.String, object> arg0)
            : base(arg0)
        {
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.9.0/org/apache/kafka/clients/producer/ProducerConfig.html#org.apache.kafka.clients.producer.ProducerConfig(java.util.Properties)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Properties"/></param>
        public ProducerConfig(Java.Util.Properties arg0)
            : base(arg0)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.9.0/org/apache/kafka/clients/producer/ProducerConfig.html#ACKS_CONFIG"/>
        /// </summary>
        public static Java.Lang.String ACKS_CONFIG { get { if (!_ACKS_CONFIGReady) { _ACKS_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ACKS_CONFIG"); _ACKS_CONFIGReady = true; } return _ACKS_CONFIGContent; } }
        private static Java.Lang.String _ACKS_CONFIGContent = default;
        private static bool _ACKS_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.9.0/org/apache/kafka/clients/producer/ProducerConfig.html#BATCH_SIZE_CONFIG"/>
        /// </summary>
        public static Java.Lang.String BATCH_SIZE_CONFIG { get { if (!_BATCH_SIZE_CONFIGReady) { _BATCH_SIZE_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "BATCH_SIZE_CONFIG"); _BATCH_SIZE_CONFIGReady = true; } return _BATCH_SIZE_CONFIGContent; } }
        private static Java.Lang.String _BATCH_SIZE_CONFIGContent = default;
        private static bool _BATCH_SIZE_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.9.0/org/apache/kafka/clients/producer/ProducerConfig.html#BOOTSTRAP_SERVERS_CONFIG"/>
        /// </summary>
        public static Java.Lang.String BOOTSTRAP_SERVERS_CONFIG { get { if (!_BOOTSTRAP_SERVERS_CONFIGReady) { _BOOTSTRAP_SERVERS_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "BOOTSTRAP_SERVERS_CONFIG"); _BOOTSTRAP_SERVERS_CONFIGReady = true; } return _BOOTSTRAP_SERVERS_CONFIGContent; } }
        private static Java.Lang.String _BOOTSTRAP_SERVERS_CONFIGContent = default;
        private static bool _BOOTSTRAP_SERVERS_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.9.0/org/apache/kafka/clients/producer/ProducerConfig.html#BUFFER_MEMORY_CONFIG"/>
        /// </summary>
        public static Java.Lang.String BUFFER_MEMORY_CONFIG { get { if (!_BUFFER_MEMORY_CONFIGReady) { _BUFFER_MEMORY_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "BUFFER_MEMORY_CONFIG"); _BUFFER_MEMORY_CONFIGReady = true; } return _BUFFER_MEMORY_CONFIGContent; } }
        private static Java.Lang.String _BUFFER_MEMORY_CONFIGContent = default;
        private static bool _BUFFER_MEMORY_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.9.0/org/apache/kafka/clients/producer/ProducerConfig.html#CLIENT_DNS_LOOKUP_CONFIG"/>
        /// </summary>
        public static Java.Lang.String CLIENT_DNS_LOOKUP_CONFIG { get { if (!_CLIENT_DNS_LOOKUP_CONFIGReady) { _CLIENT_DNS_LOOKUP_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CLIENT_DNS_LOOKUP_CONFIG"); _CLIENT_DNS_LOOKUP_CONFIGReady = true; } return _CLIENT_DNS_LOOKUP_CONFIGContent; } }
        private static Java.Lang.String _CLIENT_DNS_LOOKUP_CONFIGContent = default;
        private static bool _CLIENT_DNS_LOOKUP_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.9.0/org/apache/kafka/clients/producer/ProducerConfig.html#CLIENT_ID_CONFIG"/>
        /// </summary>
        public static Java.Lang.String CLIENT_ID_CONFIG { get { if (!_CLIENT_ID_CONFIGReady) { _CLIENT_ID_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CLIENT_ID_CONFIG"); _CLIENT_ID_CONFIGReady = true; } return _CLIENT_ID_CONFIGContent; } }
        private static Java.Lang.String _CLIENT_ID_CONFIGContent = default;
        private static bool _CLIENT_ID_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.9.0/org/apache/kafka/clients/producer/ProducerConfig.html#COMPRESSION_GZIP_LEVEL_CONFIG"/>
        /// </summary>
        public static Java.Lang.String COMPRESSION_GZIP_LEVEL_CONFIG { get { if (!_COMPRESSION_GZIP_LEVEL_CONFIGReady) { _COMPRESSION_GZIP_LEVEL_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "COMPRESSION_GZIP_LEVEL_CONFIG"); _COMPRESSION_GZIP_LEVEL_CONFIGReady = true; } return _COMPRESSION_GZIP_LEVEL_CONFIGContent; } }
        private static Java.Lang.String _COMPRESSION_GZIP_LEVEL_CONFIGContent = default;
        private static bool _COMPRESSION_GZIP_LEVEL_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.9.0/org/apache/kafka/clients/producer/ProducerConfig.html#COMPRESSION_LZ4_LEVEL_CONFIG"/>
        /// </summary>
        public static Java.Lang.String COMPRESSION_LZ4_LEVEL_CONFIG { get { if (!_COMPRESSION_LZ4_LEVEL_CONFIGReady) { _COMPRESSION_LZ4_LEVEL_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "COMPRESSION_LZ4_LEVEL_CONFIG"); _COMPRESSION_LZ4_LEVEL_CONFIGReady = true; } return _COMPRESSION_LZ4_LEVEL_CONFIGContent; } }
        private static Java.Lang.String _COMPRESSION_LZ4_LEVEL_CONFIGContent = default;
        private static bool _COMPRESSION_LZ4_LEVEL_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.9.0/org/apache/kafka/clients/producer/ProducerConfig.html#COMPRESSION_TYPE_CONFIG"/>
        /// </summary>
        public static Java.Lang.String COMPRESSION_TYPE_CONFIG { get { if (!_COMPRESSION_TYPE_CONFIGReady) { _COMPRESSION_TYPE_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "COMPRESSION_TYPE_CONFIG"); _COMPRESSION_TYPE_CONFIGReady = true; } return _COMPRESSION_TYPE_CONFIGContent; } }
        private static Java.Lang.String _COMPRESSION_TYPE_CONFIGContent = default;
        private static bool _COMPRESSION_TYPE_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.9.0/org/apache/kafka/clients/producer/ProducerConfig.html#COMPRESSION_ZSTD_LEVEL_CONFIG"/>
        /// </summary>
        public static Java.Lang.String COMPRESSION_ZSTD_LEVEL_CONFIG { get { if (!_COMPRESSION_ZSTD_LEVEL_CONFIGReady) { _COMPRESSION_ZSTD_LEVEL_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "COMPRESSION_ZSTD_LEVEL_CONFIG"); _COMPRESSION_ZSTD_LEVEL_CONFIGReady = true; } return _COMPRESSION_ZSTD_LEVEL_CONFIGContent; } }
        private static Java.Lang.String _COMPRESSION_ZSTD_LEVEL_CONFIGContent = default;
        private static bool _COMPRESSION_ZSTD_LEVEL_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.9.0/org/apache/kafka/clients/producer/ProducerConfig.html#CONNECTIONS_MAX_IDLE_MS_CONFIG"/>
        /// </summary>
        public static Java.Lang.String CONNECTIONS_MAX_IDLE_MS_CONFIG { get { if (!_CONNECTIONS_MAX_IDLE_MS_CONFIGReady) { _CONNECTIONS_MAX_IDLE_MS_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CONNECTIONS_MAX_IDLE_MS_CONFIG"); _CONNECTIONS_MAX_IDLE_MS_CONFIGReady = true; } return _CONNECTIONS_MAX_IDLE_MS_CONFIGContent; } }
        private static Java.Lang.String _CONNECTIONS_MAX_IDLE_MS_CONFIGContent = default;
        private static bool _CONNECTIONS_MAX_IDLE_MS_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.9.0/org/apache/kafka/clients/producer/ProducerConfig.html#DELIVERY_TIMEOUT_MS_CONFIG"/>
        /// </summary>
        public static Java.Lang.String DELIVERY_TIMEOUT_MS_CONFIG { get { if (!_DELIVERY_TIMEOUT_MS_CONFIGReady) { _DELIVERY_TIMEOUT_MS_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DELIVERY_TIMEOUT_MS_CONFIG"); _DELIVERY_TIMEOUT_MS_CONFIGReady = true; } return _DELIVERY_TIMEOUT_MS_CONFIGContent; } }
        private static Java.Lang.String _DELIVERY_TIMEOUT_MS_CONFIGContent = default;
        private static bool _DELIVERY_TIMEOUT_MS_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.9.0/org/apache/kafka/clients/producer/ProducerConfig.html#ENABLE_IDEMPOTENCE_CONFIG"/>
        /// </summary>
        public static Java.Lang.String ENABLE_IDEMPOTENCE_CONFIG { get { if (!_ENABLE_IDEMPOTENCE_CONFIGReady) { _ENABLE_IDEMPOTENCE_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ENABLE_IDEMPOTENCE_CONFIG"); _ENABLE_IDEMPOTENCE_CONFIGReady = true; } return _ENABLE_IDEMPOTENCE_CONFIGContent; } }
        private static Java.Lang.String _ENABLE_IDEMPOTENCE_CONFIGContent = default;
        private static bool _ENABLE_IDEMPOTENCE_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.9.0/org/apache/kafka/clients/producer/ProducerConfig.html#ENABLE_IDEMPOTENCE_DOC"/>
        /// </summary>
        public static Java.Lang.String ENABLE_IDEMPOTENCE_DOC { get { if (!_ENABLE_IDEMPOTENCE_DOCReady) { _ENABLE_IDEMPOTENCE_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ENABLE_IDEMPOTENCE_DOC"); _ENABLE_IDEMPOTENCE_DOCReady = true; } return _ENABLE_IDEMPOTENCE_DOCContent; } }
        private static Java.Lang.String _ENABLE_IDEMPOTENCE_DOCContent = default;
        private static bool _ENABLE_IDEMPOTENCE_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.9.0/org/apache/kafka/clients/producer/ProducerConfig.html#ENABLE_METRICS_PUSH_CONFIG"/>
        /// </summary>
        public static Java.Lang.String ENABLE_METRICS_PUSH_CONFIG { get { if (!_ENABLE_METRICS_PUSH_CONFIGReady) { _ENABLE_METRICS_PUSH_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ENABLE_METRICS_PUSH_CONFIG"); _ENABLE_METRICS_PUSH_CONFIGReady = true; } return _ENABLE_METRICS_PUSH_CONFIGContent; } }
        private static Java.Lang.String _ENABLE_METRICS_PUSH_CONFIGContent = default;
        private static bool _ENABLE_METRICS_PUSH_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.9.0/org/apache/kafka/clients/producer/ProducerConfig.html#ENABLE_METRICS_PUSH_DOC"/>
        /// </summary>
        public static Java.Lang.String ENABLE_METRICS_PUSH_DOC { get { if (!_ENABLE_METRICS_PUSH_DOCReady) { _ENABLE_METRICS_PUSH_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ENABLE_METRICS_PUSH_DOC"); _ENABLE_METRICS_PUSH_DOCReady = true; } return _ENABLE_METRICS_PUSH_DOCContent; } }
        private static Java.Lang.String _ENABLE_METRICS_PUSH_DOCContent = default;
        private static bool _ENABLE_METRICS_PUSH_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.9.0/org/apache/kafka/clients/producer/ProducerConfig.html#INTERCEPTOR_CLASSES_CONFIG"/>
        /// </summary>
        public static Java.Lang.String INTERCEPTOR_CLASSES_CONFIG { get { if (!_INTERCEPTOR_CLASSES_CONFIGReady) { _INTERCEPTOR_CLASSES_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "INTERCEPTOR_CLASSES_CONFIG"); _INTERCEPTOR_CLASSES_CONFIGReady = true; } return _INTERCEPTOR_CLASSES_CONFIGContent; } }
        private static Java.Lang.String _INTERCEPTOR_CLASSES_CONFIGContent = default;
        private static bool _INTERCEPTOR_CLASSES_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.9.0/org/apache/kafka/clients/producer/ProducerConfig.html#INTERCEPTOR_CLASSES_DOC"/>
        /// </summary>
        public static Java.Lang.String INTERCEPTOR_CLASSES_DOC { get { if (!_INTERCEPTOR_CLASSES_DOCReady) { _INTERCEPTOR_CLASSES_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "INTERCEPTOR_CLASSES_DOC"); _INTERCEPTOR_CLASSES_DOCReady = true; } return _INTERCEPTOR_CLASSES_DOCContent; } }
        private static Java.Lang.String _INTERCEPTOR_CLASSES_DOCContent = default;
        private static bool _INTERCEPTOR_CLASSES_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.9.0/org/apache/kafka/clients/producer/ProducerConfig.html#KEY_SERIALIZER_CLASS_CONFIG"/>
        /// </summary>
        public static Java.Lang.String KEY_SERIALIZER_CLASS_CONFIG { get { if (!_KEY_SERIALIZER_CLASS_CONFIGReady) { _KEY_SERIALIZER_CLASS_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_SERIALIZER_CLASS_CONFIG"); _KEY_SERIALIZER_CLASS_CONFIGReady = true; } return _KEY_SERIALIZER_CLASS_CONFIGContent; } }
        private static Java.Lang.String _KEY_SERIALIZER_CLASS_CONFIGContent = default;
        private static bool _KEY_SERIALIZER_CLASS_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.9.0/org/apache/kafka/clients/producer/ProducerConfig.html#KEY_SERIALIZER_CLASS_DOC"/>
        /// </summary>
        public static Java.Lang.String KEY_SERIALIZER_CLASS_DOC { get { if (!_KEY_SERIALIZER_CLASS_DOCReady) { _KEY_SERIALIZER_CLASS_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_SERIALIZER_CLASS_DOC"); _KEY_SERIALIZER_CLASS_DOCReady = true; } return _KEY_SERIALIZER_CLASS_DOCContent; } }
        private static Java.Lang.String _KEY_SERIALIZER_CLASS_DOCContent = default;
        private static bool _KEY_SERIALIZER_CLASS_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.9.0/org/apache/kafka/clients/producer/ProducerConfig.html#LINGER_MS_CONFIG"/>
        /// </summary>
        public static Java.Lang.String LINGER_MS_CONFIG { get { if (!_LINGER_MS_CONFIGReady) { _LINGER_MS_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "LINGER_MS_CONFIG"); _LINGER_MS_CONFIGReady = true; } return _LINGER_MS_CONFIGContent; } }
        private static Java.Lang.String _LINGER_MS_CONFIGContent = default;
        private static bool _LINGER_MS_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.9.0/org/apache/kafka/clients/producer/ProducerConfig.html#MAX_BLOCK_MS_CONFIG"/>
        /// </summary>
        public static Java.Lang.String MAX_BLOCK_MS_CONFIG { get { if (!_MAX_BLOCK_MS_CONFIGReady) { _MAX_BLOCK_MS_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MAX_BLOCK_MS_CONFIG"); _MAX_BLOCK_MS_CONFIGReady = true; } return _MAX_BLOCK_MS_CONFIGContent; } }
        private static Java.Lang.String _MAX_BLOCK_MS_CONFIGContent = default;
        private static bool _MAX_BLOCK_MS_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.9.0/org/apache/kafka/clients/producer/ProducerConfig.html#MAX_IN_FLIGHT_REQUESTS_PER_CONNECTION"/>
        /// </summary>
        public static Java.Lang.String MAX_IN_FLIGHT_REQUESTS_PER_CONNECTION { get { if (!_MAX_IN_FLIGHT_REQUESTS_PER_CONNECTIONReady) { _MAX_IN_FLIGHT_REQUESTS_PER_CONNECTIONContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MAX_IN_FLIGHT_REQUESTS_PER_CONNECTION"); _MAX_IN_FLIGHT_REQUESTS_PER_CONNECTIONReady = true; } return _MAX_IN_FLIGHT_REQUESTS_PER_CONNECTIONContent; } }
        private static Java.Lang.String _MAX_IN_FLIGHT_REQUESTS_PER_CONNECTIONContent = default;
        private static bool _MAX_IN_FLIGHT_REQUESTS_PER_CONNECTIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.9.0/org/apache/kafka/clients/producer/ProducerConfig.html#MAX_REQUEST_SIZE_CONFIG"/>
        /// </summary>
        public static Java.Lang.String MAX_REQUEST_SIZE_CONFIG { get { if (!_MAX_REQUEST_SIZE_CONFIGReady) { _MAX_REQUEST_SIZE_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MAX_REQUEST_SIZE_CONFIG"); _MAX_REQUEST_SIZE_CONFIGReady = true; } return _MAX_REQUEST_SIZE_CONFIGContent; } }
        private static Java.Lang.String _MAX_REQUEST_SIZE_CONFIGContent = default;
        private static bool _MAX_REQUEST_SIZE_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.9.0/org/apache/kafka/clients/producer/ProducerConfig.html#METADATA_MAX_AGE_CONFIG"/>
        /// </summary>
        public static Java.Lang.String METADATA_MAX_AGE_CONFIG { get { if (!_METADATA_MAX_AGE_CONFIGReady) { _METADATA_MAX_AGE_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "METADATA_MAX_AGE_CONFIG"); _METADATA_MAX_AGE_CONFIGReady = true; } return _METADATA_MAX_AGE_CONFIGContent; } }
        private static Java.Lang.String _METADATA_MAX_AGE_CONFIGContent = default;
        private static bool _METADATA_MAX_AGE_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.9.0/org/apache/kafka/clients/producer/ProducerConfig.html#METADATA_MAX_IDLE_CONFIG"/>
        /// </summary>
        public static Java.Lang.String METADATA_MAX_IDLE_CONFIG { get { if (!_METADATA_MAX_IDLE_CONFIGReady) { _METADATA_MAX_IDLE_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "METADATA_MAX_IDLE_CONFIG"); _METADATA_MAX_IDLE_CONFIGReady = true; } return _METADATA_MAX_IDLE_CONFIGContent; } }
        private static Java.Lang.String _METADATA_MAX_IDLE_CONFIGContent = default;
        private static bool _METADATA_MAX_IDLE_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.9.0/org/apache/kafka/clients/producer/ProducerConfig.html#METRIC_REPORTER_CLASSES_CONFIG"/>
        /// </summary>
        public static Java.Lang.String METRIC_REPORTER_CLASSES_CONFIG { get { if (!_METRIC_REPORTER_CLASSES_CONFIGReady) { _METRIC_REPORTER_CLASSES_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "METRIC_REPORTER_CLASSES_CONFIG"); _METRIC_REPORTER_CLASSES_CONFIGReady = true; } return _METRIC_REPORTER_CLASSES_CONFIGContent; } }
        private static Java.Lang.String _METRIC_REPORTER_CLASSES_CONFIGContent = default;
        private static bool _METRIC_REPORTER_CLASSES_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.9.0/org/apache/kafka/clients/producer/ProducerConfig.html#METRICS_NUM_SAMPLES_CONFIG"/>
        /// </summary>
        public static Java.Lang.String METRICS_NUM_SAMPLES_CONFIG { get { if (!_METRICS_NUM_SAMPLES_CONFIGReady) { _METRICS_NUM_SAMPLES_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "METRICS_NUM_SAMPLES_CONFIG"); _METRICS_NUM_SAMPLES_CONFIGReady = true; } return _METRICS_NUM_SAMPLES_CONFIGContent; } }
        private static Java.Lang.String _METRICS_NUM_SAMPLES_CONFIGContent = default;
        private static bool _METRICS_NUM_SAMPLES_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.9.0/org/apache/kafka/clients/producer/ProducerConfig.html#METRICS_RECORDING_LEVEL_CONFIG"/>
        /// </summary>
        public static Java.Lang.String METRICS_RECORDING_LEVEL_CONFIG { get { if (!_METRICS_RECORDING_LEVEL_CONFIGReady) { _METRICS_RECORDING_LEVEL_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "METRICS_RECORDING_LEVEL_CONFIG"); _METRICS_RECORDING_LEVEL_CONFIGReady = true; } return _METRICS_RECORDING_LEVEL_CONFIGContent; } }
        private static Java.Lang.String _METRICS_RECORDING_LEVEL_CONFIGContent = default;
        private static bool _METRICS_RECORDING_LEVEL_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.9.0/org/apache/kafka/clients/producer/ProducerConfig.html#METRICS_SAMPLE_WINDOW_MS_CONFIG"/>
        /// </summary>
        public static Java.Lang.String METRICS_SAMPLE_WINDOW_MS_CONFIG { get { if (!_METRICS_SAMPLE_WINDOW_MS_CONFIGReady) { _METRICS_SAMPLE_WINDOW_MS_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "METRICS_SAMPLE_WINDOW_MS_CONFIG"); _METRICS_SAMPLE_WINDOW_MS_CONFIGReady = true; } return _METRICS_SAMPLE_WINDOW_MS_CONFIGContent; } }
        private static Java.Lang.String _METRICS_SAMPLE_WINDOW_MS_CONFIGContent = default;
        private static bool _METRICS_SAMPLE_WINDOW_MS_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.9.0/org/apache/kafka/clients/producer/ProducerConfig.html#PARTITIONER_ADPATIVE_PARTITIONING_ENABLE_CONFIG"/>
        /// </summary>
        public static Java.Lang.String PARTITIONER_ADPATIVE_PARTITIONING_ENABLE_CONFIG { get { if (!_PARTITIONER_ADPATIVE_PARTITIONING_ENABLE_CONFIGReady) { _PARTITIONER_ADPATIVE_PARTITIONING_ENABLE_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PARTITIONER_ADPATIVE_PARTITIONING_ENABLE_CONFIG"); _PARTITIONER_ADPATIVE_PARTITIONING_ENABLE_CONFIGReady = true; } return _PARTITIONER_ADPATIVE_PARTITIONING_ENABLE_CONFIGContent; } }
        private static Java.Lang.String _PARTITIONER_ADPATIVE_PARTITIONING_ENABLE_CONFIGContent = default;
        private static bool _PARTITIONER_ADPATIVE_PARTITIONING_ENABLE_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.9.0/org/apache/kafka/clients/producer/ProducerConfig.html#PARTITIONER_AVAILABILITY_TIMEOUT_MS_CONFIG"/>
        /// </summary>
        public static Java.Lang.String PARTITIONER_AVAILABILITY_TIMEOUT_MS_CONFIG { get { if (!_PARTITIONER_AVAILABILITY_TIMEOUT_MS_CONFIGReady) { _PARTITIONER_AVAILABILITY_TIMEOUT_MS_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PARTITIONER_AVAILABILITY_TIMEOUT_MS_CONFIG"); _PARTITIONER_AVAILABILITY_TIMEOUT_MS_CONFIGReady = true; } return _PARTITIONER_AVAILABILITY_TIMEOUT_MS_CONFIGContent; } }
        private static Java.Lang.String _PARTITIONER_AVAILABILITY_TIMEOUT_MS_CONFIGContent = default;
        private static bool _PARTITIONER_AVAILABILITY_TIMEOUT_MS_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.9.0/org/apache/kafka/clients/producer/ProducerConfig.html#PARTITIONER_CLASS_CONFIG"/>
        /// </summary>
        public static Java.Lang.String PARTITIONER_CLASS_CONFIG { get { if (!_PARTITIONER_CLASS_CONFIGReady) { _PARTITIONER_CLASS_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PARTITIONER_CLASS_CONFIG"); _PARTITIONER_CLASS_CONFIGReady = true; } return _PARTITIONER_CLASS_CONFIGContent; } }
        private static Java.Lang.String _PARTITIONER_CLASS_CONFIGContent = default;
        private static bool _PARTITIONER_CLASS_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.9.0/org/apache/kafka/clients/producer/ProducerConfig.html#PARTITIONER_IGNORE_KEYS_CONFIG"/>
        /// </summary>
        public static Java.Lang.String PARTITIONER_IGNORE_KEYS_CONFIG { get { if (!_PARTITIONER_IGNORE_KEYS_CONFIGReady) { _PARTITIONER_IGNORE_KEYS_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PARTITIONER_IGNORE_KEYS_CONFIG"); _PARTITIONER_IGNORE_KEYS_CONFIGReady = true; } return _PARTITIONER_IGNORE_KEYS_CONFIGContent; } }
        private static Java.Lang.String _PARTITIONER_IGNORE_KEYS_CONFIGContent = default;
        private static bool _PARTITIONER_IGNORE_KEYS_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.9.0/org/apache/kafka/clients/producer/ProducerConfig.html#RECEIVE_BUFFER_CONFIG"/>
        /// </summary>
        public static Java.Lang.String RECEIVE_BUFFER_CONFIG { get { if (!_RECEIVE_BUFFER_CONFIGReady) { _RECEIVE_BUFFER_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "RECEIVE_BUFFER_CONFIG"); _RECEIVE_BUFFER_CONFIGReady = true; } return _RECEIVE_BUFFER_CONFIGContent; } }
        private static Java.Lang.String _RECEIVE_BUFFER_CONFIGContent = default;
        private static bool _RECEIVE_BUFFER_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.9.0/org/apache/kafka/clients/producer/ProducerConfig.html#RECONNECT_BACKOFF_MAX_MS_CONFIG"/>
        /// </summary>
        public static Java.Lang.String RECONNECT_BACKOFF_MAX_MS_CONFIG { get { if (!_RECONNECT_BACKOFF_MAX_MS_CONFIGReady) { _RECONNECT_BACKOFF_MAX_MS_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "RECONNECT_BACKOFF_MAX_MS_CONFIG"); _RECONNECT_BACKOFF_MAX_MS_CONFIGReady = true; } return _RECONNECT_BACKOFF_MAX_MS_CONFIGContent; } }
        private static Java.Lang.String _RECONNECT_BACKOFF_MAX_MS_CONFIGContent = default;
        private static bool _RECONNECT_BACKOFF_MAX_MS_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.9.0/org/apache/kafka/clients/producer/ProducerConfig.html#RECONNECT_BACKOFF_MS_CONFIG"/>
        /// </summary>
        public static Java.Lang.String RECONNECT_BACKOFF_MS_CONFIG { get { if (!_RECONNECT_BACKOFF_MS_CONFIGReady) { _RECONNECT_BACKOFF_MS_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "RECONNECT_BACKOFF_MS_CONFIG"); _RECONNECT_BACKOFF_MS_CONFIGReady = true; } return _RECONNECT_BACKOFF_MS_CONFIGContent; } }
        private static Java.Lang.String _RECONNECT_BACKOFF_MS_CONFIGContent = default;
        private static bool _RECONNECT_BACKOFF_MS_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.9.0/org/apache/kafka/clients/producer/ProducerConfig.html#REQUEST_TIMEOUT_MS_CONFIG"/>
        /// </summary>
        public static Java.Lang.String REQUEST_TIMEOUT_MS_CONFIG { get { if (!_REQUEST_TIMEOUT_MS_CONFIGReady) { _REQUEST_TIMEOUT_MS_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "REQUEST_TIMEOUT_MS_CONFIG"); _REQUEST_TIMEOUT_MS_CONFIGReady = true; } return _REQUEST_TIMEOUT_MS_CONFIGContent; } }
        private static Java.Lang.String _REQUEST_TIMEOUT_MS_CONFIGContent = default;
        private static bool _REQUEST_TIMEOUT_MS_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.9.0/org/apache/kafka/clients/producer/ProducerConfig.html#RETRIES_CONFIG"/>
        /// </summary>
        public static Java.Lang.String RETRIES_CONFIG { get { if (!_RETRIES_CONFIGReady) { _RETRIES_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "RETRIES_CONFIG"); _RETRIES_CONFIGReady = true; } return _RETRIES_CONFIGContent; } }
        private static Java.Lang.String _RETRIES_CONFIGContent = default;
        private static bool _RETRIES_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.9.0/org/apache/kafka/clients/producer/ProducerConfig.html#RETRY_BACKOFF_MAX_MS_CONFIG"/>
        /// </summary>
        public static Java.Lang.String RETRY_BACKOFF_MAX_MS_CONFIG { get { if (!_RETRY_BACKOFF_MAX_MS_CONFIGReady) { _RETRY_BACKOFF_MAX_MS_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "RETRY_BACKOFF_MAX_MS_CONFIG"); _RETRY_BACKOFF_MAX_MS_CONFIGReady = true; } return _RETRY_BACKOFF_MAX_MS_CONFIGContent; } }
        private static Java.Lang.String _RETRY_BACKOFF_MAX_MS_CONFIGContent = default;
        private static bool _RETRY_BACKOFF_MAX_MS_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.9.0/org/apache/kafka/clients/producer/ProducerConfig.html#RETRY_BACKOFF_MS_CONFIG"/>
        /// </summary>
        public static Java.Lang.String RETRY_BACKOFF_MS_CONFIG { get { if (!_RETRY_BACKOFF_MS_CONFIGReady) { _RETRY_BACKOFF_MS_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "RETRY_BACKOFF_MS_CONFIG"); _RETRY_BACKOFF_MS_CONFIGReady = true; } return _RETRY_BACKOFF_MS_CONFIGContent; } }
        private static Java.Lang.String _RETRY_BACKOFF_MS_CONFIGContent = default;
        private static bool _RETRY_BACKOFF_MS_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.9.0/org/apache/kafka/clients/producer/ProducerConfig.html#SECURITY_PROVIDERS_CONFIG"/>
        /// </summary>
        public static Java.Lang.String SECURITY_PROVIDERS_CONFIG { get { if (!_SECURITY_PROVIDERS_CONFIGReady) { _SECURITY_PROVIDERS_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SECURITY_PROVIDERS_CONFIG"); _SECURITY_PROVIDERS_CONFIGReady = true; } return _SECURITY_PROVIDERS_CONFIGContent; } }
        private static Java.Lang.String _SECURITY_PROVIDERS_CONFIGContent = default;
        private static bool _SECURITY_PROVIDERS_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.9.0/org/apache/kafka/clients/producer/ProducerConfig.html#SEND_BUFFER_CONFIG"/>
        /// </summary>
        public static Java.Lang.String SEND_BUFFER_CONFIG { get { if (!_SEND_BUFFER_CONFIGReady) { _SEND_BUFFER_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SEND_BUFFER_CONFIG"); _SEND_BUFFER_CONFIGReady = true; } return _SEND_BUFFER_CONFIGContent; } }
        private static Java.Lang.String _SEND_BUFFER_CONFIGContent = default;
        private static bool _SEND_BUFFER_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.9.0/org/apache/kafka/clients/producer/ProducerConfig.html#SOCKET_CONNECTION_SETUP_TIMEOUT_MAX_MS_CONFIG"/>
        /// </summary>
        public static Java.Lang.String SOCKET_CONNECTION_SETUP_TIMEOUT_MAX_MS_CONFIG { get { if (!_SOCKET_CONNECTION_SETUP_TIMEOUT_MAX_MS_CONFIGReady) { _SOCKET_CONNECTION_SETUP_TIMEOUT_MAX_MS_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SOCKET_CONNECTION_SETUP_TIMEOUT_MAX_MS_CONFIG"); _SOCKET_CONNECTION_SETUP_TIMEOUT_MAX_MS_CONFIGReady = true; } return _SOCKET_CONNECTION_SETUP_TIMEOUT_MAX_MS_CONFIGContent; } }
        private static Java.Lang.String _SOCKET_CONNECTION_SETUP_TIMEOUT_MAX_MS_CONFIGContent = default;
        private static bool _SOCKET_CONNECTION_SETUP_TIMEOUT_MAX_MS_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.9.0/org/apache/kafka/clients/producer/ProducerConfig.html#SOCKET_CONNECTION_SETUP_TIMEOUT_MS_CONFIG"/>
        /// </summary>
        public static Java.Lang.String SOCKET_CONNECTION_SETUP_TIMEOUT_MS_CONFIG { get { if (!_SOCKET_CONNECTION_SETUP_TIMEOUT_MS_CONFIGReady) { _SOCKET_CONNECTION_SETUP_TIMEOUT_MS_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SOCKET_CONNECTION_SETUP_TIMEOUT_MS_CONFIG"); _SOCKET_CONNECTION_SETUP_TIMEOUT_MS_CONFIGReady = true; } return _SOCKET_CONNECTION_SETUP_TIMEOUT_MS_CONFIGContent; } }
        private static Java.Lang.String _SOCKET_CONNECTION_SETUP_TIMEOUT_MS_CONFIGContent = default;
        private static bool _SOCKET_CONNECTION_SETUP_TIMEOUT_MS_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.9.0/org/apache/kafka/clients/producer/ProducerConfig.html#TRANSACTION_TIMEOUT_CONFIG"/>
        /// </summary>
        public static Java.Lang.String TRANSACTION_TIMEOUT_CONFIG { get { if (!_TRANSACTION_TIMEOUT_CONFIGReady) { _TRANSACTION_TIMEOUT_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TRANSACTION_TIMEOUT_CONFIG"); _TRANSACTION_TIMEOUT_CONFIGReady = true; } return _TRANSACTION_TIMEOUT_CONFIGContent; } }
        private static Java.Lang.String _TRANSACTION_TIMEOUT_CONFIGContent = default;
        private static bool _TRANSACTION_TIMEOUT_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.9.0/org/apache/kafka/clients/producer/ProducerConfig.html#TRANSACTION_TIMEOUT_DOC"/>
        /// </summary>
        public static Java.Lang.String TRANSACTION_TIMEOUT_DOC { get { if (!_TRANSACTION_TIMEOUT_DOCReady) { _TRANSACTION_TIMEOUT_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TRANSACTION_TIMEOUT_DOC"); _TRANSACTION_TIMEOUT_DOCReady = true; } return _TRANSACTION_TIMEOUT_DOCContent; } }
        private static Java.Lang.String _TRANSACTION_TIMEOUT_DOCContent = default;
        private static bool _TRANSACTION_TIMEOUT_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.9.0/org/apache/kafka/clients/producer/ProducerConfig.html#TRANSACTIONAL_ID_CONFIG"/>
        /// </summary>
        public static Java.Lang.String TRANSACTIONAL_ID_CONFIG { get { if (!_TRANSACTIONAL_ID_CONFIGReady) { _TRANSACTIONAL_ID_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TRANSACTIONAL_ID_CONFIG"); _TRANSACTIONAL_ID_CONFIGReady = true; } return _TRANSACTIONAL_ID_CONFIGContent; } }
        private static Java.Lang.String _TRANSACTIONAL_ID_CONFIGContent = default;
        private static bool _TRANSACTIONAL_ID_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.9.0/org/apache/kafka/clients/producer/ProducerConfig.html#TRANSACTIONAL_ID_DOC"/>
        /// </summary>
        public static Java.Lang.String TRANSACTIONAL_ID_DOC { get { if (!_TRANSACTIONAL_ID_DOCReady) { _TRANSACTIONAL_ID_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TRANSACTIONAL_ID_DOC"); _TRANSACTIONAL_ID_DOCReady = true; } return _TRANSACTIONAL_ID_DOCContent; } }
        private static Java.Lang.String _TRANSACTIONAL_ID_DOCContent = default;
        private static bool _TRANSACTIONAL_ID_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.9.0/org/apache/kafka/clients/producer/ProducerConfig.html#VALUE_SERIALIZER_CLASS_CONFIG"/>
        /// </summary>
        public static Java.Lang.String VALUE_SERIALIZER_CLASS_CONFIG { get { if (!_VALUE_SERIALIZER_CLASS_CONFIGReady) { _VALUE_SERIALIZER_CLASS_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "VALUE_SERIALIZER_CLASS_CONFIG"); _VALUE_SERIALIZER_CLASS_CONFIGReady = true; } return _VALUE_SERIALIZER_CLASS_CONFIGContent; } }
        private static Java.Lang.String _VALUE_SERIALIZER_CLASS_CONFIGContent = default;
        private static bool _VALUE_SERIALIZER_CLASS_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.9.0/org/apache/kafka/clients/producer/ProducerConfig.html#VALUE_SERIALIZER_CLASS_DOC"/>
        /// </summary>
        public static Java.Lang.String VALUE_SERIALIZER_CLASS_DOC { get { if (!_VALUE_SERIALIZER_CLASS_DOCReady) { _VALUE_SERIALIZER_CLASS_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "VALUE_SERIALIZER_CLASS_DOC"); _VALUE_SERIALIZER_CLASS_DOCReady = true; } return _VALUE_SERIALIZER_CLASS_DOCContent; } }
        private static Java.Lang.String _VALUE_SERIALIZER_CLASS_DOCContent = default;
        private static bool _VALUE_SERIALIZER_CLASS_DOCReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.9.0/org/apache/kafka/clients/producer/ProducerConfig.html#configNames--"/>
        /// </summary>
        /// <returns><see cref="Java.Util.Set"/></returns>
        public static Java.Util.Set<Java.Lang.String> ConfigNames()
        {
            return SExecuteWithSignature<Java.Util.Set<Java.Lang.String>>(LocalBridgeClazz, "configNames", "()Ljava/util/Set;");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.9.0/org/apache/kafka/clients/producer/ProducerConfig.html#configDef--"/>
        /// </summary>
        /// <returns><see cref="Org.Apache.Kafka.Common.Config.ConfigDef"/></returns>
        public static Org.Apache.Kafka.Common.Config.ConfigDef ConfigDef()
        {
            return SExecuteWithSignature<Org.Apache.Kafka.Common.Config.ConfigDef>(LocalBridgeClazz, "configDef", "()Lorg/apache/kafka/common/config/ConfigDef;");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.9.0/org/apache/kafka/clients/producer/ProducerConfig.html#main-java.lang.String[]-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        public static void Main(Java.Lang.String[] arg0)
        {
            SExecuteWithSignature(LocalBridgeClazz, "main", "([Ljava/lang/String;)V", new object[] { arg0 });
        }

        #endregion

        #region Instance methods

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}