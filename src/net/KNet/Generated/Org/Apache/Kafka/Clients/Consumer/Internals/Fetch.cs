/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka-clients-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Clients.Consumer.Internals
{
    #region Fetch
    public partial class Fetch
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/consumer/internals/Fetch.html#empty()"/> 
        /// </summary>
        public static Org.Apache.Kafka.Clients.Consumer.Internals.Fetch Empty
        {
            get { return SExecute<Org.Apache.Kafka.Clients.Consumer.Internals.Fetch>(LocalBridgeClazz, "empty"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/consumer/internals/Fetch.html#forPartition(org.apache.kafka.common.TopicPartition,java.util.List,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.TopicPartition"/></param>
        /// <param name="arg1"><see cref="Java.Util.List"/></param>
        /// <param name="arg2"><see cref="bool"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Clients.Consumer.Internals.Fetch"/></returns>
        public static Org.Apache.Kafka.Clients.Consumer.Internals.Fetch ForPartition(Org.Apache.Kafka.Common.TopicPartition arg0, Java.Util.List arg1, bool arg2)
        {
            return SExecute<Org.Apache.Kafka.Clients.Consumer.Internals.Fetch>(LocalBridgeClazz, "forPartition", arg0, arg1, arg2);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/consumer/internals/Fetch.html#isEmpty()"/> 
        /// </summary>
        public bool IsEmpty
        {
            get { return IExecute<bool>("isEmpty"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/consumer/internals/Fetch.html#numRecords()"/> 
        /// </summary>
        public int NumRecords
        {
            get { return IExecute<int>("numRecords"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/consumer/internals/Fetch.html#positionAdvanced()"/> 
        /// </summary>
        public bool PositionAdvanced
        {
            get { return IExecute<bool>("positionAdvanced"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/consumer/internals/Fetch.html#records()"/> 
        /// </summary>
        public Java.Util.Map Records
        {
            get { return IExecute<Java.Util.Map>("records"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/consumer/internals/Fetch.html#add(org.apache.kafka.clients.consumer.internals.Fetch)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Clients.Consumer.Internals.Fetch"/></param>
        public void Add(Org.Apache.Kafka.Clients.Consumer.Internals.Fetch arg0)
        {
            IExecute("add", arg0);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion

    #region Fetch<K, V>
    public partial class Fetch<K, V>
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Org.Apache.Kafka.Clients.Consumer.Internals.Fetch{K, V}"/> to <see cref="Org.Apache.Kafka.Clients.Consumer.Internals.Fetch"/>
        /// </summary>
        public static implicit operator Org.Apache.Kafka.Clients.Consumer.Internals.Fetch(Org.Apache.Kafka.Clients.Consumer.Internals.Fetch<K, V> t) => t.Cast<Org.Apache.Kafka.Clients.Consumer.Internals.Fetch>();

        #endregion

        #region Fields

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/consumer/internals/Fetch.html#empty()"/> 
        /// </summary>
        public static Org.Apache.Kafka.Clients.Consumer.Internals.Fetch<K, V> Empty
        {
            get { return SExecute<Org.Apache.Kafka.Clients.Consumer.Internals.Fetch<K, V>>(LocalBridgeClazz, "empty"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/consumer/internals/Fetch.html#forPartition(org.apache.kafka.common.TopicPartition,java.util.List,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.TopicPartition"/></param>
        /// <param name="arg1"><see cref="Java.Util.List"/></param>
        /// <param name="arg2"><see cref="bool"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Clients.Consumer.Internals.Fetch"/></returns>
        public static Org.Apache.Kafka.Clients.Consumer.Internals.Fetch<K, V> ForPartition(Org.Apache.Kafka.Common.TopicPartition arg0, Java.Util.List<Org.Apache.Kafka.Clients.Consumer.ConsumerRecord<K, V>> arg1, bool arg2)
        {
            return SExecute<Org.Apache.Kafka.Clients.Consumer.Internals.Fetch<K, V>>(LocalBridgeClazz, "forPartition", arg0, arg1, arg2);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/consumer/internals/Fetch.html#isEmpty()"/> 
        /// </summary>
        public bool IsEmpty
        {
            get { return IExecute<bool>("isEmpty"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/consumer/internals/Fetch.html#numRecords()"/> 
        /// </summary>
        public int NumRecords
        {
            get { return IExecute<int>("numRecords"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/consumer/internals/Fetch.html#positionAdvanced()"/> 
        /// </summary>
        public bool PositionAdvanced
        {
            get { return IExecute<bool>("positionAdvanced"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/consumer/internals/Fetch.html#records()"/> 
        /// </summary>
        public Java.Util.Map<Org.Apache.Kafka.Common.TopicPartition, Java.Util.List<Org.Apache.Kafka.Clients.Consumer.ConsumerRecord<K, V>>> Records
        {
            get { return IExecute<Java.Util.Map<Org.Apache.Kafka.Common.TopicPartition, Java.Util.List<Org.Apache.Kafka.Clients.Consumer.ConsumerRecord<K, V>>>>("records"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/consumer/internals/Fetch.html#add(org.apache.kafka.clients.consumer.internals.Fetch)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Clients.Consumer.Internals.Fetch"/></param>
        public void Add(Org.Apache.Kafka.Clients.Consumer.Internals.Fetch<K, V> arg0)
        {
            IExecute("add", arg0);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}