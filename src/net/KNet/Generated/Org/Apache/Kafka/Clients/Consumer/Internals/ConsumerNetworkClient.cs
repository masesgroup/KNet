/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka-clients-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Clients.Consumer.Internals
{
    #region ConsumerNetworkClient
    public partial class ConsumerNetworkClient
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.html#%3Cinit%3E(org.apache.kafka.common.utils.LogContext,org.apache.kafka.clients.KafkaClient,org.apache.kafka.clients.Metadata,org.apache.kafka.common.utils.Time,long,int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Utils.LogContext"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Clients.KafkaClient"/></param>
        /// <param name="arg2"><see cref="Org.Apache.Kafka.Clients.Metadata"/></param>
        /// <param name="arg3"><see cref="Org.Apache.Kafka.Common.Utils.Time"/></param>
        /// <param name="arg4"><see cref="long"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        /// <param name="arg6"><see cref="int"/></param>
        public ConsumerNetworkClient(Org.Apache.Kafka.Common.Utils.LogContext arg0, Org.Apache.Kafka.Clients.KafkaClient arg1, Org.Apache.Kafka.Clients.Metadata arg2, Org.Apache.Kafka.Common.Utils.Time arg3, long arg4, int arg5, int arg6)
            : base(arg0, arg1, arg2, arg3, arg4, arg5, arg6)
        {
        }

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Org.Apache.Kafka.Clients.Consumer.Internals.ConsumerNetworkClient"/> to <see cref="Java.Io.Closeable"/>
        /// </summary>
        public static implicit operator Java.Io.Closeable(Org.Apache.Kafka.Clients.Consumer.Internals.ConsumerNetworkClient t) => t.Cast<Java.Io.Closeable>();

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.html#defaultRequestTimeoutMs()"/> 
        /// </summary>
        public int DefaultRequestTimeoutMs
        {
            get { return IExecute<int>("defaultRequestTimeoutMs"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.html#leastLoadedNode()"/> 
        /// </summary>
        public Org.Apache.Kafka.Common.Node LeastLoadedNode
        {
            get { return IExecute<Org.Apache.Kafka.Common.Node>("leastLoadedNode"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.html#awaitMetadataUpdate(org.apache.kafka.common.utils.Timer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Utils.Timer"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool AwaitMetadataUpdate(Org.Apache.Kafka.Common.Utils.Timer arg0)
        {
            return IExecute<bool>("awaitMetadataUpdate", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.html#awaitPendingRequests(org.apache.kafka.common.Node,org.apache.kafka.common.utils.Timer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Node"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Common.Utils.Timer"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool AwaitPendingRequests(Org.Apache.Kafka.Common.Node arg0, Org.Apache.Kafka.Common.Utils.Timer arg1)
        {
            return IExecute<bool>("awaitPendingRequests", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.html#hasPendingRequests()"/>
        /// </summary>

        /// <returns><see cref="bool"/></returns>
        public bool HasPendingRequests()
        {
            return IExecute<bool>("hasPendingRequests");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.html#hasPendingRequests(org.apache.kafka.common.Node)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Node"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool HasPendingRequests(Org.Apache.Kafka.Common.Node arg0)
        {
            return IExecute<bool>("hasPendingRequests", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.html#hasReadyNodes(long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool HasReadyNodes(long arg0)
        {
            return IExecute<bool>("hasReadyNodes", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.html#isUnavailable(org.apache.kafka.common.Node)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Node"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsUnavailable(Org.Apache.Kafka.Common.Node arg0)
        {
            return IExecute<bool>("isUnavailable", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.html#poll(org.apache.kafka.clients.consumer.internals.RequestFuture,org.apache.kafka.common.utils.Timer,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Clients.Consumer.Internals.RequestFuture"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Common.Utils.Timer"/></param>
        /// <param name="arg2"><see cref="bool"/></param>
        /// <typeparam name="Arg0Extendsobject"></typeparam>
        /// <returns><see cref="bool"/></returns>
        public bool Poll<Arg0Extendsobject>(Org.Apache.Kafka.Clients.Consumer.Internals.RequestFuture<Arg0Extendsobject> arg0, Org.Apache.Kafka.Common.Utils.Timer arg1, bool arg2)
        {
            return IExecute<bool>("poll", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.html#poll(org.apache.kafka.clients.consumer.internals.RequestFuture,org.apache.kafka.common.utils.Timer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Clients.Consumer.Internals.RequestFuture"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Common.Utils.Timer"/></param>
        /// <typeparam name="Arg0Extendsobject"></typeparam>
        /// <returns><see cref="bool"/></returns>
        public bool Poll<Arg0Extendsobject>(Org.Apache.Kafka.Clients.Consumer.Internals.RequestFuture<Arg0Extendsobject> arg0, Org.Apache.Kafka.Common.Utils.Timer arg1)
        {
            return IExecute<bool>("poll", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.html#pendingRequestCount()"/>
        /// </summary>

        /// <returns><see cref="int"/></returns>
        public int PendingRequestCount()
        {
            return IExecute<int>("pendingRequestCount");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.html#pendingRequestCount(org.apache.kafka.common.Node)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Node"/></param>
        /// <returns><see cref="int"/></returns>
        public int PendingRequestCount(Org.Apache.Kafka.Common.Node arg0)
        {
            return IExecute<int>("pendingRequestCount", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.html#send(org.apache.kafka.common.Node,org.apache.kafka.common.requests.AbstractRequest.Builder,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Node"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Common.Requests.AbstractRequest.Builder"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Clients.Consumer.Internals.RequestFuture"/></returns>
        public Org.Apache.Kafka.Clients.Consumer.Internals.RequestFuture<Org.Apache.Kafka.Clients.ClientResponse> Send(Org.Apache.Kafka.Common.Node arg0, Org.Apache.Kafka.Common.Requests.AbstractRequest.Builder arg1, int arg2)
        {
            return IExecute<Org.Apache.Kafka.Clients.Consumer.Internals.RequestFuture<Org.Apache.Kafka.Clients.ClientResponse>>("send", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.html#send(org.apache.kafka.common.Node,org.apache.kafka.common.requests.AbstractRequest.Builder)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Node"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Common.Requests.AbstractRequest.Builder"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Clients.Consumer.Internals.RequestFuture"/></returns>
        public Org.Apache.Kafka.Clients.Consumer.Internals.RequestFuture<Org.Apache.Kafka.Clients.ClientResponse> Send(Org.Apache.Kafka.Common.Node arg0, Org.Apache.Kafka.Common.Requests.AbstractRequest.Builder arg1)
        {
            return IExecute<Org.Apache.Kafka.Clients.Consumer.Internals.RequestFuture<Org.Apache.Kafka.Clients.ClientResponse>>("send", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.html#close()"/>
        /// </summary>

        /// <exception cref="Java.Io.IOException"/>
        public void Close()
        {
            IExecute("close");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.html#disableWakeups()"/>
        /// </summary>
        public void DisableWakeups()
        {
            IExecute("disableWakeups");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.html#disconnectAsync(org.apache.kafka.common.Node)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Node"/></param>
        public void DisconnectAsync(Org.Apache.Kafka.Common.Node arg0)
        {
            IExecute("disconnectAsync", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.html#maybeThrowAuthFailure(org.apache.kafka.common.Node)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Node"/></param>
        public void MaybeThrowAuthFailure(Org.Apache.Kafka.Common.Node arg0)
        {
            IExecute("maybeThrowAuthFailure", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.html#maybeTriggerWakeup()"/>
        /// </summary>
        public void MaybeTriggerWakeup()
        {
            IExecute("maybeTriggerWakeup");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.html#poll(org.apache.kafka.clients.consumer.internals.RequestFuture)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Clients.Consumer.Internals.RequestFuture"/></param>
        /// <typeparam name="Arg0Extendsobject"></typeparam>
        public void Poll<Arg0Extendsobject>(Org.Apache.Kafka.Clients.Consumer.Internals.RequestFuture<Arg0Extendsobject> arg0)
        {
            IExecute("poll", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.html#poll(org.apache.kafka.common.utils.Timer,org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient.PollCondition,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Utils.Timer"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Clients.Consumer.Internals.ConsumerNetworkClient.PollCondition"/></param>
        /// <param name="arg2"><see cref="bool"/></param>
        public void Poll(Org.Apache.Kafka.Common.Utils.Timer arg0, Org.Apache.Kafka.Clients.Consumer.Internals.ConsumerNetworkClient.PollCondition arg1, bool arg2)
        {
            IExecute("poll", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.html#poll(org.apache.kafka.common.utils.Timer,org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient.PollCondition)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Utils.Timer"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Clients.Consumer.Internals.ConsumerNetworkClient.PollCondition"/></param>
        public void Poll(Org.Apache.Kafka.Common.Utils.Timer arg0, Org.Apache.Kafka.Clients.Consumer.Internals.ConsumerNetworkClient.PollCondition arg1)
        {
            IExecute("poll", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.html#poll(org.apache.kafka.common.utils.Timer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Utils.Timer"/></param>
        public void Poll(Org.Apache.Kafka.Common.Utils.Timer arg0)
        {
            IExecute("poll", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.html#pollNoWakeup()"/>
        /// </summary>
        public void PollNoWakeup()
        {
            IExecute("pollNoWakeup");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.html#transmitSends()"/>
        /// </summary>
        public void TransmitSends()
        {
            IExecute("transmitSends");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.html#tryConnect(org.apache.kafka.common.Node)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Node"/></param>
        public void TryConnect(Org.Apache.Kafka.Common.Node arg0)
        {
            IExecute("tryConnect", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.html#wakeup()"/>
        /// </summary>
        public void Wakeup()
        {
            IExecute("wakeup");
        }

        #endregion

        #region Nested classes
        #region PollCondition
        public partial class PollCondition
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/consumer/internals/ConsumerNetworkClient.PollCondition.html#shouldBlock()"/> 
            /// </summary>
            public bool ShouldBlock
            {
                get { return IExecute<bool>("shouldBlock"); }
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}