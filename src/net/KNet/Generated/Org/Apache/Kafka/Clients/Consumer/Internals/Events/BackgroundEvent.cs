/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka-clients-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Clients.Consumer.Internals.Events
{
    #region BackgroundEvent
    public partial class BackgroundEvent
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/consumer/internals/events/BackgroundEvent.html#%3Cinit%3E(org.apache.kafka.clients.consumer.internals.events.BackgroundEvent.EventType)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Clients.Consumer.Internals.Events.BackgroundEvent.EventType"/></param>
        public BackgroundEvent(Org.Apache.Kafka.Clients.Consumer.Internals.Events.BackgroundEvent.EventType arg0)
            : base(arg0)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/consumer/internals/events/BackgroundEvent.html#type"/>
        /// </summary>
        public Org.Apache.Kafka.Clients.Consumer.Internals.Events.BackgroundEvent.EventType type { get { return IGetField<Org.Apache.Kafka.Clients.Consumer.Internals.Events.BackgroundEvent.EventType>("type"); } }

        #endregion

        #region Static methods

        #endregion

        #region Instance methods

        #endregion

        #region Nested classes
        #region EventType
        public partial class EventType
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/consumer/internals/events/BackgroundEvent.EventType.html#NOOP"/>
            /// </summary>
            public static Org.Apache.Kafka.Clients.Consumer.Internals.Events.BackgroundEvent.EventType NOOP { get { return SGetField<Org.Apache.Kafka.Clients.Consumer.Internals.Events.BackgroundEvent.EventType>(LocalBridgeClazz, "NOOP"); } }

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/consumer/internals/events/BackgroundEvent.EventType.html#values()"/> 
            /// </summary>
            public static Org.Apache.Kafka.Clients.Consumer.Internals.Events.BackgroundEvent.EventType[] Values
            {
                get { return SExecuteArray<Org.Apache.Kafka.Clients.Consumer.Internals.Events.BackgroundEvent.EventType>(LocalBridgeClazz, "values"); }
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/consumer/internals/events/BackgroundEvent.EventType.html#valueOf(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="string"/></param>
            /// <returns><see cref="Org.Apache.Kafka.Clients.Consumer.Internals.Events.BackgroundEvent.EventType"/></returns>
            public static Org.Apache.Kafka.Clients.Consumer.Internals.Events.BackgroundEvent.EventType ValueOf(string arg0)
            {
                return SExecute<Org.Apache.Kafka.Clients.Consumer.Internals.Events.BackgroundEvent.EventType>(LocalBridgeClazz, "valueOf", arg0);
            }

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}