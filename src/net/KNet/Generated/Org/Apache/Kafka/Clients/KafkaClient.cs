/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka-clients-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Clients
{
    #region KafkaClient
    public partial class KafkaClient
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/KafkaClient.html#active()"/>
        /// </summary>

        /// <returns><see cref="bool"/></returns>
        public bool Active()
        {
            return IExecute<bool>("active");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/KafkaClient.html#connectionFailed(org.apache.kafka.common.Node)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Node"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool ConnectionFailed(Org.Apache.Kafka.Common.Node arg0)
        {
            return IExecute<bool>("connectionFailed", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/KafkaClient.html#hasInFlightRequests()"/>
        /// </summary>

        /// <returns><see cref="bool"/></returns>
        public bool HasInFlightRequests()
        {
            return IExecute<bool>("hasInFlightRequests");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/KafkaClient.html#hasInFlightRequests(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool HasInFlightRequests(string arg0)
        {
            return IExecute<bool>("hasInFlightRequests", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/KafkaClient.html#hasReadyNodes(long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool HasReadyNodes(long arg0)
        {
            return IExecute<bool>("hasReadyNodes", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/KafkaClient.html#isReady(org.apache.kafka.common.Node,long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Node"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsReady(Org.Apache.Kafka.Common.Node arg0, long arg1)
        {
            return IExecute<bool>("isReady", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/KafkaClient.html#ready(org.apache.kafka.common.Node,long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Node"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool Ready(Org.Apache.Kafka.Common.Node arg0, long arg1)
        {
            return IExecute<bool>("ready", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/KafkaClient.html#inFlightRequestCount()"/>
        /// </summary>

        /// <returns><see cref="int"/></returns>
        public int InFlightRequestCount()
        {
            return IExecute<int>("inFlightRequestCount");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/KafkaClient.html#inFlightRequestCount(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <returns><see cref="int"/></returns>
        public int InFlightRequestCount(string arg0)
        {
            return IExecute<int>("inFlightRequestCount", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/KafkaClient.html#poll(long,long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Org.Apache.Kafka.Clients.ClientResponse> Poll(long arg0, long arg1)
        {
            return IExecute<Java.Util.List<Org.Apache.Kafka.Clients.ClientResponse>>("poll", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/KafkaClient.html#connectionDelay(org.apache.kafka.common.Node,long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Node"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        /// <returns><see cref="long"/></returns>
        public long ConnectionDelay(Org.Apache.Kafka.Common.Node arg0, long arg1)
        {
            return IExecute<long>("connectionDelay", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/KafkaClient.html#pollDelayMs(org.apache.kafka.common.Node,long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Node"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        /// <returns><see cref="long"/></returns>
        public long PollDelayMs(Org.Apache.Kafka.Common.Node arg0, long arg1)
        {
            return IExecute<long>("pollDelayMs", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/KafkaClient.html#newClientRequest(java.lang.String,org.apache.kafka.common.requests.AbstractRequest.Builder,long,boolean,int,org.apache.kafka.clients.RequestCompletionHandler)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Common.Requests.AbstractRequest.Builder"/></param>
        /// <param name="arg2"><see cref="long"/></param>
        /// <param name="arg3"><see cref="bool"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="Org.Apache.Kafka.Clients.RequestCompletionHandler"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Clients.ClientRequest"/></returns>
        public Org.Apache.Kafka.Clients.ClientRequest NewClientRequest(string arg0, Org.Apache.Kafka.Common.Requests.AbstractRequest.Builder arg1, long arg2, bool arg3, int arg4, Org.Apache.Kafka.Clients.RequestCompletionHandler arg5)
        {
            return IExecute<Org.Apache.Kafka.Clients.ClientRequest>("newClientRequest", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/KafkaClient.html#newClientRequest(java.lang.String,org.apache.kafka.common.requests.AbstractRequest.Builder,long,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Common.Requests.AbstractRequest.Builder"/></param>
        /// <param name="arg2"><see cref="long"/></param>
        /// <param name="arg3"><see cref="bool"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Clients.ClientRequest"/></returns>
        public Org.Apache.Kafka.Clients.ClientRequest NewClientRequest(string arg0, Org.Apache.Kafka.Common.Requests.AbstractRequest.Builder arg1, long arg2, bool arg3)
        {
            return IExecute<Org.Apache.Kafka.Clients.ClientRequest>("newClientRequest", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/KafkaClient.html#authenticationException(org.apache.kafka.common.Node)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Node"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Errors.AuthenticationException"/></returns>
        public Org.Apache.Kafka.Common.Errors.AuthenticationException AuthenticationException(Org.Apache.Kafka.Common.Node arg0)
        {
            var obj = IExecute<MASES.JCOBridge.C2JBridge.JVMInterop.IJavaObject>("authenticationException", arg0); return MASES.JCOBridge.C2JBridge.JVMBridgeException.New<Org.Apache.Kafka.Common.Errors.AuthenticationException>(obj);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/KafkaClient.html#leastLoadedNode(long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Node"/></returns>
        public Org.Apache.Kafka.Common.Node LeastLoadedNode(long arg0)
        {
            return IExecute<Org.Apache.Kafka.Common.Node>("leastLoadedNode", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/KafkaClient.html#close(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        public void Close(string arg0)
        {
            IExecute("close", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/KafkaClient.html#disconnect(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        public void Disconnect(string arg0)
        {
            IExecute("disconnect", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/KafkaClient.html#initiateClose()"/>
        /// </summary>
        public void InitiateClose()
        {
            IExecute("initiateClose");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/KafkaClient.html#send(org.apache.kafka.clients.ClientRequest,long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Clients.ClientRequest"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        public void Send(Org.Apache.Kafka.Clients.ClientRequest arg0, long arg1)
        {
            IExecute("send", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/KafkaClient.html#wakeup()"/>
        /// </summary>
        public void Wakeup()
        {
            IExecute("wakeup");
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}