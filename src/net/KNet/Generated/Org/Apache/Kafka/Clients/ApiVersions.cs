/*
*  Copyright (c) 2021-2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.6.3.0)
*  using kafka-clients-4.0.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Clients
{
    #region ApiVersions declaration
    /// <summary>
    /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.0.0/org/apache/kafka/clients/ApiVersions.html"/>
    /// </summary>
    public partial class ApiVersions : MASES.JCOBridge.C2JBridge.JVMBridgeBase<ApiVersions>
    {
        const string _bridgeClassName = "org.apache.kafka.clients.ApiVersions";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public ApiVersions() { }
        /// <summary>
        /// Internal constructor: used internally from JCOBridge
        /// </summary>
        [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public ApiVersions(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public ApiVersions(params object[] args) : base(args) { }

        private static readonly global::System.Exception _LocalBridgeClazzException = null;
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <inheritdoc/>
        public override string BridgeClassName => _bridgeClassName;
        /// <inheritdoc/>
        public override bool IsBridgeAbstract => false;
        /// <inheritdoc/>
        public override bool IsBridgeCloseable => false;
        /// <inheritdoc/>
        public override bool IsBridgeInterface => false;
        /// <inheritdoc/>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class
        #region FinalizedFeaturesInfo declaration
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.0.0/org/apache/kafka/clients/ApiVersions.FinalizedFeaturesInfo.html"/>
        /// </summary>
        public partial class FinalizedFeaturesInfo : MASES.JCOBridge.C2JBridge.JVMBridgeBase<FinalizedFeaturesInfo>
        {
            const string _bridgeClassName = "org.apache.kafka.clients.ApiVersions$FinalizedFeaturesInfo";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public FinalizedFeaturesInfo() { }
            /// <summary>
            /// Internal constructor: used internally from JCOBridge
            /// </summary>
            [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public FinalizedFeaturesInfo(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public FinalizedFeaturesInfo(params object[] args) : base(args) { }

            private static readonly global::System.Exception _LocalBridgeClazzException = null;
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <inheritdoc/>
            public override string BridgeClassName => _bridgeClassName;
            /// <inheritdoc/>
            public override bool IsBridgeAbstract => false;
            /// <inheritdoc/>
            public override bool IsBridgeCloseable => false;
            /// <inheritdoc/>
            public override bool IsBridgeInterface => false;
            /// <inheritdoc/>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

    
    }
    #endregion

    #region ApiVersions implementation
    public partial class ApiVersions
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.0.0/org/apache/kafka/clients/ApiVersions.html#getFinalizedFeaturesInfo()"/> 
        /// </summary>
        public Org.Apache.Kafka.Clients.ApiVersions.FinalizedFeaturesInfo GetFinalizedFeaturesInfo
        {
            get { return IExecuteWithSignature<Org.Apache.Kafka.Clients.ApiVersions.FinalizedFeaturesInfo>("getFinalizedFeaturesInfo", "()Lorg/apache/kafka/clients/ApiVersions$FinalizedFeaturesInfo;"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.0.0/org/apache/kafka/clients/ApiVersions.html#getMaxFinalizedFeaturesEpoch()"/> 
        /// </summary>
        public long MaxFinalizedFeaturesEpoch
        {
            get { return IExecuteWithSignature<long>("getMaxFinalizedFeaturesEpoch", "()J"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.0.0/org/apache/kafka/clients/ApiVersions.html#get(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Clients.NodeApiVersions"/></returns>
        public Org.Apache.Kafka.Clients.NodeApiVersions Get(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<Org.Apache.Kafka.Clients.NodeApiVersions>("get", "(Ljava/lang/String;)Lorg/apache/kafka/clients/NodeApiVersions;", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.0.0/org/apache/kafka/clients/ApiVersions.html#remove(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        public void Remove(Java.Lang.String arg0)
        {
            IExecuteWithSignature("remove", "(Ljava/lang/String;)V", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.0.0/org/apache/kafka/clients/ApiVersions.html#update(java.lang.String,org.apache.kafka.clients.NodeApiVersions)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Clients.NodeApiVersions"/></param>
        public void Update(Java.Lang.String arg0, Org.Apache.Kafka.Clients.NodeApiVersions arg1)
        {
            IExecuteWithSignature("update", "(Ljava/lang/String;Lorg/apache/kafka/clients/NodeApiVersions;)V", arg0, arg1);
        }

        #endregion

        #region Nested classes
        #region FinalizedFeaturesInfo implementation
        public partial class FinalizedFeaturesInfo
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.0.0/org/apache/kafka/clients/ApiVersions.FinalizedFeaturesInfo.html#finalizedFeatures"/>
            /// </summary>
            public Java.Util.Map finalizedFeatures { get { if (!_finalizedFeaturesReady) { _finalizedFeaturesContent = IGetField<Java.Util.Map>("finalizedFeatures"); _finalizedFeaturesReady = true; } return _finalizedFeaturesContent; } }
            private Java.Util.Map _finalizedFeaturesContent = default;
            private bool _finalizedFeaturesReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.0.0/org/apache/kafka/clients/ApiVersions.FinalizedFeaturesInfo.html#finalizedFeaturesEpoch"/>
            /// </summary>
            public long finalizedFeaturesEpoch { get { if (!_finalizedFeaturesEpochReady) { _finalizedFeaturesEpochContent = IGetField<long>("finalizedFeaturesEpoch"); _finalizedFeaturesEpochReady = true; } return _finalizedFeaturesEpochContent; } }
            private long _finalizedFeaturesEpochContent = default;
            private bool _finalizedFeaturesEpochReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}