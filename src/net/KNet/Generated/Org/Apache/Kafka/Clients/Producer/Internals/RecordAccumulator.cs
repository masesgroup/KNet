/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka-clients-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Clients.Producer.Internals
{
    #region RecordAccumulator
    public partial class RecordAccumulator
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/producer/internals/RecordAccumulator.html#%3Cinit%3E(org.apache.kafka.common.utils.LogContext,int,org.apache.kafka.common.record.CompressionType,int,long,int,org.apache.kafka.clients.producer.internals.RecordAccumulator.PartitionerConfig,org.apache.kafka.common.metrics.Metrics,java.lang.String,org.apache.kafka.common.utils.Time,org.apache.kafka.clients.ApiVersions,org.apache.kafka.clients.producer.internals.TransactionManager,org.apache.kafka.clients.producer.internals.BufferPool)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Utils.LogContext"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Org.Apache.Kafka.Common.Record.CompressionType"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="long"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        /// <param name="arg6"><see cref="Org.Apache.Kafka.Clients.Producer.Internals.RecordAccumulator.PartitionerConfig"/></param>
        /// <param name="arg7"><see cref="Org.Apache.Kafka.Common.Metrics.Metrics"/></param>
        /// <param name="arg8"><see cref="string"/></param>
        /// <param name="arg9"><see cref="Org.Apache.Kafka.Common.Utils.Time"/></param>
        /// <param name="arg10"><see cref="Org.Apache.Kafka.Clients.ApiVersions"/></param>
        /// <param name="arg11"><see cref="Org.Apache.Kafka.Clients.Producer.Internals.TransactionManager"/></param>
        /// <param name="arg12"><see cref="Org.Apache.Kafka.Clients.Producer.Internals.BufferPool"/></param>
        public RecordAccumulator(Org.Apache.Kafka.Common.Utils.LogContext arg0, int arg1, Org.Apache.Kafka.Common.Record.CompressionType arg2, int arg3, long arg4, int arg5, Org.Apache.Kafka.Clients.Producer.Internals.RecordAccumulator.PartitionerConfig arg6, Org.Apache.Kafka.Common.Metrics.Metrics arg7, string arg8, Org.Apache.Kafka.Common.Utils.Time arg9, Org.Apache.Kafka.Clients.ApiVersions arg10, Org.Apache.Kafka.Clients.Producer.Internals.TransactionManager arg11, Org.Apache.Kafka.Clients.Producer.Internals.BufferPool arg12)
            : base(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12)
        {
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/producer/internals/RecordAccumulator.html#%3Cinit%3E(org.apache.kafka.common.utils.LogContext,int,org.apache.kafka.common.record.CompressionType,int,long,int,org.apache.kafka.common.metrics.Metrics,java.lang.String,org.apache.kafka.common.utils.Time,org.apache.kafka.clients.ApiVersions,org.apache.kafka.clients.producer.internals.TransactionManager,org.apache.kafka.clients.producer.internals.BufferPool)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Utils.LogContext"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Org.Apache.Kafka.Common.Record.CompressionType"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="long"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        /// <param name="arg6"><see cref="Org.Apache.Kafka.Common.Metrics.Metrics"/></param>
        /// <param name="arg7"><see cref="string"/></param>
        /// <param name="arg8"><see cref="Org.Apache.Kafka.Common.Utils.Time"/></param>
        /// <param name="arg9"><see cref="Org.Apache.Kafka.Clients.ApiVersions"/></param>
        /// <param name="arg10"><see cref="Org.Apache.Kafka.Clients.Producer.Internals.TransactionManager"/></param>
        /// <param name="arg11"><see cref="Org.Apache.Kafka.Clients.Producer.Internals.BufferPool"/></param>
        public RecordAccumulator(Org.Apache.Kafka.Common.Utils.LogContext arg0, int arg1, Org.Apache.Kafka.Common.Record.CompressionType arg2, int arg3, long arg4, int arg5, Org.Apache.Kafka.Common.Metrics.Metrics arg6, string arg7, Org.Apache.Kafka.Common.Utils.Time arg8, Org.Apache.Kafka.Clients.ApiVersions arg9, Org.Apache.Kafka.Clients.Producer.Internals.TransactionManager arg10, Org.Apache.Kafka.Clients.Producer.Internals.BufferPool arg11)
            : base(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/producer/internals/RecordAccumulator.html#getDeliveryTimeoutMs()"/> 
        /// </summary>
        public long DeliveryTimeoutMs
        {
            get { return IExecute<long>("getDeliveryTimeoutMs"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/producer/internals/RecordAccumulator.html#hasIncomplete()"/> 
        /// </summary>
        public bool HasIncomplete
        {
            get { return IExecute<bool>("hasIncomplete"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/producer/internals/RecordAccumulator.html#hasUndrained()"/> 
        /// </summary>
        public bool HasUndrained
        {
            get { return IExecute<bool>("hasUndrained"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/producer/internals/RecordAccumulator.html#nextExpiryTimeMs()"/> 
        /// </summary>
        public long NextExpiryTimeMs
        {
            get { return IExecute<long>("nextExpiryTimeMs"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/producer/internals/RecordAccumulator.html#splitAndReenqueue(org.apache.kafka.clients.producer.internals.ProducerBatch)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Clients.Producer.Internals.ProducerBatch"/></param>
        /// <returns><see cref="int"/></returns>
        public int SplitAndReenqueue(Org.Apache.Kafka.Clients.Producer.Internals.ProducerBatch arg0)
        {
            return IExecute<int>("splitAndReenqueue", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/producer/internals/RecordAccumulator.html#getDeque(org.apache.kafka.common.TopicPartition)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.TopicPartition"/></param>
        /// <returns><see cref="Java.Util.Deque"/></returns>
        public Java.Util.Deque<Org.Apache.Kafka.Clients.Producer.Internals.ProducerBatch> GetDeque(Org.Apache.Kafka.Common.TopicPartition arg0)
        {
            return IExecute<Java.Util.Deque<Org.Apache.Kafka.Clients.Producer.Internals.ProducerBatch>>("getDeque", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/producer/internals/RecordAccumulator.html#expiredBatches(long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Org.Apache.Kafka.Clients.Producer.Internals.ProducerBatch> ExpiredBatches(long arg0)
        {
            return IExecute<Java.Util.List<Org.Apache.Kafka.Clients.Producer.Internals.ProducerBatch>>("expiredBatches", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/producer/internals/RecordAccumulator.html#drain(org.apache.kafka.common.Cluster,java.util.Set,int,long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Cluster"/></param>
        /// <param name="arg1"><see cref="Java.Util.Set"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="long"/></param>
        /// <returns><see cref="Java.Util.Map"/></returns>
        public Java.Util.Map<int?, Java.Util.List<Org.Apache.Kafka.Clients.Producer.Internals.ProducerBatch>> Drain(Org.Apache.Kafka.Common.Cluster arg0, Java.Util.Set<Org.Apache.Kafka.Common.Node> arg1, int arg2, long arg3)
        {
            return IExecute<Java.Util.Map<int?, Java.Util.List<Org.Apache.Kafka.Clients.Producer.Internals.ProducerBatch>>>("drain", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/producer/internals/RecordAccumulator.html#getBuiltInPartitioner(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Clients.Producer.Internals.BuiltInPartitioner"/></returns>
        public Org.Apache.Kafka.Clients.Producer.Internals.BuiltInPartitioner GetBuiltInPartitioner(string arg0)
        {
            return IExecute<Org.Apache.Kafka.Clients.Producer.Internals.BuiltInPartitioner>("getBuiltInPartitioner", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/producer/internals/RecordAccumulator.html#getNodeLatencyStats(java.lang.Integer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Clients.Producer.Internals.RecordAccumulator.NodeLatencyStats"/></returns>
        public Org.Apache.Kafka.Clients.Producer.Internals.RecordAccumulator.NodeLatencyStats GetNodeLatencyStats(int? arg0)
        {
            return IExecute<Org.Apache.Kafka.Clients.Producer.Internals.RecordAccumulator.NodeLatencyStats>("getNodeLatencyStats", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/producer/internals/RecordAccumulator.html#ready(org.apache.kafka.common.Cluster,long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Cluster"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Clients.Producer.Internals.RecordAccumulator.ReadyCheckResult"/></returns>
        public Org.Apache.Kafka.Clients.Producer.Internals.RecordAccumulator.ReadyCheckResult Ready(Org.Apache.Kafka.Common.Cluster arg0, long arg1)
        {
            return IExecute<Org.Apache.Kafka.Clients.Producer.Internals.RecordAccumulator.ReadyCheckResult>("ready", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/producer/internals/RecordAccumulator.html#append(java.lang.String,int,long,byte[],byte[],org.apache.kafka.common.header.Header[],org.apache.kafka.clients.producer.internals.RecordAccumulator.AppendCallbacks,long,boolean,long,org.apache.kafka.common.Cluster)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="long"/></param>
        /// <param name="arg3"><see cref="byte"/></param>
        /// <param name="arg4"><see cref="byte"/></param>
        /// <param name="arg5"><see cref="Org.Apache.Kafka.Common.Header.Header"/></param>
        /// <param name="arg6"><see cref="Org.Apache.Kafka.Clients.Producer.Internals.RecordAccumulator.AppendCallbacks"/></param>
        /// <param name="arg7"><see cref="long"/></param>
        /// <param name="arg8"><see cref="bool"/></param>
        /// <param name="arg9"><see cref="long"/></param>
        /// <param name="arg10"><see cref="Org.Apache.Kafka.Common.Cluster"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Clients.Producer.Internals.RecordAccumulator.RecordAppendResult"/></returns>
        /// <exception cref="Java.Lang.InterruptedException"/>
        public Org.Apache.Kafka.Clients.Producer.Internals.RecordAccumulator.RecordAppendResult Append(string arg0, int arg1, long arg2, byte[] arg3, byte[] arg4, Org.Apache.Kafka.Common.Header.Header[] arg5, Org.Apache.Kafka.Clients.Producer.Internals.RecordAccumulator.AppendCallbacks arg6, long arg7, bool arg8, long arg9, Org.Apache.Kafka.Common.Cluster arg10)
        {
            return IExecute<Org.Apache.Kafka.Clients.Producer.Internals.RecordAccumulator.RecordAppendResult>("append", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/producer/internals/RecordAccumulator.html#abortIncompleteBatches()"/>
        /// </summary>
        public void AbortIncompleteBatches()
        {
            IExecute("abortIncompleteBatches");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/producer/internals/RecordAccumulator.html#awaitFlushCompletion()"/>
        /// </summary>

        /// <exception cref="Java.Lang.InterruptedException"/>
        public void AwaitFlushCompletion()
        {
            IExecute("awaitFlushCompletion");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/producer/internals/RecordAccumulator.html#beginFlush()"/>
        /// </summary>
        public void BeginFlush()
        {
            IExecute("beginFlush");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/producer/internals/RecordAccumulator.html#close()"/>
        /// </summary>
        public void Close()
        {
            IExecute("close");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/producer/internals/RecordAccumulator.html#deallocate(org.apache.kafka.clients.producer.internals.ProducerBatch)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Clients.Producer.Internals.ProducerBatch"/></param>
        public void Deallocate(Org.Apache.Kafka.Clients.Producer.Internals.ProducerBatch arg0)
        {
            IExecute("deallocate", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/producer/internals/RecordAccumulator.html#maybeUpdateNextBatchExpiryTime(org.apache.kafka.clients.producer.internals.ProducerBatch)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Clients.Producer.Internals.ProducerBatch"/></param>
        public void MaybeUpdateNextBatchExpiryTime(Org.Apache.Kafka.Clients.Producer.Internals.ProducerBatch arg0)
        {
            IExecute("maybeUpdateNextBatchExpiryTime", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/producer/internals/RecordAccumulator.html#mutePartition(org.apache.kafka.common.TopicPartition)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.TopicPartition"/></param>
        public void MutePartition(Org.Apache.Kafka.Common.TopicPartition arg0)
        {
            IExecute("mutePartition", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/producer/internals/RecordAccumulator.html#reenqueue(org.apache.kafka.clients.producer.internals.ProducerBatch,long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Clients.Producer.Internals.ProducerBatch"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        public void Reenqueue(Org.Apache.Kafka.Clients.Producer.Internals.ProducerBatch arg0, long arg1)
        {
            IExecute("reenqueue", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/producer/internals/RecordAccumulator.html#resetNextBatchExpiryTime()"/>
        /// </summary>
        public void ResetNextBatchExpiryTime()
        {
            IExecute("resetNextBatchExpiryTime");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/producer/internals/RecordAccumulator.html#unmutePartition(org.apache.kafka.common.TopicPartition)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.TopicPartition"/></param>
        public void UnmutePartition(Org.Apache.Kafka.Common.TopicPartition arg0)
        {
            IExecute("unmutePartition", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/producer/internals/RecordAccumulator.html#updateNodeLatencyStats(java.lang.Integer,long,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        /// <param name="arg2"><see cref="bool"/></param>
        public void UpdateNodeLatencyStats(int? arg0, long arg1, bool arg2)
        {
            IExecute("updateNodeLatencyStats", arg0, arg1, arg2);
        }

        #endregion

        #region Nested classes
        #region AppendCallbacks
        public partial class AppendCallbacks
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/producer/internals/RecordAccumulator.AppendCallbacks.html#setPartition(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            public void SetPartition(int arg0)
            {
                IExecute("setPartition", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region NodeLatencyStats
        public partial class NodeLatencyStats
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/producer/internals/RecordAccumulator.NodeLatencyStats.html#drainTimeMs"/>
            /// </summary>
            public long drainTimeMs { get { return IGetField<long>("drainTimeMs"); } set { ISetField("drainTimeMs", value); } }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/producer/internals/RecordAccumulator.NodeLatencyStats.html#readyTimeMs"/>
            /// </summary>
            public long readyTimeMs { get { return IGetField<long>("readyTimeMs"); } set { ISetField("readyTimeMs", value); } }

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region PartitionerConfig
        public partial class PartitionerConfig
        {
            #region Constructors
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/producer/internals/RecordAccumulator.PartitionerConfig.html#%3Cinit%3E(boolean,long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            /// <param name="arg1"><see cref="long"/></param>
            public PartitionerConfig(bool arg0, long arg1)
                : base(arg0, arg1)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region ReadyCheckResult
        public partial class ReadyCheckResult
        {
            #region Constructors
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/producer/internals/RecordAccumulator.ReadyCheckResult.html#%3Cinit%3E(java.util.Set,long,java.util.Set)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Util.Set"/></param>
            /// <param name="arg1"><see cref="long"/></param>
            /// <param name="arg2"><see cref="Java.Util.Set"/></param>
            public ReadyCheckResult(Java.Util.Set arg0, long arg1, Java.Util.Set arg2)
                : base(arg0, arg1, arg2)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/producer/internals/RecordAccumulator.ReadyCheckResult.html#unknownLeaderTopics"/>
            /// </summary>
            public Java.Util.Set unknownLeaderTopics { get { return IGetField<Java.Util.Set>("unknownLeaderTopics"); } }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/producer/internals/RecordAccumulator.ReadyCheckResult.html#readyNodes"/>
            /// </summary>
            public Java.Util.Set readyNodes { get { return IGetField<Java.Util.Set>("readyNodes"); } }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/producer/internals/RecordAccumulator.ReadyCheckResult.html#nextReadyCheckDelayMs"/>
            /// </summary>
            public long nextReadyCheckDelayMs { get { return IGetField<long>("nextReadyCheckDelayMs"); } }

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region RecordAppendResult
        public partial class RecordAppendResult
        {
            #region Constructors
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/producer/internals/RecordAccumulator.RecordAppendResult.html#%3Cinit%3E(org.apache.kafka.clients.producer.internals.FutureRecordMetadata,boolean,boolean,boolean,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Org.Apache.Kafka.Clients.Producer.Internals.FutureRecordMetadata"/></param>
            /// <param name="arg1"><see cref="bool"/></param>
            /// <param name="arg2"><see cref="bool"/></param>
            /// <param name="arg3"><see cref="bool"/></param>
            /// <param name="arg4"><see cref="int"/></param>
            public RecordAppendResult(Org.Apache.Kafka.Clients.Producer.Internals.FutureRecordMetadata arg0, bool arg1, bool arg2, bool arg3, int arg4)
                : base(arg0, arg1, arg2, arg3, arg4)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/producer/internals/RecordAccumulator.RecordAppendResult.html#abortForNewBatch"/>
            /// </summary>
            public bool abortForNewBatch { get { return IGetField<bool>("abortForNewBatch"); } }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/producer/internals/RecordAccumulator.RecordAppendResult.html#batchIsFull"/>
            /// </summary>
            public bool batchIsFull { get { return IGetField<bool>("batchIsFull"); } }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/producer/internals/RecordAccumulator.RecordAppendResult.html#newBatchCreated"/>
            /// </summary>
            public bool newBatchCreated { get { return IGetField<bool>("newBatchCreated"); } }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/producer/internals/RecordAccumulator.RecordAppendResult.html#appendedBytes"/>
            /// </summary>
            public int appendedBytes { get { return IGetField<int>("appendedBytes"); } }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/producer/internals/RecordAccumulator.RecordAppendResult.html#future"/>
            /// </summary>
            public Org.Apache.Kafka.Clients.Producer.Internals.FutureRecordMetadata future { get { return IGetField<Org.Apache.Kafka.Clients.Producer.Internals.FutureRecordMetadata>("future"); } }

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}