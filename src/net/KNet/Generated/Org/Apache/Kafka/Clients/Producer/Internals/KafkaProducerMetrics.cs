/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka-clients-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Clients.Producer.Internals
{
    #region KafkaProducerMetrics
    public partial class KafkaProducerMetrics
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/producer/internals/KafkaProducerMetrics.html#%3Cinit%3E(org.apache.kafka.common.metrics.Metrics)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Metrics.Metrics"/></param>
        public KafkaProducerMetrics(Org.Apache.Kafka.Common.Metrics.Metrics arg0)
            : base(arg0)
        {
        }

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Org.Apache.Kafka.Clients.Producer.Internals.KafkaProducerMetrics"/> to <see cref="Java.Lang.AutoCloseable"/>
        /// </summary>
        public static implicit operator Java.Lang.AutoCloseable(Org.Apache.Kafka.Clients.Producer.Internals.KafkaProducerMetrics t) => t.Cast<Java.Lang.AutoCloseable>();

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/producer/internals/KafkaProducerMetrics.html#GROUP"/>
        /// </summary>
        public static string GROUP { get { return SGetField<string>(LocalBridgeClazz, "GROUP"); } }

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/producer/internals/KafkaProducerMetrics.html#close()"/>
        /// </summary>
        public void Close()
        {
            IExecute("close");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/producer/internals/KafkaProducerMetrics.html#recordAbortTxn(long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        public void RecordAbortTxn(long arg0)
        {
            IExecute("recordAbortTxn", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/producer/internals/KafkaProducerMetrics.html#recordBeginTxn(long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        public void RecordBeginTxn(long arg0)
        {
            IExecute("recordBeginTxn", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/producer/internals/KafkaProducerMetrics.html#recordCommitTxn(long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        public void RecordCommitTxn(long arg0)
        {
            IExecute("recordCommitTxn", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/producer/internals/KafkaProducerMetrics.html#recordFlush(long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        public void RecordFlush(long arg0)
        {
            IExecute("recordFlush", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/producer/internals/KafkaProducerMetrics.html#recordInit(long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        public void RecordInit(long arg0)
        {
            IExecute("recordInit", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/producer/internals/KafkaProducerMetrics.html#recordMetadataWait(long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        public void RecordMetadataWait(long arg0)
        {
            IExecute("recordMetadataWait", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/producer/internals/KafkaProducerMetrics.html#recordSendOffsets(long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        public void RecordSendOffsets(long arg0)
        {
            IExecute("recordSendOffsets", arg0);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}