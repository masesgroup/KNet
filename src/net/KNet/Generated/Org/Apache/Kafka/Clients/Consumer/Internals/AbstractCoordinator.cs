/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka-clients-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Clients.Consumer.Internals
{
    #region AbstractCoordinator
    public partial class AbstractCoordinator
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.html#%3Cinit%3E(org.apache.kafka.clients.GroupRebalanceConfig,org.apache.kafka.common.utils.LogContext,org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient,org.apache.kafka.common.metrics.Metrics,java.lang.String,org.apache.kafka.common.utils.Time)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Clients.GroupRebalanceConfig"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Common.Utils.LogContext"/></param>
        /// <param name="arg2"><see cref="Org.Apache.Kafka.Clients.Consumer.Internals.ConsumerNetworkClient"/></param>
        /// <param name="arg3"><see cref="Org.Apache.Kafka.Common.Metrics.Metrics"/></param>
        /// <param name="arg4"><see cref="string"/></param>
        /// <param name="arg5"><see cref="Org.Apache.Kafka.Common.Utils.Time"/></param>
        public AbstractCoordinator(Org.Apache.Kafka.Clients.GroupRebalanceConfig arg0, Org.Apache.Kafka.Common.Utils.LogContext arg1, Org.Apache.Kafka.Clients.Consumer.Internals.ConsumerNetworkClient arg2, Org.Apache.Kafka.Common.Metrics.Metrics arg3, string arg4, Org.Apache.Kafka.Common.Utils.Time arg5)
            : base(arg0, arg1, arg2, arg3, arg4, arg5)
        {
        }

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Org.Apache.Kafka.Clients.Consumer.Internals.AbstractCoordinator"/> to <see cref="Java.Io.Closeable"/>
        /// </summary>
        public static implicit operator Java.Io.Closeable(Org.Apache.Kafka.Clients.Consumer.Internals.AbstractCoordinator t) => t.Cast<Java.Io.Closeable>();

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.html#JOIN_GROUP_TIMEOUT_LAPSE"/>
        /// </summary>
        public static int JOIN_GROUP_TIMEOUT_LAPSE { get { return SGetField<int>(LocalBridgeClazz, "JOIN_GROUP_TIMEOUT_LAPSE"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.html#HEARTBEAT_THREAD_PREFIX"/>
        /// </summary>
        public static string HEARTBEAT_THREAD_PREFIX { get { return SGetField<string>(LocalBridgeClazz, "HEARTBEAT_THREAD_PREFIX"); } }

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.html#coordinatorUnknown()"/> 
        /// </summary>
        public bool CoordinatorUnknown
        {
            get { return IExecute<bool>("coordinatorUnknown"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.html#close()"/>
        /// </summary>
        public void Close()
        {
            IExecute("close");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.html#maybeLeaveGroup(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Clients.Consumer.Internals.RequestFuture"/></returns>
        public Org.Apache.Kafka.Clients.Consumer.Internals.RequestFuture<Java.Lang.Void> MaybeLeaveGroup(string arg0)
        {
            return IExecute<Org.Apache.Kafka.Clients.Consumer.Internals.RequestFuture<Java.Lang.Void>>("maybeLeaveGroup", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.html#requestRejoin(java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <param name="arg1"><see cref="string"/></param>
        public void RequestRejoin(string arg0, string arg1)
        {
            IExecute("requestRejoin", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.html#requestRejoin(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        public void RequestRejoin(string arg0)
        {
            IExecute("requestRejoin", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.html#requestRejoinIfNecessary(java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <param name="arg1"><see cref="string"/></param>
        public void RequestRejoinIfNecessary(string arg0, string arg1)
        {
            IExecute("requestRejoinIfNecessary", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/consumer/internals/AbstractCoordinator.html#ensureActiveGroup()"/>
        /// </summary>
        public void EnsureActiveGroup()
        {
            IExecute("ensureActiveGroup");
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}