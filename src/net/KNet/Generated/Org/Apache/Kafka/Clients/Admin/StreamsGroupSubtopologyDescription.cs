/*
*  Copyright (c) 2021-2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.6.3.0)
*  using kafka-clients-4.1.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Clients.Admin
{
    #region StreamsGroupSubtopologyDescription declaration
    /// <summary>
    /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.0.0/org/apache/kafka/clients/admin/StreamsGroupSubtopologyDescription.html"/>
    /// </summary>
    public partial class StreamsGroupSubtopologyDescription : MASES.JCOBridge.C2JBridge.JVMBridgeBase<StreamsGroupSubtopologyDescription>
    {
        const string _bridgeClassName = "org.apache.kafka.clients.admin.StreamsGroupSubtopologyDescription";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public StreamsGroupSubtopologyDescription() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public StreamsGroupSubtopologyDescription(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, false);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <inheritdoc/>
        public override string BridgeClassName => _bridgeClassName;
        /// <inheritdoc/>
        public override bool IsBridgeAbstract => false;
        /// <inheritdoc/>
        public override bool IsBridgeCloseable => false;
        /// <inheritdoc/>
        public override bool IsBridgeInterface => false;
        /// <inheritdoc/>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class
        #region TopicInfo declaration
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.0.0/org/apache/kafka/clients/admin/StreamsGroupSubtopologyDescription.TopicInfo.html"/>
        /// </summary>
        public partial class TopicInfo : MASES.JCOBridge.C2JBridge.JVMBridgeBase<TopicInfo>
        {
            const string _bridgeClassName = "org.apache.kafka.clients.admin.StreamsGroupSubtopologyDescription$TopicInfo";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public TopicInfo() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public TopicInfo(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, false);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <inheritdoc/>
            public override string BridgeClassName => _bridgeClassName;
            /// <inheritdoc/>
            public override bool IsBridgeAbstract => false;
            /// <inheritdoc/>
            public override bool IsBridgeCloseable => false;
            /// <inheritdoc/>
            public override bool IsBridgeInterface => false;
            /// <inheritdoc/>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

    
    }
    #endregion

    #region StreamsGroupSubtopologyDescription implementation
    public partial class StreamsGroupSubtopologyDescription
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.0.0/org/apache/kafka/clients/admin/StreamsGroupSubtopologyDescription.html#%3Cinit%3E(java.lang.String,java.util.List,java.util.List,java.util.Map,java.util.Map)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Util.List"/></param>
        /// <param name="arg2"><see cref="Java.Util.List"/></param>
        /// <param name="arg3"><see cref="Java.Util.Map"/></param>
        /// <param name="arg4"><see cref="Java.Util.Map"/></param>
        public StreamsGroupSubtopologyDescription(Java.Lang.String arg0, Java.Util.List<Java.Lang.String> arg1, Java.Util.List<Java.Lang.String> arg2, Java.Util.Map<Java.Lang.String, Org.Apache.Kafka.Clients.Admin.StreamsGroupSubtopologyDescription.TopicInfo> arg3, Java.Util.Map<Java.Lang.String, Org.Apache.Kafka.Clients.Admin.StreamsGroupSubtopologyDescription.TopicInfo> arg4)
            : base(arg0, arg1, arg2, arg3, arg4)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.0.0/org/apache/kafka/clients/admin/StreamsGroupSubtopologyDescription.html#subtopologyId()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String SubtopologyId()
        {
            return IExecuteWithSignature<Java.Lang.String>("subtopologyId", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.0.0/org/apache/kafka/clients/admin/StreamsGroupSubtopologyDescription.html#repartitionSinkTopics()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Java.Lang.String> RepartitionSinkTopics()
        {
            return IExecuteWithSignature<Java.Util.List<Java.Lang.String>>("repartitionSinkTopics", "()Ljava/util/List;");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.0.0/org/apache/kafka/clients/admin/StreamsGroupSubtopologyDescription.html#sourceTopics()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Java.Lang.String> SourceTopics()
        {
            return IExecuteWithSignature<Java.Util.List<Java.Lang.String>>("sourceTopics", "()Ljava/util/List;");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.0.0/org/apache/kafka/clients/admin/StreamsGroupSubtopologyDescription.html#repartitionSourceTopics()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.Map"/></returns>
        public Java.Util.Map<Java.Lang.String, Org.Apache.Kafka.Clients.Admin.StreamsGroupSubtopologyDescription.TopicInfo> RepartitionSourceTopics()
        {
            return IExecuteWithSignature<Java.Util.Map<Java.Lang.String, Org.Apache.Kafka.Clients.Admin.StreamsGroupSubtopologyDescription.TopicInfo>>("repartitionSourceTopics", "()Ljava/util/Map;");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.0.0/org/apache/kafka/clients/admin/StreamsGroupSubtopologyDescription.html#stateChangelogTopics()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.Map"/></returns>
        public Java.Util.Map<Java.Lang.String, Org.Apache.Kafka.Clients.Admin.StreamsGroupSubtopologyDescription.TopicInfo> StateChangelogTopics()
        {
            return IExecuteWithSignature<Java.Util.Map<Java.Lang.String, Org.Apache.Kafka.Clients.Admin.StreamsGroupSubtopologyDescription.TopicInfo>>("stateChangelogTopics", "()Ljava/util/Map;");
        }

        #endregion

        #region Nested classes
        #region TopicInfo implementation
        public partial class TopicInfo
        {
            #region Constructors
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.0.0/org/apache/kafka/clients/admin/StreamsGroupSubtopologyDescription.TopicInfo.html#%3Cinit%3E(int,int,java.util.Map)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="Java.Util.Map"/></param>
            public TopicInfo(int arg0, int arg1, Java.Util.Map<Java.Lang.String, Java.Lang.String> arg2)
                : base(arg0, arg1, arg2)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.0.0/org/apache/kafka/clients/admin/StreamsGroupSubtopologyDescription.TopicInfo.html#partitions()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int Partitions()
            {
                return IExecuteWithSignature<int>("partitions", "()I");
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.0.0/org/apache/kafka/clients/admin/StreamsGroupSubtopologyDescription.TopicInfo.html#replicationFactor()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int ReplicationFactor()
            {
                return IExecuteWithSignature<int>("replicationFactor", "()I");
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.0.0/org/apache/kafka/clients/admin/StreamsGroupSubtopologyDescription.TopicInfo.html#topicConfigs()"/>
            /// </summary>
            /// <returns><see cref="Java.Util.Map"/></returns>
            public Java.Util.Map<Java.Lang.String, Java.Lang.String> TopicConfigs()
            {
                return IExecuteWithSignature<Java.Util.Map<Java.Lang.String, Java.Lang.String>>("topicConfigs", "()Ljava/util/Map;");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}