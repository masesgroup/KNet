/*
*  Copyright (c) 2021-2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.6.4.0)
*  using kafka-clients-4.1.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Clients.Consumer
{
    #region ConsumerConfig declaration
    /// <summary>
    /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/clients/consumer/ConsumerConfig.html"/>
    /// </summary>
    public partial class ConsumerConfig : Org.Apache.Kafka.Common.Config.AbstractConfig, MASES.JCOBridge.C2JBridge.IJVMBridgeMain
    {
        const string _bridgeClassName = "org.apache.kafka.clients.consumer.ConsumerConfig";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public ConsumerConfig() { }
        /// <summary>
        /// Internal constructor: used internally from JCOBridge
        /// </summary>
        [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public ConsumerConfig(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public ConsumerConfig(params object[] args) : base(args) { }

        private static readonly global::System.Exception _LocalBridgeClazzException = null;
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <inheritdoc/>
        public override string BridgeClassName => _bridgeClassName;
        /// <inheritdoc/>
        public override bool IsBridgeAbstract => false;
        /// <inheritdoc/>
        public override bool IsBridgeCloseable => false;
        /// <inheritdoc/>
        public override bool IsBridgeInterface => false;
        /// <inheritdoc/>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class

    }
    #endregion

    #region ConsumerConfig implementation
    public partial class ConsumerConfig
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/clients/consumer/ConsumerConfig.html#%3Cinit%3E(java.util.Map)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Map"/></param>
        public ConsumerConfig(Java.Util.Map<Java.Lang.String, object> arg0)
            : base(arg0)
        {
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/clients/consumer/ConsumerConfig.html#%3Cinit%3E(java.util.Properties)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Properties"/></param>
        public ConsumerConfig(Java.Util.Properties arg0)
            : base(arg0)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/clients/consumer/ConsumerConfig.html#DEFAULT_ALLOW_AUTO_CREATE_TOPICS"/>
        /// </summary>
        public static bool DEFAULT_ALLOW_AUTO_CREATE_TOPICS { get { if (!_DEFAULT_ALLOW_AUTO_CREATE_TOPICSReady) { _DEFAULT_ALLOW_AUTO_CREATE_TOPICSContent = SGetField<bool>(LocalBridgeClazz, "DEFAULT_ALLOW_AUTO_CREATE_TOPICS"); _DEFAULT_ALLOW_AUTO_CREATE_TOPICSReady = true; } return _DEFAULT_ALLOW_AUTO_CREATE_TOPICSContent; } }
        private static bool _DEFAULT_ALLOW_AUTO_CREATE_TOPICSContent = default;
        private static bool _DEFAULT_ALLOW_AUTO_CREATE_TOPICSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/clients/consumer/ConsumerConfig.html#DEFAULT_EXCLUDE_INTERNAL_TOPICS"/>
        /// </summary>
        public static bool DEFAULT_EXCLUDE_INTERNAL_TOPICS { get { if (!_DEFAULT_EXCLUDE_INTERNAL_TOPICSReady) { _DEFAULT_EXCLUDE_INTERNAL_TOPICSContent = SGetField<bool>(LocalBridgeClazz, "DEFAULT_EXCLUDE_INTERNAL_TOPICS"); _DEFAULT_EXCLUDE_INTERNAL_TOPICSReady = true; } return _DEFAULT_EXCLUDE_INTERNAL_TOPICSContent; } }
        private static bool _DEFAULT_EXCLUDE_INTERNAL_TOPICSContent = default;
        private static bool _DEFAULT_EXCLUDE_INTERNAL_TOPICSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/clients/consumer/ConsumerConfig.html#DEFAULT_FETCH_MAX_BYTES"/>
        /// </summary>
        public static int DEFAULT_FETCH_MAX_BYTES { get { if (!_DEFAULT_FETCH_MAX_BYTESReady) { _DEFAULT_FETCH_MAX_BYTESContent = SGetField<int>(LocalBridgeClazz, "DEFAULT_FETCH_MAX_BYTES"); _DEFAULT_FETCH_MAX_BYTESReady = true; } return _DEFAULT_FETCH_MAX_BYTESContent; } }
        private static int _DEFAULT_FETCH_MAX_BYTESContent = default;
        private static bool _DEFAULT_FETCH_MAX_BYTESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/clients/consumer/ConsumerConfig.html#DEFAULT_FETCH_MAX_WAIT_MS"/>
        /// </summary>
        public static int DEFAULT_FETCH_MAX_WAIT_MS { get { if (!_DEFAULT_FETCH_MAX_WAIT_MSReady) { _DEFAULT_FETCH_MAX_WAIT_MSContent = SGetField<int>(LocalBridgeClazz, "DEFAULT_FETCH_MAX_WAIT_MS"); _DEFAULT_FETCH_MAX_WAIT_MSReady = true; } return _DEFAULT_FETCH_MAX_WAIT_MSContent; } }
        private static int _DEFAULT_FETCH_MAX_WAIT_MSContent = default;
        private static bool _DEFAULT_FETCH_MAX_WAIT_MSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/clients/consumer/ConsumerConfig.html#DEFAULT_FETCH_MIN_BYTES"/>
        /// </summary>
        public static int DEFAULT_FETCH_MIN_BYTES { get { if (!_DEFAULT_FETCH_MIN_BYTESReady) { _DEFAULT_FETCH_MIN_BYTESContent = SGetField<int>(LocalBridgeClazz, "DEFAULT_FETCH_MIN_BYTES"); _DEFAULT_FETCH_MIN_BYTESReady = true; } return _DEFAULT_FETCH_MIN_BYTESContent; } }
        private static int _DEFAULT_FETCH_MIN_BYTESContent = default;
        private static bool _DEFAULT_FETCH_MIN_BYTESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/clients/consumer/ConsumerConfig.html#DEFAULT_MAX_PARTITION_FETCH_BYTES"/>
        /// </summary>
        public static int DEFAULT_MAX_PARTITION_FETCH_BYTES { get { if (!_DEFAULT_MAX_PARTITION_FETCH_BYTESReady) { _DEFAULT_MAX_PARTITION_FETCH_BYTESContent = SGetField<int>(LocalBridgeClazz, "DEFAULT_MAX_PARTITION_FETCH_BYTES"); _DEFAULT_MAX_PARTITION_FETCH_BYTESReady = true; } return _DEFAULT_MAX_PARTITION_FETCH_BYTESContent; } }
        private static int _DEFAULT_MAX_PARTITION_FETCH_BYTESContent = default;
        private static bool _DEFAULT_MAX_PARTITION_FETCH_BYTESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/clients/consumer/ConsumerConfig.html#DEFAULT_MAX_POLL_RECORDS"/>
        /// </summary>
        public static int DEFAULT_MAX_POLL_RECORDS { get { if (!_DEFAULT_MAX_POLL_RECORDSReady) { _DEFAULT_MAX_POLL_RECORDSContent = SGetField<int>(LocalBridgeClazz, "DEFAULT_MAX_POLL_RECORDS"); _DEFAULT_MAX_POLL_RECORDSReady = true; } return _DEFAULT_MAX_POLL_RECORDSContent; } }
        private static int _DEFAULT_MAX_POLL_RECORDSContent = default;
        private static bool _DEFAULT_MAX_POLL_RECORDSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/clients/consumer/ConsumerConfig.html#ALLOW_AUTO_CREATE_TOPICS_CONFIG"/>
        /// </summary>
        public static Java.Lang.String ALLOW_AUTO_CREATE_TOPICS_CONFIG { get { if (!_ALLOW_AUTO_CREATE_TOPICS_CONFIGReady) { _ALLOW_AUTO_CREATE_TOPICS_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ALLOW_AUTO_CREATE_TOPICS_CONFIG"); _ALLOW_AUTO_CREATE_TOPICS_CONFIGReady = true; } return _ALLOW_AUTO_CREATE_TOPICS_CONFIGContent; } }
        private static Java.Lang.String _ALLOW_AUTO_CREATE_TOPICS_CONFIGContent = default;
        private static bool _ALLOW_AUTO_CREATE_TOPICS_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/clients/consumer/ConsumerConfig.html#AUTO_COMMIT_INTERVAL_MS_CONFIG"/>
        /// </summary>
        public static Java.Lang.String AUTO_COMMIT_INTERVAL_MS_CONFIG { get { if (!_AUTO_COMMIT_INTERVAL_MS_CONFIGReady) { _AUTO_COMMIT_INTERVAL_MS_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "AUTO_COMMIT_INTERVAL_MS_CONFIG"); _AUTO_COMMIT_INTERVAL_MS_CONFIGReady = true; } return _AUTO_COMMIT_INTERVAL_MS_CONFIGContent; } }
        private static Java.Lang.String _AUTO_COMMIT_INTERVAL_MS_CONFIGContent = default;
        private static bool _AUTO_COMMIT_INTERVAL_MS_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/clients/consumer/ConsumerConfig.html#AUTO_OFFSET_RESET_CONFIG"/>
        /// </summary>
        public static Java.Lang.String AUTO_OFFSET_RESET_CONFIG { get { if (!_AUTO_OFFSET_RESET_CONFIGReady) { _AUTO_OFFSET_RESET_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "AUTO_OFFSET_RESET_CONFIG"); _AUTO_OFFSET_RESET_CONFIGReady = true; } return _AUTO_OFFSET_RESET_CONFIGContent; } }
        private static Java.Lang.String _AUTO_OFFSET_RESET_CONFIGContent = default;
        private static bool _AUTO_OFFSET_RESET_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/clients/consumer/ConsumerConfig.html#AUTO_OFFSET_RESET_DOC"/>
        /// </summary>
        public static Java.Lang.String AUTO_OFFSET_RESET_DOC { get { if (!_AUTO_OFFSET_RESET_DOCReady) { _AUTO_OFFSET_RESET_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "AUTO_OFFSET_RESET_DOC"); _AUTO_OFFSET_RESET_DOCReady = true; } return _AUTO_OFFSET_RESET_DOCContent; } }
        private static Java.Lang.String _AUTO_OFFSET_RESET_DOCContent = default;
        private static bool _AUTO_OFFSET_RESET_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/clients/consumer/ConsumerConfig.html#BOOTSTRAP_SERVERS_CONFIG"/>
        /// </summary>
        public static Java.Lang.String BOOTSTRAP_SERVERS_CONFIG { get { if (!_BOOTSTRAP_SERVERS_CONFIGReady) { _BOOTSTRAP_SERVERS_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "BOOTSTRAP_SERVERS_CONFIG"); _BOOTSTRAP_SERVERS_CONFIGReady = true; } return _BOOTSTRAP_SERVERS_CONFIGContent; } }
        private static Java.Lang.String _BOOTSTRAP_SERVERS_CONFIGContent = default;
        private static bool _BOOTSTRAP_SERVERS_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/clients/consumer/ConsumerConfig.html#CHECK_CRCS_CONFIG"/>
        /// </summary>
        public static Java.Lang.String CHECK_CRCS_CONFIG { get { if (!_CHECK_CRCS_CONFIGReady) { _CHECK_CRCS_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CHECK_CRCS_CONFIG"); _CHECK_CRCS_CONFIGReady = true; } return _CHECK_CRCS_CONFIGContent; } }
        private static Java.Lang.String _CHECK_CRCS_CONFIGContent = default;
        private static bool _CHECK_CRCS_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/clients/consumer/ConsumerConfig.html#CLIENT_DNS_LOOKUP_CONFIG"/>
        /// </summary>
        public static Java.Lang.String CLIENT_DNS_LOOKUP_CONFIG { get { if (!_CLIENT_DNS_LOOKUP_CONFIGReady) { _CLIENT_DNS_LOOKUP_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CLIENT_DNS_LOOKUP_CONFIG"); _CLIENT_DNS_LOOKUP_CONFIGReady = true; } return _CLIENT_DNS_LOOKUP_CONFIGContent; } }
        private static Java.Lang.String _CLIENT_DNS_LOOKUP_CONFIGContent = default;
        private static bool _CLIENT_DNS_LOOKUP_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/clients/consumer/ConsumerConfig.html#CLIENT_ID_CONFIG"/>
        /// </summary>
        public static Java.Lang.String CLIENT_ID_CONFIG { get { if (!_CLIENT_ID_CONFIGReady) { _CLIENT_ID_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CLIENT_ID_CONFIG"); _CLIENT_ID_CONFIGReady = true; } return _CLIENT_ID_CONFIGContent; } }
        private static Java.Lang.String _CLIENT_ID_CONFIGContent = default;
        private static bool _CLIENT_ID_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/clients/consumer/ConsumerConfig.html#CLIENT_RACK_CONFIG"/>
        /// </summary>
        public static Java.Lang.String CLIENT_RACK_CONFIG { get { if (!_CLIENT_RACK_CONFIGReady) { _CLIENT_RACK_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CLIENT_RACK_CONFIG"); _CLIENT_RACK_CONFIGReady = true; } return _CLIENT_RACK_CONFIGContent; } }
        private static Java.Lang.String _CLIENT_RACK_CONFIGContent = default;
        private static bool _CLIENT_RACK_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/clients/consumer/ConsumerConfig.html#CONNECTIONS_MAX_IDLE_MS_CONFIG"/>
        /// </summary>
        public static Java.Lang.String CONNECTIONS_MAX_IDLE_MS_CONFIG { get { if (!_CONNECTIONS_MAX_IDLE_MS_CONFIGReady) { _CONNECTIONS_MAX_IDLE_MS_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CONNECTIONS_MAX_IDLE_MS_CONFIG"); _CONNECTIONS_MAX_IDLE_MS_CONFIGReady = true; } return _CONNECTIONS_MAX_IDLE_MS_CONFIGContent; } }
        private static Java.Lang.String _CONNECTIONS_MAX_IDLE_MS_CONFIGContent = default;
        private static bool _CONNECTIONS_MAX_IDLE_MS_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/clients/consumer/ConsumerConfig.html#DEFAULT_API_TIMEOUT_MS_CONFIG"/>
        /// </summary>
        public static Java.Lang.String DEFAULT_API_TIMEOUT_MS_CONFIG { get { if (!_DEFAULT_API_TIMEOUT_MS_CONFIGReady) { _DEFAULT_API_TIMEOUT_MS_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DEFAULT_API_TIMEOUT_MS_CONFIG"); _DEFAULT_API_TIMEOUT_MS_CONFIGReady = true; } return _DEFAULT_API_TIMEOUT_MS_CONFIGContent; } }
        private static Java.Lang.String _DEFAULT_API_TIMEOUT_MS_CONFIGContent = default;
        private static bool _DEFAULT_API_TIMEOUT_MS_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/clients/consumer/ConsumerConfig.html#DEFAULT_CLIENT_RACK"/>
        /// </summary>
        public static Java.Lang.String DEFAULT_CLIENT_RACK { get { if (!_DEFAULT_CLIENT_RACKReady) { _DEFAULT_CLIENT_RACKContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DEFAULT_CLIENT_RACK"); _DEFAULT_CLIENT_RACKReady = true; } return _DEFAULT_CLIENT_RACKContent; } }
        private static Java.Lang.String _DEFAULT_CLIENT_RACKContent = default;
        private static bool _DEFAULT_CLIENT_RACKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/clients/consumer/ConsumerConfig.html#DEFAULT_GROUP_PROTOCOL"/>
        /// </summary>
        public static Java.Lang.String DEFAULT_GROUP_PROTOCOL { get { if (!_DEFAULT_GROUP_PROTOCOLReady) { _DEFAULT_GROUP_PROTOCOLContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DEFAULT_GROUP_PROTOCOL"); _DEFAULT_GROUP_PROTOCOLReady = true; } return _DEFAULT_GROUP_PROTOCOLContent; } }
        private static Java.Lang.String _DEFAULT_GROUP_PROTOCOLContent = default;
        private static bool _DEFAULT_GROUP_PROTOCOLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/clients/consumer/ConsumerConfig.html#DEFAULT_GROUP_REMOTE_ASSIGNOR"/>
        /// </summary>
        public static Java.Lang.String DEFAULT_GROUP_REMOTE_ASSIGNOR { get { if (!_DEFAULT_GROUP_REMOTE_ASSIGNORReady) { _DEFAULT_GROUP_REMOTE_ASSIGNORContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DEFAULT_GROUP_REMOTE_ASSIGNOR"); _DEFAULT_GROUP_REMOTE_ASSIGNORReady = true; } return _DEFAULT_GROUP_REMOTE_ASSIGNORContent; } }
        private static Java.Lang.String _DEFAULT_GROUP_REMOTE_ASSIGNORContent = default;
        private static bool _DEFAULT_GROUP_REMOTE_ASSIGNORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/clients/consumer/ConsumerConfig.html#DEFAULT_ISOLATION_LEVEL"/>
        /// </summary>
        public static Java.Lang.String DEFAULT_ISOLATION_LEVEL { get { if (!_DEFAULT_ISOLATION_LEVELReady) { _DEFAULT_ISOLATION_LEVELContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DEFAULT_ISOLATION_LEVEL"); _DEFAULT_ISOLATION_LEVELReady = true; } return _DEFAULT_ISOLATION_LEVELContent; } }
        private static Java.Lang.String _DEFAULT_ISOLATION_LEVELContent = default;
        private static bool _DEFAULT_ISOLATION_LEVELReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/clients/consumer/ConsumerConfig.html#ENABLE_AUTO_COMMIT_CONFIG"/>
        /// </summary>
        public static Java.Lang.String ENABLE_AUTO_COMMIT_CONFIG { get { if (!_ENABLE_AUTO_COMMIT_CONFIGReady) { _ENABLE_AUTO_COMMIT_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ENABLE_AUTO_COMMIT_CONFIG"); _ENABLE_AUTO_COMMIT_CONFIGReady = true; } return _ENABLE_AUTO_COMMIT_CONFIGContent; } }
        private static Java.Lang.String _ENABLE_AUTO_COMMIT_CONFIGContent = default;
        private static bool _ENABLE_AUTO_COMMIT_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/clients/consumer/ConsumerConfig.html#ENABLE_METRICS_PUSH_CONFIG"/>
        /// </summary>
        public static Java.Lang.String ENABLE_METRICS_PUSH_CONFIG { get { if (!_ENABLE_METRICS_PUSH_CONFIGReady) { _ENABLE_METRICS_PUSH_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ENABLE_METRICS_PUSH_CONFIG"); _ENABLE_METRICS_PUSH_CONFIGReady = true; } return _ENABLE_METRICS_PUSH_CONFIGContent; } }
        private static Java.Lang.String _ENABLE_METRICS_PUSH_CONFIGContent = default;
        private static bool _ENABLE_METRICS_PUSH_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/clients/consumer/ConsumerConfig.html#ENABLE_METRICS_PUSH_DOC"/>
        /// </summary>
        public static Java.Lang.String ENABLE_METRICS_PUSH_DOC { get { if (!_ENABLE_METRICS_PUSH_DOCReady) { _ENABLE_METRICS_PUSH_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ENABLE_METRICS_PUSH_DOC"); _ENABLE_METRICS_PUSH_DOCReady = true; } return _ENABLE_METRICS_PUSH_DOCContent; } }
        private static Java.Lang.String _ENABLE_METRICS_PUSH_DOCContent = default;
        private static bool _ENABLE_METRICS_PUSH_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/clients/consumer/ConsumerConfig.html#EXCLUDE_INTERNAL_TOPICS_CONFIG"/>
        /// </summary>
        public static Java.Lang.String EXCLUDE_INTERNAL_TOPICS_CONFIG { get { if (!_EXCLUDE_INTERNAL_TOPICS_CONFIGReady) { _EXCLUDE_INTERNAL_TOPICS_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXCLUDE_INTERNAL_TOPICS_CONFIG"); _EXCLUDE_INTERNAL_TOPICS_CONFIGReady = true; } return _EXCLUDE_INTERNAL_TOPICS_CONFIGContent; } }
        private static Java.Lang.String _EXCLUDE_INTERNAL_TOPICS_CONFIGContent = default;
        private static bool _EXCLUDE_INTERNAL_TOPICS_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/clients/consumer/ConsumerConfig.html#FETCH_MAX_BYTES_CONFIG"/>
        /// </summary>
        public static Java.Lang.String FETCH_MAX_BYTES_CONFIG { get { if (!_FETCH_MAX_BYTES_CONFIGReady) { _FETCH_MAX_BYTES_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FETCH_MAX_BYTES_CONFIG"); _FETCH_MAX_BYTES_CONFIGReady = true; } return _FETCH_MAX_BYTES_CONFIGContent; } }
        private static Java.Lang.String _FETCH_MAX_BYTES_CONFIGContent = default;
        private static bool _FETCH_MAX_BYTES_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/clients/consumer/ConsumerConfig.html#FETCH_MAX_WAIT_MS_CONFIG"/>
        /// </summary>
        public static Java.Lang.String FETCH_MAX_WAIT_MS_CONFIG { get { if (!_FETCH_MAX_WAIT_MS_CONFIGReady) { _FETCH_MAX_WAIT_MS_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FETCH_MAX_WAIT_MS_CONFIG"); _FETCH_MAX_WAIT_MS_CONFIGReady = true; } return _FETCH_MAX_WAIT_MS_CONFIGContent; } }
        private static Java.Lang.String _FETCH_MAX_WAIT_MS_CONFIGContent = default;
        private static bool _FETCH_MAX_WAIT_MS_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/clients/consumer/ConsumerConfig.html#FETCH_MIN_BYTES_CONFIG"/>
        /// </summary>
        public static Java.Lang.String FETCH_MIN_BYTES_CONFIG { get { if (!_FETCH_MIN_BYTES_CONFIGReady) { _FETCH_MIN_BYTES_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FETCH_MIN_BYTES_CONFIG"); _FETCH_MIN_BYTES_CONFIGReady = true; } return _FETCH_MIN_BYTES_CONFIGContent; } }
        private static Java.Lang.String _FETCH_MIN_BYTES_CONFIGContent = default;
        private static bool _FETCH_MIN_BYTES_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/clients/consumer/ConsumerConfig.html#GROUP_ID_CONFIG"/>
        /// </summary>
        public static Java.Lang.String GROUP_ID_CONFIG { get { if (!_GROUP_ID_CONFIGReady) { _GROUP_ID_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "GROUP_ID_CONFIG"); _GROUP_ID_CONFIGReady = true; } return _GROUP_ID_CONFIGContent; } }
        private static Java.Lang.String _GROUP_ID_CONFIGContent = default;
        private static bool _GROUP_ID_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/clients/consumer/ConsumerConfig.html#GROUP_INSTANCE_ID_CONFIG"/>
        /// </summary>
        public static Java.Lang.String GROUP_INSTANCE_ID_CONFIG { get { if (!_GROUP_INSTANCE_ID_CONFIGReady) { _GROUP_INSTANCE_ID_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "GROUP_INSTANCE_ID_CONFIG"); _GROUP_INSTANCE_ID_CONFIGReady = true; } return _GROUP_INSTANCE_ID_CONFIGContent; } }
        private static Java.Lang.String _GROUP_INSTANCE_ID_CONFIGContent = default;
        private static bool _GROUP_INSTANCE_ID_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/clients/consumer/ConsumerConfig.html#GROUP_PROTOCOL_CONFIG"/>
        /// </summary>
        public static Java.Lang.String GROUP_PROTOCOL_CONFIG { get { if (!_GROUP_PROTOCOL_CONFIGReady) { _GROUP_PROTOCOL_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "GROUP_PROTOCOL_CONFIG"); _GROUP_PROTOCOL_CONFIGReady = true; } return _GROUP_PROTOCOL_CONFIGContent; } }
        private static Java.Lang.String _GROUP_PROTOCOL_CONFIGContent = default;
        private static bool _GROUP_PROTOCOL_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/clients/consumer/ConsumerConfig.html#GROUP_PROTOCOL_DOC"/>
        /// </summary>
        public static Java.Lang.String GROUP_PROTOCOL_DOC { get { if (!_GROUP_PROTOCOL_DOCReady) { _GROUP_PROTOCOL_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "GROUP_PROTOCOL_DOC"); _GROUP_PROTOCOL_DOCReady = true; } return _GROUP_PROTOCOL_DOCContent; } }
        private static Java.Lang.String _GROUP_PROTOCOL_DOCContent = default;
        private static bool _GROUP_PROTOCOL_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/clients/consumer/ConsumerConfig.html#GROUP_REMOTE_ASSIGNOR_CONFIG"/>
        /// </summary>
        public static Java.Lang.String GROUP_REMOTE_ASSIGNOR_CONFIG { get { if (!_GROUP_REMOTE_ASSIGNOR_CONFIGReady) { _GROUP_REMOTE_ASSIGNOR_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "GROUP_REMOTE_ASSIGNOR_CONFIG"); _GROUP_REMOTE_ASSIGNOR_CONFIGReady = true; } return _GROUP_REMOTE_ASSIGNOR_CONFIGContent; } }
        private static Java.Lang.String _GROUP_REMOTE_ASSIGNOR_CONFIGContent = default;
        private static bool _GROUP_REMOTE_ASSIGNOR_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/clients/consumer/ConsumerConfig.html#GROUP_REMOTE_ASSIGNOR_DOC"/>
        /// </summary>
        public static Java.Lang.String GROUP_REMOTE_ASSIGNOR_DOC { get { if (!_GROUP_REMOTE_ASSIGNOR_DOCReady) { _GROUP_REMOTE_ASSIGNOR_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "GROUP_REMOTE_ASSIGNOR_DOC"); _GROUP_REMOTE_ASSIGNOR_DOCReady = true; } return _GROUP_REMOTE_ASSIGNOR_DOCContent; } }
        private static Java.Lang.String _GROUP_REMOTE_ASSIGNOR_DOCContent = default;
        private static bool _GROUP_REMOTE_ASSIGNOR_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/clients/consumer/ConsumerConfig.html#HEARTBEAT_INTERVAL_MS_CONFIG"/>
        /// </summary>
        public static Java.Lang.String HEARTBEAT_INTERVAL_MS_CONFIG { get { if (!_HEARTBEAT_INTERVAL_MS_CONFIGReady) { _HEARTBEAT_INTERVAL_MS_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "HEARTBEAT_INTERVAL_MS_CONFIG"); _HEARTBEAT_INTERVAL_MS_CONFIGReady = true; } return _HEARTBEAT_INTERVAL_MS_CONFIGContent; } }
        private static Java.Lang.String _HEARTBEAT_INTERVAL_MS_CONFIGContent = default;
        private static bool _HEARTBEAT_INTERVAL_MS_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/clients/consumer/ConsumerConfig.html#INTERCEPTOR_CLASSES_CONFIG"/>
        /// </summary>
        public static Java.Lang.String INTERCEPTOR_CLASSES_CONFIG { get { if (!_INTERCEPTOR_CLASSES_CONFIGReady) { _INTERCEPTOR_CLASSES_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "INTERCEPTOR_CLASSES_CONFIG"); _INTERCEPTOR_CLASSES_CONFIGReady = true; } return _INTERCEPTOR_CLASSES_CONFIGContent; } }
        private static Java.Lang.String _INTERCEPTOR_CLASSES_CONFIGContent = default;
        private static bool _INTERCEPTOR_CLASSES_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/clients/consumer/ConsumerConfig.html#INTERCEPTOR_CLASSES_DOC"/>
        /// </summary>
        public static Java.Lang.String INTERCEPTOR_CLASSES_DOC { get { if (!_INTERCEPTOR_CLASSES_DOCReady) { _INTERCEPTOR_CLASSES_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "INTERCEPTOR_CLASSES_DOC"); _INTERCEPTOR_CLASSES_DOCReady = true; } return _INTERCEPTOR_CLASSES_DOCContent; } }
        private static Java.Lang.String _INTERCEPTOR_CLASSES_DOCContent = default;
        private static bool _INTERCEPTOR_CLASSES_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/clients/consumer/ConsumerConfig.html#ISOLATION_LEVEL_CONFIG"/>
        /// </summary>
        public static Java.Lang.String ISOLATION_LEVEL_CONFIG { get { if (!_ISOLATION_LEVEL_CONFIGReady) { _ISOLATION_LEVEL_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ISOLATION_LEVEL_CONFIG"); _ISOLATION_LEVEL_CONFIGReady = true; } return _ISOLATION_LEVEL_CONFIGContent; } }
        private static Java.Lang.String _ISOLATION_LEVEL_CONFIGContent = default;
        private static bool _ISOLATION_LEVEL_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/clients/consumer/ConsumerConfig.html#ISOLATION_LEVEL_DOC"/>
        /// </summary>
        public static Java.Lang.String ISOLATION_LEVEL_DOC { get { if (!_ISOLATION_LEVEL_DOCReady) { _ISOLATION_LEVEL_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ISOLATION_LEVEL_DOC"); _ISOLATION_LEVEL_DOCReady = true; } return _ISOLATION_LEVEL_DOCContent; } }
        private static Java.Lang.String _ISOLATION_LEVEL_DOCContent = default;
        private static bool _ISOLATION_LEVEL_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/clients/consumer/ConsumerConfig.html#KEY_DESERIALIZER_CLASS_CONFIG"/>
        /// </summary>
        public static Java.Lang.String KEY_DESERIALIZER_CLASS_CONFIG { get { if (!_KEY_DESERIALIZER_CLASS_CONFIGReady) { _KEY_DESERIALIZER_CLASS_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_DESERIALIZER_CLASS_CONFIG"); _KEY_DESERIALIZER_CLASS_CONFIGReady = true; } return _KEY_DESERIALIZER_CLASS_CONFIGContent; } }
        private static Java.Lang.String _KEY_DESERIALIZER_CLASS_CONFIGContent = default;
        private static bool _KEY_DESERIALIZER_CLASS_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/clients/consumer/ConsumerConfig.html#KEY_DESERIALIZER_CLASS_DOC"/>
        /// </summary>
        public static Java.Lang.String KEY_DESERIALIZER_CLASS_DOC { get { if (!_KEY_DESERIALIZER_CLASS_DOCReady) { _KEY_DESERIALIZER_CLASS_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_DESERIALIZER_CLASS_DOC"); _KEY_DESERIALIZER_CLASS_DOCReady = true; } return _KEY_DESERIALIZER_CLASS_DOCContent; } }
        private static Java.Lang.String _KEY_DESERIALIZER_CLASS_DOCContent = default;
        private static bool _KEY_DESERIALIZER_CLASS_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/clients/consumer/ConsumerConfig.html#MAX_PARTITION_FETCH_BYTES_CONFIG"/>
        /// </summary>
        public static Java.Lang.String MAX_PARTITION_FETCH_BYTES_CONFIG { get { if (!_MAX_PARTITION_FETCH_BYTES_CONFIGReady) { _MAX_PARTITION_FETCH_BYTES_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MAX_PARTITION_FETCH_BYTES_CONFIG"); _MAX_PARTITION_FETCH_BYTES_CONFIGReady = true; } return _MAX_PARTITION_FETCH_BYTES_CONFIGContent; } }
        private static Java.Lang.String _MAX_PARTITION_FETCH_BYTES_CONFIGContent = default;
        private static bool _MAX_PARTITION_FETCH_BYTES_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/clients/consumer/ConsumerConfig.html#MAX_POLL_INTERVAL_MS_CONFIG"/>
        /// </summary>
        public static Java.Lang.String MAX_POLL_INTERVAL_MS_CONFIG { get { if (!_MAX_POLL_INTERVAL_MS_CONFIGReady) { _MAX_POLL_INTERVAL_MS_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MAX_POLL_INTERVAL_MS_CONFIG"); _MAX_POLL_INTERVAL_MS_CONFIGReady = true; } return _MAX_POLL_INTERVAL_MS_CONFIGContent; } }
        private static Java.Lang.String _MAX_POLL_INTERVAL_MS_CONFIGContent = default;
        private static bool _MAX_POLL_INTERVAL_MS_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/clients/consumer/ConsumerConfig.html#MAX_POLL_RECORDS_CONFIG"/>
        /// </summary>
        public static Java.Lang.String MAX_POLL_RECORDS_CONFIG { get { if (!_MAX_POLL_RECORDS_CONFIGReady) { _MAX_POLL_RECORDS_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MAX_POLL_RECORDS_CONFIG"); _MAX_POLL_RECORDS_CONFIGReady = true; } return _MAX_POLL_RECORDS_CONFIGContent; } }
        private static Java.Lang.String _MAX_POLL_RECORDS_CONFIGContent = default;
        private static bool _MAX_POLL_RECORDS_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/clients/consumer/ConsumerConfig.html#METADATA_MAX_AGE_CONFIG"/>
        /// </summary>
        public static Java.Lang.String METADATA_MAX_AGE_CONFIG { get { if (!_METADATA_MAX_AGE_CONFIGReady) { _METADATA_MAX_AGE_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "METADATA_MAX_AGE_CONFIG"); _METADATA_MAX_AGE_CONFIGReady = true; } return _METADATA_MAX_AGE_CONFIGContent; } }
        private static Java.Lang.String _METADATA_MAX_AGE_CONFIGContent = default;
        private static bool _METADATA_MAX_AGE_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/clients/consumer/ConsumerConfig.html#METRIC_REPORTER_CLASSES_CONFIG"/>
        /// </summary>
        public static Java.Lang.String METRIC_REPORTER_CLASSES_CONFIG { get { if (!_METRIC_REPORTER_CLASSES_CONFIGReady) { _METRIC_REPORTER_CLASSES_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "METRIC_REPORTER_CLASSES_CONFIG"); _METRIC_REPORTER_CLASSES_CONFIGReady = true; } return _METRIC_REPORTER_CLASSES_CONFIGContent; } }
        private static Java.Lang.String _METRIC_REPORTER_CLASSES_CONFIGContent = default;
        private static bool _METRIC_REPORTER_CLASSES_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/clients/consumer/ConsumerConfig.html#METRICS_NUM_SAMPLES_CONFIG"/>
        /// </summary>
        public static Java.Lang.String METRICS_NUM_SAMPLES_CONFIG { get { if (!_METRICS_NUM_SAMPLES_CONFIGReady) { _METRICS_NUM_SAMPLES_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "METRICS_NUM_SAMPLES_CONFIG"); _METRICS_NUM_SAMPLES_CONFIGReady = true; } return _METRICS_NUM_SAMPLES_CONFIGContent; } }
        private static Java.Lang.String _METRICS_NUM_SAMPLES_CONFIGContent = default;
        private static bool _METRICS_NUM_SAMPLES_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/clients/consumer/ConsumerConfig.html#METRICS_RECORDING_LEVEL_CONFIG"/>
        /// </summary>
        public static Java.Lang.String METRICS_RECORDING_LEVEL_CONFIG { get { if (!_METRICS_RECORDING_LEVEL_CONFIGReady) { _METRICS_RECORDING_LEVEL_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "METRICS_RECORDING_LEVEL_CONFIG"); _METRICS_RECORDING_LEVEL_CONFIGReady = true; } return _METRICS_RECORDING_LEVEL_CONFIGContent; } }
        private static Java.Lang.String _METRICS_RECORDING_LEVEL_CONFIGContent = default;
        private static bool _METRICS_RECORDING_LEVEL_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/clients/consumer/ConsumerConfig.html#METRICS_SAMPLE_WINDOW_MS_CONFIG"/>
        /// </summary>
        public static Java.Lang.String METRICS_SAMPLE_WINDOW_MS_CONFIG { get { if (!_METRICS_SAMPLE_WINDOW_MS_CONFIGReady) { _METRICS_SAMPLE_WINDOW_MS_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "METRICS_SAMPLE_WINDOW_MS_CONFIG"); _METRICS_SAMPLE_WINDOW_MS_CONFIGReady = true; } return _METRICS_SAMPLE_WINDOW_MS_CONFIGContent; } }
        private static Java.Lang.String _METRICS_SAMPLE_WINDOW_MS_CONFIGContent = default;
        private static bool _METRICS_SAMPLE_WINDOW_MS_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/clients/consumer/ConsumerConfig.html#PARTITION_ASSIGNMENT_STRATEGY_CONFIG"/>
        /// </summary>
        public static Java.Lang.String PARTITION_ASSIGNMENT_STRATEGY_CONFIG { get { if (!_PARTITION_ASSIGNMENT_STRATEGY_CONFIGReady) { _PARTITION_ASSIGNMENT_STRATEGY_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PARTITION_ASSIGNMENT_STRATEGY_CONFIG"); _PARTITION_ASSIGNMENT_STRATEGY_CONFIGReady = true; } return _PARTITION_ASSIGNMENT_STRATEGY_CONFIGContent; } }
        private static Java.Lang.String _PARTITION_ASSIGNMENT_STRATEGY_CONFIGContent = default;
        private static bool _PARTITION_ASSIGNMENT_STRATEGY_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/clients/consumer/ConsumerConfig.html#RECEIVE_BUFFER_CONFIG"/>
        /// </summary>
        public static Java.Lang.String RECEIVE_BUFFER_CONFIG { get { if (!_RECEIVE_BUFFER_CONFIGReady) { _RECEIVE_BUFFER_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "RECEIVE_BUFFER_CONFIG"); _RECEIVE_BUFFER_CONFIGReady = true; } return _RECEIVE_BUFFER_CONFIGContent; } }
        private static Java.Lang.String _RECEIVE_BUFFER_CONFIGContent = default;
        private static bool _RECEIVE_BUFFER_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/clients/consumer/ConsumerConfig.html#RECONNECT_BACKOFF_MAX_MS_CONFIG"/>
        /// </summary>
        public static Java.Lang.String RECONNECT_BACKOFF_MAX_MS_CONFIG { get { if (!_RECONNECT_BACKOFF_MAX_MS_CONFIGReady) { _RECONNECT_BACKOFF_MAX_MS_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "RECONNECT_BACKOFF_MAX_MS_CONFIG"); _RECONNECT_BACKOFF_MAX_MS_CONFIGReady = true; } return _RECONNECT_BACKOFF_MAX_MS_CONFIGContent; } }
        private static Java.Lang.String _RECONNECT_BACKOFF_MAX_MS_CONFIGContent = default;
        private static bool _RECONNECT_BACKOFF_MAX_MS_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/clients/consumer/ConsumerConfig.html#RECONNECT_BACKOFF_MS_CONFIG"/>
        /// </summary>
        public static Java.Lang.String RECONNECT_BACKOFF_MS_CONFIG { get { if (!_RECONNECT_BACKOFF_MS_CONFIGReady) { _RECONNECT_BACKOFF_MS_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "RECONNECT_BACKOFF_MS_CONFIG"); _RECONNECT_BACKOFF_MS_CONFIGReady = true; } return _RECONNECT_BACKOFF_MS_CONFIGContent; } }
        private static Java.Lang.String _RECONNECT_BACKOFF_MS_CONFIGContent = default;
        private static bool _RECONNECT_BACKOFF_MS_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/clients/consumer/ConsumerConfig.html#REQUEST_TIMEOUT_MS_CONFIG"/>
        /// </summary>
        public static Java.Lang.String REQUEST_TIMEOUT_MS_CONFIG { get { if (!_REQUEST_TIMEOUT_MS_CONFIGReady) { _REQUEST_TIMEOUT_MS_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "REQUEST_TIMEOUT_MS_CONFIG"); _REQUEST_TIMEOUT_MS_CONFIGReady = true; } return _REQUEST_TIMEOUT_MS_CONFIGContent; } }
        private static Java.Lang.String _REQUEST_TIMEOUT_MS_CONFIGContent = default;
        private static bool _REQUEST_TIMEOUT_MS_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/clients/consumer/ConsumerConfig.html#RETRY_BACKOFF_MAX_MS_CONFIG"/>
        /// </summary>
        public static Java.Lang.String RETRY_BACKOFF_MAX_MS_CONFIG { get { if (!_RETRY_BACKOFF_MAX_MS_CONFIGReady) { _RETRY_BACKOFF_MAX_MS_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "RETRY_BACKOFF_MAX_MS_CONFIG"); _RETRY_BACKOFF_MAX_MS_CONFIGReady = true; } return _RETRY_BACKOFF_MAX_MS_CONFIGContent; } }
        private static Java.Lang.String _RETRY_BACKOFF_MAX_MS_CONFIGContent = default;
        private static bool _RETRY_BACKOFF_MAX_MS_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/clients/consumer/ConsumerConfig.html#RETRY_BACKOFF_MS_CONFIG"/>
        /// </summary>
        public static Java.Lang.String RETRY_BACKOFF_MS_CONFIG { get { if (!_RETRY_BACKOFF_MS_CONFIGReady) { _RETRY_BACKOFF_MS_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "RETRY_BACKOFF_MS_CONFIG"); _RETRY_BACKOFF_MS_CONFIGReady = true; } return _RETRY_BACKOFF_MS_CONFIGContent; } }
        private static Java.Lang.String _RETRY_BACKOFF_MS_CONFIGContent = default;
        private static bool _RETRY_BACKOFF_MS_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/clients/consumer/ConsumerConfig.html#SECURITY_PROVIDERS_CONFIG"/>
        /// </summary>
        public static Java.Lang.String SECURITY_PROVIDERS_CONFIG { get { if (!_SECURITY_PROVIDERS_CONFIGReady) { _SECURITY_PROVIDERS_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SECURITY_PROVIDERS_CONFIG"); _SECURITY_PROVIDERS_CONFIGReady = true; } return _SECURITY_PROVIDERS_CONFIGContent; } }
        private static Java.Lang.String _SECURITY_PROVIDERS_CONFIGContent = default;
        private static bool _SECURITY_PROVIDERS_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/clients/consumer/ConsumerConfig.html#SEND_BUFFER_CONFIG"/>
        /// </summary>
        public static Java.Lang.String SEND_BUFFER_CONFIG { get { if (!_SEND_BUFFER_CONFIGReady) { _SEND_BUFFER_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SEND_BUFFER_CONFIG"); _SEND_BUFFER_CONFIGReady = true; } return _SEND_BUFFER_CONFIGContent; } }
        private static Java.Lang.String _SEND_BUFFER_CONFIGContent = default;
        private static bool _SEND_BUFFER_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/clients/consumer/ConsumerConfig.html#SESSION_TIMEOUT_MS_CONFIG"/>
        /// </summary>
        public static Java.Lang.String SESSION_TIMEOUT_MS_CONFIG { get { if (!_SESSION_TIMEOUT_MS_CONFIGReady) { _SESSION_TIMEOUT_MS_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SESSION_TIMEOUT_MS_CONFIG"); _SESSION_TIMEOUT_MS_CONFIGReady = true; } return _SESSION_TIMEOUT_MS_CONFIGContent; } }
        private static Java.Lang.String _SESSION_TIMEOUT_MS_CONFIGContent = default;
        private static bool _SESSION_TIMEOUT_MS_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/clients/consumer/ConsumerConfig.html#SHARE_ACKNOWLEDGEMENT_MODE_CONFIG"/>
        /// </summary>
        public static Java.Lang.String SHARE_ACKNOWLEDGEMENT_MODE_CONFIG { get { if (!_SHARE_ACKNOWLEDGEMENT_MODE_CONFIGReady) { _SHARE_ACKNOWLEDGEMENT_MODE_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SHARE_ACKNOWLEDGEMENT_MODE_CONFIG"); _SHARE_ACKNOWLEDGEMENT_MODE_CONFIGReady = true; } return _SHARE_ACKNOWLEDGEMENT_MODE_CONFIGContent; } }
        private static Java.Lang.String _SHARE_ACKNOWLEDGEMENT_MODE_CONFIGContent = default;
        private static bool _SHARE_ACKNOWLEDGEMENT_MODE_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/clients/consumer/ConsumerConfig.html#SOCKET_CONNECTION_SETUP_TIMEOUT_MAX_MS_CONFIG"/>
        /// </summary>
        public static Java.Lang.String SOCKET_CONNECTION_SETUP_TIMEOUT_MAX_MS_CONFIG { get { if (!_SOCKET_CONNECTION_SETUP_TIMEOUT_MAX_MS_CONFIGReady) { _SOCKET_CONNECTION_SETUP_TIMEOUT_MAX_MS_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SOCKET_CONNECTION_SETUP_TIMEOUT_MAX_MS_CONFIG"); _SOCKET_CONNECTION_SETUP_TIMEOUT_MAX_MS_CONFIGReady = true; } return _SOCKET_CONNECTION_SETUP_TIMEOUT_MAX_MS_CONFIGContent; } }
        private static Java.Lang.String _SOCKET_CONNECTION_SETUP_TIMEOUT_MAX_MS_CONFIGContent = default;
        private static bool _SOCKET_CONNECTION_SETUP_TIMEOUT_MAX_MS_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/clients/consumer/ConsumerConfig.html#SOCKET_CONNECTION_SETUP_TIMEOUT_MS_CONFIG"/>
        /// </summary>
        public static Java.Lang.String SOCKET_CONNECTION_SETUP_TIMEOUT_MS_CONFIG { get { if (!_SOCKET_CONNECTION_SETUP_TIMEOUT_MS_CONFIGReady) { _SOCKET_CONNECTION_SETUP_TIMEOUT_MS_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SOCKET_CONNECTION_SETUP_TIMEOUT_MS_CONFIG"); _SOCKET_CONNECTION_SETUP_TIMEOUT_MS_CONFIGReady = true; } return _SOCKET_CONNECTION_SETUP_TIMEOUT_MS_CONFIGContent; } }
        private static Java.Lang.String _SOCKET_CONNECTION_SETUP_TIMEOUT_MS_CONFIGContent = default;
        private static bool _SOCKET_CONNECTION_SETUP_TIMEOUT_MS_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/clients/consumer/ConsumerConfig.html#VALUE_DESERIALIZER_CLASS_CONFIG"/>
        /// </summary>
        public static Java.Lang.String VALUE_DESERIALIZER_CLASS_CONFIG { get { if (!_VALUE_DESERIALIZER_CLASS_CONFIGReady) { _VALUE_DESERIALIZER_CLASS_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "VALUE_DESERIALIZER_CLASS_CONFIG"); _VALUE_DESERIALIZER_CLASS_CONFIGReady = true; } return _VALUE_DESERIALIZER_CLASS_CONFIGContent; } }
        private static Java.Lang.String _VALUE_DESERIALIZER_CLASS_CONFIGContent = default;
        private static bool _VALUE_DESERIALIZER_CLASS_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/clients/consumer/ConsumerConfig.html#VALUE_DESERIALIZER_CLASS_DOC"/>
        /// </summary>
        public static Java.Lang.String VALUE_DESERIALIZER_CLASS_DOC { get { if (!_VALUE_DESERIALIZER_CLASS_DOCReady) { _VALUE_DESERIALIZER_CLASS_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "VALUE_DESERIALIZER_CLASS_DOC"); _VALUE_DESERIALIZER_CLASS_DOCReady = true; } return _VALUE_DESERIALIZER_CLASS_DOCContent; } }
        private static Java.Lang.String _VALUE_DESERIALIZER_CLASS_DOCContent = default;
        private static bool _VALUE_DESERIALIZER_CLASS_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/clients/consumer/ConsumerConfig.html#ASSIGN_FROM_SUBSCRIBED_ASSIGNORS"/>
        /// </summary>
        public static Java.Util.List ASSIGN_FROM_SUBSCRIBED_ASSIGNORS { get { if (!_ASSIGN_FROM_SUBSCRIBED_ASSIGNORSReady) { _ASSIGN_FROM_SUBSCRIBED_ASSIGNORSContent = SGetField<Java.Util.List>(LocalBridgeClazz, "ASSIGN_FROM_SUBSCRIBED_ASSIGNORS"); _ASSIGN_FROM_SUBSCRIBED_ASSIGNORSReady = true; } return _ASSIGN_FROM_SUBSCRIBED_ASSIGNORSContent; } }
        private static Java.Util.List _ASSIGN_FROM_SUBSCRIBED_ASSIGNORSContent = default;
        private static bool _ASSIGN_FROM_SUBSCRIBED_ASSIGNORSReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/clients/consumer/ConsumerConfig.html#appendDeserializerToConfig(java.util.Map,org.apache.kafka.common.serialization.Deserializer,org.apache.kafka.common.serialization.Deserializer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Map"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Common.Serialization.Deserializer"/></param>
        /// <param name="arg2"><see cref="Org.Apache.Kafka.Common.Serialization.Deserializer"/></param>
        /// <returns><see cref="Java.Util.Map"/></returns>
        public static Java.Util.Map<Java.Lang.String, object> AppendDeserializerToConfig(Java.Util.Map<Java.Lang.String, object> arg0, Org.Apache.Kafka.Common.Serialization.Deserializer<object> arg1, Org.Apache.Kafka.Common.Serialization.Deserializer<object> arg2)
        {
            return SExecuteWithSignature<Java.Util.Map<Java.Lang.String, object>>(LocalBridgeClazz, "appendDeserializerToConfig", "(Ljava/util/Map;Lorg/apache/kafka/common/serialization/Deserializer;Lorg/apache/kafka/common/serialization/Deserializer;)Ljava/util/Map;", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/clients/consumer/ConsumerConfig.html#configNames()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.Set"/></returns>
        public static Java.Util.Set<Java.Lang.String> ConfigNames()
        {
            return SExecuteWithSignature<Java.Util.Set<Java.Lang.String>>(LocalBridgeClazz, "configNames", "()Ljava/util/Set;");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/clients/consumer/ConsumerConfig.html#configDef()"/>
        /// </summary>
        /// <returns><see cref="Org.Apache.Kafka.Common.Config.ConfigDef"/></returns>
        public static Org.Apache.Kafka.Common.Config.ConfigDef ConfigDef()
        {
            return SExecuteWithSignature<Org.Apache.Kafka.Common.Config.ConfigDef>(LocalBridgeClazz, "configDef", "()Lorg/apache/kafka/common/config/ConfigDef;");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/clients/consumer/ConsumerConfig.html#main(java.lang.String[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        public static void Main(Java.Lang.String[] arg0)
        {
            SExecuteWithSignature(LocalBridgeClazz, "main", "([Ljava/lang/String;)V", new object[] { arg0 });
        }

        #endregion

        #region Instance methods

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}