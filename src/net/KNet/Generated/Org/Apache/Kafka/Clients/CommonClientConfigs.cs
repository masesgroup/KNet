/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.4.0)
*  using kafka-clients-3.7.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Clients
{
    #region CommonClientConfigs
    public partial class CommonClientConfigs
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/clients/CommonClientConfigs.html#RETRY_BACKOFF_JITTER"/>
        /// </summary>
        public static double RETRY_BACKOFF_JITTER { get { if (!_RETRY_BACKOFF_JITTERReady) { _RETRY_BACKOFF_JITTERContent = SGetField<double>(LocalBridgeClazz, "RETRY_BACKOFF_JITTER"); _RETRY_BACKOFF_JITTERReady = true; } return _RETRY_BACKOFF_JITTERContent; } }
        private static double _RETRY_BACKOFF_JITTERContent = default;
        private static bool _RETRY_BACKOFF_JITTERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/clients/CommonClientConfigs.html#RECEIVE_BUFFER_LOWER_BOUND"/>
        /// </summary>
        public static int RECEIVE_BUFFER_LOWER_BOUND { get { if (!_RECEIVE_BUFFER_LOWER_BOUNDReady) { _RECEIVE_BUFFER_LOWER_BOUNDContent = SGetField<int>(LocalBridgeClazz, "RECEIVE_BUFFER_LOWER_BOUND"); _RECEIVE_BUFFER_LOWER_BOUNDReady = true; } return _RECEIVE_BUFFER_LOWER_BOUNDContent; } }
        private static int _RECEIVE_BUFFER_LOWER_BOUNDContent = default;
        private static bool _RECEIVE_BUFFER_LOWER_BOUNDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/clients/CommonClientConfigs.html#RETRY_BACKOFF_EXP_BASE"/>
        /// </summary>
        public static int RETRY_BACKOFF_EXP_BASE { get { if (!_RETRY_BACKOFF_EXP_BASEReady) { _RETRY_BACKOFF_EXP_BASEContent = SGetField<int>(LocalBridgeClazz, "RETRY_BACKOFF_EXP_BASE"); _RETRY_BACKOFF_EXP_BASEReady = true; } return _RETRY_BACKOFF_EXP_BASEContent; } }
        private static int _RETRY_BACKOFF_EXP_BASEContent = default;
        private static bool _RETRY_BACKOFF_EXP_BASEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/clients/CommonClientConfigs.html#SEND_BUFFER_LOWER_BOUND"/>
        /// </summary>
        public static int SEND_BUFFER_LOWER_BOUND { get { if (!_SEND_BUFFER_LOWER_BOUNDReady) { _SEND_BUFFER_LOWER_BOUNDContent = SGetField<int>(LocalBridgeClazz, "SEND_BUFFER_LOWER_BOUND"); _SEND_BUFFER_LOWER_BOUNDReady = true; } return _SEND_BUFFER_LOWER_BOUNDContent; } }
        private static int _SEND_BUFFER_LOWER_BOUNDContent = default;
        private static bool _SEND_BUFFER_LOWER_BOUNDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/clients/CommonClientConfigs.html#DEFAULT_RETRY_BACKOFF_MAX_MS"/>
        /// </summary>
        public static Java.Lang.Long DEFAULT_RETRY_BACKOFF_MAX_MS { get { if (!_DEFAULT_RETRY_BACKOFF_MAX_MSReady) { _DEFAULT_RETRY_BACKOFF_MAX_MSContent = SGetField<Java.Lang.Long>(LocalBridgeClazz, "DEFAULT_RETRY_BACKOFF_MAX_MS"); _DEFAULT_RETRY_BACKOFF_MAX_MSReady = true; } return _DEFAULT_RETRY_BACKOFF_MAX_MSContent; } }
        private static Java.Lang.Long _DEFAULT_RETRY_BACKOFF_MAX_MSContent = default;
        private static bool _DEFAULT_RETRY_BACKOFF_MAX_MSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/clients/CommonClientConfigs.html#DEFAULT_RETRY_BACKOFF_MS"/>
        /// </summary>
        public static Java.Lang.Long DEFAULT_RETRY_BACKOFF_MS { get { if (!_DEFAULT_RETRY_BACKOFF_MSReady) { _DEFAULT_RETRY_BACKOFF_MSContent = SGetField<Java.Lang.Long>(LocalBridgeClazz, "DEFAULT_RETRY_BACKOFF_MS"); _DEFAULT_RETRY_BACKOFF_MSReady = true; } return _DEFAULT_RETRY_BACKOFF_MSContent; } }
        private static Java.Lang.Long _DEFAULT_RETRY_BACKOFF_MSContent = default;
        private static bool _DEFAULT_RETRY_BACKOFF_MSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/clients/CommonClientConfigs.html#DEFAULT_SOCKET_CONNECTION_SETUP_TIMEOUT_MAX_MS"/>
        /// </summary>
        public static Java.Lang.Long DEFAULT_SOCKET_CONNECTION_SETUP_TIMEOUT_MAX_MS { get { if (!_DEFAULT_SOCKET_CONNECTION_SETUP_TIMEOUT_MAX_MSReady) { _DEFAULT_SOCKET_CONNECTION_SETUP_TIMEOUT_MAX_MSContent = SGetField<Java.Lang.Long>(LocalBridgeClazz, "DEFAULT_SOCKET_CONNECTION_SETUP_TIMEOUT_MAX_MS"); _DEFAULT_SOCKET_CONNECTION_SETUP_TIMEOUT_MAX_MSReady = true; } return _DEFAULT_SOCKET_CONNECTION_SETUP_TIMEOUT_MAX_MSContent; } }
        private static Java.Lang.Long _DEFAULT_SOCKET_CONNECTION_SETUP_TIMEOUT_MAX_MSContent = default;
        private static bool _DEFAULT_SOCKET_CONNECTION_SETUP_TIMEOUT_MAX_MSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/clients/CommonClientConfigs.html#DEFAULT_SOCKET_CONNECTION_SETUP_TIMEOUT_MS"/>
        /// </summary>
        public static Java.Lang.Long DEFAULT_SOCKET_CONNECTION_SETUP_TIMEOUT_MS { get { if (!_DEFAULT_SOCKET_CONNECTION_SETUP_TIMEOUT_MSReady) { _DEFAULT_SOCKET_CONNECTION_SETUP_TIMEOUT_MSContent = SGetField<Java.Lang.Long>(LocalBridgeClazz, "DEFAULT_SOCKET_CONNECTION_SETUP_TIMEOUT_MS"); _DEFAULT_SOCKET_CONNECTION_SETUP_TIMEOUT_MSReady = true; } return _DEFAULT_SOCKET_CONNECTION_SETUP_TIMEOUT_MSContent; } }
        private static Java.Lang.Long _DEFAULT_SOCKET_CONNECTION_SETUP_TIMEOUT_MSContent = default;
        private static bool _DEFAULT_SOCKET_CONNECTION_SETUP_TIMEOUT_MSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/clients/CommonClientConfigs.html#AUTO_INCLUDE_JMX_REPORTER_DOC"/>
        /// </summary>
        public static Java.Lang.String AUTO_INCLUDE_JMX_REPORTER_DOC { get { if (!_AUTO_INCLUDE_JMX_REPORTER_DOCReady) { _AUTO_INCLUDE_JMX_REPORTER_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "AUTO_INCLUDE_JMX_REPORTER_DOC"); _AUTO_INCLUDE_JMX_REPORTER_DOCReady = true; } return _AUTO_INCLUDE_JMX_REPORTER_DOCContent; } }
        private static Java.Lang.String _AUTO_INCLUDE_JMX_REPORTER_DOCContent = default;
        private static bool _AUTO_INCLUDE_JMX_REPORTER_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/clients/CommonClientConfigs.html#BOOTSTRAP_SERVERS_CONFIG"/>
        /// </summary>
        public static Java.Lang.String BOOTSTRAP_SERVERS_CONFIG { get { if (!_BOOTSTRAP_SERVERS_CONFIGReady) { _BOOTSTRAP_SERVERS_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "BOOTSTRAP_SERVERS_CONFIG"); _BOOTSTRAP_SERVERS_CONFIGReady = true; } return _BOOTSTRAP_SERVERS_CONFIGContent; } }
        private static Java.Lang.String _BOOTSTRAP_SERVERS_CONFIGContent = default;
        private static bool _BOOTSTRAP_SERVERS_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/clients/CommonClientConfigs.html#BOOTSTRAP_SERVERS_DOC"/>
        /// </summary>
        public static Java.Lang.String BOOTSTRAP_SERVERS_DOC { get { if (!_BOOTSTRAP_SERVERS_DOCReady) { _BOOTSTRAP_SERVERS_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "BOOTSTRAP_SERVERS_DOC"); _BOOTSTRAP_SERVERS_DOCReady = true; } return _BOOTSTRAP_SERVERS_DOCContent; } }
        private static Java.Lang.String _BOOTSTRAP_SERVERS_DOCContent = default;
        private static bool _BOOTSTRAP_SERVERS_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/clients/CommonClientConfigs.html#CLIENT_DNS_LOOKUP_CONFIG"/>
        /// </summary>
        public static Java.Lang.String CLIENT_DNS_LOOKUP_CONFIG { get { if (!_CLIENT_DNS_LOOKUP_CONFIGReady) { _CLIENT_DNS_LOOKUP_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CLIENT_DNS_LOOKUP_CONFIG"); _CLIENT_DNS_LOOKUP_CONFIGReady = true; } return _CLIENT_DNS_LOOKUP_CONFIGContent; } }
        private static Java.Lang.String _CLIENT_DNS_LOOKUP_CONFIGContent = default;
        private static bool _CLIENT_DNS_LOOKUP_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/clients/CommonClientConfigs.html#CLIENT_DNS_LOOKUP_DOC"/>
        /// </summary>
        public static Java.Lang.String CLIENT_DNS_LOOKUP_DOC { get { if (!_CLIENT_DNS_LOOKUP_DOCReady) { _CLIENT_DNS_LOOKUP_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CLIENT_DNS_LOOKUP_DOC"); _CLIENT_DNS_LOOKUP_DOCReady = true; } return _CLIENT_DNS_LOOKUP_DOCContent; } }
        private static Java.Lang.String _CLIENT_DNS_LOOKUP_DOCContent = default;
        private static bool _CLIENT_DNS_LOOKUP_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/clients/CommonClientConfigs.html#CLIENT_ID_CONFIG"/>
        /// </summary>
        public static Java.Lang.String CLIENT_ID_CONFIG { get { if (!_CLIENT_ID_CONFIGReady) { _CLIENT_ID_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CLIENT_ID_CONFIG"); _CLIENT_ID_CONFIGReady = true; } return _CLIENT_ID_CONFIGContent; } }
        private static Java.Lang.String _CLIENT_ID_CONFIGContent = default;
        private static bool _CLIENT_ID_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/clients/CommonClientConfigs.html#CLIENT_ID_DOC"/>
        /// </summary>
        public static Java.Lang.String CLIENT_ID_DOC { get { if (!_CLIENT_ID_DOCReady) { _CLIENT_ID_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CLIENT_ID_DOC"); _CLIENT_ID_DOCReady = true; } return _CLIENT_ID_DOCContent; } }
        private static Java.Lang.String _CLIENT_ID_DOCContent = default;
        private static bool _CLIENT_ID_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/clients/CommonClientConfigs.html#CLIENT_RACK_CONFIG"/>
        /// </summary>
        public static Java.Lang.String CLIENT_RACK_CONFIG { get { if (!_CLIENT_RACK_CONFIGReady) { _CLIENT_RACK_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CLIENT_RACK_CONFIG"); _CLIENT_RACK_CONFIGReady = true; } return _CLIENT_RACK_CONFIGContent; } }
        private static Java.Lang.String _CLIENT_RACK_CONFIGContent = default;
        private static bool _CLIENT_RACK_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/clients/CommonClientConfigs.html#CLIENT_RACK_DOC"/>
        /// </summary>
        public static Java.Lang.String CLIENT_RACK_DOC { get { if (!_CLIENT_RACK_DOCReady) { _CLIENT_RACK_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CLIENT_RACK_DOC"); _CLIENT_RACK_DOCReady = true; } return _CLIENT_RACK_DOCContent; } }
        private static Java.Lang.String _CLIENT_RACK_DOCContent = default;
        private static bool _CLIENT_RACK_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/clients/CommonClientConfigs.html#CONNECTIONS_MAX_IDLE_MS_CONFIG"/>
        /// </summary>
        public static Java.Lang.String CONNECTIONS_MAX_IDLE_MS_CONFIG { get { if (!_CONNECTIONS_MAX_IDLE_MS_CONFIGReady) { _CONNECTIONS_MAX_IDLE_MS_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CONNECTIONS_MAX_IDLE_MS_CONFIG"); _CONNECTIONS_MAX_IDLE_MS_CONFIGReady = true; } return _CONNECTIONS_MAX_IDLE_MS_CONFIGContent; } }
        private static Java.Lang.String _CONNECTIONS_MAX_IDLE_MS_CONFIGContent = default;
        private static bool _CONNECTIONS_MAX_IDLE_MS_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/clients/CommonClientConfigs.html#CONNECTIONS_MAX_IDLE_MS_DOC"/>
        /// </summary>
        public static Java.Lang.String CONNECTIONS_MAX_IDLE_MS_DOC { get { if (!_CONNECTIONS_MAX_IDLE_MS_DOCReady) { _CONNECTIONS_MAX_IDLE_MS_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CONNECTIONS_MAX_IDLE_MS_DOC"); _CONNECTIONS_MAX_IDLE_MS_DOCReady = true; } return _CONNECTIONS_MAX_IDLE_MS_DOCContent; } }
        private static Java.Lang.String _CONNECTIONS_MAX_IDLE_MS_DOCContent = default;
        private static bool _CONNECTIONS_MAX_IDLE_MS_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/clients/CommonClientConfigs.html#DEFAULT_API_TIMEOUT_MS_CONFIG"/>
        /// </summary>
        public static Java.Lang.String DEFAULT_API_TIMEOUT_MS_CONFIG { get { if (!_DEFAULT_API_TIMEOUT_MS_CONFIGReady) { _DEFAULT_API_TIMEOUT_MS_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DEFAULT_API_TIMEOUT_MS_CONFIG"); _DEFAULT_API_TIMEOUT_MS_CONFIGReady = true; } return _DEFAULT_API_TIMEOUT_MS_CONFIGContent; } }
        private static Java.Lang.String _DEFAULT_API_TIMEOUT_MS_CONFIGContent = default;
        private static bool _DEFAULT_API_TIMEOUT_MS_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/clients/CommonClientConfigs.html#DEFAULT_API_TIMEOUT_MS_DOC"/>
        /// </summary>
        public static Java.Lang.String DEFAULT_API_TIMEOUT_MS_DOC { get { if (!_DEFAULT_API_TIMEOUT_MS_DOCReady) { _DEFAULT_API_TIMEOUT_MS_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DEFAULT_API_TIMEOUT_MS_DOC"); _DEFAULT_API_TIMEOUT_MS_DOCReady = true; } return _DEFAULT_API_TIMEOUT_MS_DOCContent; } }
        private static Java.Lang.String _DEFAULT_API_TIMEOUT_MS_DOCContent = default;
        private static bool _DEFAULT_API_TIMEOUT_MS_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/clients/CommonClientConfigs.html#DEFAULT_CLIENT_RACK"/>
        /// </summary>
        public static Java.Lang.String DEFAULT_CLIENT_RACK { get { if (!_DEFAULT_CLIENT_RACKReady) { _DEFAULT_CLIENT_RACKContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DEFAULT_CLIENT_RACK"); _DEFAULT_CLIENT_RACKReady = true; } return _DEFAULT_CLIENT_RACKContent; } }
        private static Java.Lang.String _DEFAULT_CLIENT_RACKContent = default;
        private static bool _DEFAULT_CLIENT_RACKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/clients/CommonClientConfigs.html#DEFAULT_LIST_KEY_SERDE_INNER_CLASS"/>
        /// </summary>
        public static Java.Lang.String DEFAULT_LIST_KEY_SERDE_INNER_CLASS { get { if (!_DEFAULT_LIST_KEY_SERDE_INNER_CLASSReady) { _DEFAULT_LIST_KEY_SERDE_INNER_CLASSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DEFAULT_LIST_KEY_SERDE_INNER_CLASS"); _DEFAULT_LIST_KEY_SERDE_INNER_CLASSReady = true; } return _DEFAULT_LIST_KEY_SERDE_INNER_CLASSContent; } }
        private static Java.Lang.String _DEFAULT_LIST_KEY_SERDE_INNER_CLASSContent = default;
        private static bool _DEFAULT_LIST_KEY_SERDE_INNER_CLASSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/clients/CommonClientConfigs.html#DEFAULT_LIST_KEY_SERDE_INNER_CLASS_DOC"/>
        /// </summary>
        public static Java.Lang.String DEFAULT_LIST_KEY_SERDE_INNER_CLASS_DOC { get { if (!_DEFAULT_LIST_KEY_SERDE_INNER_CLASS_DOCReady) { _DEFAULT_LIST_KEY_SERDE_INNER_CLASS_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DEFAULT_LIST_KEY_SERDE_INNER_CLASS_DOC"); _DEFAULT_LIST_KEY_SERDE_INNER_CLASS_DOCReady = true; } return _DEFAULT_LIST_KEY_SERDE_INNER_CLASS_DOCContent; } }
        private static Java.Lang.String _DEFAULT_LIST_KEY_SERDE_INNER_CLASS_DOCContent = default;
        private static bool _DEFAULT_LIST_KEY_SERDE_INNER_CLASS_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/clients/CommonClientConfigs.html#DEFAULT_LIST_KEY_SERDE_TYPE_CLASS"/>
        /// </summary>
        public static Java.Lang.String DEFAULT_LIST_KEY_SERDE_TYPE_CLASS { get { if (!_DEFAULT_LIST_KEY_SERDE_TYPE_CLASSReady) { _DEFAULT_LIST_KEY_SERDE_TYPE_CLASSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DEFAULT_LIST_KEY_SERDE_TYPE_CLASS"); _DEFAULT_LIST_KEY_SERDE_TYPE_CLASSReady = true; } return _DEFAULT_LIST_KEY_SERDE_TYPE_CLASSContent; } }
        private static Java.Lang.String _DEFAULT_LIST_KEY_SERDE_TYPE_CLASSContent = default;
        private static bool _DEFAULT_LIST_KEY_SERDE_TYPE_CLASSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/clients/CommonClientConfigs.html#DEFAULT_LIST_KEY_SERDE_TYPE_CLASS_DOC"/>
        /// </summary>
        public static Java.Lang.String DEFAULT_LIST_KEY_SERDE_TYPE_CLASS_DOC { get { if (!_DEFAULT_LIST_KEY_SERDE_TYPE_CLASS_DOCReady) { _DEFAULT_LIST_KEY_SERDE_TYPE_CLASS_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DEFAULT_LIST_KEY_SERDE_TYPE_CLASS_DOC"); _DEFAULT_LIST_KEY_SERDE_TYPE_CLASS_DOCReady = true; } return _DEFAULT_LIST_KEY_SERDE_TYPE_CLASS_DOCContent; } }
        private static Java.Lang.String _DEFAULT_LIST_KEY_SERDE_TYPE_CLASS_DOCContent = default;
        private static bool _DEFAULT_LIST_KEY_SERDE_TYPE_CLASS_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/clients/CommonClientConfigs.html#DEFAULT_LIST_VALUE_SERDE_INNER_CLASS"/>
        /// </summary>
        public static Java.Lang.String DEFAULT_LIST_VALUE_SERDE_INNER_CLASS { get { if (!_DEFAULT_LIST_VALUE_SERDE_INNER_CLASSReady) { _DEFAULT_LIST_VALUE_SERDE_INNER_CLASSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DEFAULT_LIST_VALUE_SERDE_INNER_CLASS"); _DEFAULT_LIST_VALUE_SERDE_INNER_CLASSReady = true; } return _DEFAULT_LIST_VALUE_SERDE_INNER_CLASSContent; } }
        private static Java.Lang.String _DEFAULT_LIST_VALUE_SERDE_INNER_CLASSContent = default;
        private static bool _DEFAULT_LIST_VALUE_SERDE_INNER_CLASSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/clients/CommonClientConfigs.html#DEFAULT_LIST_VALUE_SERDE_INNER_CLASS_DOC"/>
        /// </summary>
        public static Java.Lang.String DEFAULT_LIST_VALUE_SERDE_INNER_CLASS_DOC { get { if (!_DEFAULT_LIST_VALUE_SERDE_INNER_CLASS_DOCReady) { _DEFAULT_LIST_VALUE_SERDE_INNER_CLASS_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DEFAULT_LIST_VALUE_SERDE_INNER_CLASS_DOC"); _DEFAULT_LIST_VALUE_SERDE_INNER_CLASS_DOCReady = true; } return _DEFAULT_LIST_VALUE_SERDE_INNER_CLASS_DOCContent; } }
        private static Java.Lang.String _DEFAULT_LIST_VALUE_SERDE_INNER_CLASS_DOCContent = default;
        private static bool _DEFAULT_LIST_VALUE_SERDE_INNER_CLASS_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/clients/CommonClientConfigs.html#DEFAULT_LIST_VALUE_SERDE_TYPE_CLASS"/>
        /// </summary>
        public static Java.Lang.String DEFAULT_LIST_VALUE_SERDE_TYPE_CLASS { get { if (!_DEFAULT_LIST_VALUE_SERDE_TYPE_CLASSReady) { _DEFAULT_LIST_VALUE_SERDE_TYPE_CLASSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DEFAULT_LIST_VALUE_SERDE_TYPE_CLASS"); _DEFAULT_LIST_VALUE_SERDE_TYPE_CLASSReady = true; } return _DEFAULT_LIST_VALUE_SERDE_TYPE_CLASSContent; } }
        private static Java.Lang.String _DEFAULT_LIST_VALUE_SERDE_TYPE_CLASSContent = default;
        private static bool _DEFAULT_LIST_VALUE_SERDE_TYPE_CLASSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/clients/CommonClientConfigs.html#DEFAULT_LIST_VALUE_SERDE_TYPE_CLASS_DOC"/>
        /// </summary>
        public static Java.Lang.String DEFAULT_LIST_VALUE_SERDE_TYPE_CLASS_DOC { get { if (!_DEFAULT_LIST_VALUE_SERDE_TYPE_CLASS_DOCReady) { _DEFAULT_LIST_VALUE_SERDE_TYPE_CLASS_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DEFAULT_LIST_VALUE_SERDE_TYPE_CLASS_DOC"); _DEFAULT_LIST_VALUE_SERDE_TYPE_CLASS_DOCReady = true; } return _DEFAULT_LIST_VALUE_SERDE_TYPE_CLASS_DOCContent; } }
        private static Java.Lang.String _DEFAULT_LIST_VALUE_SERDE_TYPE_CLASS_DOCContent = default;
        private static bool _DEFAULT_LIST_VALUE_SERDE_TYPE_CLASS_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/clients/CommonClientConfigs.html#DEFAULT_SECURITY_PROTOCOL"/>
        /// </summary>
        public static Java.Lang.String DEFAULT_SECURITY_PROTOCOL { get { if (!_DEFAULT_SECURITY_PROTOCOLReady) { _DEFAULT_SECURITY_PROTOCOLContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DEFAULT_SECURITY_PROTOCOL"); _DEFAULT_SECURITY_PROTOCOLReady = true; } return _DEFAULT_SECURITY_PROTOCOLContent; } }
        private static Java.Lang.String _DEFAULT_SECURITY_PROTOCOLContent = default;
        private static bool _DEFAULT_SECURITY_PROTOCOLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/clients/CommonClientConfigs.html#ENABLE_METRICS_PUSH_CONFIG"/>
        /// </summary>
        public static Java.Lang.String ENABLE_METRICS_PUSH_CONFIG { get { if (!_ENABLE_METRICS_PUSH_CONFIGReady) { _ENABLE_METRICS_PUSH_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ENABLE_METRICS_PUSH_CONFIG"); _ENABLE_METRICS_PUSH_CONFIGReady = true; } return _ENABLE_METRICS_PUSH_CONFIGContent; } }
        private static Java.Lang.String _ENABLE_METRICS_PUSH_CONFIGContent = default;
        private static bool _ENABLE_METRICS_PUSH_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/clients/CommonClientConfigs.html#ENABLE_METRICS_PUSH_DOC"/>
        /// </summary>
        public static Java.Lang.String ENABLE_METRICS_PUSH_DOC { get { if (!_ENABLE_METRICS_PUSH_DOCReady) { _ENABLE_METRICS_PUSH_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ENABLE_METRICS_PUSH_DOC"); _ENABLE_METRICS_PUSH_DOCReady = true; } return _ENABLE_METRICS_PUSH_DOCContent; } }
        private static Java.Lang.String _ENABLE_METRICS_PUSH_DOCContent = default;
        private static bool _ENABLE_METRICS_PUSH_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/clients/CommonClientConfigs.html#GROUP_ID_CONFIG"/>
        /// </summary>
        public static Java.Lang.String GROUP_ID_CONFIG { get { if (!_GROUP_ID_CONFIGReady) { _GROUP_ID_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "GROUP_ID_CONFIG"); _GROUP_ID_CONFIGReady = true; } return _GROUP_ID_CONFIGContent; } }
        private static Java.Lang.String _GROUP_ID_CONFIGContent = default;
        private static bool _GROUP_ID_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/clients/CommonClientConfigs.html#GROUP_ID_DOC"/>
        /// </summary>
        public static Java.Lang.String GROUP_ID_DOC { get { if (!_GROUP_ID_DOCReady) { _GROUP_ID_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "GROUP_ID_DOC"); _GROUP_ID_DOCReady = true; } return _GROUP_ID_DOCContent; } }
        private static Java.Lang.String _GROUP_ID_DOCContent = default;
        private static bool _GROUP_ID_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/clients/CommonClientConfigs.html#GROUP_INSTANCE_ID_CONFIG"/>
        /// </summary>
        public static Java.Lang.String GROUP_INSTANCE_ID_CONFIG { get { if (!_GROUP_INSTANCE_ID_CONFIGReady) { _GROUP_INSTANCE_ID_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "GROUP_INSTANCE_ID_CONFIG"); _GROUP_INSTANCE_ID_CONFIGReady = true; } return _GROUP_INSTANCE_ID_CONFIGContent; } }
        private static Java.Lang.String _GROUP_INSTANCE_ID_CONFIGContent = default;
        private static bool _GROUP_INSTANCE_ID_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/clients/CommonClientConfigs.html#GROUP_INSTANCE_ID_DOC"/>
        /// </summary>
        public static Java.Lang.String GROUP_INSTANCE_ID_DOC { get { if (!_GROUP_INSTANCE_ID_DOCReady) { _GROUP_INSTANCE_ID_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "GROUP_INSTANCE_ID_DOC"); _GROUP_INSTANCE_ID_DOCReady = true; } return _GROUP_INSTANCE_ID_DOCContent; } }
        private static Java.Lang.String _GROUP_INSTANCE_ID_DOCContent = default;
        private static bool _GROUP_INSTANCE_ID_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/clients/CommonClientConfigs.html#HEARTBEAT_INTERVAL_MS_CONFIG"/>
        /// </summary>
        public static Java.Lang.String HEARTBEAT_INTERVAL_MS_CONFIG { get { if (!_HEARTBEAT_INTERVAL_MS_CONFIGReady) { _HEARTBEAT_INTERVAL_MS_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "HEARTBEAT_INTERVAL_MS_CONFIG"); _HEARTBEAT_INTERVAL_MS_CONFIGReady = true; } return _HEARTBEAT_INTERVAL_MS_CONFIGContent; } }
        private static Java.Lang.String _HEARTBEAT_INTERVAL_MS_CONFIGContent = default;
        private static bool _HEARTBEAT_INTERVAL_MS_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/clients/CommonClientConfigs.html#HEARTBEAT_INTERVAL_MS_DOC"/>
        /// </summary>
        public static Java.Lang.String HEARTBEAT_INTERVAL_MS_DOC { get { if (!_HEARTBEAT_INTERVAL_MS_DOCReady) { _HEARTBEAT_INTERVAL_MS_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "HEARTBEAT_INTERVAL_MS_DOC"); _HEARTBEAT_INTERVAL_MS_DOCReady = true; } return _HEARTBEAT_INTERVAL_MS_DOCContent; } }
        private static Java.Lang.String _HEARTBEAT_INTERVAL_MS_DOCContent = default;
        private static bool _HEARTBEAT_INTERVAL_MS_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/clients/CommonClientConfigs.html#MAX_POLL_INTERVAL_MS_CONFIG"/>
        /// </summary>
        public static Java.Lang.String MAX_POLL_INTERVAL_MS_CONFIG { get { if (!_MAX_POLL_INTERVAL_MS_CONFIGReady) { _MAX_POLL_INTERVAL_MS_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MAX_POLL_INTERVAL_MS_CONFIG"); _MAX_POLL_INTERVAL_MS_CONFIGReady = true; } return _MAX_POLL_INTERVAL_MS_CONFIGContent; } }
        private static Java.Lang.String _MAX_POLL_INTERVAL_MS_CONFIGContent = default;
        private static bool _MAX_POLL_INTERVAL_MS_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/clients/CommonClientConfigs.html#MAX_POLL_INTERVAL_MS_DOC"/>
        /// </summary>
        public static Java.Lang.String MAX_POLL_INTERVAL_MS_DOC { get { if (!_MAX_POLL_INTERVAL_MS_DOCReady) { _MAX_POLL_INTERVAL_MS_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MAX_POLL_INTERVAL_MS_DOC"); _MAX_POLL_INTERVAL_MS_DOCReady = true; } return _MAX_POLL_INTERVAL_MS_DOCContent; } }
        private static Java.Lang.String _MAX_POLL_INTERVAL_MS_DOCContent = default;
        private static bool _MAX_POLL_INTERVAL_MS_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/clients/CommonClientConfigs.html#METADATA_MAX_AGE_CONFIG"/>
        /// </summary>
        public static Java.Lang.String METADATA_MAX_AGE_CONFIG { get { if (!_METADATA_MAX_AGE_CONFIGReady) { _METADATA_MAX_AGE_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "METADATA_MAX_AGE_CONFIG"); _METADATA_MAX_AGE_CONFIGReady = true; } return _METADATA_MAX_AGE_CONFIGContent; } }
        private static Java.Lang.String _METADATA_MAX_AGE_CONFIGContent = default;
        private static bool _METADATA_MAX_AGE_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/clients/CommonClientConfigs.html#METADATA_MAX_AGE_DOC"/>
        /// </summary>
        public static Java.Lang.String METADATA_MAX_AGE_DOC { get { if (!_METADATA_MAX_AGE_DOCReady) { _METADATA_MAX_AGE_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "METADATA_MAX_AGE_DOC"); _METADATA_MAX_AGE_DOCReady = true; } return _METADATA_MAX_AGE_DOCContent; } }
        private static Java.Lang.String _METADATA_MAX_AGE_DOCContent = default;
        private static bool _METADATA_MAX_AGE_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/clients/CommonClientConfigs.html#METRIC_REPORTER_CLASSES_CONFIG"/>
        /// </summary>
        public static Java.Lang.String METRIC_REPORTER_CLASSES_CONFIG { get { if (!_METRIC_REPORTER_CLASSES_CONFIGReady) { _METRIC_REPORTER_CLASSES_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "METRIC_REPORTER_CLASSES_CONFIG"); _METRIC_REPORTER_CLASSES_CONFIGReady = true; } return _METRIC_REPORTER_CLASSES_CONFIGContent; } }
        private static Java.Lang.String _METRIC_REPORTER_CLASSES_CONFIGContent = default;
        private static bool _METRIC_REPORTER_CLASSES_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/clients/CommonClientConfigs.html#METRIC_REPORTER_CLASSES_DOC"/>
        /// </summary>
        public static Java.Lang.String METRIC_REPORTER_CLASSES_DOC { get { if (!_METRIC_REPORTER_CLASSES_DOCReady) { _METRIC_REPORTER_CLASSES_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "METRIC_REPORTER_CLASSES_DOC"); _METRIC_REPORTER_CLASSES_DOCReady = true; } return _METRIC_REPORTER_CLASSES_DOCContent; } }
        private static Java.Lang.String _METRIC_REPORTER_CLASSES_DOCContent = default;
        private static bool _METRIC_REPORTER_CLASSES_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/clients/CommonClientConfigs.html#METRICS_CONTEXT_PREFIX"/>
        /// </summary>
        public static Java.Lang.String METRICS_CONTEXT_PREFIX { get { if (!_METRICS_CONTEXT_PREFIXReady) { _METRICS_CONTEXT_PREFIXContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "METRICS_CONTEXT_PREFIX"); _METRICS_CONTEXT_PREFIXReady = true; } return _METRICS_CONTEXT_PREFIXContent; } }
        private static Java.Lang.String _METRICS_CONTEXT_PREFIXContent = default;
        private static bool _METRICS_CONTEXT_PREFIXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/clients/CommonClientConfigs.html#METRICS_NUM_SAMPLES_CONFIG"/>
        /// </summary>
        public static Java.Lang.String METRICS_NUM_SAMPLES_CONFIG { get { if (!_METRICS_NUM_SAMPLES_CONFIGReady) { _METRICS_NUM_SAMPLES_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "METRICS_NUM_SAMPLES_CONFIG"); _METRICS_NUM_SAMPLES_CONFIGReady = true; } return _METRICS_NUM_SAMPLES_CONFIGContent; } }
        private static Java.Lang.String _METRICS_NUM_SAMPLES_CONFIGContent = default;
        private static bool _METRICS_NUM_SAMPLES_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/clients/CommonClientConfigs.html#METRICS_NUM_SAMPLES_DOC"/>
        /// </summary>
        public static Java.Lang.String METRICS_NUM_SAMPLES_DOC { get { if (!_METRICS_NUM_SAMPLES_DOCReady) { _METRICS_NUM_SAMPLES_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "METRICS_NUM_SAMPLES_DOC"); _METRICS_NUM_SAMPLES_DOCReady = true; } return _METRICS_NUM_SAMPLES_DOCContent; } }
        private static Java.Lang.String _METRICS_NUM_SAMPLES_DOCContent = default;
        private static bool _METRICS_NUM_SAMPLES_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/clients/CommonClientConfigs.html#METRICS_RECORDING_LEVEL_CONFIG"/>
        /// </summary>
        public static Java.Lang.String METRICS_RECORDING_LEVEL_CONFIG { get { if (!_METRICS_RECORDING_LEVEL_CONFIGReady) { _METRICS_RECORDING_LEVEL_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "METRICS_RECORDING_LEVEL_CONFIG"); _METRICS_RECORDING_LEVEL_CONFIGReady = true; } return _METRICS_RECORDING_LEVEL_CONFIGContent; } }
        private static Java.Lang.String _METRICS_RECORDING_LEVEL_CONFIGContent = default;
        private static bool _METRICS_RECORDING_LEVEL_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/clients/CommonClientConfigs.html#METRICS_RECORDING_LEVEL_DOC"/>
        /// </summary>
        public static Java.Lang.String METRICS_RECORDING_LEVEL_DOC { get { if (!_METRICS_RECORDING_LEVEL_DOCReady) { _METRICS_RECORDING_LEVEL_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "METRICS_RECORDING_LEVEL_DOC"); _METRICS_RECORDING_LEVEL_DOCReady = true; } return _METRICS_RECORDING_LEVEL_DOCContent; } }
        private static Java.Lang.String _METRICS_RECORDING_LEVEL_DOCContent = default;
        private static bool _METRICS_RECORDING_LEVEL_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/clients/CommonClientConfigs.html#METRICS_SAMPLE_WINDOW_MS_CONFIG"/>
        /// </summary>
        public static Java.Lang.String METRICS_SAMPLE_WINDOW_MS_CONFIG { get { if (!_METRICS_SAMPLE_WINDOW_MS_CONFIGReady) { _METRICS_SAMPLE_WINDOW_MS_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "METRICS_SAMPLE_WINDOW_MS_CONFIG"); _METRICS_SAMPLE_WINDOW_MS_CONFIGReady = true; } return _METRICS_SAMPLE_WINDOW_MS_CONFIGContent; } }
        private static Java.Lang.String _METRICS_SAMPLE_WINDOW_MS_CONFIGContent = default;
        private static bool _METRICS_SAMPLE_WINDOW_MS_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/clients/CommonClientConfigs.html#METRICS_SAMPLE_WINDOW_MS_DOC"/>
        /// </summary>
        public static Java.Lang.String METRICS_SAMPLE_WINDOW_MS_DOC { get { if (!_METRICS_SAMPLE_WINDOW_MS_DOCReady) { _METRICS_SAMPLE_WINDOW_MS_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "METRICS_SAMPLE_WINDOW_MS_DOC"); _METRICS_SAMPLE_WINDOW_MS_DOCReady = true; } return _METRICS_SAMPLE_WINDOW_MS_DOCContent; } }
        private static Java.Lang.String _METRICS_SAMPLE_WINDOW_MS_DOCContent = default;
        private static bool _METRICS_SAMPLE_WINDOW_MS_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/clients/CommonClientConfigs.html#REBALANCE_TIMEOUT_MS_CONFIG"/>
        /// </summary>
        public static Java.Lang.String REBALANCE_TIMEOUT_MS_CONFIG { get { if (!_REBALANCE_TIMEOUT_MS_CONFIGReady) { _REBALANCE_TIMEOUT_MS_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "REBALANCE_TIMEOUT_MS_CONFIG"); _REBALANCE_TIMEOUT_MS_CONFIGReady = true; } return _REBALANCE_TIMEOUT_MS_CONFIGContent; } }
        private static Java.Lang.String _REBALANCE_TIMEOUT_MS_CONFIGContent = default;
        private static bool _REBALANCE_TIMEOUT_MS_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/clients/CommonClientConfigs.html#REBALANCE_TIMEOUT_MS_DOC"/>
        /// </summary>
        public static Java.Lang.String REBALANCE_TIMEOUT_MS_DOC { get { if (!_REBALANCE_TIMEOUT_MS_DOCReady) { _REBALANCE_TIMEOUT_MS_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "REBALANCE_TIMEOUT_MS_DOC"); _REBALANCE_TIMEOUT_MS_DOCReady = true; } return _REBALANCE_TIMEOUT_MS_DOCContent; } }
        private static Java.Lang.String _REBALANCE_TIMEOUT_MS_DOCContent = default;
        private static bool _REBALANCE_TIMEOUT_MS_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/clients/CommonClientConfigs.html#RECEIVE_BUFFER_CONFIG"/>
        /// </summary>
        public static Java.Lang.String RECEIVE_BUFFER_CONFIG { get { if (!_RECEIVE_BUFFER_CONFIGReady) { _RECEIVE_BUFFER_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "RECEIVE_BUFFER_CONFIG"); _RECEIVE_BUFFER_CONFIGReady = true; } return _RECEIVE_BUFFER_CONFIGContent; } }
        private static Java.Lang.String _RECEIVE_BUFFER_CONFIGContent = default;
        private static bool _RECEIVE_BUFFER_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/clients/CommonClientConfigs.html#RECEIVE_BUFFER_DOC"/>
        /// </summary>
        public static Java.Lang.String RECEIVE_BUFFER_DOC { get { if (!_RECEIVE_BUFFER_DOCReady) { _RECEIVE_BUFFER_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "RECEIVE_BUFFER_DOC"); _RECEIVE_BUFFER_DOCReady = true; } return _RECEIVE_BUFFER_DOCContent; } }
        private static Java.Lang.String _RECEIVE_BUFFER_DOCContent = default;
        private static bool _RECEIVE_BUFFER_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/clients/CommonClientConfigs.html#RECONNECT_BACKOFF_MAX_MS_CONFIG"/>
        /// </summary>
        public static Java.Lang.String RECONNECT_BACKOFF_MAX_MS_CONFIG { get { if (!_RECONNECT_BACKOFF_MAX_MS_CONFIGReady) { _RECONNECT_BACKOFF_MAX_MS_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "RECONNECT_BACKOFF_MAX_MS_CONFIG"); _RECONNECT_BACKOFF_MAX_MS_CONFIGReady = true; } return _RECONNECT_BACKOFF_MAX_MS_CONFIGContent; } }
        private static Java.Lang.String _RECONNECT_BACKOFF_MAX_MS_CONFIGContent = default;
        private static bool _RECONNECT_BACKOFF_MAX_MS_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/clients/CommonClientConfigs.html#RECONNECT_BACKOFF_MAX_MS_DOC"/>
        /// </summary>
        public static Java.Lang.String RECONNECT_BACKOFF_MAX_MS_DOC { get { if (!_RECONNECT_BACKOFF_MAX_MS_DOCReady) { _RECONNECT_BACKOFF_MAX_MS_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "RECONNECT_BACKOFF_MAX_MS_DOC"); _RECONNECT_BACKOFF_MAX_MS_DOCReady = true; } return _RECONNECT_BACKOFF_MAX_MS_DOCContent; } }
        private static Java.Lang.String _RECONNECT_BACKOFF_MAX_MS_DOCContent = default;
        private static bool _RECONNECT_BACKOFF_MAX_MS_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/clients/CommonClientConfigs.html#RECONNECT_BACKOFF_MS_CONFIG"/>
        /// </summary>
        public static Java.Lang.String RECONNECT_BACKOFF_MS_CONFIG { get { if (!_RECONNECT_BACKOFF_MS_CONFIGReady) { _RECONNECT_BACKOFF_MS_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "RECONNECT_BACKOFF_MS_CONFIG"); _RECONNECT_BACKOFF_MS_CONFIGReady = true; } return _RECONNECT_BACKOFF_MS_CONFIGContent; } }
        private static Java.Lang.String _RECONNECT_BACKOFF_MS_CONFIGContent = default;
        private static bool _RECONNECT_BACKOFF_MS_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/clients/CommonClientConfigs.html#RECONNECT_BACKOFF_MS_DOC"/>
        /// </summary>
        public static Java.Lang.String RECONNECT_BACKOFF_MS_DOC { get { if (!_RECONNECT_BACKOFF_MS_DOCReady) { _RECONNECT_BACKOFF_MS_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "RECONNECT_BACKOFF_MS_DOC"); _RECONNECT_BACKOFF_MS_DOCReady = true; } return _RECONNECT_BACKOFF_MS_DOCContent; } }
        private static Java.Lang.String _RECONNECT_BACKOFF_MS_DOCContent = default;
        private static bool _RECONNECT_BACKOFF_MS_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/clients/CommonClientConfigs.html#REQUEST_TIMEOUT_MS_CONFIG"/>
        /// </summary>
        public static Java.Lang.String REQUEST_TIMEOUT_MS_CONFIG { get { if (!_REQUEST_TIMEOUT_MS_CONFIGReady) { _REQUEST_TIMEOUT_MS_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "REQUEST_TIMEOUT_MS_CONFIG"); _REQUEST_TIMEOUT_MS_CONFIGReady = true; } return _REQUEST_TIMEOUT_MS_CONFIGContent; } }
        private static Java.Lang.String _REQUEST_TIMEOUT_MS_CONFIGContent = default;
        private static bool _REQUEST_TIMEOUT_MS_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/clients/CommonClientConfigs.html#REQUEST_TIMEOUT_MS_DOC"/>
        /// </summary>
        public static Java.Lang.String REQUEST_TIMEOUT_MS_DOC { get { if (!_REQUEST_TIMEOUT_MS_DOCReady) { _REQUEST_TIMEOUT_MS_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "REQUEST_TIMEOUT_MS_DOC"); _REQUEST_TIMEOUT_MS_DOCReady = true; } return _REQUEST_TIMEOUT_MS_DOCContent; } }
        private static Java.Lang.String _REQUEST_TIMEOUT_MS_DOCContent = default;
        private static bool _REQUEST_TIMEOUT_MS_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/clients/CommonClientConfigs.html#RETRIES_CONFIG"/>
        /// </summary>
        public static Java.Lang.String RETRIES_CONFIG { get { if (!_RETRIES_CONFIGReady) { _RETRIES_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "RETRIES_CONFIG"); _RETRIES_CONFIGReady = true; } return _RETRIES_CONFIGContent; } }
        private static Java.Lang.String _RETRIES_CONFIGContent = default;
        private static bool _RETRIES_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/clients/CommonClientConfigs.html#RETRIES_DOC"/>
        /// </summary>
        public static Java.Lang.String RETRIES_DOC { get { if (!_RETRIES_DOCReady) { _RETRIES_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "RETRIES_DOC"); _RETRIES_DOCReady = true; } return _RETRIES_DOCContent; } }
        private static Java.Lang.String _RETRIES_DOCContent = default;
        private static bool _RETRIES_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/clients/CommonClientConfigs.html#RETRY_BACKOFF_MAX_MS_CONFIG"/>
        /// </summary>
        public static Java.Lang.String RETRY_BACKOFF_MAX_MS_CONFIG { get { if (!_RETRY_BACKOFF_MAX_MS_CONFIGReady) { _RETRY_BACKOFF_MAX_MS_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "RETRY_BACKOFF_MAX_MS_CONFIG"); _RETRY_BACKOFF_MAX_MS_CONFIGReady = true; } return _RETRY_BACKOFF_MAX_MS_CONFIGContent; } }
        private static Java.Lang.String _RETRY_BACKOFF_MAX_MS_CONFIGContent = default;
        private static bool _RETRY_BACKOFF_MAX_MS_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/clients/CommonClientConfigs.html#RETRY_BACKOFF_MAX_MS_DOC"/>
        /// </summary>
        public static Java.Lang.String RETRY_BACKOFF_MAX_MS_DOC { get { if (!_RETRY_BACKOFF_MAX_MS_DOCReady) { _RETRY_BACKOFF_MAX_MS_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "RETRY_BACKOFF_MAX_MS_DOC"); _RETRY_BACKOFF_MAX_MS_DOCReady = true; } return _RETRY_BACKOFF_MAX_MS_DOCContent; } }
        private static Java.Lang.String _RETRY_BACKOFF_MAX_MS_DOCContent = default;
        private static bool _RETRY_BACKOFF_MAX_MS_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/clients/CommonClientConfigs.html#RETRY_BACKOFF_MS_CONFIG"/>
        /// </summary>
        public static Java.Lang.String RETRY_BACKOFF_MS_CONFIG { get { if (!_RETRY_BACKOFF_MS_CONFIGReady) { _RETRY_BACKOFF_MS_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "RETRY_BACKOFF_MS_CONFIG"); _RETRY_BACKOFF_MS_CONFIGReady = true; } return _RETRY_BACKOFF_MS_CONFIGContent; } }
        private static Java.Lang.String _RETRY_BACKOFF_MS_CONFIGContent = default;
        private static bool _RETRY_BACKOFF_MS_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/clients/CommonClientConfigs.html#RETRY_BACKOFF_MS_DOC"/>
        /// </summary>
        public static Java.Lang.String RETRY_BACKOFF_MS_DOC { get { if (!_RETRY_BACKOFF_MS_DOCReady) { _RETRY_BACKOFF_MS_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "RETRY_BACKOFF_MS_DOC"); _RETRY_BACKOFF_MS_DOCReady = true; } return _RETRY_BACKOFF_MS_DOCContent; } }
        private static Java.Lang.String _RETRY_BACKOFF_MS_DOCContent = default;
        private static bool _RETRY_BACKOFF_MS_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/clients/CommonClientConfigs.html#SECURITY_PROTOCOL_CONFIG"/>
        /// </summary>
        public static Java.Lang.String SECURITY_PROTOCOL_CONFIG { get { if (!_SECURITY_PROTOCOL_CONFIGReady) { _SECURITY_PROTOCOL_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SECURITY_PROTOCOL_CONFIG"); _SECURITY_PROTOCOL_CONFIGReady = true; } return _SECURITY_PROTOCOL_CONFIGContent; } }
        private static Java.Lang.String _SECURITY_PROTOCOL_CONFIGContent = default;
        private static bool _SECURITY_PROTOCOL_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/clients/CommonClientConfigs.html#SECURITY_PROTOCOL_DOC"/>
        /// </summary>
        public static Java.Lang.String SECURITY_PROTOCOL_DOC { get { if (!_SECURITY_PROTOCOL_DOCReady) { _SECURITY_PROTOCOL_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SECURITY_PROTOCOL_DOC"); _SECURITY_PROTOCOL_DOCReady = true; } return _SECURITY_PROTOCOL_DOCContent; } }
        private static Java.Lang.String _SECURITY_PROTOCOL_DOCContent = default;
        private static bool _SECURITY_PROTOCOL_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/clients/CommonClientConfigs.html#SEND_BUFFER_CONFIG"/>
        /// </summary>
        public static Java.Lang.String SEND_BUFFER_CONFIG { get { if (!_SEND_BUFFER_CONFIGReady) { _SEND_BUFFER_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SEND_BUFFER_CONFIG"); _SEND_BUFFER_CONFIGReady = true; } return _SEND_BUFFER_CONFIGContent; } }
        private static Java.Lang.String _SEND_BUFFER_CONFIGContent = default;
        private static bool _SEND_BUFFER_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/clients/CommonClientConfigs.html#SEND_BUFFER_DOC"/>
        /// </summary>
        public static Java.Lang.String SEND_BUFFER_DOC { get { if (!_SEND_BUFFER_DOCReady) { _SEND_BUFFER_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SEND_BUFFER_DOC"); _SEND_BUFFER_DOCReady = true; } return _SEND_BUFFER_DOCContent; } }
        private static Java.Lang.String _SEND_BUFFER_DOCContent = default;
        private static bool _SEND_BUFFER_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/clients/CommonClientConfigs.html#SESSION_TIMEOUT_MS_CONFIG"/>
        /// </summary>
        public static Java.Lang.String SESSION_TIMEOUT_MS_CONFIG { get { if (!_SESSION_TIMEOUT_MS_CONFIGReady) { _SESSION_TIMEOUT_MS_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SESSION_TIMEOUT_MS_CONFIG"); _SESSION_TIMEOUT_MS_CONFIGReady = true; } return _SESSION_TIMEOUT_MS_CONFIGContent; } }
        private static Java.Lang.String _SESSION_TIMEOUT_MS_CONFIGContent = default;
        private static bool _SESSION_TIMEOUT_MS_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/clients/CommonClientConfigs.html#SESSION_TIMEOUT_MS_DOC"/>
        /// </summary>
        public static Java.Lang.String SESSION_TIMEOUT_MS_DOC { get { if (!_SESSION_TIMEOUT_MS_DOCReady) { _SESSION_TIMEOUT_MS_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SESSION_TIMEOUT_MS_DOC"); _SESSION_TIMEOUT_MS_DOCReady = true; } return _SESSION_TIMEOUT_MS_DOCContent; } }
        private static Java.Lang.String _SESSION_TIMEOUT_MS_DOCContent = default;
        private static bool _SESSION_TIMEOUT_MS_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/clients/CommonClientConfigs.html#SOCKET_CONNECTION_SETUP_TIMEOUT_MAX_MS_CONFIG"/>
        /// </summary>
        public static Java.Lang.String SOCKET_CONNECTION_SETUP_TIMEOUT_MAX_MS_CONFIG { get { if (!_SOCKET_CONNECTION_SETUP_TIMEOUT_MAX_MS_CONFIGReady) { _SOCKET_CONNECTION_SETUP_TIMEOUT_MAX_MS_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SOCKET_CONNECTION_SETUP_TIMEOUT_MAX_MS_CONFIG"); _SOCKET_CONNECTION_SETUP_TIMEOUT_MAX_MS_CONFIGReady = true; } return _SOCKET_CONNECTION_SETUP_TIMEOUT_MAX_MS_CONFIGContent; } }
        private static Java.Lang.String _SOCKET_CONNECTION_SETUP_TIMEOUT_MAX_MS_CONFIGContent = default;
        private static bool _SOCKET_CONNECTION_SETUP_TIMEOUT_MAX_MS_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/clients/CommonClientConfigs.html#SOCKET_CONNECTION_SETUP_TIMEOUT_MAX_MS_DOC"/>
        /// </summary>
        public static Java.Lang.String SOCKET_CONNECTION_SETUP_TIMEOUT_MAX_MS_DOC { get { if (!_SOCKET_CONNECTION_SETUP_TIMEOUT_MAX_MS_DOCReady) { _SOCKET_CONNECTION_SETUP_TIMEOUT_MAX_MS_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SOCKET_CONNECTION_SETUP_TIMEOUT_MAX_MS_DOC"); _SOCKET_CONNECTION_SETUP_TIMEOUT_MAX_MS_DOCReady = true; } return _SOCKET_CONNECTION_SETUP_TIMEOUT_MAX_MS_DOCContent; } }
        private static Java.Lang.String _SOCKET_CONNECTION_SETUP_TIMEOUT_MAX_MS_DOCContent = default;
        private static bool _SOCKET_CONNECTION_SETUP_TIMEOUT_MAX_MS_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/clients/CommonClientConfigs.html#SOCKET_CONNECTION_SETUP_TIMEOUT_MS_CONFIG"/>
        /// </summary>
        public static Java.Lang.String SOCKET_CONNECTION_SETUP_TIMEOUT_MS_CONFIG { get { if (!_SOCKET_CONNECTION_SETUP_TIMEOUT_MS_CONFIGReady) { _SOCKET_CONNECTION_SETUP_TIMEOUT_MS_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SOCKET_CONNECTION_SETUP_TIMEOUT_MS_CONFIG"); _SOCKET_CONNECTION_SETUP_TIMEOUT_MS_CONFIGReady = true; } return _SOCKET_CONNECTION_SETUP_TIMEOUT_MS_CONFIGContent; } }
        private static Java.Lang.String _SOCKET_CONNECTION_SETUP_TIMEOUT_MS_CONFIGContent = default;
        private static bool _SOCKET_CONNECTION_SETUP_TIMEOUT_MS_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/clients/CommonClientConfigs.html#SOCKET_CONNECTION_SETUP_TIMEOUT_MS_DOC"/>
        /// </summary>
        public static Java.Lang.String SOCKET_CONNECTION_SETUP_TIMEOUT_MS_DOC { get { if (!_SOCKET_CONNECTION_SETUP_TIMEOUT_MS_DOCReady) { _SOCKET_CONNECTION_SETUP_TIMEOUT_MS_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SOCKET_CONNECTION_SETUP_TIMEOUT_MS_DOC"); _SOCKET_CONNECTION_SETUP_TIMEOUT_MS_DOCReady = true; } return _SOCKET_CONNECTION_SETUP_TIMEOUT_MS_DOCContent; } }
        private static Java.Lang.String _SOCKET_CONNECTION_SETUP_TIMEOUT_MS_DOCContent = default;
        private static bool _SOCKET_CONNECTION_SETUP_TIMEOUT_MS_DOCReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/clients/CommonClientConfigs.html#metricsReporters-java.lang.String-org.apache.kafka.common.config.AbstractConfig-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Common.Config.AbstractConfig"/></param>
        /// <returns><see cref="Java.Util.List"/></returns>
        public static Java.Util.List<Org.Apache.Kafka.Common.Metrics.MetricsReporter> MetricsReporters(Java.Lang.String arg0, Org.Apache.Kafka.Common.Config.AbstractConfig arg1)
        {
            return SExecute<Java.Util.List<Org.Apache.Kafka.Common.Metrics.MetricsReporter>>(LocalBridgeClazz, "metricsReporters", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/clients/CommonClientConfigs.html#metricsReporters-java.util.Map-org.apache.kafka.common.config.AbstractConfig-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Map"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Common.Config.AbstractConfig"/></param>
        /// <returns><see cref="Java.Util.List"/></returns>
        public static Java.Util.List<Org.Apache.Kafka.Common.Metrics.MetricsReporter> MetricsReporters(Java.Util.Map<Java.Lang.String, object> arg0, Org.Apache.Kafka.Common.Config.AbstractConfig arg1)
        {
            return SExecute<Java.Util.List<Org.Apache.Kafka.Common.Metrics.MetricsReporter>>(LocalBridgeClazz, "metricsReporters", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/clients/CommonClientConfigs.html#metricsReporters-org.apache.kafka.common.config.AbstractConfig-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Config.AbstractConfig"/></param>
        /// <returns><see cref="Java.Util.List"/></returns>
        public static Java.Util.List<Org.Apache.Kafka.Common.Metrics.MetricsReporter> MetricsReporters(Org.Apache.Kafka.Common.Config.AbstractConfig arg0)
        {
            return SExecuteWithSignature<Java.Util.List<Org.Apache.Kafka.Common.Metrics.MetricsReporter>>(LocalBridgeClazz, "metricsReporters", "(Lorg/apache/kafka/common/config/AbstractConfig;)Ljava/util/List;", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/clients/CommonClientConfigs.html#postProcessReconnectBackoffConfigs-org.apache.kafka.common.config.AbstractConfig-java.util.Map-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Config.AbstractConfig"/></param>
        /// <param name="arg1"><see cref="Java.Util.Map"/></param>
        /// <returns><see cref="Java.Util.Map"/></returns>
        public static Java.Util.Map<Java.Lang.String, object> PostProcessReconnectBackoffConfigs(Org.Apache.Kafka.Common.Config.AbstractConfig arg0, Java.Util.Map<Java.Lang.String, object> arg1)
        {
            return SExecute<Java.Util.Map<Java.Lang.String, object>>(LocalBridgeClazz, "postProcessReconnectBackoffConfigs", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/clients/CommonClientConfigs.html#postValidateSaslMechanismConfig-org.apache.kafka.common.config.AbstractConfig-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Config.AbstractConfig"/></param>
        public static void PostValidateSaslMechanismConfig(Org.Apache.Kafka.Common.Config.AbstractConfig arg0)
        {
            SExecuteWithSignature(LocalBridgeClazz, "postValidateSaslMechanismConfig", "(Lorg/apache/kafka/common/config/AbstractConfig;)V", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/clients/CommonClientConfigs.html#warnDisablingExponentialBackoff-org.apache.kafka.common.config.AbstractConfig-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Config.AbstractConfig"/></param>
        public static void WarnDisablingExponentialBackoff(Org.Apache.Kafka.Common.Config.AbstractConfig arg0)
        {
            SExecuteWithSignature(LocalBridgeClazz, "warnDisablingExponentialBackoff", "(Lorg/apache/kafka/common/config/AbstractConfig;)V", arg0);
        }

        #endregion

        #region Instance methods

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}