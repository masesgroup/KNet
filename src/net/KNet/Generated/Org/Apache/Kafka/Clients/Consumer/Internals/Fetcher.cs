/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka-clients-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Clients.Consumer.Internals
{
    #region Fetcher
    public partial class Fetcher
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/consumer/internals/Fetcher.html#%3Cinit%3E(org.apache.kafka.common.utils.LogContext,org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient,int,int,int,int,int,boolean,java.lang.String,org.apache.kafka.common.serialization.Deserializer,org.apache.kafka.common.serialization.Deserializer,org.apache.kafka.clients.consumer.internals.ConsumerMetadata,org.apache.kafka.clients.consumer.internals.SubscriptionState,org.apache.kafka.common.metrics.Metrics,org.apache.kafka.clients.consumer.internals.FetcherMetricsRegistry,org.apache.kafka.common.utils.Time,long,long,org.apache.kafka.common.IsolationLevel,org.apache.kafka.clients.ApiVersions)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Utils.LogContext"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Clients.Consumer.Internals.ConsumerNetworkClient"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        /// <param name="arg6"><see cref="int"/></param>
        /// <param name="arg7"><see cref="bool"/></param>
        /// <param name="arg8"><see cref="string"/></param>
        /// <param name="arg9"><see cref="Org.Apache.Kafka.Common.Serialization.Deserializer"/></param>
        /// <param name="arg10"><see cref="Org.Apache.Kafka.Common.Serialization.Deserializer"/></param>
        /// <param name="arg11"><see cref="Org.Apache.Kafka.Clients.Consumer.Internals.ConsumerMetadata"/></param>
        /// <param name="arg12"><see cref="Org.Apache.Kafka.Clients.Consumer.Internals.SubscriptionState"/></param>
        /// <param name="arg13"><see cref="Org.Apache.Kafka.Common.Metrics.Metrics"/></param>
        /// <param name="arg14"><see cref="Org.Apache.Kafka.Clients.Consumer.Internals.FetcherMetricsRegistry"/></param>
        /// <param name="arg15"><see cref="Org.Apache.Kafka.Common.Utils.Time"/></param>
        /// <param name="arg16"><see cref="long"/></param>
        /// <param name="arg17"><see cref="long"/></param>
        /// <param name="arg18"><see cref="Org.Apache.Kafka.Common.IsolationLevel"/></param>
        /// <param name="arg19"><see cref="Org.Apache.Kafka.Clients.ApiVersions"/></param>
        public Fetcher(Org.Apache.Kafka.Common.Utils.LogContext arg0, Org.Apache.Kafka.Clients.Consumer.Internals.ConsumerNetworkClient arg1, int arg2, int arg3, int arg4, int arg5, int arg6, bool arg7, string arg8, Org.Apache.Kafka.Common.Serialization.Deserializer arg9, Org.Apache.Kafka.Common.Serialization.Deserializer arg10, Org.Apache.Kafka.Clients.Consumer.Internals.ConsumerMetadata arg11, Org.Apache.Kafka.Clients.Consumer.Internals.SubscriptionState arg12, Org.Apache.Kafka.Common.Metrics.Metrics arg13, Org.Apache.Kafka.Clients.Consumer.Internals.FetcherMetricsRegistry arg14, Org.Apache.Kafka.Common.Utils.Time arg15, long arg16, long arg17, Org.Apache.Kafka.Common.IsolationLevel arg18, Org.Apache.Kafka.Clients.ApiVersions arg19)
            : base(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19)
        {
        }

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Org.Apache.Kafka.Clients.Consumer.Internals.Fetcher"/> to <see cref="Java.Io.Closeable"/>
        /// </summary>
        public static implicit operator Java.Io.Closeable(Org.Apache.Kafka.Clients.Consumer.Internals.Fetcher t) => t.Cast<Java.Io.Closeable>();

        #endregion

        #region Fields

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/consumer/internals/Fetcher.html#throttleTimeSensor(org.apache.kafka.common.metrics.Metrics,org.apache.kafka.clients.consumer.internals.FetcherMetricsRegistry)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Metrics.Metrics"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Clients.Consumer.Internals.FetcherMetricsRegistry"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Metrics.Sensor"/></returns>
        public static Org.Apache.Kafka.Common.Metrics.Sensor ThrottleTimeSensor(Org.Apache.Kafka.Common.Metrics.Metrics arg0, Org.Apache.Kafka.Clients.Consumer.Internals.FetcherMetricsRegistry arg1)
        {
            return SExecute<Org.Apache.Kafka.Common.Metrics.Sensor>(LocalBridgeClazz, "throttleTimeSensor", arg0, arg1);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/consumer/internals/Fetcher.html#collectFetch()"/> 
        /// </summary>
        public Org.Apache.Kafka.Clients.Consumer.Internals.Fetch CollectFetch
        {
            get { return IExecute<Org.Apache.Kafka.Clients.Consumer.Internals.Fetch>("collectFetch"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/consumer/internals/Fetcher.html#hasAvailableFetches()"/> 
        /// </summary>
        public bool HasAvailableFetches
        {
            get { return IExecute<bool>("hasAvailableFetches"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/consumer/internals/Fetcher.html#sendFetches()"/> 
        /// </summary>
        public int SendFetches
        {
            get { return IExecute<int>("sendFetches"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/consumer/internals/Fetcher.html#getAllTopicMetadata(org.apache.kafka.common.utils.Timer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Utils.Timer"/></param>
        /// <returns><see cref="Java.Util.Map"/></returns>
        public Java.Util.Map GetAllTopicMetadata(Org.Apache.Kafka.Common.Utils.Timer arg0)
        {
            return IExecute<Java.Util.Map>("getAllTopicMetadata", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/consumer/internals/Fetcher.html#getTopicMetadata(org.apache.kafka.common.requests.MetadataRequest.Builder,org.apache.kafka.common.utils.Timer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Requests.MetadataRequest.Builder"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Common.Utils.Timer"/></param>
        /// <returns><see cref="Java.Util.Map"/></returns>
        public Java.Util.Map GetTopicMetadata(Org.Apache.Kafka.Common.Requests.MetadataRequest.Builder arg0, Org.Apache.Kafka.Common.Utils.Timer arg1)
        {
            return IExecute<Java.Util.Map>("getTopicMetadata", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/consumer/internals/Fetcher.html#beginningOffsets(java.util.Collection,org.apache.kafka.common.utils.Timer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Collection"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Common.Utils.Timer"/></param>
        /// <returns><see cref="Java.Util.Map"/></returns>
        public Java.Util.Map BeginningOffsets(Java.Util.Collection arg0, Org.Apache.Kafka.Common.Utils.Timer arg1)
        {
            return IExecute<Java.Util.Map>("beginningOffsets", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/consumer/internals/Fetcher.html#endOffsets(java.util.Collection,org.apache.kafka.common.utils.Timer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Collection"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Common.Utils.Timer"/></param>
        /// <returns><see cref="Java.Util.Map"/></returns>
        public Java.Util.Map EndOffsets(Java.Util.Collection arg0, Org.Apache.Kafka.Common.Utils.Timer arg1)
        {
            return IExecute<Java.Util.Map>("endOffsets", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/consumer/internals/Fetcher.html#offsetsForTimes(java.util.Map,org.apache.kafka.common.utils.Timer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Map"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Common.Utils.Timer"/></param>
        /// <returns><see cref="Java.Util.Map"/></returns>
        public Java.Util.Map OffsetsForTimes(Java.Util.Map arg0, Org.Apache.Kafka.Common.Utils.Timer arg1)
        {
            return IExecute<Java.Util.Map>("offsetsForTimes", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/consumer/internals/Fetcher.html#clearBufferedDataForUnassignedPartitions(java.util.Collection)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Collection"/></param>
        public void ClearBufferedDataForUnassignedPartitions(Java.Util.Collection arg0)
        {
            IExecute("clearBufferedDataForUnassignedPartitions", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/consumer/internals/Fetcher.html#clearBufferedDataForUnassignedTopics(java.util.Collection)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Collection"/></param>
        public void ClearBufferedDataForUnassignedTopics(Java.Util.Collection arg0)
        {
            IExecute("clearBufferedDataForUnassignedTopics", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/consumer/internals/Fetcher.html#close()"/>
        /// </summary>
        public void Close()
        {
            IExecute("close");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/consumer/internals/Fetcher.html#resetOffsetsIfNeeded()"/>
        /// </summary>
        public void ResetOffsetsIfNeeded()
        {
            IExecute("resetOffsetsIfNeeded");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/consumer/internals/Fetcher.html#validateOffsetsIfNeeded()"/>
        /// </summary>
        public void ValidateOffsetsIfNeeded()
        {
            IExecute("validateOffsetsIfNeeded");
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion

    #region Fetcher<K, V>
    public partial class Fetcher<K, V>
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/consumer/internals/Fetcher.html#%3Cinit%3E(org.apache.kafka.common.utils.LogContext,org.apache.kafka.clients.consumer.internals.ConsumerNetworkClient,int,int,int,int,int,boolean,java.lang.String,org.apache.kafka.common.serialization.Deserializer,org.apache.kafka.common.serialization.Deserializer,org.apache.kafka.clients.consumer.internals.ConsumerMetadata,org.apache.kafka.clients.consumer.internals.SubscriptionState,org.apache.kafka.common.metrics.Metrics,org.apache.kafka.clients.consumer.internals.FetcherMetricsRegistry,org.apache.kafka.common.utils.Time,long,long,org.apache.kafka.common.IsolationLevel,org.apache.kafka.clients.ApiVersions)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Utils.LogContext"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Clients.Consumer.Internals.ConsumerNetworkClient"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        /// <param name="arg6"><see cref="int"/></param>
        /// <param name="arg7"><see cref="bool"/></param>
        /// <param name="arg8"><see cref="string"/></param>
        /// <param name="arg9"><see cref="Org.Apache.Kafka.Common.Serialization.Deserializer"/></param>
        /// <param name="arg10"><see cref="Org.Apache.Kafka.Common.Serialization.Deserializer"/></param>
        /// <param name="arg11"><see cref="Org.Apache.Kafka.Clients.Consumer.Internals.ConsumerMetadata"/></param>
        /// <param name="arg12"><see cref="Org.Apache.Kafka.Clients.Consumer.Internals.SubscriptionState"/></param>
        /// <param name="arg13"><see cref="Org.Apache.Kafka.Common.Metrics.Metrics"/></param>
        /// <param name="arg14"><see cref="Org.Apache.Kafka.Clients.Consumer.Internals.FetcherMetricsRegistry"/></param>
        /// <param name="arg15"><see cref="Org.Apache.Kafka.Common.Utils.Time"/></param>
        /// <param name="arg16"><see cref="long"/></param>
        /// <param name="arg17"><see cref="long"/></param>
        /// <param name="arg18"><see cref="Org.Apache.Kafka.Common.IsolationLevel"/></param>
        /// <param name="arg19"><see cref="Org.Apache.Kafka.Clients.ApiVersions"/></param>
        public Fetcher(Org.Apache.Kafka.Common.Utils.LogContext arg0, Org.Apache.Kafka.Clients.Consumer.Internals.ConsumerNetworkClient arg1, int arg2, int arg3, int arg4, int arg5, int arg6, bool arg7, string arg8, Org.Apache.Kafka.Common.Serialization.Deserializer<K> arg9, Org.Apache.Kafka.Common.Serialization.Deserializer<V> arg10, Org.Apache.Kafka.Clients.Consumer.Internals.ConsumerMetadata arg11, Org.Apache.Kafka.Clients.Consumer.Internals.SubscriptionState arg12, Org.Apache.Kafka.Common.Metrics.Metrics arg13, Org.Apache.Kafka.Clients.Consumer.Internals.FetcherMetricsRegistry arg14, Org.Apache.Kafka.Common.Utils.Time arg15, long arg16, long arg17, Org.Apache.Kafka.Common.IsolationLevel arg18, Org.Apache.Kafka.Clients.ApiVersions arg19)
            : base(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19)
        {
        }

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Org.Apache.Kafka.Clients.Consumer.Internals.Fetcher{K, V}"/> to <see cref="Java.Io.Closeable"/>
        /// </summary>
        public static implicit operator Java.Io.Closeable(Org.Apache.Kafka.Clients.Consumer.Internals.Fetcher<K, V> t) => t.Cast<Java.Io.Closeable>();
        /// <summary>
        /// Converter from <see cref="Org.Apache.Kafka.Clients.Consumer.Internals.Fetcher{K, V}"/> to <see cref="Org.Apache.Kafka.Clients.Consumer.Internals.Fetcher"/>
        /// </summary>
        public static implicit operator Org.Apache.Kafka.Clients.Consumer.Internals.Fetcher(Org.Apache.Kafka.Clients.Consumer.Internals.Fetcher<K, V> t) => t.Cast<Org.Apache.Kafka.Clients.Consumer.Internals.Fetcher>();

        #endregion

        #region Fields

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/consumer/internals/Fetcher.html#throttleTimeSensor(org.apache.kafka.common.metrics.Metrics,org.apache.kafka.clients.consumer.internals.FetcherMetricsRegistry)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Metrics.Metrics"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Clients.Consumer.Internals.FetcherMetricsRegistry"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Metrics.Sensor"/></returns>
        public static Org.Apache.Kafka.Common.Metrics.Sensor ThrottleTimeSensor(Org.Apache.Kafka.Common.Metrics.Metrics arg0, Org.Apache.Kafka.Clients.Consumer.Internals.FetcherMetricsRegistry arg1)
        {
            return SExecute<Org.Apache.Kafka.Common.Metrics.Sensor>(LocalBridgeClazz, "throttleTimeSensor", arg0, arg1);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/consumer/internals/Fetcher.html#collectFetch()"/> 
        /// </summary>
        public Org.Apache.Kafka.Clients.Consumer.Internals.Fetch<K, V> CollectFetch
        {
            get { return IExecute<Org.Apache.Kafka.Clients.Consumer.Internals.Fetch<K, V>>("collectFetch"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/consumer/internals/Fetcher.html#hasAvailableFetches()"/> 
        /// </summary>
        public bool HasAvailableFetches
        {
            get { return IExecute<bool>("hasAvailableFetches"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/consumer/internals/Fetcher.html#sendFetches()"/> 
        /// </summary>
        public int SendFetches
        {
            get { return IExecute<int>("sendFetches"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/consumer/internals/Fetcher.html#getAllTopicMetadata(org.apache.kafka.common.utils.Timer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Utils.Timer"/></param>
        /// <returns><see cref="Java.Util.Map"/></returns>
        public Java.Util.Map<string, Java.Util.List<Org.Apache.Kafka.Common.PartitionInfo>> GetAllTopicMetadata(Org.Apache.Kafka.Common.Utils.Timer arg0)
        {
            return IExecute<Java.Util.Map<string, Java.Util.List<Org.Apache.Kafka.Common.PartitionInfo>>>("getAllTopicMetadata", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/consumer/internals/Fetcher.html#getTopicMetadata(org.apache.kafka.common.requests.MetadataRequest.Builder,org.apache.kafka.common.utils.Timer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Requests.MetadataRequest.Builder"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Common.Utils.Timer"/></param>
        /// <returns><see cref="Java.Util.Map"/></returns>
        public Java.Util.Map<string, Java.Util.List<Org.Apache.Kafka.Common.PartitionInfo>> GetTopicMetadata(Org.Apache.Kafka.Common.Requests.MetadataRequest.Builder arg0, Org.Apache.Kafka.Common.Utils.Timer arg1)
        {
            return IExecute<Java.Util.Map<string, Java.Util.List<Org.Apache.Kafka.Common.PartitionInfo>>>("getTopicMetadata", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/consumer/internals/Fetcher.html#beginningOffsets(java.util.Collection,org.apache.kafka.common.utils.Timer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Collection"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Common.Utils.Timer"/></param>
        /// <returns><see cref="Java.Util.Map"/></returns>
        public Java.Util.Map<Org.Apache.Kafka.Common.TopicPartition, long?> BeginningOffsets(Java.Util.Collection<Org.Apache.Kafka.Common.TopicPartition> arg0, Org.Apache.Kafka.Common.Utils.Timer arg1)
        {
            return IExecute<Java.Util.Map<Org.Apache.Kafka.Common.TopicPartition, long?>>("beginningOffsets", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/consumer/internals/Fetcher.html#endOffsets(java.util.Collection,org.apache.kafka.common.utils.Timer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Collection"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Common.Utils.Timer"/></param>
        /// <returns><see cref="Java.Util.Map"/></returns>
        public Java.Util.Map<Org.Apache.Kafka.Common.TopicPartition, long?> EndOffsets(Java.Util.Collection<Org.Apache.Kafka.Common.TopicPartition> arg0, Org.Apache.Kafka.Common.Utils.Timer arg1)
        {
            return IExecute<Java.Util.Map<Org.Apache.Kafka.Common.TopicPartition, long?>>("endOffsets", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/consumer/internals/Fetcher.html#offsetsForTimes(java.util.Map,org.apache.kafka.common.utils.Timer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Map"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Common.Utils.Timer"/></param>
        /// <returns><see cref="Java.Util.Map"/></returns>
        public Java.Util.Map<Org.Apache.Kafka.Common.TopicPartition, Org.Apache.Kafka.Clients.Consumer.OffsetAndTimestamp> OffsetsForTimes(Java.Util.Map<Org.Apache.Kafka.Common.TopicPartition, long?> arg0, Org.Apache.Kafka.Common.Utils.Timer arg1)
        {
            return IExecute<Java.Util.Map<Org.Apache.Kafka.Common.TopicPartition, Org.Apache.Kafka.Clients.Consumer.OffsetAndTimestamp>>("offsetsForTimes", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/consumer/internals/Fetcher.html#clearBufferedDataForUnassignedPartitions(java.util.Collection)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Collection"/></param>
        public void ClearBufferedDataForUnassignedPartitions(Java.Util.Collection<Org.Apache.Kafka.Common.TopicPartition> arg0)
        {
            IExecute("clearBufferedDataForUnassignedPartitions", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/consumer/internals/Fetcher.html#clearBufferedDataForUnassignedTopics(java.util.Collection)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Collection"/></param>
        public void ClearBufferedDataForUnassignedTopics(Java.Util.Collection<string> arg0)
        {
            IExecute("clearBufferedDataForUnassignedTopics", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/consumer/internals/Fetcher.html#close()"/>
        /// </summary>
        public void Close()
        {
            IExecute("close");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/consumer/internals/Fetcher.html#resetOffsetsIfNeeded()"/>
        /// </summary>
        public void ResetOffsetsIfNeeded()
        {
            IExecute("resetOffsetsIfNeeded");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/clients/consumer/internals/Fetcher.html#validateOffsetsIfNeeded()"/>
        /// </summary>
        public void ValidateOffsetsIfNeeded()
        {
            IExecute("validateOffsetsIfNeeded");
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}