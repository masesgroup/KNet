/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using connect-runtime-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Connect.Runtime.Errors
{
    #region RetryWithToleranceOperator
    public partial class RetryWithToleranceOperator
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/connect-runtime/3.4.0/org/apache/kafka/connect/runtime/errors/RetryWithToleranceOperator.html#%3Cinit%3E(long,long,org.apache.kafka.connect.runtime.errors.ToleranceType,org.apache.kafka.common.utils.Time,org.apache.kafka.connect.runtime.errors.ErrorHandlingMetrics)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        /// <param name="arg2"><see cref="Org.Apache.Kafka.Connect.Runtime.Errors.ToleranceType"/></param>
        /// <param name="arg3"><see cref="Org.Apache.Kafka.Common.Utils.Time"/></param>
        /// <param name="arg4"><see cref="Org.Apache.Kafka.Connect.Runtime.Errors.ErrorHandlingMetrics"/></param>
        public RetryWithToleranceOperator(long arg0, long arg1, Org.Apache.Kafka.Connect.Runtime.Errors.ToleranceType arg2, Org.Apache.Kafka.Common.Utils.Time arg3, Org.Apache.Kafka.Connect.Runtime.Errors.ErrorHandlingMetrics arg4)
            : base(arg0, arg1, arg2, arg3, arg4)
        {
        }

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Org.Apache.Kafka.Connect.Runtime.Errors.RetryWithToleranceOperator"/> to <see cref="Java.Lang.AutoCloseable"/>
        /// </summary>
        public static implicit operator Java.Lang.AutoCloseable(Org.Apache.Kafka.Connect.Runtime.Errors.RetryWithToleranceOperator t) => t.Cast<Java.Lang.AutoCloseable>();

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/connect-runtime/3.4.0/org/apache/kafka/connect/runtime/errors/RetryWithToleranceOperator.html#RETRIES_DELAY_MIN_MS"/>
        /// </summary>
        public static long RETRIES_DELAY_MIN_MS { get { return SGetField<long>(LocalBridgeClazz, "RETRIES_DELAY_MIN_MS"); } }

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/connect-runtime/3.4.0/org/apache/kafka/connect/runtime/errors/RetryWithToleranceOperator.html#getErrorToleranceType()"/> 
        /// </summary>
        public Org.Apache.Kafka.Connect.Runtime.Errors.ToleranceType ErrorToleranceType
        {
            get { return IExecute<Org.Apache.Kafka.Connect.Runtime.Errors.ToleranceType>("getErrorToleranceType"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/connect-runtime/3.4.0/org/apache/kafka/connect/runtime/errors/RetryWithToleranceOperator.html#execute(org.apache.kafka.connect.runtime.errors.Operation,org.apache.kafka.connect.runtime.errors.Stage,java.lang.Class)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Connect.Runtime.Errors.Operation"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Connect.Runtime.Errors.Stage"/></param>
        /// <param name="arg2"><see cref="Java.Lang.Class"/></param>
        /// <typeparam name="V"></typeparam>
        /// <returns><typeparamref name="V"/></returns>
        public V Execute<V>(Org.Apache.Kafka.Connect.Runtime.Errors.Operation<V> arg0, Org.Apache.Kafka.Connect.Runtime.Errors.Stage arg1, Java.Lang.Class arg2)
        {
            return IExecute<V>("execute", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/connect-runtime/3.4.0/org/apache/kafka/connect/runtime/errors/RetryWithToleranceOperator.html#failed()"/>
        /// </summary>

        /// <returns><see cref="bool"/></returns>
        public bool Failed()
        {
            return IExecute<bool>("failed");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/connect-runtime/3.4.0/org/apache/kafka/connect/runtime/errors/RetryWithToleranceOperator.html#withinToleranceLimits()"/>
        /// </summary>

        /// <returns><see cref="bool"/></returns>
        public bool WithinToleranceLimits()
        {
            return IExecute<bool>("withinToleranceLimits");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/connect-runtime/3.4.0/org/apache/kafka/connect/runtime/errors/RetryWithToleranceOperator.html#error()"/>
        /// </summary>

        /// <returns><see cref="Java.Lang.Throwable"/></returns>
        public Java.Lang.Throwable Error()
        {
            var obj = IExecute<MASES.JCOBridge.C2JBridge.JVMInterop.IJavaObject>("error"); return MASES.JCOBridge.C2JBridge.JVMBridgeException.New<Java.Lang.Throwable>(obj);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/connect-runtime/3.4.0/org/apache/kafka/connect/runtime/errors/RetryWithToleranceOperator.html#executeFailed(org.apache.kafka.connect.runtime.errors.Stage,java.lang.Class,org.apache.kafka.clients.consumer.ConsumerRecord,java.lang.Throwable)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Connect.Runtime.Errors.Stage"/></param>
        /// <param name="arg1"><see cref="Java.Lang.Class"/></param>
        /// <param name="arg2"><see cref="Org.Apache.Kafka.Clients.Consumer.ConsumerRecord"/></param>
        /// <param name="arg3"><see cref="Java.Lang.Throwable"/></param>
        /// <returns><see cref="Java.Util.Concurrent.Future"/></returns>
        public Java.Util.Concurrent.Future<Java.Lang.Void> ExecuteFailed(Org.Apache.Kafka.Connect.Runtime.Errors.Stage arg0, Java.Lang.Class arg1, Org.Apache.Kafka.Clients.Consumer.ConsumerRecord<byte[], byte[]> arg2, Java.Lang.Throwable arg3)
        {
            return IExecute<Java.Util.Concurrent.Future<Java.Lang.Void>>("executeFailed", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/connect-runtime/3.4.0/org/apache/kafka/connect/runtime/errors/RetryWithToleranceOperator.html#executeFailed(org.apache.kafka.connect.runtime.errors.Stage,java.lang.Class,org.apache.kafka.connect.source.SourceRecord,java.lang.Throwable)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Connect.Runtime.Errors.Stage"/></param>
        /// <param name="arg1"><see cref="Java.Lang.Class"/></param>
        /// <param name="arg2"><see cref="Org.Apache.Kafka.Connect.Source.SourceRecord"/></param>
        /// <param name="arg3"><see cref="Java.Lang.Throwable"/></param>
        /// <returns><see cref="Java.Util.Concurrent.Future"/></returns>
        public Java.Util.Concurrent.Future<Java.Lang.Void> ExecuteFailed(Org.Apache.Kafka.Connect.Runtime.Errors.Stage arg0, Java.Lang.Class arg1, Org.Apache.Kafka.Connect.Source.SourceRecord arg2, Java.Lang.Throwable arg3)
        {
            return IExecute<Java.Util.Concurrent.Future<Java.Lang.Void>>("executeFailed", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/connect-runtime/3.4.0/org/apache/kafka/connect/runtime/errors/RetryWithToleranceOperator.html#close()"/>
        /// </summary>
        public void Close()
        {
            IExecute("close");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/connect-runtime/3.4.0/org/apache/kafka/connect/runtime/errors/RetryWithToleranceOperator.html#consumerRecord(org.apache.kafka.clients.consumer.ConsumerRecord)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Clients.Consumer.ConsumerRecord"/></param>
        public void ConsumerRecord(Org.Apache.Kafka.Clients.Consumer.ConsumerRecord<byte[], byte[]> arg0)
        {
            IExecute("consumerRecord", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/connect-runtime/3.4.0/org/apache/kafka/connect/runtime/errors/RetryWithToleranceOperator.html#reporters(java.util.List)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.List"/></param>
        public void Reporters(Java.Util.List<Org.Apache.Kafka.Connect.Runtime.Errors.ErrorReporter> arg0)
        {
            IExecute("reporters", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/connect-runtime/3.4.0/org/apache/kafka/connect/runtime/errors/RetryWithToleranceOperator.html#sourceRecord(org.apache.kafka.connect.source.SourceRecord)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Connect.Source.SourceRecord"/></param>
        public void SourceRecord(Org.Apache.Kafka.Connect.Source.SourceRecord arg0)
        {
            IExecute("sourceRecord", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/connect-runtime/3.4.0/org/apache/kafka/connect/runtime/errors/RetryWithToleranceOperator.html#triggerStop()"/>
        /// </summary>
        public void TriggerStop()
        {
            IExecute("triggerStop");
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}