/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using connect-runtime-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Connect.Runtime.Distributed
{
    #region IncrementalCooperativeConnectProtocol
    public partial class IncrementalCooperativeConnectProtocol
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/connect-runtime/3.4.0/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeConnectProtocol.html#TOLERATE_MISSING_FIELDS_WITH_DEFAULTS"/>
        /// </summary>
        public static bool TOLERATE_MISSING_FIELDS_WITH_DEFAULTS { get { return SGetField<bool>(LocalBridgeClazz, "TOLERATE_MISSING_FIELDS_WITH_DEFAULTS"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/connect-runtime/3.4.0/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeConnectProtocol.html#ALLOCATION_KEY_NAME"/>
        /// </summary>
        public static string ALLOCATION_KEY_NAME { get { return SGetField<string>(LocalBridgeClazz, "ALLOCATION_KEY_NAME"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/connect-runtime/3.4.0/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeConnectProtocol.html#REVOKED_KEY_NAME"/>
        /// </summary>
        public static string REVOKED_KEY_NAME { get { return SGetField<string>(LocalBridgeClazz, "REVOKED_KEY_NAME"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/connect-runtime/3.4.0/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeConnectProtocol.html#SCHEDULED_DELAY_KEY_NAME"/>
        /// </summary>
        public static string SCHEDULED_DELAY_KEY_NAME { get { return SGetField<string>(LocalBridgeClazz, "SCHEDULED_DELAY_KEY_NAME"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/connect-runtime/3.4.0/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeConnectProtocol.html#ALLOCATION_V1"/>
        /// </summary>
        public static Org.Apache.Kafka.Common.Protocol.Types.Schema ALLOCATION_V1 { get { return SGetField<Org.Apache.Kafka.Common.Protocol.Types.Schema>(LocalBridgeClazz, "ALLOCATION_V1"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/connect-runtime/3.4.0/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeConnectProtocol.html#ASSIGNMENT_V1"/>
        /// </summary>
        public static Org.Apache.Kafka.Common.Protocol.Types.Schema ASSIGNMENT_V1 { get { return SGetField<Org.Apache.Kafka.Common.Protocol.Types.Schema>(LocalBridgeClazz, "ASSIGNMENT_V1"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/connect-runtime/3.4.0/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeConnectProtocol.html#CONFIG_STATE_V1"/>
        /// </summary>
        public static Org.Apache.Kafka.Common.Protocol.Types.Schema CONFIG_STATE_V1 { get { return SGetField<Org.Apache.Kafka.Common.Protocol.Types.Schema>(LocalBridgeClazz, "CONFIG_STATE_V1"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/connect-runtime/3.4.0/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeConnectProtocol.html#CONNECTOR_ASSIGNMENT_V1"/>
        /// </summary>
        public static Org.Apache.Kafka.Common.Protocol.Types.Schema CONNECTOR_ASSIGNMENT_V1 { get { return SGetField<Org.Apache.Kafka.Common.Protocol.Types.Schema>(LocalBridgeClazz, "CONNECTOR_ASSIGNMENT_V1"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/connect-runtime/3.4.0/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeConnectProtocol.html#CONNECT_PROTOCOL_V1"/>
        /// </summary>
        public static short CONNECT_PROTOCOL_V1 { get { return SGetField<short>(LocalBridgeClazz, "CONNECT_PROTOCOL_V1"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/connect-runtime/3.4.0/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeConnectProtocol.html#CONNECT_PROTOCOL_V2"/>
        /// </summary>
        public static short CONNECT_PROTOCOL_V2 { get { return SGetField<short>(LocalBridgeClazz, "CONNECT_PROTOCOL_V2"); } }

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/connect-runtime/3.4.0/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeConnectProtocol.html#serializeAssignment(org.apache.kafka.connect.runtime.distributed.ExtendedAssignment,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Connect.Runtime.Distributed.ExtendedAssignment"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        /// <returns><see cref="Java.Nio.ByteBuffer"/></returns>
        public static Java.Nio.ByteBuffer SerializeAssignment(Org.Apache.Kafka.Connect.Runtime.Distributed.ExtendedAssignment arg0, bool arg1)
        {
            return SExecute<Java.Nio.ByteBuffer>(LocalBridgeClazz, "serializeAssignment", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/connect-runtime/3.4.0/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeConnectProtocol.html#serializeMetadata(org.apache.kafka.connect.runtime.distributed.ExtendedWorkerState,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Connect.Runtime.Distributed.ExtendedWorkerState"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        /// <returns><see cref="Java.Nio.ByteBuffer"/></returns>
        public static Java.Nio.ByteBuffer SerializeMetadata(Org.Apache.Kafka.Connect.Runtime.Distributed.ExtendedWorkerState arg0, bool arg1)
        {
            return SExecute<Java.Nio.ByteBuffer>(LocalBridgeClazz, "serializeMetadata", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/connect-runtime/3.4.0/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeConnectProtocol.html#metadataRequest(org.apache.kafka.connect.runtime.distributed.ExtendedWorkerState,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Connect.Runtime.Distributed.ExtendedWorkerState"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Message.JoinGroupRequestData.JoinGroupRequestProtocolCollection"/></returns>
        public static Org.Apache.Kafka.Common.Message.JoinGroupRequestData.JoinGroupRequestProtocolCollection MetadataRequest(Org.Apache.Kafka.Connect.Runtime.Distributed.ExtendedWorkerState arg0, bool arg1)
        {
            return SExecute<Org.Apache.Kafka.Common.Message.JoinGroupRequestData.JoinGroupRequestProtocolCollection>(LocalBridgeClazz, "metadataRequest", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/connect-runtime/3.4.0/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeConnectProtocol.html#deserializeAssignment(java.nio.ByteBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Nio.ByteBuffer"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Connect.Runtime.Distributed.ExtendedAssignment"/></returns>
        public static Org.Apache.Kafka.Connect.Runtime.Distributed.ExtendedAssignment DeserializeAssignment(Java.Nio.ByteBuffer arg0)
        {
            return SExecute<Org.Apache.Kafka.Connect.Runtime.Distributed.ExtendedAssignment>(LocalBridgeClazz, "deserializeAssignment", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/connect-runtime/3.4.0/org/apache/kafka/connect/runtime/distributed/IncrementalCooperativeConnectProtocol.html#deserializeMetadata(java.nio.ByteBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Nio.ByteBuffer"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Connect.Runtime.Distributed.ExtendedWorkerState"/></returns>
        public static Org.Apache.Kafka.Connect.Runtime.Distributed.ExtendedWorkerState DeserializeMetadata(Java.Nio.ByteBuffer arg0)
        {
            return SExecute<Org.Apache.Kafka.Connect.Runtime.Distributed.ExtendedWorkerState>(LocalBridgeClazz, "deserializeMetadata", arg0);
        }

        #endregion

        #region Instance methods

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}