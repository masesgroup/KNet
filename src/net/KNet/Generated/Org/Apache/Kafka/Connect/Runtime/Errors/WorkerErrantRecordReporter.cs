/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using connect-runtime-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Connect.Runtime.Errors
{
    #region WorkerErrantRecordReporter
    public partial class WorkerErrantRecordReporter
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/connect-runtime/3.4.0/org/apache/kafka/connect/runtime/errors/WorkerErrantRecordReporter.html#%3Cinit%3E(org.apache.kafka.connect.runtime.errors.RetryWithToleranceOperator,org.apache.kafka.connect.storage.Converter,org.apache.kafka.connect.storage.Converter,org.apache.kafka.connect.storage.HeaderConverter)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Connect.Runtime.Errors.RetryWithToleranceOperator"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Connect.Storage.Converter"/></param>
        /// <param name="arg2"><see cref="Org.Apache.Kafka.Connect.Storage.Converter"/></param>
        /// <param name="arg3"><see cref="Org.Apache.Kafka.Connect.Storage.HeaderConverter"/></param>
        public WorkerErrantRecordReporter(Org.Apache.Kafka.Connect.Runtime.Errors.RetryWithToleranceOperator arg0, Org.Apache.Kafka.Connect.Storage.Converter arg1, Org.Apache.Kafka.Connect.Storage.Converter arg2, Org.Apache.Kafka.Connect.Storage.HeaderConverter arg3)
            : base(arg0, arg1, arg2, arg3)
        {
        }

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Org.Apache.Kafka.Connect.Runtime.Errors.WorkerErrantRecordReporter"/> to <see cref="Org.Apache.Kafka.Connect.Sink.ErrantRecordReporter"/>
        /// </summary>
        public static implicit operator Org.Apache.Kafka.Connect.Sink.ErrantRecordReporter(Org.Apache.Kafka.Connect.Runtime.Errors.WorkerErrantRecordReporter t) => t.Cast<Org.Apache.Kafka.Connect.Sink.ErrantRecordReporter>();

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/connect-runtime/3.4.0/org/apache/kafka/connect/runtime/errors/WorkerErrantRecordReporter.html#report(org.apache.kafka.connect.sink.SinkRecord,java.lang.Throwable)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Connect.Sink.SinkRecord"/></param>
        /// <param name="arg1"><see cref="Java.Lang.Throwable"/></param>
        /// <returns><see cref="Java.Util.Concurrent.Future"/></returns>
        public Java.Util.Concurrent.Future<Java.Lang.Void> Report(Org.Apache.Kafka.Connect.Sink.SinkRecord arg0, Java.Lang.Throwable arg1)
        {
            return IExecute<Java.Util.Concurrent.Future<Java.Lang.Void>>("report", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/connect-runtime/3.4.0/org/apache/kafka/connect/runtime/errors/WorkerErrantRecordReporter.html#awaitFutures(java.util.Collection)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Collection"/></param>
        public void AwaitFutures(Java.Util.Collection<Org.Apache.Kafka.Common.TopicPartition> arg0)
        {
            IExecute("awaitFutures", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/connect-runtime/3.4.0/org/apache/kafka/connect/runtime/errors/WorkerErrantRecordReporter.html#cancelFutures(java.util.Collection)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Collection"/></param>
        public void CancelFutures(Java.Util.Collection<Org.Apache.Kafka.Common.TopicPartition> arg0)
        {
            IExecute("cancelFutures", arg0);
        }

        #endregion

        #region Nested classes
        #region ErrantRecordFuture
        public partial class ErrantRecordFuture
        {
            #region Constructors
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/connect-runtime/3.4.0/org/apache/kafka/connect/runtime/errors/WorkerErrantRecordReporter.ErrantRecordFuture.html#%3Cinit%3E(java.util.List)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Util.List"/></param>
            public ErrantRecordFuture(Java.Util.List arg0)
                : base(arg0)
            {
            }

            #endregion

            #region Class/Interface conversion operators
            /// <summary>
            /// Converter from <see cref="Org.Apache.Kafka.Connect.Runtime.Errors.WorkerErrantRecordReporter.ErrantRecordFuture"/> to <see cref="Java.Util.Concurrent.Future"/>
            /// </summary>
            public static implicit operator Java.Util.Concurrent.Future(Org.Apache.Kafka.Connect.Runtime.Errors.WorkerErrantRecordReporter.ErrantRecordFuture t) => t.Cast<Java.Util.Concurrent.Future>();

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/connect-runtime/3.4.0/org/apache/kafka/connect/runtime/errors/WorkerErrantRecordReporter.ErrantRecordFuture.html#isCancelled()"/> 
            /// </summary>
            public bool IsCancelled
            {
                get { return IExecute<bool>("isCancelled"); }
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/connect-runtime/3.4.0/org/apache/kafka/connect/runtime/errors/WorkerErrantRecordReporter.ErrantRecordFuture.html#isDone()"/> 
            /// </summary>
            public bool IsDone
            {
                get { return IExecute<bool>("isDone"); }
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/connect-runtime/3.4.0/org/apache/kafka/connect/runtime/errors/WorkerErrantRecordReporter.ErrantRecordFuture.html#cancel(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            /// <returns><see cref="bool"/></returns>
            public bool Cancel(bool arg0)
            {
                return IExecute<bool>("cancel", arg0);
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/connect-runtime/3.4.0/org/apache/kafka/connect/runtime/errors/WorkerErrantRecordReporter.ErrantRecordFuture.html#get()"/>
            /// </summary>

            /// <returns><see cref="object"/></returns>
            /// <exception cref="Java.Lang.InterruptedException"/>
            /// <exception cref="Java.Util.Concurrent.ExecutionException"/>
            public object Get()
            {
                return IExecute("get");
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/connect-runtime/3.4.0/org/apache/kafka/connect/runtime/errors/WorkerErrantRecordReporter.ErrantRecordFuture.html#get(long,java.util.concurrent.TimeUnit)"/>
            /// </summary>
            /// <param name="arg0"><see cref="long"/></param>
            /// <param name="arg1"><see cref="Java.Util.Concurrent.TimeUnit"/></param>
            /// <returns><see cref="object"/></returns>
            /// <exception cref="Java.Lang.InterruptedException"/>
            /// <exception cref="Java.Util.Concurrent.ExecutionException"/>
            /// <exception cref="Java.Util.Concurrent.TimeoutException"/>
            public object Get(long arg0, Java.Util.Concurrent.TimeUnit arg1)
            {
                return IExecute("get", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}