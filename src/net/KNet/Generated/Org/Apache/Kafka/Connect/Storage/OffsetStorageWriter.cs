/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using connect-runtime-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Connect.Storage
{
    #region OffsetStorageWriter
    public partial class OffsetStorageWriter
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/connect-runtime/3.4.0/org/apache/kafka/connect/storage/OffsetStorageWriter.html#%3Cinit%3E(org.apache.kafka.connect.storage.OffsetBackingStore,java.lang.String,org.apache.kafka.connect.storage.Converter,org.apache.kafka.connect.storage.Converter)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Connect.Storage.OffsetBackingStore"/></param>
        /// <param name="arg1"><see cref="string"/></param>
        /// <param name="arg2"><see cref="Org.Apache.Kafka.Connect.Storage.Converter"/></param>
        /// <param name="arg3"><see cref="Org.Apache.Kafka.Connect.Storage.Converter"/></param>
        public OffsetStorageWriter(Org.Apache.Kafka.Connect.Storage.OffsetBackingStore arg0, string arg1, Org.Apache.Kafka.Connect.Storage.Converter arg2, Org.Apache.Kafka.Connect.Storage.Converter arg3)
            : base(arg0, arg1, arg2, arg3)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/connect-runtime/3.4.0/org/apache/kafka/connect/storage/OffsetStorageWriter.html#beginFlush()"/> 
        /// </summary>
        public bool BeginFlush
        {
            get { return IExecute<bool>("beginFlush"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/connect-runtime/3.4.0/org/apache/kafka/connect/storage/OffsetStorageWriter.html#willFlush()"/> 
        /// </summary>
        public bool WillFlush
        {
            get { return IExecute<bool>("willFlush"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/connect-runtime/3.4.0/org/apache/kafka/connect/storage/OffsetStorageWriter.html#doFlush(org.apache.kafka.connect.util.Callback)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Connect.Util.Callback"/></param>
        /// <returns><see cref="Java.Util.Concurrent.Future"/></returns>
        public Java.Util.Concurrent.Future<Java.Lang.Void> DoFlush(Org.Apache.Kafka.Connect.Util.Callback<Java.Lang.Void> arg0)
        {
            return IExecute<Java.Util.Concurrent.Future<Java.Lang.Void>>("doFlush", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/connect-runtime/3.4.0/org/apache/kafka/connect/storage/OffsetStorageWriter.html#cancelFlush()"/>
        /// </summary>
        public void CancelFlush()
        {
            IExecute("cancelFlush");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/connect-runtime/3.4.0/org/apache/kafka/connect/storage/OffsetStorageWriter.html#offset(java.util.Map,java.util.Map)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Map"/></param>
        /// <param name="arg1"><see cref="Java.Util.Map"/></param>
        /// <typeparam name="Arg0Extendsobject"></typeparam>
        /// <typeparam name="Arg1Extendsobject"></typeparam>
        public void Offset<Arg0Extendsobject, Arg1Extendsobject>(Java.Util.Map<string, Arg0Extendsobject> arg0, Java.Util.Map<string, Arg1Extendsobject> arg1)
        {
            IExecute("offset", arg0, arg1);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}