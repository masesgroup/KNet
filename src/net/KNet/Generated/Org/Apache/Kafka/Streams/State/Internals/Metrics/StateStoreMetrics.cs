/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka-streams-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Streams.State.Internals.Metrics
{
    #region StateStoreMetrics
    public partial class StateStoreMetrics
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/metrics/StateStoreMetrics.html#allSensor(java.lang.String,java.lang.String,java.lang.String,org.apache.kafka.streams.processor.internals.metrics.StreamsMetricsImpl)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <param name="arg1"><see cref="string"/></param>
        /// <param name="arg2"><see cref="string"/></param>
        /// <param name="arg3"><see cref="Org.Apache.Kafka.Streams.Processor.Internals.Metrics.StreamsMetricsImpl"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Metrics.Sensor"/></returns>
        public static Org.Apache.Kafka.Common.Metrics.Sensor AllSensor(string arg0, string arg1, string arg2, Org.Apache.Kafka.Streams.Processor.Internals.Metrics.StreamsMetricsImpl arg3)
        {
            return SExecute<Org.Apache.Kafka.Common.Metrics.Sensor>(LocalBridgeClazz, "allSensor", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/metrics/StateStoreMetrics.html#deleteSensor(java.lang.String,java.lang.String,java.lang.String,org.apache.kafka.streams.processor.internals.metrics.StreamsMetricsImpl)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <param name="arg1"><see cref="string"/></param>
        /// <param name="arg2"><see cref="string"/></param>
        /// <param name="arg3"><see cref="Org.Apache.Kafka.Streams.Processor.Internals.Metrics.StreamsMetricsImpl"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Metrics.Sensor"/></returns>
        public static Org.Apache.Kafka.Common.Metrics.Sensor DeleteSensor(string arg0, string arg1, string arg2, Org.Apache.Kafka.Streams.Processor.Internals.Metrics.StreamsMetricsImpl arg3)
        {
            return SExecute<Org.Apache.Kafka.Common.Metrics.Sensor>(LocalBridgeClazz, "deleteSensor", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/metrics/StateStoreMetrics.html#e2ELatencySensor(java.lang.String,java.lang.String,java.lang.String,org.apache.kafka.streams.processor.internals.metrics.StreamsMetricsImpl)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <param name="arg1"><see cref="string"/></param>
        /// <param name="arg2"><see cref="string"/></param>
        /// <param name="arg3"><see cref="Org.Apache.Kafka.Streams.Processor.Internals.Metrics.StreamsMetricsImpl"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Metrics.Sensor"/></returns>
        public static Org.Apache.Kafka.Common.Metrics.Sensor E2ELatencySensor(string arg0, string arg1, string arg2, Org.Apache.Kafka.Streams.Processor.Internals.Metrics.StreamsMetricsImpl arg3)
        {
            return SExecute<Org.Apache.Kafka.Common.Metrics.Sensor>(LocalBridgeClazz, "e2ELatencySensor", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/metrics/StateStoreMetrics.html#expiredWindowRecordDropSensor(java.lang.String,java.lang.String,java.lang.String,org.apache.kafka.streams.processor.internals.metrics.StreamsMetricsImpl)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <param name="arg1"><see cref="string"/></param>
        /// <param name="arg2"><see cref="string"/></param>
        /// <param name="arg3"><see cref="Org.Apache.Kafka.Streams.Processor.Internals.Metrics.StreamsMetricsImpl"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Metrics.Sensor"/></returns>
        public static Org.Apache.Kafka.Common.Metrics.Sensor ExpiredWindowRecordDropSensor(string arg0, string arg1, string arg2, Org.Apache.Kafka.Streams.Processor.Internals.Metrics.StreamsMetricsImpl arg3)
        {
            return SExecute<Org.Apache.Kafka.Common.Metrics.Sensor>(LocalBridgeClazz, "expiredWindowRecordDropSensor", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/metrics/StateStoreMetrics.html#fetchSensor(java.lang.String,java.lang.String,java.lang.String,org.apache.kafka.streams.processor.internals.metrics.StreamsMetricsImpl)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <param name="arg1"><see cref="string"/></param>
        /// <param name="arg2"><see cref="string"/></param>
        /// <param name="arg3"><see cref="Org.Apache.Kafka.Streams.Processor.Internals.Metrics.StreamsMetricsImpl"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Metrics.Sensor"/></returns>
        public static Org.Apache.Kafka.Common.Metrics.Sensor FetchSensor(string arg0, string arg1, string arg2, Org.Apache.Kafka.Streams.Processor.Internals.Metrics.StreamsMetricsImpl arg3)
        {
            return SExecute<Org.Apache.Kafka.Common.Metrics.Sensor>(LocalBridgeClazz, "fetchSensor", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/metrics/StateStoreMetrics.html#flushSensor(java.lang.String,java.lang.String,java.lang.String,org.apache.kafka.streams.processor.internals.metrics.StreamsMetricsImpl)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <param name="arg1"><see cref="string"/></param>
        /// <param name="arg2"><see cref="string"/></param>
        /// <param name="arg3"><see cref="Org.Apache.Kafka.Streams.Processor.Internals.Metrics.StreamsMetricsImpl"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Metrics.Sensor"/></returns>
        public static Org.Apache.Kafka.Common.Metrics.Sensor FlushSensor(string arg0, string arg1, string arg2, Org.Apache.Kafka.Streams.Processor.Internals.Metrics.StreamsMetricsImpl arg3)
        {
            return SExecute<Org.Apache.Kafka.Common.Metrics.Sensor>(LocalBridgeClazz, "flushSensor", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/metrics/StateStoreMetrics.html#getSensor(java.lang.String,java.lang.String,java.lang.String,org.apache.kafka.streams.processor.internals.metrics.StreamsMetricsImpl)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <param name="arg1"><see cref="string"/></param>
        /// <param name="arg2"><see cref="string"/></param>
        /// <param name="arg3"><see cref="Org.Apache.Kafka.Streams.Processor.Internals.Metrics.StreamsMetricsImpl"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Metrics.Sensor"/></returns>
        public static Org.Apache.Kafka.Common.Metrics.Sensor GetSensor(string arg0, string arg1, string arg2, Org.Apache.Kafka.Streams.Processor.Internals.Metrics.StreamsMetricsImpl arg3)
        {
            return SExecute<Org.Apache.Kafka.Common.Metrics.Sensor>(LocalBridgeClazz, "getSensor", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/metrics/StateStoreMetrics.html#prefixScanSensor(java.lang.String,java.lang.String,java.lang.String,org.apache.kafka.streams.processor.internals.metrics.StreamsMetricsImpl)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <param name="arg1"><see cref="string"/></param>
        /// <param name="arg2"><see cref="string"/></param>
        /// <param name="arg3"><see cref="Org.Apache.Kafka.Streams.Processor.Internals.Metrics.StreamsMetricsImpl"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Metrics.Sensor"/></returns>
        public static Org.Apache.Kafka.Common.Metrics.Sensor PrefixScanSensor(string arg0, string arg1, string arg2, Org.Apache.Kafka.Streams.Processor.Internals.Metrics.StreamsMetricsImpl arg3)
        {
            return SExecute<Org.Apache.Kafka.Common.Metrics.Sensor>(LocalBridgeClazz, "prefixScanSensor", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/metrics/StateStoreMetrics.html#putAllSensor(java.lang.String,java.lang.String,java.lang.String,org.apache.kafka.streams.processor.internals.metrics.StreamsMetricsImpl)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <param name="arg1"><see cref="string"/></param>
        /// <param name="arg2"><see cref="string"/></param>
        /// <param name="arg3"><see cref="Org.Apache.Kafka.Streams.Processor.Internals.Metrics.StreamsMetricsImpl"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Metrics.Sensor"/></returns>
        public static Org.Apache.Kafka.Common.Metrics.Sensor PutAllSensor(string arg0, string arg1, string arg2, Org.Apache.Kafka.Streams.Processor.Internals.Metrics.StreamsMetricsImpl arg3)
        {
            return SExecute<Org.Apache.Kafka.Common.Metrics.Sensor>(LocalBridgeClazz, "putAllSensor", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/metrics/StateStoreMetrics.html#putIfAbsentSensor(java.lang.String,java.lang.String,java.lang.String,org.apache.kafka.streams.processor.internals.metrics.StreamsMetricsImpl)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <param name="arg1"><see cref="string"/></param>
        /// <param name="arg2"><see cref="string"/></param>
        /// <param name="arg3"><see cref="Org.Apache.Kafka.Streams.Processor.Internals.Metrics.StreamsMetricsImpl"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Metrics.Sensor"/></returns>
        public static Org.Apache.Kafka.Common.Metrics.Sensor PutIfAbsentSensor(string arg0, string arg1, string arg2, Org.Apache.Kafka.Streams.Processor.Internals.Metrics.StreamsMetricsImpl arg3)
        {
            return SExecute<Org.Apache.Kafka.Common.Metrics.Sensor>(LocalBridgeClazz, "putIfAbsentSensor", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/metrics/StateStoreMetrics.html#putSensor(java.lang.String,java.lang.String,java.lang.String,org.apache.kafka.streams.processor.internals.metrics.StreamsMetricsImpl)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <param name="arg1"><see cref="string"/></param>
        /// <param name="arg2"><see cref="string"/></param>
        /// <param name="arg3"><see cref="Org.Apache.Kafka.Streams.Processor.Internals.Metrics.StreamsMetricsImpl"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Metrics.Sensor"/></returns>
        public static Org.Apache.Kafka.Common.Metrics.Sensor PutSensor(string arg0, string arg1, string arg2, Org.Apache.Kafka.Streams.Processor.Internals.Metrics.StreamsMetricsImpl arg3)
        {
            return SExecute<Org.Apache.Kafka.Common.Metrics.Sensor>(LocalBridgeClazz, "putSensor", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/metrics/StateStoreMetrics.html#rangeSensor(java.lang.String,java.lang.String,java.lang.String,org.apache.kafka.streams.processor.internals.metrics.StreamsMetricsImpl)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <param name="arg1"><see cref="string"/></param>
        /// <param name="arg2"><see cref="string"/></param>
        /// <param name="arg3"><see cref="Org.Apache.Kafka.Streams.Processor.Internals.Metrics.StreamsMetricsImpl"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Metrics.Sensor"/></returns>
        public static Org.Apache.Kafka.Common.Metrics.Sensor RangeSensor(string arg0, string arg1, string arg2, Org.Apache.Kafka.Streams.Processor.Internals.Metrics.StreamsMetricsImpl arg3)
        {
            return SExecute<Org.Apache.Kafka.Common.Metrics.Sensor>(LocalBridgeClazz, "rangeSensor", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/metrics/StateStoreMetrics.html#removeSensor(java.lang.String,java.lang.String,java.lang.String,org.apache.kafka.streams.processor.internals.metrics.StreamsMetricsImpl)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <param name="arg1"><see cref="string"/></param>
        /// <param name="arg2"><see cref="string"/></param>
        /// <param name="arg3"><see cref="Org.Apache.Kafka.Streams.Processor.Internals.Metrics.StreamsMetricsImpl"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Metrics.Sensor"/></returns>
        public static Org.Apache.Kafka.Common.Metrics.Sensor RemoveSensor(string arg0, string arg1, string arg2, Org.Apache.Kafka.Streams.Processor.Internals.Metrics.StreamsMetricsImpl arg3)
        {
            return SExecute<Org.Apache.Kafka.Common.Metrics.Sensor>(LocalBridgeClazz, "removeSensor", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/metrics/StateStoreMetrics.html#restoreSensor(java.lang.String,java.lang.String,java.lang.String,org.apache.kafka.streams.processor.internals.metrics.StreamsMetricsImpl)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <param name="arg1"><see cref="string"/></param>
        /// <param name="arg2"><see cref="string"/></param>
        /// <param name="arg3"><see cref="Org.Apache.Kafka.Streams.Processor.Internals.Metrics.StreamsMetricsImpl"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Metrics.Sensor"/></returns>
        public static Org.Apache.Kafka.Common.Metrics.Sensor RestoreSensor(string arg0, string arg1, string arg2, Org.Apache.Kafka.Streams.Processor.Internals.Metrics.StreamsMetricsImpl arg3)
        {
            return SExecute<Org.Apache.Kafka.Common.Metrics.Sensor>(LocalBridgeClazz, "restoreSensor", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/metrics/StateStoreMetrics.html#suppressionBufferCountSensor(java.lang.String,java.lang.String,java.lang.String,org.apache.kafka.streams.processor.internals.metrics.StreamsMetricsImpl)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <param name="arg1"><see cref="string"/></param>
        /// <param name="arg2"><see cref="string"/></param>
        /// <param name="arg3"><see cref="Org.Apache.Kafka.Streams.Processor.Internals.Metrics.StreamsMetricsImpl"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Metrics.Sensor"/></returns>
        public static Org.Apache.Kafka.Common.Metrics.Sensor SuppressionBufferCountSensor(string arg0, string arg1, string arg2, Org.Apache.Kafka.Streams.Processor.Internals.Metrics.StreamsMetricsImpl arg3)
        {
            return SExecute<Org.Apache.Kafka.Common.Metrics.Sensor>(LocalBridgeClazz, "suppressionBufferCountSensor", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/metrics/StateStoreMetrics.html#suppressionBufferSizeSensor(java.lang.String,java.lang.String,java.lang.String,org.apache.kafka.streams.processor.internals.metrics.StreamsMetricsImpl)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <param name="arg1"><see cref="string"/></param>
        /// <param name="arg2"><see cref="string"/></param>
        /// <param name="arg3"><see cref="Org.Apache.Kafka.Streams.Processor.Internals.Metrics.StreamsMetricsImpl"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Metrics.Sensor"/></returns>
        public static Org.Apache.Kafka.Common.Metrics.Sensor SuppressionBufferSizeSensor(string arg0, string arg1, string arg2, Org.Apache.Kafka.Streams.Processor.Internals.Metrics.StreamsMetricsImpl arg3)
        {
            return SExecute<Org.Apache.Kafka.Common.Metrics.Sensor>(LocalBridgeClazz, "suppressionBufferSizeSensor", arg0, arg1, arg2, arg3);
        }

        #endregion

        #region Instance methods

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}