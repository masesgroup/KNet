/*
*  Copyright (c) 2021-2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.6.0.0)
*  using kafka-streams-scala_2.13-4.0.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Streams.Scala.Kstream
{
    #region KStream declaration
    /// <summary>
    /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/kstream/KStream.html"/>
    /// </summary>
    public partial class KStream : MASES.JCOBridge.C2JBridge.JVMBridgeBase<KStream>
    {
        const string _bridgeClassName = "org.apache.kafka.streams.scala.kstream.KStream";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public KStream() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public KStream(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, false);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <inheritdoc/>
        public override string BridgeClassName => _bridgeClassName;
        /// <inheritdoc/>
        public override bool IsBridgeAbstract => false;
        /// <inheritdoc/>
        public override bool IsBridgeCloseable => false;
        /// <inheritdoc/>
        public override bool IsBridgeInterface => false;
        /// <inheritdoc/>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class

    }
    #endregion

    #region KStream<K, V> declaration
    /// <summary>
    /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/kstream/KStream.html"/>
    /// </summary>
    /// <typeparam name="K"></typeparam>
    /// <typeparam name="V"></typeparam>
    public partial class KStream<K, V> : MASES.JCOBridge.C2JBridge.JVMBridgeBase<KStream<K, V>>
    {
        const string _bridgeClassName = "org.apache.kafka.streams.scala.kstream.KStream";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public KStream() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public KStream(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, false);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <inheritdoc/>
        public override string BridgeClassName => _bridgeClassName;
        /// <inheritdoc/>
        public override bool IsBridgeAbstract => false;
        /// <inheritdoc/>
        public override bool IsBridgeCloseable => false;
        /// <inheritdoc/>
        public override bool IsBridgeInterface => false;
        /// <inheritdoc/>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class
    
    }
    #endregion

    #region KStream implementation
    public partial class KStream
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/kstream/KStream.html#%3Cinit%3E(org.apache.kafka.streams.kstream.KStream)"/>
        /// </summary>
        /// <param name="inner"><see cref="Org.Apache.Kafka.Streams.Kstream.KStream"/></param>
        public KStream(Org.Apache.Kafka.Streams.Kstream.KStream inner)
            : base(inner)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/kstream/KStream.html#inner()"/>
        /// </summary>
        /// <returns><see cref="Org.Apache.Kafka.Streams.Kstream.KStream"/></returns>
        public Org.Apache.Kafka.Streams.Kstream.KStream Inner()
        {
            return IExecuteWithSignature<Org.Apache.Kafka.Streams.Kstream.KStream>("inner", "()Lorg/apache/kafka/streams/kstream/KStream;");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/kstream/KStream.html#split()"/>
        /// </summary>
        /// <returns><see cref="Org.Apache.Kafka.Streams.Scala.Kstream.BranchedKStream"/></returns>
        public Org.Apache.Kafka.Streams.Scala.Kstream.BranchedKStream Split()
        {
            return IExecuteWithSignature<Org.Apache.Kafka.Streams.Scala.Kstream.BranchedKStream>("split", "()Lorg/apache/kafka/streams/scala/kstream/BranchedKStream;");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/kstream/KStream.html#split(org.apache.kafka.streams.kstream.Named)"/>
        /// </summary>
        /// <param name="named"><see cref="Org.Apache.Kafka.Streams.Kstream.Named"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Streams.Scala.Kstream.BranchedKStream"/></returns>
        public Org.Apache.Kafka.Streams.Scala.Kstream.BranchedKStream Split(Org.Apache.Kafka.Streams.Kstream.Named named)
        {
            return IExecuteWithSignature<Org.Apache.Kafka.Streams.Scala.Kstream.BranchedKStream>("split", "(Lorg/apache/kafka/streams/kstream/Named;)Lorg/apache/kafka/streams/scala/kstream/BranchedKStream;", named);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/kstream/KStream.html#groupByKey(org.apache.kafka.streams.kstream.Grouped)"/>
        /// </summary>
        /// <param name="grouped"><see cref="Org.Apache.Kafka.Streams.Kstream.Grouped"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Streams.Scala.Kstream.KGroupedStream"/></returns>
        public Org.Apache.Kafka.Streams.Scala.Kstream.KGroupedStream GroupByKey(Org.Apache.Kafka.Streams.Kstream.Grouped grouped)
        {
            return IExecuteWithSignature<Org.Apache.Kafka.Streams.Scala.Kstream.KGroupedStream>("groupByKey", "(Lorg/apache/kafka/streams/kstream/Grouped;)Lorg/apache/kafka/streams/scala/kstream/KGroupedStream;", grouped);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/kstream/KStream.html#merge(org.apache.kafka.streams.scala.kstream.KStream,org.apache.kafka.streams.kstream.Named)"/>
        /// </summary>
        /// <param name="stream"><see cref="Org.Apache.Kafka.Streams.Scala.Kstream.KStream"/></param>
        /// <param name="named"><see cref="Org.Apache.Kafka.Streams.Kstream.Named"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Streams.Scala.Kstream.KStream"/></returns>
        public Org.Apache.Kafka.Streams.Scala.Kstream.KStream Merge(Org.Apache.Kafka.Streams.Scala.Kstream.KStream stream, Org.Apache.Kafka.Streams.Kstream.Named named)
        {
            return IExecuteWithSignature<Org.Apache.Kafka.Streams.Scala.Kstream.KStream>("merge", "(Lorg/apache/kafka/streams/scala/kstream/KStream;Lorg/apache/kafka/streams/kstream/Named;)Lorg/apache/kafka/streams/scala/kstream/KStream;", stream, named);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/kstream/KStream.html#merge(org.apache.kafka.streams.scala.kstream.KStream)"/>
        /// </summary>
        /// <param name="stream"><see cref="Org.Apache.Kafka.Streams.Scala.Kstream.KStream"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Streams.Scala.Kstream.KStream"/></returns>
        public Org.Apache.Kafka.Streams.Scala.Kstream.KStream Merge(Org.Apache.Kafka.Streams.Scala.Kstream.KStream stream)
        {
            return IExecuteWithSignature<Org.Apache.Kafka.Streams.Scala.Kstream.KStream>("merge", "(Lorg/apache/kafka/streams/scala/kstream/KStream;)Lorg/apache/kafka/streams/scala/kstream/KStream;", stream);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/kstream/KStream.html#repartition(org.apache.kafka.streams.kstream.Repartitioned)"/>
        /// </summary>
        /// <param name="repartitioned"><see cref="Org.Apache.Kafka.Streams.Kstream.Repartitioned"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Streams.Scala.Kstream.KStream"/></returns>
        public Org.Apache.Kafka.Streams.Scala.Kstream.KStream Repartition(Org.Apache.Kafka.Streams.Kstream.Repartitioned repartitioned)
        {
            return IExecuteWithSignature<Org.Apache.Kafka.Streams.Scala.Kstream.KStream>("repartition", "(Lorg/apache/kafka/streams/kstream/Repartitioned;)Lorg/apache/kafka/streams/scala/kstream/KStream;", repartitioned);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/kstream/KStream.html#toTable()"/>
        /// </summary>
        /// <returns><see cref="Org.Apache.Kafka.Streams.Scala.Kstream.KTable"/></returns>
        public Org.Apache.Kafka.Streams.Scala.Kstream.KTable ToTable()
        {
            return IExecuteWithSignature<Org.Apache.Kafka.Streams.Scala.Kstream.KTable>("toTable", "()Lorg/apache/kafka/streams/scala/kstream/KTable;");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/kstream/KStream.html#toTable(org.apache.kafka.streams.kstream.Materialized)"/>
        /// </summary>
        /// <param name="materialized"><see cref="Org.Apache.Kafka.Streams.Kstream.Materialized"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Streams.Scala.Kstream.KTable"/></returns>
        public Org.Apache.Kafka.Streams.Scala.Kstream.KTable ToTable(Org.Apache.Kafka.Streams.Kstream.Materialized materialized)
        {
            return IExecuteWithSignature<Org.Apache.Kafka.Streams.Scala.Kstream.KTable>("toTable", "(Lorg/apache/kafka/streams/kstream/Materialized;)Lorg/apache/kafka/streams/scala/kstream/KTable;", materialized);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/kstream/KStream.html#toTable(org.apache.kafka.streams.kstream.Named,org.apache.kafka.streams.kstream.Materialized)"/>
        /// </summary>
        /// <param name="named"><see cref="Org.Apache.Kafka.Streams.Kstream.Named"/></param>
        /// <param name="materialized"><see cref="Org.Apache.Kafka.Streams.Kstream.Materialized"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Streams.Scala.Kstream.KTable"/></returns>
        public Org.Apache.Kafka.Streams.Scala.Kstream.KTable ToTable(Org.Apache.Kafka.Streams.Kstream.Named named, Org.Apache.Kafka.Streams.Kstream.Materialized materialized)
        {
            return IExecuteWithSignature<Org.Apache.Kafka.Streams.Scala.Kstream.KTable>("toTable", "(Lorg/apache/kafka/streams/kstream/Named;Lorg/apache/kafka/streams/kstream/Materialized;)Lorg/apache/kafka/streams/scala/kstream/KTable;", named, materialized);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/kstream/KStream.html#toTable(org.apache.kafka.streams.kstream.Named)"/>
        /// </summary>
        /// <param name="named"><see cref="Org.Apache.Kafka.Streams.Kstream.Named"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Streams.Scala.Kstream.KTable"/></returns>
        public Org.Apache.Kafka.Streams.Scala.Kstream.KTable ToTable(Org.Apache.Kafka.Streams.Kstream.Named named)
        {
            return IExecuteWithSignature<Org.Apache.Kafka.Streams.Scala.Kstream.KTable>("toTable", "(Lorg/apache/kafka/streams/kstream/Named;)Lorg/apache/kafka/streams/scala/kstream/KTable;", named);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/kstream/KStream.html#print(org.apache.kafka.streams.kstream.Printed)"/>
        /// </summary>
        /// <param name="printed"><see cref="Org.Apache.Kafka.Streams.Kstream.Printed"/></param>
        public void Print(Org.Apache.Kafka.Streams.Kstream.Printed printed)
        {
            IExecuteWithSignature("print", "(Lorg/apache/kafka/streams/kstream/Printed;)V", printed);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/kstream/KStream.html#to(java.lang.String,org.apache.kafka.streams.kstream.Produced)"/>
        /// </summary>
        /// <param name="topic"><see cref="Java.Lang.String"/></param>
        /// <param name="produced"><see cref="Org.Apache.Kafka.Streams.Kstream.Produced"/></param>
        public void To(Java.Lang.String topic, Org.Apache.Kafka.Streams.Kstream.Produced produced)
        {
            IExecuteWithSignature("to", "(Ljava/lang/String;Lorg/apache/kafka/streams/kstream/Produced;)V", topic, produced);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/kstream/KStream.html#to(org.apache.kafka.streams.processor.TopicNameExtractor,org.apache.kafka.streams.kstream.Produced)"/>
        /// </summary>
        /// <param name="extractor"><see cref="Org.Apache.Kafka.Streams.Processor.TopicNameExtractor"/></param>
        /// <param name="produced"><see cref="Org.Apache.Kafka.Streams.Kstream.Produced"/></param>
        public void To(Org.Apache.Kafka.Streams.Processor.TopicNameExtractor extractor, Org.Apache.Kafka.Streams.Kstream.Produced produced)
        {
            IExecuteWithSignature("to", "(Lorg/apache/kafka/streams/processor/TopicNameExtractor;Lorg/apache/kafka/streams/kstream/Produced;)V", extractor, produced);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion

    #region KStream<K, V> implementation
    public partial class KStream<K, V>
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/kstream/KStream.html#%3Cinit%3E(org.apache.kafka.streams.kstream.KStream)"/>
        /// </summary>
        /// <param name="inner"><see cref="Org.Apache.Kafka.Streams.Kstream.KStream"/></param>
        public KStream(Org.Apache.Kafka.Streams.Kstream.KStream<K, V> inner)
            : base(inner)
        {
        }

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Org.Apache.Kafka.Streams.Scala.Kstream.KStream{K, V}"/> to <see cref="Org.Apache.Kafka.Streams.Scala.Kstream.KStream"/>
        /// </summary>
        public static implicit operator Org.Apache.Kafka.Streams.Scala.Kstream.KStream(Org.Apache.Kafka.Streams.Scala.Kstream.KStream<K, V> t) => t.Cast<Org.Apache.Kafka.Streams.Scala.Kstream.KStream>();

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/kstream/KStream.html#inner()"/>
        /// </summary>
        /// <returns><see cref="Org.Apache.Kafka.Streams.Kstream.KStream"/></returns>
        public Org.Apache.Kafka.Streams.Kstream.KStream<K, V> Inner()
        {
            return IExecuteWithSignature<Org.Apache.Kafka.Streams.Kstream.KStream<K, V>>("inner", "()Lorg/apache/kafka/streams/kstream/KStream;");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/kstream/KStream.html#split()"/>
        /// </summary>
        /// <returns><see cref="Org.Apache.Kafka.Streams.Scala.Kstream.BranchedKStream"/></returns>
        public Org.Apache.Kafka.Streams.Scala.Kstream.BranchedKStream<K, V> Split()
        {
            return IExecuteWithSignature<Org.Apache.Kafka.Streams.Scala.Kstream.BranchedKStream<K, V>>("split", "()Lorg/apache/kafka/streams/scala/kstream/BranchedKStream;");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/kstream/KStream.html#split(org.apache.kafka.streams.kstream.Named)"/>
        /// </summary>
        /// <param name="named"><see cref="Org.Apache.Kafka.Streams.Kstream.Named"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Streams.Scala.Kstream.BranchedKStream"/></returns>
        public Org.Apache.Kafka.Streams.Scala.Kstream.BranchedKStream<K, V> Split(Org.Apache.Kafka.Streams.Kstream.Named named)
        {
            return IExecuteWithSignature<Org.Apache.Kafka.Streams.Scala.Kstream.BranchedKStream<K, V>>("split", "(Lorg/apache/kafka/streams/kstream/Named;)Lorg/apache/kafka/streams/scala/kstream/BranchedKStream;", named);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/kstream/KStream.html#groupByKey(org.apache.kafka.streams.kstream.Grouped)"/>
        /// </summary>
        /// <param name="grouped"><see cref="Org.Apache.Kafka.Streams.Kstream.Grouped"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Streams.Scala.Kstream.KGroupedStream"/></returns>
        public Org.Apache.Kafka.Streams.Scala.Kstream.KGroupedStream<K, V> GroupByKey(Org.Apache.Kafka.Streams.Kstream.Grouped<K, V> grouped)
        {
            return IExecuteWithSignature<Org.Apache.Kafka.Streams.Scala.Kstream.KGroupedStream<K, V>>("groupByKey", "(Lorg/apache/kafka/streams/kstream/Grouped;)Lorg/apache/kafka/streams/scala/kstream/KGroupedStream;", grouped);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/kstream/KStream.html#merge(org.apache.kafka.streams.scala.kstream.KStream,org.apache.kafka.streams.kstream.Named)"/>
        /// </summary>
        /// <param name="stream"><see cref="Org.Apache.Kafka.Streams.Scala.Kstream.KStream"/></param>
        /// <param name="named"><see cref="Org.Apache.Kafka.Streams.Kstream.Named"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Streams.Scala.Kstream.KStream"/></returns>
        public Org.Apache.Kafka.Streams.Scala.Kstream.KStream<K, V> Merge(Org.Apache.Kafka.Streams.Scala.Kstream.KStream<K, V> stream, Org.Apache.Kafka.Streams.Kstream.Named named)
        {
            return IExecuteWithSignature<Org.Apache.Kafka.Streams.Scala.Kstream.KStream<K, V>>("merge", "(Lorg/apache/kafka/streams/scala/kstream/KStream;Lorg/apache/kafka/streams/kstream/Named;)Lorg/apache/kafka/streams/scala/kstream/KStream;", stream, named);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/kstream/KStream.html#merge(org.apache.kafka.streams.scala.kstream.KStream)"/>
        /// </summary>
        /// <param name="stream"><see cref="Org.Apache.Kafka.Streams.Scala.Kstream.KStream"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Streams.Scala.Kstream.KStream"/></returns>
        public Org.Apache.Kafka.Streams.Scala.Kstream.KStream<K, V> Merge(Org.Apache.Kafka.Streams.Scala.Kstream.KStream<K, V> stream)
        {
            return IExecuteWithSignature<Org.Apache.Kafka.Streams.Scala.Kstream.KStream<K, V>>("merge", "(Lorg/apache/kafka/streams/scala/kstream/KStream;)Lorg/apache/kafka/streams/scala/kstream/KStream;", stream);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/kstream/KStream.html#repartition(org.apache.kafka.streams.kstream.Repartitioned)"/>
        /// </summary>
        /// <param name="repartitioned"><see cref="Org.Apache.Kafka.Streams.Kstream.Repartitioned"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Streams.Scala.Kstream.KStream"/></returns>
        public Org.Apache.Kafka.Streams.Scala.Kstream.KStream<K, V> Repartition(Org.Apache.Kafka.Streams.Kstream.Repartitioned<K, V> repartitioned)
        {
            return IExecuteWithSignature<Org.Apache.Kafka.Streams.Scala.Kstream.KStream<K, V>>("repartition", "(Lorg/apache/kafka/streams/kstream/Repartitioned;)Lorg/apache/kafka/streams/scala/kstream/KStream;", repartitioned);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/kstream/KStream.html#toTable()"/>
        /// </summary>
        /// <returns><see cref="Org.Apache.Kafka.Streams.Scala.Kstream.KTable"/></returns>
        public Org.Apache.Kafka.Streams.Scala.Kstream.KTable<K, V> ToTable()
        {
            return IExecuteWithSignature<Org.Apache.Kafka.Streams.Scala.Kstream.KTable<K, V>>("toTable", "()Lorg/apache/kafka/streams/scala/kstream/KTable;");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/kstream/KStream.html#toTable(org.apache.kafka.streams.kstream.Materialized)"/>
        /// </summary>
        /// <param name="materialized"><see cref="Org.Apache.Kafka.Streams.Kstream.Materialized"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Streams.Scala.Kstream.KTable"/></returns>
        public Org.Apache.Kafka.Streams.Scala.Kstream.KTable<K, V> ToTable(Org.Apache.Kafka.Streams.Kstream.Materialized<K, V, Org.Apache.Kafka.Streams.State.KeyValueStore<Org.Apache.Kafka.Common.Utils.Bytes, byte[]>> materialized)
        {
            return IExecuteWithSignature<Org.Apache.Kafka.Streams.Scala.Kstream.KTable<K, V>>("toTable", "(Lorg/apache/kafka/streams/kstream/Materialized;)Lorg/apache/kafka/streams/scala/kstream/KTable;", materialized);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/kstream/KStream.html#toTable(org.apache.kafka.streams.kstream.Named,org.apache.kafka.streams.kstream.Materialized)"/>
        /// </summary>
        /// <param name="named"><see cref="Org.Apache.Kafka.Streams.Kstream.Named"/></param>
        /// <param name="materialized"><see cref="Org.Apache.Kafka.Streams.Kstream.Materialized"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Streams.Scala.Kstream.KTable"/></returns>
        public Org.Apache.Kafka.Streams.Scala.Kstream.KTable<K, V> ToTable(Org.Apache.Kafka.Streams.Kstream.Named named, Org.Apache.Kafka.Streams.Kstream.Materialized<K, V, Org.Apache.Kafka.Streams.State.KeyValueStore<Org.Apache.Kafka.Common.Utils.Bytes, byte[]>> materialized)
        {
            return IExecuteWithSignature<Org.Apache.Kafka.Streams.Scala.Kstream.KTable<K, V>>("toTable", "(Lorg/apache/kafka/streams/kstream/Named;Lorg/apache/kafka/streams/kstream/Materialized;)Lorg/apache/kafka/streams/scala/kstream/KTable;", named, materialized);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/kstream/KStream.html#toTable(org.apache.kafka.streams.kstream.Named)"/>
        /// </summary>
        /// <param name="named"><see cref="Org.Apache.Kafka.Streams.Kstream.Named"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Streams.Scala.Kstream.KTable"/></returns>
        public Org.Apache.Kafka.Streams.Scala.Kstream.KTable<K, V> ToTable(Org.Apache.Kafka.Streams.Kstream.Named named)
        {
            return IExecuteWithSignature<Org.Apache.Kafka.Streams.Scala.Kstream.KTable<K, V>>("toTable", "(Lorg/apache/kafka/streams/kstream/Named;)Lorg/apache/kafka/streams/scala/kstream/KTable;", named);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/kstream/KStream.html#print(org.apache.kafka.streams.kstream.Printed)"/>
        /// </summary>
        /// <param name="printed"><see cref="Org.Apache.Kafka.Streams.Kstream.Printed"/></param>
        public void Print(Org.Apache.Kafka.Streams.Kstream.Printed<K, V> printed)
        {
            IExecuteWithSignature("print", "(Lorg/apache/kafka/streams/kstream/Printed;)V", printed);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/kstream/KStream.html#to(java.lang.String,org.apache.kafka.streams.kstream.Produced)"/>
        /// </summary>
        /// <param name="topic"><see cref="Java.Lang.String"/></param>
        /// <param name="produced"><see cref="Org.Apache.Kafka.Streams.Kstream.Produced"/></param>
        public void To(Java.Lang.String topic, Org.Apache.Kafka.Streams.Kstream.Produced<K, V> produced)
        {
            IExecuteWithSignature("to", "(Ljava/lang/String;Lorg/apache/kafka/streams/kstream/Produced;)V", topic, produced);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/kstream/KStream.html#to(org.apache.kafka.streams.processor.TopicNameExtractor,org.apache.kafka.streams.kstream.Produced)"/>
        /// </summary>
        /// <param name="extractor"><see cref="Org.Apache.Kafka.Streams.Processor.TopicNameExtractor"/></param>
        /// <param name="produced"><see cref="Org.Apache.Kafka.Streams.Kstream.Produced"/></param>
        public void To(Org.Apache.Kafka.Streams.Processor.TopicNameExtractor<K, V> extractor, Org.Apache.Kafka.Streams.Kstream.Produced<K, V> produced)
        {
            IExecuteWithSignature("to", "(Lorg/apache/kafka/streams/processor/TopicNameExtractor;Lorg/apache/kafka/streams/kstream/Produced;)V", extractor, produced);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}