/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka-streams-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Streams.State.Internals
{
    #region StoreQueryUtils
    public partial class StoreQueryUtils
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/StoreQueryUtils.html#handleBasicQueries(org.apache.kafka.streams.query.Query,org.apache.kafka.streams.query.PositionBound,org.apache.kafka.streams.query.QueryConfig,org.apache.kafka.streams.processor.StateStore,org.apache.kafka.streams.query.Position,org.apache.kafka.streams.processor.StateStoreContext)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Streams.Query.Query"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Streams.Query.PositionBound"/></param>
        /// <param name="arg2"><see cref="Org.Apache.Kafka.Streams.Query.QueryConfig"/></param>
        /// <param name="arg3"><see cref="Org.Apache.Kafka.Streams.Processor.StateStore"/></param>
        /// <param name="arg4"><see cref="Org.Apache.Kafka.Streams.Query.Position"/></param>
        /// <param name="arg5"><see cref="Org.Apache.Kafka.Streams.Processor.StateStoreContext"/></param>
        /// <typeparam name="R"></typeparam>
        /// <returns><see cref="Org.Apache.Kafka.Streams.Query.QueryResult"/></returns>
        public static Org.Apache.Kafka.Streams.Query.QueryResult<R> HandleBasicQueries<R>(Org.Apache.Kafka.Streams.Query.Query<R> arg0, Org.Apache.Kafka.Streams.Query.PositionBound arg1, Org.Apache.Kafka.Streams.Query.QueryConfig arg2, Org.Apache.Kafka.Streams.Processor.StateStore arg3, Org.Apache.Kafka.Streams.Query.Position arg4, Org.Apache.Kafka.Streams.Processor.StateStoreContext arg5)
        {
            return SExecute<Org.Apache.Kafka.Streams.Query.QueryResult<R>>(LocalBridgeClazz, "handleBasicQueries", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/StoreQueryUtils.html#getDeserializeValue(org.apache.kafka.streams.state.StateSerdes,org.apache.kafka.streams.processor.StateStore)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Streams.State.StateSerdes"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Streams.Processor.StateStore"/></param>
        /// <typeparam name="V"></typeparam>
        /// <typeparam name="Arg0Extendsobject"></typeparam>
        /// <returns><see cref="Java.Util.Function.Function"/></returns>
        public static Java.Util.Function.Function<byte[], V> GetDeserializeValue<V, Arg0Extendsobject>(Org.Apache.Kafka.Streams.State.StateSerdes<Arg0Extendsobject, V> arg0, Org.Apache.Kafka.Streams.Processor.StateStore arg1)
        {
            return SExecute<Java.Util.Function.Function<byte[], V>>(LocalBridgeClazz, "getDeserializeValue", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/StoreQueryUtils.html#isPermitted(org.apache.kafka.streams.query.Position,org.apache.kafka.streams.query.PositionBound,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Streams.Query.Position"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Streams.Query.PositionBound"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool IsPermitted(Org.Apache.Kafka.Streams.Query.Position arg0, Org.Apache.Kafka.Streams.Query.PositionBound arg1, int arg2)
        {
            return SExecute<bool>(LocalBridgeClazz, "isPermitted", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/StoreQueryUtils.html#readPositionFromCheckpoint(org.apache.kafka.streams.state.internals.OffsetCheckpoint)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Streams.State.Internals.OffsetCheckpoint"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Streams.Query.Position"/></returns>
        public static Org.Apache.Kafka.Streams.Query.Position ReadPositionFromCheckpoint(Org.Apache.Kafka.Streams.State.Internals.OffsetCheckpoint arg0)
        {
            return SExecute<Org.Apache.Kafka.Streams.Query.Position>(LocalBridgeClazz, "readPositionFromCheckpoint", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/StoreQueryUtils.html#checkpointPosition(org.apache.kafka.streams.state.internals.OffsetCheckpoint,org.apache.kafka.streams.query.Position)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Streams.State.Internals.OffsetCheckpoint"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Streams.Query.Position"/></param>
        public static void CheckpointPosition(Org.Apache.Kafka.Streams.State.Internals.OffsetCheckpoint arg0, Org.Apache.Kafka.Streams.Query.Position arg1)
        {
            SExecute(LocalBridgeClazz, "checkpointPosition", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/StoreQueryUtils.html#updatePosition(org.apache.kafka.streams.query.Position,org.apache.kafka.streams.processor.StateStoreContext)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Streams.Query.Position"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Streams.Processor.StateStoreContext"/></param>
        public static void UpdatePosition(Org.Apache.Kafka.Streams.Query.Position arg0, Org.Apache.Kafka.Streams.Processor.StateStoreContext arg1)
        {
            SExecute(LocalBridgeClazz, "updatePosition", arg0, arg1);
        }

        #endregion

        #region Instance methods

        #endregion

        #region Nested classes
        #region QueryHandler
        public partial class QueryHandler
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/StoreQueryUtils.QueryHandler.html#apply(org.apache.kafka.streams.query.Query,org.apache.kafka.streams.query.PositionBound,org.apache.kafka.streams.query.QueryConfig,org.apache.kafka.streams.processor.StateStore)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Org.Apache.Kafka.Streams.Query.Query"/></param>
            /// <param name="arg1"><see cref="Org.Apache.Kafka.Streams.Query.PositionBound"/></param>
            /// <param name="arg2"><see cref="Org.Apache.Kafka.Streams.Query.QueryConfig"/></param>
            /// <param name="arg3"><see cref="Org.Apache.Kafka.Streams.Processor.StateStore"/></param>
            /// <typeparam name="ReturnExtendsobject"></typeparam>
            /// <typeparam name="Arg0Extendsobject"></typeparam>
            /// <returns><see cref="Org.Apache.Kafka.Streams.Query.QueryResult"/></returns>
            public Org.Apache.Kafka.Streams.Query.QueryResult<ReturnExtendsobject> Apply<ReturnExtendsobject, Arg0Extendsobject>(Org.Apache.Kafka.Streams.Query.Query<Arg0Extendsobject> arg0, Org.Apache.Kafka.Streams.Query.PositionBound arg1, Org.Apache.Kafka.Streams.Query.QueryConfig arg2, Org.Apache.Kafka.Streams.Processor.StateStore arg3)
            {
                return IExecute<Org.Apache.Kafka.Streams.Query.QueryResult<ReturnExtendsobject>>("apply", arg0, arg1, arg2, arg3);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}