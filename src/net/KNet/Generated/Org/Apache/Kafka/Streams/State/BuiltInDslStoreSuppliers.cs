/*
*  Copyright (c) 2021-2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.6.4.0)
*  using kafka-streams-3.9.1.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Streams.State
{
    #region BuiltInDslStoreSuppliers declaration
    /// <summary>
    /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.9.1/org/apache/kafka/streams/state/BuiltInDslStoreSuppliers.html"/>
    /// </summary>
    public partial class BuiltInDslStoreSuppliers : MASES.JCOBridge.C2JBridge.JVMBridgeBase<BuiltInDslStoreSuppliers>
    {
        const string _bridgeClassName = "org.apache.kafka.streams.state.BuiltInDslStoreSuppliers";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public BuiltInDslStoreSuppliers() { }
        /// <summary>
        /// Internal constructor: used internally from JCOBridge
        /// </summary>
        [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public BuiltInDslStoreSuppliers(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public BuiltInDslStoreSuppliers(params object[] args) : base(args) { }

        private static readonly global::System.Exception _LocalBridgeClazzException = null;
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <inheritdoc/>
        public override string BridgeClassName => _bridgeClassName;
        /// <inheritdoc/>
        public override bool IsBridgeAbstract => false;
        /// <inheritdoc/>
        public override bool IsBridgeCloseable => false;
        /// <inheritdoc/>
        public override bool IsBridgeInterface => false;
        /// <inheritdoc/>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class
        #region InMemoryDslStoreSuppliers declaration
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.9.1/org/apache/kafka/streams/state/BuiltInDslStoreSuppliers.InMemoryDslStoreSuppliers.html"/>
        /// </summary>
        public partial class InMemoryDslStoreSuppliers : Org.Apache.Kafka.Streams.State.DslStoreSuppliers
        {
            const string _bridgeClassName = "org.apache.kafka.streams.state.BuiltInDslStoreSuppliers$InMemoryDslStoreSuppliers";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public InMemoryDslStoreSuppliers() { }
            /// <summary>
            /// Internal constructor: used internally from JCOBridge
            /// </summary>
            [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public InMemoryDslStoreSuppliers(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public InMemoryDslStoreSuppliers(params object[] args) : base(args) { }

            private static readonly global::System.Exception _LocalBridgeClazzException = null;
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <inheritdoc/>
            public override string BridgeClassName => _bridgeClassName;
            /// <inheritdoc/>
            public override bool IsBridgeAbstract => false;
            /// <inheritdoc/>
            public override bool IsBridgeCloseable => false;
            /// <inheritdoc/>
            public override bool IsBridgeInterface => false;
            /// <inheritdoc/>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region RocksDBDslStoreSuppliers declaration
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.9.1/org/apache/kafka/streams/state/BuiltInDslStoreSuppliers.RocksDBDslStoreSuppliers.html"/>
        /// </summary>
        public partial class RocksDBDslStoreSuppliers : Org.Apache.Kafka.Streams.State.DslStoreSuppliers
        {
            const string _bridgeClassName = "org.apache.kafka.streams.state.BuiltInDslStoreSuppliers$RocksDBDslStoreSuppliers";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public RocksDBDslStoreSuppliers() { }
            /// <summary>
            /// Internal constructor: used internally from JCOBridge
            /// </summary>
            [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public RocksDBDslStoreSuppliers(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public RocksDBDslStoreSuppliers(params object[] args) : base(args) { }

            private static readonly global::System.Exception _LocalBridgeClazzException = null;
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <inheritdoc/>
            public override string BridgeClassName => _bridgeClassName;
            /// <inheritdoc/>
            public override bool IsBridgeAbstract => false;
            /// <inheritdoc/>
            public override bool IsBridgeCloseable => false;
            /// <inheritdoc/>
            public override bool IsBridgeInterface => false;
            /// <inheritdoc/>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

    
    }
    #endregion

    #region BuiltInDslStoreSuppliers implementation
    public partial class BuiltInDslStoreSuppliers
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.9.1/org/apache/kafka/streams/state/BuiltInDslStoreSuppliers.html#IN_MEMORY"/>
        /// </summary>
        public static Org.Apache.Kafka.Streams.State.DslStoreSuppliers IN_MEMORY { get { if (!_IN_MEMORYReady) { _IN_MEMORYContent = SGetField<Org.Apache.Kafka.Streams.State.DslStoreSuppliers>(LocalBridgeClazz, "IN_MEMORY"); _IN_MEMORYReady = true; } return _IN_MEMORYContent; } }
        private static Org.Apache.Kafka.Streams.State.DslStoreSuppliers _IN_MEMORYContent = default;
        private static bool _IN_MEMORYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.9.1/org/apache/kafka/streams/state/BuiltInDslStoreSuppliers.html#ROCKS_DB"/>
        /// </summary>
        public static Org.Apache.Kafka.Streams.State.DslStoreSuppliers ROCKS_DB { get { if (!_ROCKS_DBReady) { _ROCKS_DBContent = SGetField<Org.Apache.Kafka.Streams.State.DslStoreSuppliers>(LocalBridgeClazz, "ROCKS_DB"); _ROCKS_DBReady = true; } return _ROCKS_DBContent; } }
        private static Org.Apache.Kafka.Streams.State.DslStoreSuppliers _ROCKS_DBContent = default;
        private static bool _ROCKS_DBReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods

        #endregion

        #region Nested classes
        #region InMemoryDslStoreSuppliers implementation
        public partial class InMemoryDslStoreSuppliers
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.9.1/org/apache/kafka/streams/state/BuiltInDslStoreSuppliers.InMemoryDslStoreSuppliers.html#keyValueStore-org.apache.kafka.streams.state.DslKeyValueParams-"/>
            /// </summary>
            /// <param name="arg0"><see cref="Org.Apache.Kafka.Streams.State.DslKeyValueParams"/></param>
            /// <returns><see cref="Org.Apache.Kafka.Streams.State.KeyValueBytesStoreSupplier"/></returns>
            public Org.Apache.Kafka.Streams.State.KeyValueBytesStoreSupplier KeyValueStore(Org.Apache.Kafka.Streams.State.DslKeyValueParams arg0)
            {
                return IExecuteWithSignature<Org.Apache.Kafka.Streams.State.KeyValueBytesStoreSupplier>("keyValueStore", "(Lorg/apache/kafka/streams/state/DslKeyValueParams;)Lorg/apache/kafka/streams/state/KeyValueBytesStoreSupplier;", arg0);
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.9.1/org/apache/kafka/streams/state/BuiltInDslStoreSuppliers.InMemoryDslStoreSuppliers.html#sessionStore-org.apache.kafka.streams.state.DslSessionParams-"/>
            /// </summary>
            /// <param name="arg0"><see cref="Org.Apache.Kafka.Streams.State.DslSessionParams"/></param>
            /// <returns><see cref="Org.Apache.Kafka.Streams.State.SessionBytesStoreSupplier"/></returns>
            public Org.Apache.Kafka.Streams.State.SessionBytesStoreSupplier SessionStore(Org.Apache.Kafka.Streams.State.DslSessionParams arg0)
            {
                return IExecuteWithSignature<Org.Apache.Kafka.Streams.State.SessionBytesStoreSupplier>("sessionStore", "(Lorg/apache/kafka/streams/state/DslSessionParams;)Lorg/apache/kafka/streams/state/SessionBytesStoreSupplier;", arg0);
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.9.1/org/apache/kafka/streams/state/BuiltInDslStoreSuppliers.InMemoryDslStoreSuppliers.html#windowStore-org.apache.kafka.streams.state.DslWindowParams-"/>
            /// </summary>
            /// <param name="arg0"><see cref="Org.Apache.Kafka.Streams.State.DslWindowParams"/></param>
            /// <returns><see cref="Org.Apache.Kafka.Streams.State.WindowBytesStoreSupplier"/></returns>
            public Org.Apache.Kafka.Streams.State.WindowBytesStoreSupplier WindowStore(Org.Apache.Kafka.Streams.State.DslWindowParams arg0)
            {
                return IExecuteWithSignature<Org.Apache.Kafka.Streams.State.WindowBytesStoreSupplier>("windowStore", "(Lorg/apache/kafka/streams/state/DslWindowParams;)Lorg/apache/kafka/streams/state/WindowBytesStoreSupplier;", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region RocksDBDslStoreSuppliers implementation
        public partial class RocksDBDslStoreSuppliers
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.9.1/org/apache/kafka/streams/state/BuiltInDslStoreSuppliers.RocksDBDslStoreSuppliers.html#keyValueStore-org.apache.kafka.streams.state.DslKeyValueParams-"/>
            /// </summary>
            /// <param name="arg0"><see cref="Org.Apache.Kafka.Streams.State.DslKeyValueParams"/></param>
            /// <returns><see cref="Org.Apache.Kafka.Streams.State.KeyValueBytesStoreSupplier"/></returns>
            public Org.Apache.Kafka.Streams.State.KeyValueBytesStoreSupplier KeyValueStore(Org.Apache.Kafka.Streams.State.DslKeyValueParams arg0)
            {
                return IExecuteWithSignature<Org.Apache.Kafka.Streams.State.KeyValueBytesStoreSupplier>("keyValueStore", "(Lorg/apache/kafka/streams/state/DslKeyValueParams;)Lorg/apache/kafka/streams/state/KeyValueBytesStoreSupplier;", arg0);
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.9.1/org/apache/kafka/streams/state/BuiltInDslStoreSuppliers.RocksDBDslStoreSuppliers.html#sessionStore-org.apache.kafka.streams.state.DslSessionParams-"/>
            /// </summary>
            /// <param name="arg0"><see cref="Org.Apache.Kafka.Streams.State.DslSessionParams"/></param>
            /// <returns><see cref="Org.Apache.Kafka.Streams.State.SessionBytesStoreSupplier"/></returns>
            public Org.Apache.Kafka.Streams.State.SessionBytesStoreSupplier SessionStore(Org.Apache.Kafka.Streams.State.DslSessionParams arg0)
            {
                return IExecuteWithSignature<Org.Apache.Kafka.Streams.State.SessionBytesStoreSupplier>("sessionStore", "(Lorg/apache/kafka/streams/state/DslSessionParams;)Lorg/apache/kafka/streams/state/SessionBytesStoreSupplier;", arg0);
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.9.1/org/apache/kafka/streams/state/BuiltInDslStoreSuppliers.RocksDBDslStoreSuppliers.html#windowStore-org.apache.kafka.streams.state.DslWindowParams-"/>
            /// </summary>
            /// <param name="arg0"><see cref="Org.Apache.Kafka.Streams.State.DslWindowParams"/></param>
            /// <returns><see cref="Org.Apache.Kafka.Streams.State.WindowBytesStoreSupplier"/></returns>
            public Org.Apache.Kafka.Streams.State.WindowBytesStoreSupplier WindowStore(Org.Apache.Kafka.Streams.State.DslWindowParams arg0)
            {
                return IExecuteWithSignature<Org.Apache.Kafka.Streams.State.WindowBytesStoreSupplier>("windowStore", "(Lorg/apache/kafka/streams/state/DslWindowParams;)Lorg/apache/kafka/streams/state/WindowBytesStoreSupplier;", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}