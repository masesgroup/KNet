/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka-streams-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Streams.Processor.Internals.Assignment
{
    #region FallbackPriorTaskAssignor
    public partial class FallbackPriorTaskAssignor
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Org.Apache.Kafka.Streams.Processor.Internals.Assignment.FallbackPriorTaskAssignor"/> to <see cref="Org.Apache.Kafka.Streams.Processor.Internals.Assignment.TaskAssignor"/>
        /// </summary>
        public static implicit operator Org.Apache.Kafka.Streams.Processor.Internals.Assignment.TaskAssignor(Org.Apache.Kafka.Streams.Processor.Internals.Assignment.FallbackPriorTaskAssignor t) => t.Cast<Org.Apache.Kafka.Streams.Processor.Internals.Assignment.TaskAssignor>();

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/assignment/FallbackPriorTaskAssignor.html#assign(java.util.Map,java.util.Set,java.util.Set,org.apache.kafka.streams.processor.internals.assignment.AssignorConfiguration.AssignmentConfigs)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Map"/></param>
        /// <param name="arg1"><see cref="Java.Util.Set"/></param>
        /// <param name="arg2"><see cref="Java.Util.Set"/></param>
        /// <param name="arg3"><see cref="Org.Apache.Kafka.Streams.Processor.Internals.Assignment.AssignorConfiguration.AssignmentConfigs"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool Assign(Java.Util.Map<Java.Util.UUID, Org.Apache.Kafka.Streams.Processor.Internals.Assignment.ClientState> arg0, Java.Util.Set<Org.Apache.Kafka.Streams.Processor.TaskId> arg1, Java.Util.Set<Org.Apache.Kafka.Streams.Processor.TaskId> arg2, Org.Apache.Kafka.Streams.Processor.Internals.Assignment.AssignorConfiguration.AssignmentConfigs arg3)
        {
            return IExecute<bool>("assign", arg0, arg1, arg2, arg3);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}