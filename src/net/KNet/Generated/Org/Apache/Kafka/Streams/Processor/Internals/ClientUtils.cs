/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka-streams-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Streams.Processor.Internals
{
    #region ClientUtils
    public partial class ClientUtils
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/ClientUtils.html#extractThreadId(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <returns><see cref="string"/></returns>
        public static string ExtractThreadId(string arg0)
        {
            return SExecute<string>(LocalBridgeClazz, "extractThreadId", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/ClientUtils.html#getConsumerClientId(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <returns><see cref="string"/></returns>
        public static string GetConsumerClientId(string arg0)
        {
            return SExecute<string>(LocalBridgeClazz, "getConsumerClientId", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/ClientUtils.html#getRestoreConsumerClientId(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <returns><see cref="string"/></returns>
        public static string GetRestoreConsumerClientId(string arg0)
        {
            return SExecute<string>(LocalBridgeClazz, "getRestoreConsumerClientId", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/ClientUtils.html#getSharedAdminClientId(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <returns><see cref="string"/></returns>
        public static string GetSharedAdminClientId(string arg0)
        {
            return SExecute<string>(LocalBridgeClazz, "getSharedAdminClientId", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/ClientUtils.html#getTaskProducerClientId(java.lang.String,org.apache.kafka.streams.processor.TaskId)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Streams.Processor.TaskId"/></param>
        /// <returns><see cref="string"/></returns>
        public static string GetTaskProducerClientId(string arg0, Org.Apache.Kafka.Streams.Processor.TaskId arg1)
        {
            return SExecute<string>(LocalBridgeClazz, "getTaskProducerClientId", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/ClientUtils.html#getThreadProducerClientId(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <returns><see cref="string"/></returns>
        public static string GetThreadProducerClientId(string arg0)
        {
            return SExecute<string>(LocalBridgeClazz, "getThreadProducerClientId", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/ClientUtils.html#adminClientMetrics(org.apache.kafka.clients.admin.Admin)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Clients.Admin.Admin"/></param>
        /// <returns><see cref="Java.Util.Map"/></returns>
        public static Java.Util.Map<Org.Apache.Kafka.Common.MetricName, Org.Apache.Kafka.Common.Metric> AdminClientMetrics(Org.Apache.Kafka.Clients.Admin.Admin arg0)
        {
            return SExecute<Java.Util.Map<Org.Apache.Kafka.Common.MetricName, Org.Apache.Kafka.Common.Metric>>(LocalBridgeClazz, "adminClientMetrics", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/ClientUtils.html#consumerMetrics(org.apache.kafka.clients.consumer.Consumer,org.apache.kafka.clients.consumer.Consumer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Clients.Consumer.Consumer"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Clients.Consumer.Consumer"/></param>
        /// <returns><see cref="Java.Util.Map"/></returns>
        public static Java.Util.Map<Org.Apache.Kafka.Common.MetricName, Org.Apache.Kafka.Common.Metric> ConsumerMetrics(Org.Apache.Kafka.Clients.Consumer.Consumer<byte[], byte[]> arg0, Org.Apache.Kafka.Clients.Consumer.Consumer<byte[], byte[]> arg1)
        {
            return SExecute<Java.Util.Map<Org.Apache.Kafka.Common.MetricName, Org.Apache.Kafka.Common.Metric>>(LocalBridgeClazz, "consumerMetrics", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/ClientUtils.html#producerMetrics(java.util.Collection)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Collection"/></param>
        /// <returns><see cref="Java.Util.Map"/></returns>
        public static Java.Util.Map<Org.Apache.Kafka.Common.MetricName, Org.Apache.Kafka.Common.Metric> ProducerMetrics(Java.Util.Collection<Org.Apache.Kafka.Streams.Processor.Internals.StreamsProducer> arg0)
        {
            return SExecute<Java.Util.Map<Org.Apache.Kafka.Common.MetricName, Org.Apache.Kafka.Common.Metric>>(LocalBridgeClazz, "producerMetrics", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/ClientUtils.html#fetchCommittedOffsets(java.util.Set,org.apache.kafka.clients.consumer.Consumer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Set"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Clients.Consumer.Consumer"/></param>
        /// <returns><see cref="Java.Util.Map"/></returns>
        public static Java.Util.Map<Org.Apache.Kafka.Common.TopicPartition, long?> FetchCommittedOffsets(Java.Util.Set<Org.Apache.Kafka.Common.TopicPartition> arg0, Org.Apache.Kafka.Clients.Consumer.Consumer<byte[], byte[]> arg1)
        {
            return SExecute<Java.Util.Map<Org.Apache.Kafka.Common.TopicPartition, long?>>(LocalBridgeClazz, "fetchCommittedOffsets", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/ClientUtils.html#fetchEndOffsets(java.util.Collection,org.apache.kafka.clients.admin.Admin)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Collection"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Clients.Admin.Admin"/></param>
        /// <returns><see cref="Java.Util.Map"/></returns>
        public static Java.Util.Map<Org.Apache.Kafka.Common.TopicPartition, Org.Apache.Kafka.Clients.Admin.ListOffsetsResult.ListOffsetsResultInfo> FetchEndOffsets(Java.Util.Collection<Org.Apache.Kafka.Common.TopicPartition> arg0, Org.Apache.Kafka.Clients.Admin.Admin arg1)
        {
            return SExecute<Java.Util.Map<Org.Apache.Kafka.Common.TopicPartition, Org.Apache.Kafka.Clients.Admin.ListOffsetsResult.ListOffsetsResultInfo>>(LocalBridgeClazz, "fetchEndOffsets", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/ClientUtils.html#getEndOffsets(org.apache.kafka.common.KafkaFuture)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.KafkaFuture"/></param>
        /// <returns><see cref="Java.Util.Map"/></returns>
        public static Java.Util.Map<Org.Apache.Kafka.Common.TopicPartition, Org.Apache.Kafka.Clients.Admin.ListOffsetsResult.ListOffsetsResultInfo> GetEndOffsets(Org.Apache.Kafka.Common.KafkaFuture<Java.Util.Map<Org.Apache.Kafka.Common.TopicPartition, Org.Apache.Kafka.Clients.Admin.ListOffsetsResult.ListOffsetsResultInfo>> arg0)
        {
            return SExecute<Java.Util.Map<Org.Apache.Kafka.Common.TopicPartition, Org.Apache.Kafka.Clients.Admin.ListOffsetsResult.ListOffsetsResultInfo>>(LocalBridgeClazz, "getEndOffsets", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/ClientUtils.html#consumerRecordSizeInBytes(org.apache.kafka.clients.consumer.ConsumerRecord)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Clients.Consumer.ConsumerRecord"/></param>
        /// <returns><see cref="long"/></returns>
        public static long ConsumerRecordSizeInBytes(Org.Apache.Kafka.Clients.Consumer.ConsumerRecord<byte[], byte[]> arg0)
        {
            return SExecute<long>(LocalBridgeClazz, "consumerRecordSizeInBytes", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/ClientUtils.html#producerRecordSizeInBytes(org.apache.kafka.clients.producer.ProducerRecord)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Clients.Producer.ProducerRecord"/></param>
        /// <returns><see cref="long"/></returns>
        public static long ProducerRecordSizeInBytes(Org.Apache.Kafka.Clients.Producer.ProducerRecord<byte[], byte[]> arg0)
        {
            return SExecute<long>(LocalBridgeClazz, "producerRecordSizeInBytes", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/ClientUtils.html#fetchEndOffsetsFuture(java.util.Collection,org.apache.kafka.clients.admin.Admin)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Collection"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Clients.Admin.Admin"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.KafkaFuture"/></returns>
        public static Org.Apache.Kafka.Common.KafkaFuture<Java.Util.Map<Org.Apache.Kafka.Common.TopicPartition, Org.Apache.Kafka.Clients.Admin.ListOffsetsResult.ListOffsetsResultInfo>> FetchEndOffsetsFuture(Java.Util.Collection<Org.Apache.Kafka.Common.TopicPartition> arg0, Org.Apache.Kafka.Clients.Admin.Admin arg1)
        {
            return SExecute<Org.Apache.Kafka.Common.KafkaFuture<Java.Util.Map<Org.Apache.Kafka.Common.TopicPartition, Org.Apache.Kafka.Clients.Admin.ListOffsetsResult.ListOffsetsResultInfo>>>(LocalBridgeClazz, "fetchEndOffsetsFuture", arg0, arg1);
        }

        #endregion

        #region Instance methods

        #endregion

        #region Nested classes
        #region QuietConsumerConfig
        public partial class QuietConsumerConfig
        {
            #region Constructors
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/ClientUtils.QuietConsumerConfig.html#%3Cinit%3E(java.util.Map)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Util.Map"/></param>
            public QuietConsumerConfig(Java.Util.Map arg0)
                : base(arg0)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region QuietStreamsConfig
        public partial class QuietStreamsConfig
        {
            #region Constructors
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/ClientUtils.QuietStreamsConfig.html#%3Cinit%3E(java.util.Map)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Util.Map"/></param>
            public QuietStreamsConfig(Java.Util.Map arg0)
                : base(arg0)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}