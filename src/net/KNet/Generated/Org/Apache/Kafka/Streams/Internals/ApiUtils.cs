/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka-streams-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Streams.Internals
{
    #region ApiUtils
    public partial class ApiUtils
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/internals/ApiUtils.html#checkSupplier(org.apache.kafka.streams.kstream.ValueTransformerSupplier)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Streams.Kstream.ValueTransformerSupplier"/></param>
        /// <typeparam name="V"></typeparam>
        /// <typeparam name="VR"></typeparam>
        public static void CheckSupplier<V, VR>(Org.Apache.Kafka.Streams.Kstream.ValueTransformerSupplier<V, VR> arg0)
        {
            SExecute(LocalBridgeClazz, "checkSupplier", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/internals/ApiUtils.html#prepareMillisCheckFailMsgPrefix(java.lang.Object,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="object"/></param>
        /// <param name="arg1"><see cref="string"/></param>
        /// <returns><see cref="string"/></returns>
        public static string PrepareMillisCheckFailMsgPrefix(object arg0, string arg1)
        {
            return SExecute<string>(LocalBridgeClazz, "prepareMillisCheckFailMsgPrefix", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/internals/ApiUtils.html#validateMillisecondDuration(java.time.Duration,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Time.Duration"/></param>
        /// <param name="arg1"><see cref="string"/></param>
        /// <returns><see cref="long"/></returns>
        public static long ValidateMillisecondDuration(Java.Time.Duration arg0, string arg1)
        {
            return SExecute<long>(LocalBridgeClazz, "validateMillisecondDuration", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/internals/ApiUtils.html#validateMillisecondInstant(java.time.Instant,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Time.Instant"/></param>
        /// <param name="arg1"><see cref="string"/></param>
        /// <returns><see cref="long"/></returns>
        public static long ValidateMillisecondInstant(Java.Time.Instant arg0, string arg1)
        {
            return SExecute<long>(LocalBridgeClazz, "validateMillisecondInstant", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/internals/ApiUtils.html#checkSupplier(java.util.function.Supplier)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Function.Supplier"/></param>
        /// <typeparam name="Arg0Extendsobject"></typeparam>
        public static void CheckSupplier<Arg0Extendsobject>(Java.Util.Function.Supplier<Arg0Extendsobject> arg0)
        {
            SExecute(LocalBridgeClazz, "checkSupplier", arg0);
        }

        #endregion

        #region Instance methods

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}