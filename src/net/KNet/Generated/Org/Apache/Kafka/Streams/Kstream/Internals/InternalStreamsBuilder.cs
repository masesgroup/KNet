/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka-streams-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Streams.Kstream.Internals
{
    #region InternalStreamsBuilder
    public partial class InternalStreamsBuilder
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/kstream/internals/InternalStreamsBuilder.html#%3Cinit%3E(org.apache.kafka.streams.processor.internals.InternalTopologyBuilder)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Streams.Processor.Internals.InternalTopologyBuilder"/></param>
        public InternalStreamsBuilder(Org.Apache.Kafka.Streams.Processor.Internals.InternalTopologyBuilder arg0)
            : base(arg0)
        {
        }

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Org.Apache.Kafka.Streams.Kstream.Internals.InternalStreamsBuilder"/> to <see cref="Org.Apache.Kafka.Streams.Kstream.Internals.InternalNameProvider"/>
        /// </summary>
        public static implicit operator Org.Apache.Kafka.Streams.Kstream.Internals.InternalNameProvider(Org.Apache.Kafka.Streams.Kstream.Internals.InternalStreamsBuilder t) => t.Cast<Org.Apache.Kafka.Streams.Kstream.Internals.InternalNameProvider>();

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/kstream/internals/InternalStreamsBuilder.html#root()"/> 
        /// </summary>
        public Org.Apache.Kafka.Streams.Kstream.Internals.Graph.GraphNode Root
        {
            get { return IExecute<Org.Apache.Kafka.Streams.Kstream.Internals.Graph.GraphNode>("root"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/kstream/internals/InternalStreamsBuilder.html#globalTable(java.lang.String,org.apache.kafka.streams.kstream.internals.ConsumedInternal,org.apache.kafka.streams.kstream.internals.MaterializedInternal)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Streams.Kstream.Internals.ConsumedInternal"/></param>
        /// <param name="arg2"><see cref="Org.Apache.Kafka.Streams.Kstream.Internals.MaterializedInternal"/></param>
        /// <typeparam name="K"></typeparam>
        /// <typeparam name="V"></typeparam>
        /// <returns><see cref="Org.Apache.Kafka.Streams.Kstream.GlobalKTable"/></returns>
        public Org.Apache.Kafka.Streams.Kstream.GlobalKTable<K, V> GlobalTable<K, V>(string arg0, Org.Apache.Kafka.Streams.Kstream.Internals.ConsumedInternal<K, V> arg1, Org.Apache.Kafka.Streams.Kstream.Internals.MaterializedInternal arg2)
        {
            return IExecute<Org.Apache.Kafka.Streams.Kstream.GlobalKTable<K, V>>("globalTable", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/kstream/internals/InternalStreamsBuilder.html#stream(java.util.Collection,org.apache.kafka.streams.kstream.internals.ConsumedInternal)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Collection"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Streams.Kstream.Internals.ConsumedInternal"/></param>
        /// <typeparam name="K"></typeparam>
        /// <typeparam name="V"></typeparam>
        /// <returns><see cref="Org.Apache.Kafka.Streams.Kstream.KStream"/></returns>
        public Org.Apache.Kafka.Streams.Kstream.KStream<K, V> Stream<K, V>(Java.Util.Collection<string> arg0, Org.Apache.Kafka.Streams.Kstream.Internals.ConsumedInternal<K, V> arg1)
        {
            return IExecute<Org.Apache.Kafka.Streams.Kstream.KStream<K, V>>("stream", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/kstream/internals/InternalStreamsBuilder.html#stream(java.util.regex.Pattern,org.apache.kafka.streams.kstream.internals.ConsumedInternal)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Regex.Pattern"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Streams.Kstream.Internals.ConsumedInternal"/></param>
        /// <typeparam name="K"></typeparam>
        /// <typeparam name="V"></typeparam>
        /// <returns><see cref="Org.Apache.Kafka.Streams.Kstream.KStream"/></returns>
        public Org.Apache.Kafka.Streams.Kstream.KStream<K, V> Stream<K, V>(Java.Util.Regex.Pattern arg0, Org.Apache.Kafka.Streams.Kstream.Internals.ConsumedInternal<K, V> arg1)
        {
            return IExecute<Org.Apache.Kafka.Streams.Kstream.KStream<K, V>>("stream", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/kstream/internals/InternalStreamsBuilder.html#table(java.lang.String,org.apache.kafka.streams.kstream.internals.ConsumedInternal,org.apache.kafka.streams.kstream.internals.MaterializedInternal)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Streams.Kstream.Internals.ConsumedInternal"/></param>
        /// <param name="arg2"><see cref="Org.Apache.Kafka.Streams.Kstream.Internals.MaterializedInternal"/></param>
        /// <typeparam name="K"></typeparam>
        /// <typeparam name="V"></typeparam>
        /// <returns><see cref="Org.Apache.Kafka.Streams.Kstream.KTable"/></returns>
        public Org.Apache.Kafka.Streams.Kstream.KTable<K, V> Table<K, V>(string arg0, Org.Apache.Kafka.Streams.Kstream.Internals.ConsumedInternal<K, V> arg1, Org.Apache.Kafka.Streams.Kstream.Internals.MaterializedInternal arg2)
        {
            return IExecute<Org.Apache.Kafka.Streams.Kstream.KTable<K, V>>("table", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/kstream/internals/InternalStreamsBuilder.html#newProcessorName(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <returns><see cref="string"/></returns>
        public string NewProcessorName(string arg0)
        {
            return IExecute<string>("newProcessorName", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/kstream/internals/InternalStreamsBuilder.html#newStoreName(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <returns><see cref="string"/></returns>
        public string NewStoreName(string arg0)
        {
            return IExecute<string>("newStoreName", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/kstream/internals/InternalStreamsBuilder.html#addGlobalStore(org.apache.kafka.streams.state.StoreBuilder,java.lang.String,org.apache.kafka.streams.kstream.internals.ConsumedInternal,org.apache.kafka.streams.processor.api.ProcessorSupplier)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Streams.State.StoreBuilder"/></param>
        /// <param name="arg1"><see cref="string"/></param>
        /// <param name="arg2"><see cref="Org.Apache.Kafka.Streams.Kstream.Internals.ConsumedInternal"/></param>
        /// <param name="arg3"><see cref="Org.Apache.Kafka.Streams.Processor.Api.ProcessorSupplier"/></param>
        /// <typeparam name="KIn"></typeparam>
        /// <typeparam name="VIn"></typeparam>
        public void AddGlobalStore<KIn, VIn>(Org.Apache.Kafka.Streams.State.StoreBuilder arg0, string arg1, Org.Apache.Kafka.Streams.Kstream.Internals.ConsumedInternal<KIn, VIn> arg2, Org.Apache.Kafka.Streams.Processor.Api.ProcessorSupplier<KIn, VIn, Java.Lang.Void, Java.Lang.Void> arg3)
        {
            IExecute("addGlobalStore", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/kstream/internals/InternalStreamsBuilder.html#addStateStore(org.apache.kafka.streams.state.StoreBuilder)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Streams.State.StoreBuilder"/></param>
        public void AddStateStore(Org.Apache.Kafka.Streams.State.StoreBuilder arg0)
        {
            IExecute("addStateStore", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/kstream/internals/InternalStreamsBuilder.html#buildAndOptimizeTopology()"/>
        /// </summary>
        public void BuildAndOptimizeTopology()
        {
            IExecute("buildAndOptimizeTopology");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/kstream/internals/InternalStreamsBuilder.html#buildAndOptimizeTopology(java.util.Properties)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Properties"/></param>
        public void BuildAndOptimizeTopology(Java.Util.Properties arg0)
        {
            IExecute("buildAndOptimizeTopology", arg0);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}