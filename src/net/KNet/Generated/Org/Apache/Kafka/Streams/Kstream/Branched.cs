/*
*  Copyright (c) 2021-2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.6.3.0)
*  using kafka-streams-4.1.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Streams.Kstream
{
    #region Branched declaration
    /// <summary>
    /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/4.0.0/org/apache/kafka/streams/kstream/Branched.html"/>
    /// </summary>
    public partial class Branched : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Branched>
    {
        const string _bridgeClassName = "org.apache.kafka.streams.kstream.Branched";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public Branched() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public Branched(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, false);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <inheritdoc/>
        public override string BridgeClassName => _bridgeClassName;
        /// <inheritdoc/>
        public override bool IsBridgeAbstract => false;
        /// <inheritdoc/>
        public override bool IsBridgeCloseable => false;
        /// <inheritdoc/>
        public override bool IsBridgeInterface => false;
        /// <inheritdoc/>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class

    }
    #endregion

    #region Branched<K, V> declaration
    /// <summary>
    /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/4.0.0/org/apache/kafka/streams/kstream/Branched.html"/>
    /// </summary>
    /// <typeparam name="K"></typeparam>
    /// <typeparam name="V"></typeparam>
    public partial class Branched<K, V> : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Branched<K, V>>
    {
        const string _bridgeClassName = "org.apache.kafka.streams.kstream.Branched";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public Branched() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public Branched(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, false);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <inheritdoc/>
        public override string BridgeClassName => _bridgeClassName;
        /// <inheritdoc/>
        public override bool IsBridgeAbstract => false;
        /// <inheritdoc/>
        public override bool IsBridgeCloseable => false;
        /// <inheritdoc/>
        public override bool IsBridgeInterface => false;
        /// <inheritdoc/>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class
    
    }
    #endregion

    #region Branched implementation
    public partial class Branched
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/4.0.0/org/apache/kafka/streams/kstream/Branched.html#as(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Streams.Kstream.Branched"/></returns>
        public static Org.Apache.Kafka.Streams.Kstream.Branched As(Java.Lang.String arg0)
        {
            return SExecuteWithSignature<Org.Apache.Kafka.Streams.Kstream.Branched>(LocalBridgeClazz, "as", "(Ljava/lang/String;)Lorg/apache/kafka/streams/kstream/Branched;", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/4.0.0/org/apache/kafka/streams/kstream/Branched.html#withConsumer(java.util.function.Consumer,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Function.Consumer"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Streams.Kstream.Branched"/></returns>
        public static Org.Apache.Kafka.Streams.Kstream.Branched WithConsumer(Java.Util.Function.Consumer arg0, Java.Lang.String arg1)
        {
            return SExecuteWithSignature<Org.Apache.Kafka.Streams.Kstream.Branched>(LocalBridgeClazz, "withConsumer", "(Ljava/util/function/Consumer;Ljava/lang/String;)Lorg/apache/kafka/streams/kstream/Branched;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/4.0.0/org/apache/kafka/streams/kstream/Branched.html#withConsumer(java.util.function.Consumer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Function.Consumer"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Streams.Kstream.Branched"/></returns>
        public static Org.Apache.Kafka.Streams.Kstream.Branched WithConsumer(Java.Util.Function.Consumer arg0)
        {
            return SExecuteWithSignature<Org.Apache.Kafka.Streams.Kstream.Branched>(LocalBridgeClazz, "withConsumer", "(Ljava/util/function/Consumer;)Lorg/apache/kafka/streams/kstream/Branched;", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/4.0.0/org/apache/kafka/streams/kstream/Branched.html#withFunction(java.util.function.Function,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Function.Function"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Streams.Kstream.Branched"/></returns>
        public static Org.Apache.Kafka.Streams.Kstream.Branched WithFunction(Java.Util.Function.Function arg0, Java.Lang.String arg1)
        {
            return SExecuteWithSignature<Org.Apache.Kafka.Streams.Kstream.Branched>(LocalBridgeClazz, "withFunction", "(Ljava/util/function/Function;Ljava/lang/String;)Lorg/apache/kafka/streams/kstream/Branched;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/4.0.0/org/apache/kafka/streams/kstream/Branched.html#withFunction(java.util.function.Function)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Function.Function"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Streams.Kstream.Branched"/></returns>
        public static Org.Apache.Kafka.Streams.Kstream.Branched WithFunction(Java.Util.Function.Function arg0)
        {
            return SExecuteWithSignature<Org.Apache.Kafka.Streams.Kstream.Branched>(LocalBridgeClazz, "withFunction", "(Ljava/util/function/Function;)Lorg/apache/kafka/streams/kstream/Branched;", arg0);
        }

        #endregion

        #region Instance methods

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion

    #region Branched<K, V> implementation
    public partial class Branched<K, V>
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Org.Apache.Kafka.Streams.Kstream.Branched{K, V}"/> to <see cref="Org.Apache.Kafka.Streams.Kstream.Branched"/>
        /// </summary>
        public static implicit operator Org.Apache.Kafka.Streams.Kstream.Branched(Org.Apache.Kafka.Streams.Kstream.Branched<K, V> t) => t.Cast<Org.Apache.Kafka.Streams.Kstream.Branched>();

        #endregion

        #region Fields

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/4.0.0/org/apache/kafka/streams/kstream/Branched.html#as(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Streams.Kstream.Branched"/></returns>
        public static Org.Apache.Kafka.Streams.Kstream.Branched<K, V> As(Java.Lang.String arg0)
        {
            return SExecuteWithSignature<Org.Apache.Kafka.Streams.Kstream.Branched<K, V>>(LocalBridgeClazz, "as", "(Ljava/lang/String;)Lorg/apache/kafka/streams/kstream/Branched;", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/4.0.0/org/apache/kafka/streams/kstream/Branched.html#withConsumer(java.util.function.Consumer,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Function.Consumer"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <typeparam name="Arg0objectSuperOrg_Apache_Kafka_Streams_Kstream_KStream_K_V_"><see cref="Org.Apache.Kafka.Streams.Kstream.KStream{K, V}"/></typeparam>
        /// <returns><see cref="Org.Apache.Kafka.Streams.Kstream.Branched"/></returns>
        public static Org.Apache.Kafka.Streams.Kstream.Branched<K, V> WithConsumer<Arg0objectSuperOrg_Apache_Kafka_Streams_Kstream_KStream_K_V_>(Java.Util.Function.Consumer<Arg0objectSuperOrg_Apache_Kafka_Streams_Kstream_KStream_K_V_> arg0, Java.Lang.String arg1) where Arg0objectSuperOrg_Apache_Kafka_Streams_Kstream_KStream_K_V_ : Org.Apache.Kafka.Streams.Kstream.KStream<K, V>
        {
            return SExecuteWithSignature<Org.Apache.Kafka.Streams.Kstream.Branched<K, V>>(LocalBridgeClazz, "withConsumer", "(Ljava/util/function/Consumer;Ljava/lang/String;)Lorg/apache/kafka/streams/kstream/Branched;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/4.0.0/org/apache/kafka/streams/kstream/Branched.html#withConsumer(java.util.function.Consumer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Function.Consumer"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Streams.Kstream.Branched"/></returns>
        public static Org.Apache.Kafka.Streams.Kstream.Branched<K, V> WithConsumer(Java.Util.Function.Consumer<Org.Apache.Kafka.Streams.Kstream.KStream<K, V>> arg0)
        {
            return SExecuteWithSignature<Org.Apache.Kafka.Streams.Kstream.Branched<K, V>>(LocalBridgeClazz, "withConsumer", "(Ljava/util/function/Consumer;)Lorg/apache/kafka/streams/kstream/Branched;", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/4.0.0/org/apache/kafka/streams/kstream/Branched.html#withFunction(java.util.function.Function,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Function.Function"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <typeparam name="Arg0objectSuperOrg_Apache_Kafka_Streams_Kstream_KStream_K_V_"><see cref="Org.Apache.Kafka.Streams.Kstream.KStream{K, V}"/></typeparam>
        /// <typeparam name="Arg0ExtendsOrg_Apache_Kafka_Streams_Kstream_KStream_K_V_"><see cref="Org.Apache.Kafka.Streams.Kstream.KStream{K, V}"/></typeparam>
        /// <returns><see cref="Org.Apache.Kafka.Streams.Kstream.Branched"/></returns>
        public static Org.Apache.Kafka.Streams.Kstream.Branched<K, V> WithFunction<Arg0objectSuperOrg_Apache_Kafka_Streams_Kstream_KStream_K_V_, Arg0ExtendsOrg_Apache_Kafka_Streams_Kstream_KStream_K_V_>(Java.Util.Function.Function<Arg0objectSuperOrg_Apache_Kafka_Streams_Kstream_KStream_K_V_, Arg0ExtendsOrg_Apache_Kafka_Streams_Kstream_KStream_K_V_> arg0, Java.Lang.String arg1) where Arg0objectSuperOrg_Apache_Kafka_Streams_Kstream_KStream_K_V_ : Org.Apache.Kafka.Streams.Kstream.KStream<K, V> where Arg0ExtendsOrg_Apache_Kafka_Streams_Kstream_KStream_K_V_ : Org.Apache.Kafka.Streams.Kstream.KStream<K, V>
        {
            return SExecuteWithSignature<Org.Apache.Kafka.Streams.Kstream.Branched<K, V>>(LocalBridgeClazz, "withFunction", "(Ljava/util/function/Function;Ljava/lang/String;)Lorg/apache/kafka/streams/kstream/Branched;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/4.0.0/org/apache/kafka/streams/kstream/Branched.html#withFunction(java.util.function.Function)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Function.Function"/></param>
        /// <typeparam name="Arg0objectSuperOrg_Apache_Kafka_Streams_Kstream_KStream_K_V_"><see cref="Org.Apache.Kafka.Streams.Kstream.KStream{K, V}"/></typeparam>
        /// <typeparam name="Arg0ExtendsOrg_Apache_Kafka_Streams_Kstream_KStream_K_V_"><see cref="Org.Apache.Kafka.Streams.Kstream.KStream{K, V}"/></typeparam>
        /// <returns><see cref="Org.Apache.Kafka.Streams.Kstream.Branched"/></returns>
        public static Org.Apache.Kafka.Streams.Kstream.Branched<K, V> WithFunction<Arg0objectSuperOrg_Apache_Kafka_Streams_Kstream_KStream_K_V_, Arg0ExtendsOrg_Apache_Kafka_Streams_Kstream_KStream_K_V_>(Java.Util.Function.Function<Arg0objectSuperOrg_Apache_Kafka_Streams_Kstream_KStream_K_V_, Arg0ExtendsOrg_Apache_Kafka_Streams_Kstream_KStream_K_V_> arg0) where Arg0objectSuperOrg_Apache_Kafka_Streams_Kstream_KStream_K_V_ : Org.Apache.Kafka.Streams.Kstream.KStream<K, V> where Arg0ExtendsOrg_Apache_Kafka_Streams_Kstream_KStream_K_V_ : Org.Apache.Kafka.Streams.Kstream.KStream<K, V>
        {
            return SExecuteWithSignature<Org.Apache.Kafka.Streams.Kstream.Branched<K, V>>(LocalBridgeClazz, "withFunction", "(Ljava/util/function/Function;)Lorg/apache/kafka/streams/kstream/Branched;", arg0);
        }

        #endregion

        #region Instance methods

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}