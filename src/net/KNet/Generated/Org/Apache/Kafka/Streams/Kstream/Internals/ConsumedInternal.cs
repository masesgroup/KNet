/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka-streams-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Streams.Kstream.Internals
{
    #region ConsumedInternal
    public partial class ConsumedInternal
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/kstream/internals/ConsumedInternal.html#%3Cinit%3E(org.apache.kafka.common.serialization.Serde,org.apache.kafka.common.serialization.Serde,org.apache.kafka.streams.processor.TimestampExtractor,org.apache.kafka.streams.Topology.AutoOffsetReset)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Serialization.Serde"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Common.Serialization.Serde"/></param>
        /// <param name="arg2"><see cref="Org.Apache.Kafka.Streams.Processor.TimestampExtractor"/></param>
        /// <param name="arg3"><see cref="Org.Apache.Kafka.Streams.Topology.AutoOffsetReset"/></param>
        public ConsumedInternal(Org.Apache.Kafka.Common.Serialization.Serde arg0, Org.Apache.Kafka.Common.Serialization.Serde arg1, Org.Apache.Kafka.Streams.Processor.TimestampExtractor arg2, Org.Apache.Kafka.Streams.Topology.AutoOffsetReset arg3)
            : base(arg0, arg1, arg2, arg3)
        {
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/kstream/internals/ConsumedInternal.html#%3Cinit%3E(org.apache.kafka.streams.kstream.Consumed)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Streams.Kstream.Consumed"/></param>
        public ConsumedInternal(Org.Apache.Kafka.Streams.Kstream.Consumed arg0)
            : base(arg0)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/kstream/internals/ConsumedInternal.html#keyDeserializer()"/> 
        /// </summary>
        public Org.Apache.Kafka.Common.Serialization.Deserializer KeyDeserializer
        {
            get { return IExecute<Org.Apache.Kafka.Common.Serialization.Deserializer>("keyDeserializer"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/kstream/internals/ConsumedInternal.html#keySerde()"/> 
        /// </summary>
        public Org.Apache.Kafka.Common.Serialization.Serde KeySerde
        {
            get { return IExecute<Org.Apache.Kafka.Common.Serialization.Serde>("keySerde"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/kstream/internals/ConsumedInternal.html#name()"/> 
        /// </summary>
        public string Name
        {
            get { return IExecute<string>("name"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/kstream/internals/ConsumedInternal.html#offsetResetPolicy()"/> 
        /// </summary>
        public Org.Apache.Kafka.Streams.Topology.AutoOffsetReset OffsetResetPolicy
        {
            get { return IExecute<Org.Apache.Kafka.Streams.Topology.AutoOffsetReset>("offsetResetPolicy"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/kstream/internals/ConsumedInternal.html#timestampExtractor()"/> 
        /// </summary>
        public Org.Apache.Kafka.Streams.Processor.TimestampExtractor TimestampExtractor
        {
            get { return IExecute<Org.Apache.Kafka.Streams.Processor.TimestampExtractor>("timestampExtractor"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/kstream/internals/ConsumedInternal.html#valueDeserializer()"/> 
        /// </summary>
        public Org.Apache.Kafka.Common.Serialization.Deserializer ValueDeserializer
        {
            get { return IExecute<Org.Apache.Kafka.Common.Serialization.Deserializer>("valueDeserializer"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/kstream/internals/ConsumedInternal.html#valueSerde()"/> 
        /// </summary>
        public Org.Apache.Kafka.Common.Serialization.Serde ValueSerde
        {
            get { return IExecute<Org.Apache.Kafka.Common.Serialization.Serde>("valueSerde"); }
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion

    #region ConsumedInternal<K, V>
    public partial class ConsumedInternal<K, V>
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/kstream/internals/ConsumedInternal.html#%3Cinit%3E(org.apache.kafka.common.serialization.Serde,org.apache.kafka.common.serialization.Serde,org.apache.kafka.streams.processor.TimestampExtractor,org.apache.kafka.streams.Topology.AutoOffsetReset)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Serialization.Serde"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Common.Serialization.Serde"/></param>
        /// <param name="arg2"><see cref="Org.Apache.Kafka.Streams.Processor.TimestampExtractor"/></param>
        /// <param name="arg3"><see cref="Org.Apache.Kafka.Streams.Topology.AutoOffsetReset"/></param>
        public ConsumedInternal(Org.Apache.Kafka.Common.Serialization.Serde<K> arg0, Org.Apache.Kafka.Common.Serialization.Serde<V> arg1, Org.Apache.Kafka.Streams.Processor.TimestampExtractor arg2, Org.Apache.Kafka.Streams.Topology.AutoOffsetReset arg3)
            : base(arg0, arg1, arg2, arg3)
        {
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/kstream/internals/ConsumedInternal.html#%3Cinit%3E(org.apache.kafka.streams.kstream.Consumed)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Streams.Kstream.Consumed"/></param>
        public ConsumedInternal(Org.Apache.Kafka.Streams.Kstream.Consumed<K, V> arg0)
            : base(arg0)
        {
        }

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Org.Apache.Kafka.Streams.Kstream.Internals.ConsumedInternal{K, V}"/> to <see cref="Org.Apache.Kafka.Streams.Kstream.Internals.ConsumedInternal"/>
        /// </summary>
        public static implicit operator Org.Apache.Kafka.Streams.Kstream.Internals.ConsumedInternal(Org.Apache.Kafka.Streams.Kstream.Internals.ConsumedInternal<K, V> t) => t.Cast<Org.Apache.Kafka.Streams.Kstream.Internals.ConsumedInternal>();

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/kstream/internals/ConsumedInternal.html#keyDeserializer()"/> 
        /// </summary>
        public Org.Apache.Kafka.Common.Serialization.Deserializer<K> KeyDeserializer
        {
            get { return IExecute<Org.Apache.Kafka.Common.Serialization.Deserializer<K>>("keyDeserializer"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/kstream/internals/ConsumedInternal.html#keySerde()"/> 
        /// </summary>
        public Org.Apache.Kafka.Common.Serialization.Serde<K> KeySerde
        {
            get { return IExecute<Org.Apache.Kafka.Common.Serialization.Serde<K>>("keySerde"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/kstream/internals/ConsumedInternal.html#name()"/> 
        /// </summary>
        public string Name
        {
            get { return IExecute<string>("name"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/kstream/internals/ConsumedInternal.html#offsetResetPolicy()"/> 
        /// </summary>
        public Org.Apache.Kafka.Streams.Topology.AutoOffsetReset OffsetResetPolicy
        {
            get { return IExecute<Org.Apache.Kafka.Streams.Topology.AutoOffsetReset>("offsetResetPolicy"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/kstream/internals/ConsumedInternal.html#timestampExtractor()"/> 
        /// </summary>
        public Org.Apache.Kafka.Streams.Processor.TimestampExtractor TimestampExtractor
        {
            get { return IExecute<Org.Apache.Kafka.Streams.Processor.TimestampExtractor>("timestampExtractor"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/kstream/internals/ConsumedInternal.html#valueDeserializer()"/> 
        /// </summary>
        public Org.Apache.Kafka.Common.Serialization.Deserializer<V> ValueDeserializer
        {
            get { return IExecute<Org.Apache.Kafka.Common.Serialization.Deserializer<V>>("valueDeserializer"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/kstream/internals/ConsumedInternal.html#valueSerde()"/> 
        /// </summary>
        public Org.Apache.Kafka.Common.Serialization.Serde<V> ValueSerde
        {
            get { return IExecute<Org.Apache.Kafka.Common.Serialization.Serde<V>>("valueSerde"); }
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}