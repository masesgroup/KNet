/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.7.0)
*  using kafka-streams-3.8.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Streams.Processor.Assignment
{
    #region TaskAssignmentUtils
    public partial class TaskAssignmentUtils
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.8.0/org/apache/kafka/streams/processor/assignment/TaskAssignmentUtils.html#identityAssignment-org.apache.kafka.streams.processor.assignment.ApplicationState-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Streams.Processor.Assignment.ApplicationState"/></param>
        /// <returns><see cref="Java.Util.Map"/></returns>
        public static Java.Util.Map<Org.Apache.Kafka.Streams.Processor.Assignment.ProcessId, Org.Apache.Kafka.Streams.Processor.Assignment.KafkaStreamsAssignment> IdentityAssignment(Org.Apache.Kafka.Streams.Processor.Assignment.ApplicationState arg0)
        {
            return SExecuteWithSignature<Java.Util.Map<Org.Apache.Kafka.Streams.Processor.Assignment.ProcessId, Org.Apache.Kafka.Streams.Processor.Assignment.KafkaStreamsAssignment>>(LocalBridgeClazz, "identityAssignment", "(Lorg/apache/kafka/streams/processor/assignment/ApplicationState;)Ljava/util/Map;", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.8.0/org/apache/kafka/streams/processor/assignment/TaskAssignmentUtils.html#validateTaskAssignment-org.apache.kafka.streams.processor.assignment.ApplicationState-org.apache.kafka.streams.processor.assignment.TaskAssignor.TaskAssignment-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Streams.Processor.Assignment.ApplicationState"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Streams.Processor.Assignment.TaskAssignor.TaskAssignment"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Streams.Processor.Assignment.TaskAssignor.AssignmentError"/></returns>
        public static Org.Apache.Kafka.Streams.Processor.Assignment.TaskAssignor.AssignmentError ValidateTaskAssignment(Org.Apache.Kafka.Streams.Processor.Assignment.ApplicationState arg0, Org.Apache.Kafka.Streams.Processor.Assignment.TaskAssignor.TaskAssignment arg1)
        {
            return SExecute<Org.Apache.Kafka.Streams.Processor.Assignment.TaskAssignor.AssignmentError>(LocalBridgeClazz, "validateTaskAssignment", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.8.0/org/apache/kafka/streams/processor/assignment/TaskAssignmentUtils.html#defaultStandbyTaskAssignment-org.apache.kafka.streams.processor.assignment.ApplicationState-java.util.Map-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Streams.Processor.Assignment.ApplicationState"/></param>
        /// <param name="arg1"><see cref="Java.Util.Map"/></param>
        public static void DefaultStandbyTaskAssignment(Org.Apache.Kafka.Streams.Processor.Assignment.ApplicationState arg0, Java.Util.Map<Org.Apache.Kafka.Streams.Processor.Assignment.ProcessId, Org.Apache.Kafka.Streams.Processor.Assignment.KafkaStreamsAssignment> arg1)
        {
            SExecute(LocalBridgeClazz, "defaultStandbyTaskAssignment", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.8.0/org/apache/kafka/streams/processor/assignment/TaskAssignmentUtils.html#optimizeRackAwareActiveTasks-org.apache.kafka.streams.processor.assignment.TaskAssignmentUtils.RackAwareOptimizationParams-java.util.Map-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Streams.Processor.Assignment.TaskAssignmentUtils.RackAwareOptimizationParams"/></param>
        /// <param name="arg1"><see cref="Java.Util.Map"/></param>
        public static void OptimizeRackAwareActiveTasks(Org.Apache.Kafka.Streams.Processor.Assignment.TaskAssignmentUtils.RackAwareOptimizationParams arg0, Java.Util.Map<Org.Apache.Kafka.Streams.Processor.Assignment.ProcessId, Org.Apache.Kafka.Streams.Processor.Assignment.KafkaStreamsAssignment> arg1)
        {
            SExecute(LocalBridgeClazz, "optimizeRackAwareActiveTasks", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.8.0/org/apache/kafka/streams/processor/assignment/TaskAssignmentUtils.html#optimizeRackAwareStandbyTasks-org.apache.kafka.streams.processor.assignment.TaskAssignmentUtils.RackAwareOptimizationParams-java.util.Map-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Streams.Processor.Assignment.TaskAssignmentUtils.RackAwareOptimizationParams"/></param>
        /// <param name="arg1"><see cref="Java.Util.Map"/></param>
        public static void OptimizeRackAwareStandbyTasks(Org.Apache.Kafka.Streams.Processor.Assignment.TaskAssignmentUtils.RackAwareOptimizationParams arg0, Java.Util.Map<Org.Apache.Kafka.Streams.Processor.Assignment.ProcessId, Org.Apache.Kafka.Streams.Processor.Assignment.KafkaStreamsAssignment> arg1)
        {
            SExecute(LocalBridgeClazz, "optimizeRackAwareStandbyTasks", arg0, arg1);
        }

        #endregion

        #region Instance methods

        #endregion

        #region Nested classes
        #region MoveStandbyTaskPredicate
        public partial class MoveStandbyTaskPredicate
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.8.0/org/apache/kafka/streams/processor/assignment/TaskAssignmentUtils.MoveStandbyTaskPredicate.html#canMoveStandbyTask-org.apache.kafka.streams.processor.assignment.KafkaStreamsState-org.apache.kafka.streams.processor.assignment.KafkaStreamsState-org.apache.kafka.streams.processor.TaskId-java.util.Map-"/>
            /// </summary>
            /// <param name="arg0"><see cref="Org.Apache.Kafka.Streams.Processor.Assignment.KafkaStreamsState"/></param>
            /// <param name="arg1"><see cref="Org.Apache.Kafka.Streams.Processor.Assignment.KafkaStreamsState"/></param>
            /// <param name="arg2"><see cref="Org.Apache.Kafka.Streams.Processor.TaskId"/></param>
            /// <param name="arg3"><see cref="Java.Util.Map"/></param>
            /// <returns><see cref="bool"/></returns>
            public bool CanMoveStandbyTask(Org.Apache.Kafka.Streams.Processor.Assignment.KafkaStreamsState arg0, Org.Apache.Kafka.Streams.Processor.Assignment.KafkaStreamsState arg1, Org.Apache.Kafka.Streams.Processor.TaskId arg2, Java.Util.Map<Org.Apache.Kafka.Streams.Processor.Assignment.ProcessId, Org.Apache.Kafka.Streams.Processor.Assignment.KafkaStreamsAssignment> arg3)
            {
                return IExecute<bool>("canMoveStandbyTask", arg0, arg1, arg2, arg3);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region RackAwareOptimizationParams
        public partial class RackAwareOptimizationParams
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.8.0/org/apache/kafka/streams/processor/assignment/TaskAssignmentUtils.RackAwareOptimizationParams.html#of-org.apache.kafka.streams.processor.assignment.ApplicationState-"/>
            /// </summary>
            /// <param name="arg0"><see cref="Org.Apache.Kafka.Streams.Processor.Assignment.ApplicationState"/></param>
            /// <returns><see cref="Org.Apache.Kafka.Streams.Processor.Assignment.TaskAssignmentUtils.RackAwareOptimizationParams"/></returns>
            public static Org.Apache.Kafka.Streams.Processor.Assignment.TaskAssignmentUtils.RackAwareOptimizationParams Of(Org.Apache.Kafka.Streams.Processor.Assignment.ApplicationState arg0)
            {
                return SExecuteWithSignature<Org.Apache.Kafka.Streams.Processor.Assignment.TaskAssignmentUtils.RackAwareOptimizationParams>(LocalBridgeClazz, "of", "(Lorg/apache/kafka/streams/processor/assignment/ApplicationState;)Lorg/apache/kafka/streams/processor/assignment/TaskAssignmentUtils$RackAwareOptimizationParams;", arg0);
            }

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.8.0/org/apache/kafka/streams/processor/assignment/TaskAssignmentUtils.RackAwareOptimizationParams.html#forStatefulTasks--"/>
            /// </summary>
            /// <returns><see cref="Org.Apache.Kafka.Streams.Processor.Assignment.TaskAssignmentUtils.RackAwareOptimizationParams"/></returns>
            public Org.Apache.Kafka.Streams.Processor.Assignment.TaskAssignmentUtils.RackAwareOptimizationParams ForStatefulTasks()
            {
                return IExecuteWithSignature<Org.Apache.Kafka.Streams.Processor.Assignment.TaskAssignmentUtils.RackAwareOptimizationParams>("forStatefulTasks", "()Lorg/apache/kafka/streams/processor/assignment/TaskAssignmentUtils$RackAwareOptimizationParams;");
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.8.0/org/apache/kafka/streams/processor/assignment/TaskAssignmentUtils.RackAwareOptimizationParams.html#forStatelessTasks--"/>
            /// </summary>
            /// <returns><see cref="Org.Apache.Kafka.Streams.Processor.Assignment.TaskAssignmentUtils.RackAwareOptimizationParams"/></returns>
            public Org.Apache.Kafka.Streams.Processor.Assignment.TaskAssignmentUtils.RackAwareOptimizationParams ForStatelessTasks()
            {
                return IExecuteWithSignature<Org.Apache.Kafka.Streams.Processor.Assignment.TaskAssignmentUtils.RackAwareOptimizationParams>("forStatelessTasks", "()Lorg/apache/kafka/streams/processor/assignment/TaskAssignmentUtils$RackAwareOptimizationParams;");
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.8.0/org/apache/kafka/streams/processor/assignment/TaskAssignmentUtils.RackAwareOptimizationParams.html#forTasks-java.util.SortedSet-"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Util.SortedSet"/></param>
            /// <returns><see cref="Org.Apache.Kafka.Streams.Processor.Assignment.TaskAssignmentUtils.RackAwareOptimizationParams"/></returns>
            public Org.Apache.Kafka.Streams.Processor.Assignment.TaskAssignmentUtils.RackAwareOptimizationParams ForTasks(Java.Util.SortedSet<Org.Apache.Kafka.Streams.Processor.TaskId> arg0)
            {
                return IExecuteWithSignature<Org.Apache.Kafka.Streams.Processor.Assignment.TaskAssignmentUtils.RackAwareOptimizationParams>("forTasks", "(Ljava/util/SortedSet;)Lorg/apache/kafka/streams/processor/assignment/TaskAssignmentUtils$RackAwareOptimizationParams;", arg0);
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.8.0/org/apache/kafka/streams/processor/assignment/TaskAssignmentUtils.RackAwareOptimizationParams.html#withNonOverlapCostOverride-int-"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Org.Apache.Kafka.Streams.Processor.Assignment.TaskAssignmentUtils.RackAwareOptimizationParams"/></returns>
            public Org.Apache.Kafka.Streams.Processor.Assignment.TaskAssignmentUtils.RackAwareOptimizationParams WithNonOverlapCostOverride(int arg0)
            {
                return IExecuteWithSignature<Org.Apache.Kafka.Streams.Processor.Assignment.TaskAssignmentUtils.RackAwareOptimizationParams>("withNonOverlapCostOverride", "(I)Lorg/apache/kafka/streams/processor/assignment/TaskAssignmentUtils$RackAwareOptimizationParams;", arg0);
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.8.0/org/apache/kafka/streams/processor/assignment/TaskAssignmentUtils.RackAwareOptimizationParams.html#withTrafficCostOverride-int-"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Org.Apache.Kafka.Streams.Processor.Assignment.TaskAssignmentUtils.RackAwareOptimizationParams"/></returns>
            public Org.Apache.Kafka.Streams.Processor.Assignment.TaskAssignmentUtils.RackAwareOptimizationParams WithTrafficCostOverride(int arg0)
            {
                return IExecuteWithSignature<Org.Apache.Kafka.Streams.Processor.Assignment.TaskAssignmentUtils.RackAwareOptimizationParams>("withTrafficCostOverride", "(I)Lorg/apache/kafka/streams/processor/assignment/TaskAssignmentUtils$RackAwareOptimizationParams;", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}