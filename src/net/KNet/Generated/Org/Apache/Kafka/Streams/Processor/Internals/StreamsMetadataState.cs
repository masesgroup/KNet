/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka-streams-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Streams.Processor.Internals
{
    #region StreamsMetadataState
    public partial class StreamsMetadataState
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/StreamsMetadataState.html#%3Cinit%3E(org.apache.kafka.streams.processor.internals.TopologyMetadata,org.apache.kafka.streams.state.HostInfo,org.apache.kafka.common.utils.LogContext)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Streams.Processor.Internals.TopologyMetadata"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Streams.State.HostInfo"/></param>
        /// <param name="arg2"><see cref="Org.Apache.Kafka.Common.Utils.LogContext"/></param>
        public StreamsMetadataState(Org.Apache.Kafka.Streams.Processor.Internals.TopologyMetadata arg0, Org.Apache.Kafka.Streams.State.HostInfo arg1, Org.Apache.Kafka.Common.Utils.LogContext arg2)
            : base(arg0, arg1, arg2)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/StreamsMetadataState.html#UNKNOWN_HOST"/>
        /// </summary>
        public static Org.Apache.Kafka.Streams.State.HostInfo UNKNOWN_HOST { get { return SGetField<Org.Apache.Kafka.Streams.State.HostInfo>(LocalBridgeClazz, "UNKNOWN_HOST"); } }

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/StreamsMetadataState.html#getAllMetadata()"/> 
        /// </summary>
        public Java.Util.Collection<Org.Apache.Kafka.Streams.StreamsMetadata> AllMetadata
        {
            get { return IExecute<Java.Util.Collection<Org.Apache.Kafka.Streams.StreamsMetadata>>("getAllMetadata"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/StreamsMetadataState.html#getLocalMetadata()"/> 
        /// </summary>
        public Org.Apache.Kafka.Streams.StreamsMetadata LocalMetadata
        {
            get { return IExecute<Org.Apache.Kafka.Streams.StreamsMetadata>("getLocalMetadata"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/StreamsMetadataState.html#getStoreForChangelogTopic(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <returns><see cref="string"/></returns>
        public string GetStoreForChangelogTopic(string arg0)
        {
            return IExecute<string>("getStoreForChangelogTopic", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/StreamsMetadataState.html#toString(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <returns><see cref="string"/></returns>
        public string ToString(string arg0)
        {
            return IExecute<string>("toString", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/StreamsMetadataState.html#getKeyQueryMetadataForKey(java.lang.String,java.lang.Object,org.apache.kafka.common.serialization.Serializer,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <param name="arg1"><typeparamref name="K"/></param>
        /// <param name="arg2"><see cref="Org.Apache.Kafka.Common.Serialization.Serializer"/></param>
        /// <param name="arg3"><see cref="string"/></param>
        /// <typeparam name="K"></typeparam>
        /// <returns><see cref="Org.Apache.Kafka.Streams.KeyQueryMetadata"/></returns>
        public Org.Apache.Kafka.Streams.KeyQueryMetadata GetKeyQueryMetadataForKey<K>(string arg0, K arg1, Org.Apache.Kafka.Common.Serialization.Serializer<K> arg2, string arg3)
        {
            return IExecute<Org.Apache.Kafka.Streams.KeyQueryMetadata>("getKeyQueryMetadataForKey", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/StreamsMetadataState.html#getKeyQueryMetadataForKey(java.lang.String,java.lang.Object,org.apache.kafka.common.serialization.Serializer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <param name="arg1"><typeparamref name="K"/></param>
        /// <param name="arg2"><see cref="Org.Apache.Kafka.Common.Serialization.Serializer"/></param>
        /// <typeparam name="K"></typeparam>
        /// <returns><see cref="Org.Apache.Kafka.Streams.KeyQueryMetadata"/></returns>
        public Org.Apache.Kafka.Streams.KeyQueryMetadata GetKeyQueryMetadataForKey<K>(string arg0, K arg1, Org.Apache.Kafka.Common.Serialization.Serializer<K> arg2)
        {
            return IExecute<Org.Apache.Kafka.Streams.KeyQueryMetadata>("getKeyQueryMetadataForKey", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/StreamsMetadataState.html#getKeyQueryMetadataForKey(java.lang.String,java.lang.Object,org.apache.kafka.streams.processor.StreamPartitioner,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <param name="arg1"><typeparamref name="K"/></param>
        /// <param name="arg2"><see cref="Org.Apache.Kafka.Streams.Processor.StreamPartitioner"/></param>
        /// <param name="arg3"><see cref="string"/></param>
        /// <typeparam name="K"></typeparam>
        /// <typeparam name="Arg2objectSuperK"><typeparamref name="K"/></typeparam>
        /// <typeparam name="Arg2Extendsobject"></typeparam>
        /// <returns><see cref="Org.Apache.Kafka.Streams.KeyQueryMetadata"/></returns>
        public Org.Apache.Kafka.Streams.KeyQueryMetadata GetKeyQueryMetadataForKey<K, Arg2objectSuperK, Arg2Extendsobject>(string arg0, K arg1, Org.Apache.Kafka.Streams.Processor.StreamPartitioner<Arg2objectSuperK, Arg2Extendsobject> arg2, string arg3) where Arg2objectSuperK: K
        {
            return IExecute<Org.Apache.Kafka.Streams.KeyQueryMetadata>("getKeyQueryMetadataForKey", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/StreamsMetadataState.html#getKeyQueryMetadataForKey(java.lang.String,java.lang.Object,org.apache.kafka.streams.processor.StreamPartitioner)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <param name="arg1"><typeparamref name="K"/></param>
        /// <param name="arg2"><see cref="Org.Apache.Kafka.Streams.Processor.StreamPartitioner"/></param>
        /// <typeparam name="K"></typeparam>
        /// <typeparam name="Arg2objectSuperK"><typeparamref name="K"/></typeparam>
        /// <typeparam name="Arg2Extendsobject"></typeparam>
        /// <returns><see cref="Org.Apache.Kafka.Streams.KeyQueryMetadata"/></returns>
        public Org.Apache.Kafka.Streams.KeyQueryMetadata GetKeyQueryMetadataForKey<K, Arg2objectSuperK, Arg2Extendsobject>(string arg0, K arg1, Org.Apache.Kafka.Streams.Processor.StreamPartitioner<Arg2objectSuperK, Arg2Extendsobject> arg2) where Arg2objectSuperK: K
        {
            return IExecute<Org.Apache.Kafka.Streams.KeyQueryMetadata>("getKeyQueryMetadataForKey", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/StreamsMetadataState.html#getAllMetadataForStore(java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <param name="arg1"><see cref="string"/></param>
        /// <returns><see cref="Java.Util.Collection"/></returns>
        public Java.Util.Collection<Org.Apache.Kafka.Streams.StreamsMetadata> GetAllMetadataForStore(string arg0, string arg1)
        {
            return IExecute<Java.Util.Collection<Org.Apache.Kafka.Streams.StreamsMetadata>>("getAllMetadataForStore", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/StreamsMetadataState.html#getAllMetadataForStore(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <returns><see cref="Java.Util.Collection"/></returns>
        public Java.Util.Collection<Org.Apache.Kafka.Streams.StreamsMetadata> GetAllMetadataForStore(string arg0)
        {
            return IExecute<Java.Util.Collection<Org.Apache.Kafka.Streams.StreamsMetadata>>("getAllMetadataForStore", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/StreamsMetadataState.html#getAllMetadataForTopology(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <returns><see cref="Java.Util.Collection"/></returns>
        public Java.Util.Collection<Org.Apache.Kafka.Streams.StreamsMetadata> GetAllMetadataForTopology(string arg0)
        {
            return IExecute<Java.Util.Collection<Org.Apache.Kafka.Streams.StreamsMetadata>>("getAllMetadataForTopology", arg0);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}