/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka-streams-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Streams.Processor.Internals
{
    #region StateDirectory
    public partial class StateDirectory
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/StateDirectory.html#%3Cinit%3E(org.apache.kafka.streams.StreamsConfig,org.apache.kafka.common.utils.Time,boolean,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Streams.StreamsConfig"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Common.Utils.Time"/></param>
        /// <param name="arg2"><see cref="bool"/></param>
        /// <param name="arg3"><see cref="bool"/></param>
        public StateDirectory(Org.Apache.Kafka.Streams.StreamsConfig arg0, Org.Apache.Kafka.Common.Utils.Time arg1, bool arg2, bool arg3)
            : base(arg0, arg1, arg2, arg3)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/StateDirectory.html#initializeProcessId()"/> 
        /// </summary>
        public Java.Util.UUID InitializeProcessId
        {
            get { return IExecute<Java.Util.UUID>("initializeProcessId"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/StateDirectory.html#getOrCreateDirectoryForTask(org.apache.kafka.streams.processor.TaskId)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Streams.Processor.TaskId"/></param>
        /// <returns><see cref="Java.Io.File"/></returns>
        public Java.Io.File GetOrCreateDirectoryForTask(Org.Apache.Kafka.Streams.Processor.TaskId arg0)
        {
            return IExecute<Java.Io.File>("getOrCreateDirectoryForTask", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/StateDirectory.html#clean()"/>
        /// </summary>
        public void Clean()
        {
            IExecute("clean");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/StateDirectory.html#cleanRemovedTasks(long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        public void CleanRemovedTasks(long arg0)
        {
            IExecute("cleanRemovedTasks", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/StateDirectory.html#clearLocalStateForNamedTopology(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        public void ClearLocalStateForNamedTopology(string arg0)
        {
            IExecute("clearLocalStateForNamedTopology", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/StateDirectory.html#close()"/>
        /// </summary>
        public void Close()
        {
            IExecute("close");
        }

        #endregion

        #region Nested classes
        #region TaskDirectory
        public partial class TaskDirectory
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/StateDirectory.TaskDirectory.html#file()"/> 
            /// </summary>
            public Java.Io.File File
            {
                get { return IExecute<Java.Io.File>("file"); }
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/StateDirectory.TaskDirectory.html#namedTopology()"/> 
            /// </summary>
            public string NamedTopology
            {
                get { return IExecute<string>("namedTopology"); }
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}