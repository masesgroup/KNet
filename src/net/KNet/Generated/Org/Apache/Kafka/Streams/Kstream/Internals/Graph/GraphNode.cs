/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka-streams-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Streams.Kstream.Internals.Graph
{
    #region GraphNode
    public partial class GraphNode
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/kstream/internals/graph/GraphNode.html#%3Cinit%3E(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        public GraphNode(string arg0)
            : base(arg0)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/kstream/internals/graph/GraphNode.html#allParentsWrittenToTopology()"/> 
        /// </summary>
        public bool AllParentsWrittenToTopology
        {
            get { return IExecute<bool>("allParentsWrittenToTopology"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/kstream/internals/graph/GraphNode.html#buildPriority()"/> 
        /// </summary>
        public int? BuildPriority
        {
            get { return IExecute<int?>("buildPriority"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/kstream/internals/graph/GraphNode.html#children()"/> 
        /// </summary>
        public Java.Util.Collection<Org.Apache.Kafka.Streams.Kstream.Internals.Graph.GraphNode> Children
        {
            get { return IExecute<Java.Util.Collection<Org.Apache.Kafka.Streams.Kstream.Internals.Graph.GraphNode>>("children"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/kstream/internals/graph/GraphNode.html#hasWrittenToTopology()"/> 
        /// </summary>
        public bool HasWrittenToTopology
        {
            get { return IExecute<bool>("hasWrittenToTopology"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/kstream/internals/graph/GraphNode.html#isKeyChangingOperation()"/> 
        /// </summary>
        public bool IsKeyChangingOperation
        {
            get { return IExecute<bool>("isKeyChangingOperation"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/kstream/internals/graph/GraphNode.html#isMergeNode()"/> 
        /// </summary>
        public bool IsMergeNode
        {
            get { return IExecute<bool>("isMergeNode"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/kstream/internals/graph/GraphNode.html#isValueChangingOperation()"/> 
        /// </summary>
        public bool IsValueChangingOperation
        {
            get { return IExecute<bool>("isValueChangingOperation"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/kstream/internals/graph/GraphNode.html#nodeName()"/> 
        /// </summary>
        public string NodeName
        {
            get { return IExecute<string>("nodeName"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/kstream/internals/graph/GraphNode.html#parentNodes()"/> 
        /// </summary>
        public Java.Util.Collection<Org.Apache.Kafka.Streams.Kstream.Internals.Graph.GraphNode> ParentNodes
        {
            get { return IExecute<Java.Util.Collection<Org.Apache.Kafka.Streams.Kstream.Internals.Graph.GraphNode>>("parentNodes"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/kstream/internals/graph/GraphNode.html#writeToTopology(org.apache.kafka.streams.processor.internals.InternalTopologyBuilder)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Streams.Processor.Internals.InternalTopologyBuilder"/></param>
        public void WriteToTopology(Org.Apache.Kafka.Streams.Processor.Internals.InternalTopologyBuilder arg0)
        {
            IExecute("writeToTopology", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/kstream/internals/graph/GraphNode.html#removeChild(org.apache.kafka.streams.kstream.internals.graph.GraphNode)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Streams.Kstream.Internals.Graph.GraphNode"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool RemoveChild(Org.Apache.Kafka.Streams.Kstream.Internals.Graph.GraphNode arg0)
        {
            return IExecute<bool>("removeChild", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/kstream/internals/graph/GraphNode.html#addChild(org.apache.kafka.streams.kstream.internals.graph.GraphNode)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Streams.Kstream.Internals.Graph.GraphNode"/></param>
        public void AddChild(Org.Apache.Kafka.Streams.Kstream.Internals.Graph.GraphNode arg0)
        {
            IExecute("addChild", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/kstream/internals/graph/GraphNode.html#clearChildren()"/>
        /// </summary>
        public void ClearChildren()
        {
            IExecute("clearChildren");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/kstream/internals/graph/GraphNode.html#keyChangingOperation(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void KeyChangingOperation(bool arg0)
        {
            IExecute("keyChangingOperation", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/kstream/internals/graph/GraphNode.html#setBuildPriority(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void SetBuildPriority(int arg0)
        {
            IExecute("setBuildPriority", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/kstream/internals/graph/GraphNode.html#setHasWrittenToTopology(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetHasWrittenToTopology(bool arg0)
        {
            IExecute("setHasWrittenToTopology", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/kstream/internals/graph/GraphNode.html#setMergeNode(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetMergeNode(bool arg0)
        {
            IExecute("setMergeNode", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/kstream/internals/graph/GraphNode.html#setValueChangingOperation(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void SetValueChangingOperation(bool arg0)
        {
            IExecute("setValueChangingOperation", arg0);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}