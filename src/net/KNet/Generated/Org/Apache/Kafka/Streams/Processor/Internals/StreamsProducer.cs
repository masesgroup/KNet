/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka-streams-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Streams.Processor.Internals
{
    #region StreamsProducer
    public partial class StreamsProducer
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/StreamsProducer.html#%3Cinit%3E(org.apache.kafka.streams.StreamsConfig,java.lang.String,org.apache.kafka.streams.KafkaClientSupplier,org.apache.kafka.streams.processor.TaskId,java.util.UUID,org.apache.kafka.common.utils.LogContext,org.apache.kafka.common.utils.Time)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Streams.StreamsConfig"/></param>
        /// <param name="arg1"><see cref="string"/></param>
        /// <param name="arg2"><see cref="Org.Apache.Kafka.Streams.KafkaClientSupplier"/></param>
        /// <param name="arg3"><see cref="Org.Apache.Kafka.Streams.Processor.TaskId"/></param>
        /// <param name="arg4"><see cref="Java.Util.UUID"/></param>
        /// <param name="arg5"><see cref="Org.Apache.Kafka.Common.Utils.LogContext"/></param>
        /// <param name="arg6"><see cref="Org.Apache.Kafka.Common.Utils.Time"/></param>
        public StreamsProducer(Org.Apache.Kafka.Streams.StreamsConfig arg0, string arg1, Org.Apache.Kafka.Streams.KafkaClientSupplier arg2, Org.Apache.Kafka.Streams.Processor.TaskId arg3, Java.Util.UUID arg4, Org.Apache.Kafka.Common.Utils.LogContext arg5, Org.Apache.Kafka.Common.Utils.Time arg6)
            : base(arg0, arg1, arg2, arg3, arg4, arg5, arg6)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/StreamsProducer.html#totalBlockedTime()"/> 
        /// </summary>
        public double TotalBlockedTime
        {
            get { return IExecute<double>("totalBlockedTime"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/StreamsProducer.html#resetProducer()"/>
        /// </summary>
        public void ResetProducer()
        {
            IExecute("resetProducer");
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}