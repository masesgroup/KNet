/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka-streams-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Streams.State.Internals
{
    #region SegmentedBytesStore
    public partial class SegmentedBytesStore
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/SegmentedBytesStore.html#all()"/> 
        /// </summary>
        public Org.Apache.Kafka.Streams.State.KeyValueIterator<Org.Apache.Kafka.Common.Utils.Bytes, byte[]> All
        {
            get { return IExecute<Org.Apache.Kafka.Streams.State.KeyValueIterator<Org.Apache.Kafka.Common.Utils.Bytes, byte[]>>("all"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/SegmentedBytesStore.html#backwardAll()"/> 
        /// </summary>
        public Org.Apache.Kafka.Streams.State.KeyValueIterator<Org.Apache.Kafka.Common.Utils.Bytes, byte[]> BackwardAll
        {
            get { return IExecute<Org.Apache.Kafka.Streams.State.KeyValueIterator<Org.Apache.Kafka.Common.Utils.Bytes, byte[]>>("backwardAll"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/SegmentedBytesStore.html#get(org.apache.kafka.common.utils.Bytes)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Utils.Bytes"/></param>
        /// <returns><see cref="byte"/></returns>
        public byte[] Get(Org.Apache.Kafka.Common.Utils.Bytes arg0)
        {
            return IExecuteArray<byte>("get", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/SegmentedBytesStore.html#backwardFetch(org.apache.kafka.common.utils.Bytes,long,long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Utils.Bytes"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        /// <param name="arg2"><see cref="long"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Streams.State.KeyValueIterator"/></returns>
        public Org.Apache.Kafka.Streams.State.KeyValueIterator<Org.Apache.Kafka.Common.Utils.Bytes, byte[]> BackwardFetch(Org.Apache.Kafka.Common.Utils.Bytes arg0, long arg1, long arg2)
        {
            return IExecute<Org.Apache.Kafka.Streams.State.KeyValueIterator<Org.Apache.Kafka.Common.Utils.Bytes, byte[]>>("backwardFetch", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/SegmentedBytesStore.html#backwardFetch(org.apache.kafka.common.utils.Bytes,org.apache.kafka.common.utils.Bytes,long,long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Utils.Bytes"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Common.Utils.Bytes"/></param>
        /// <param name="arg2"><see cref="long"/></param>
        /// <param name="arg3"><see cref="long"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Streams.State.KeyValueIterator"/></returns>
        public Org.Apache.Kafka.Streams.State.KeyValueIterator<Org.Apache.Kafka.Common.Utils.Bytes, byte[]> BackwardFetch(Org.Apache.Kafka.Common.Utils.Bytes arg0, Org.Apache.Kafka.Common.Utils.Bytes arg1, long arg2, long arg3)
        {
            return IExecute<Org.Apache.Kafka.Streams.State.KeyValueIterator<Org.Apache.Kafka.Common.Utils.Bytes, byte[]>>("backwardFetch", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/SegmentedBytesStore.html#backwardFetchAll(long,long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Streams.State.KeyValueIterator"/></returns>
        public Org.Apache.Kafka.Streams.State.KeyValueIterator<Org.Apache.Kafka.Common.Utils.Bytes, byte[]> BackwardFetchAll(long arg0, long arg1)
        {
            return IExecute<Org.Apache.Kafka.Streams.State.KeyValueIterator<Org.Apache.Kafka.Common.Utils.Bytes, byte[]>>("backwardFetchAll", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/SegmentedBytesStore.html#fetch(org.apache.kafka.common.utils.Bytes,long,long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Utils.Bytes"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        /// <param name="arg2"><see cref="long"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Streams.State.KeyValueIterator"/></returns>
        public Org.Apache.Kafka.Streams.State.KeyValueIterator<Org.Apache.Kafka.Common.Utils.Bytes, byte[]> Fetch(Org.Apache.Kafka.Common.Utils.Bytes arg0, long arg1, long arg2)
        {
            return IExecute<Org.Apache.Kafka.Streams.State.KeyValueIterator<Org.Apache.Kafka.Common.Utils.Bytes, byte[]>>("fetch", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/SegmentedBytesStore.html#fetch(org.apache.kafka.common.utils.Bytes,org.apache.kafka.common.utils.Bytes,long,long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Utils.Bytes"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Common.Utils.Bytes"/></param>
        /// <param name="arg2"><see cref="long"/></param>
        /// <param name="arg3"><see cref="long"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Streams.State.KeyValueIterator"/></returns>
        public Org.Apache.Kafka.Streams.State.KeyValueIterator<Org.Apache.Kafka.Common.Utils.Bytes, byte[]> Fetch(Org.Apache.Kafka.Common.Utils.Bytes arg0, Org.Apache.Kafka.Common.Utils.Bytes arg1, long arg2, long arg3)
        {
            return IExecute<Org.Apache.Kafka.Streams.State.KeyValueIterator<Org.Apache.Kafka.Common.Utils.Bytes, byte[]>>("fetch", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/SegmentedBytesStore.html#fetchAll(long,long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Streams.State.KeyValueIterator"/></returns>
        public Org.Apache.Kafka.Streams.State.KeyValueIterator<Org.Apache.Kafka.Common.Utils.Bytes, byte[]> FetchAll(long arg0, long arg1)
        {
            return IExecute<Org.Apache.Kafka.Streams.State.KeyValueIterator<Org.Apache.Kafka.Common.Utils.Bytes, byte[]>>("fetchAll", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/SegmentedBytesStore.html#put(org.apache.kafka.common.utils.Bytes,byte[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Utils.Bytes"/></param>
        /// <param name="arg1"><see cref="byte"/></param>
        public void Put(Org.Apache.Kafka.Common.Utils.Bytes arg0, byte[] arg1)
        {
            IExecute("put", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/SegmentedBytesStore.html#remove(org.apache.kafka.common.utils.Bytes,long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Utils.Bytes"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        public void Remove(Org.Apache.Kafka.Common.Utils.Bytes arg0, long arg1)
        {
            IExecute("remove", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/SegmentedBytesStore.html#remove(org.apache.kafka.common.utils.Bytes)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Utils.Bytes"/></param>
        public void Remove(Org.Apache.Kafka.Common.Utils.Bytes arg0)
        {
            IExecute("remove", arg0);
        }

        #endregion

        #region Nested classes
        #region KeySchema
        public partial class KeySchema
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/SegmentedBytesStore.KeySchema.html#segmentTimestamp(org.apache.kafka.common.utils.Bytes)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Utils.Bytes"/></param>
            /// <returns><see cref="long"/></returns>
            public long SegmentTimestamp(Org.Apache.Kafka.Common.Utils.Bytes arg0)
            {
                return IExecute<long>("segmentTimestamp", arg0);
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/SegmentedBytesStore.KeySchema.html#lowerRange(org.apache.kafka.common.utils.Bytes,long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Utils.Bytes"/></param>
            /// <param name="arg1"><see cref="long"/></param>
            /// <returns><see cref="Org.Apache.Kafka.Common.Utils.Bytes"/></returns>
            public Org.Apache.Kafka.Common.Utils.Bytes LowerRange(Org.Apache.Kafka.Common.Utils.Bytes arg0, long arg1)
            {
                return IExecute<Org.Apache.Kafka.Common.Utils.Bytes>("lowerRange", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/SegmentedBytesStore.KeySchema.html#lowerRangeFixedSize(org.apache.kafka.common.utils.Bytes,long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Utils.Bytes"/></param>
            /// <param name="arg1"><see cref="long"/></param>
            /// <returns><see cref="Org.Apache.Kafka.Common.Utils.Bytes"/></returns>
            public Org.Apache.Kafka.Common.Utils.Bytes LowerRangeFixedSize(Org.Apache.Kafka.Common.Utils.Bytes arg0, long arg1)
            {
                return IExecute<Org.Apache.Kafka.Common.Utils.Bytes>("lowerRangeFixedSize", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/SegmentedBytesStore.KeySchema.html#upperRange(org.apache.kafka.common.utils.Bytes,long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Utils.Bytes"/></param>
            /// <param name="arg1"><see cref="long"/></param>
            /// <returns><see cref="Org.Apache.Kafka.Common.Utils.Bytes"/></returns>
            public Org.Apache.Kafka.Common.Utils.Bytes UpperRange(Org.Apache.Kafka.Common.Utils.Bytes arg0, long arg1)
            {
                return IExecute<Org.Apache.Kafka.Common.Utils.Bytes>("upperRange", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/SegmentedBytesStore.KeySchema.html#upperRangeFixedSize(org.apache.kafka.common.utils.Bytes,long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Utils.Bytes"/></param>
            /// <param name="arg1"><see cref="long"/></param>
            /// <returns><see cref="Org.Apache.Kafka.Common.Utils.Bytes"/></returns>
            public Org.Apache.Kafka.Common.Utils.Bytes UpperRangeFixedSize(Org.Apache.Kafka.Common.Utils.Bytes arg0, long arg1)
            {
                return IExecute<Org.Apache.Kafka.Common.Utils.Bytes>("upperRangeFixedSize", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/SegmentedBytesStore.KeySchema.html#toStoreBinaryKeyPrefix(org.apache.kafka.common.utils.Bytes,long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Utils.Bytes"/></param>
            /// <param name="arg1"><see cref="long"/></param>
            /// <returns><see cref="Org.Apache.Kafka.Common.Utils.Bytes"/></returns>
            public Org.Apache.Kafka.Common.Utils.Bytes ToStoreBinaryKeyPrefix(Org.Apache.Kafka.Common.Utils.Bytes arg0, long arg1)
            {
                return IExecute<Org.Apache.Kafka.Common.Utils.Bytes>("toStoreBinaryKeyPrefix", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}