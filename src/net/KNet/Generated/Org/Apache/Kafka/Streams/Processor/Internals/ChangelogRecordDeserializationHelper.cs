/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka-streams-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Streams.Processor.Internals
{
    #region ChangelogRecordDeserializationHelper
    public partial class ChangelogRecordDeserializationHelper
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/ChangelogRecordDeserializationHelper.html#CHANGELOG_POSITION_HEADER_KEY"/>
        /// </summary>
        public static string CHANGELOG_POSITION_HEADER_KEY { get { return SGetField<string>(LocalBridgeClazz, "CHANGELOG_POSITION_HEADER_KEY"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/ChangelogRecordDeserializationHelper.html#CHANGELOG_VERSION_HEADER_KEY"/>
        /// </summary>
        public static string CHANGELOG_VERSION_HEADER_KEY { get { return SGetField<string>(LocalBridgeClazz, "CHANGELOG_VERSION_HEADER_KEY"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/ChangelogRecordDeserializationHelper.html#CHANGELOG_VERSION_HEADER_RECORD_CONSISTENCY"/>
        /// </summary>
        public static Org.Apache.Kafka.Common.Header.Internals.RecordHeader CHANGELOG_VERSION_HEADER_RECORD_CONSISTENCY { get { return SGetField<Org.Apache.Kafka.Common.Header.Internals.RecordHeader>(LocalBridgeClazz, "CHANGELOG_VERSION_HEADER_RECORD_CONSISTENCY"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/ChangelogRecordDeserializationHelper.html#log"/>
        /// </summary>
        public static Org.Slf4j.Logger log { get { return SGetField<Org.Slf4j.Logger>(LocalBridgeClazz, "log"); } }

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/ChangelogRecordDeserializationHelper.html#applyChecksAndUpdatePosition(org.apache.kafka.clients.consumer.ConsumerRecord,boolean,org.apache.kafka.streams.query.Position)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Clients.Consumer.ConsumerRecord"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        /// <param name="arg2"><see cref="Org.Apache.Kafka.Streams.Query.Position"/></param>
        public static void ApplyChecksAndUpdatePosition(Org.Apache.Kafka.Clients.Consumer.ConsumerRecord<byte[], byte[]> arg0, bool arg1, Org.Apache.Kafka.Streams.Query.Position arg2)
        {
            SExecute(LocalBridgeClazz, "applyChecksAndUpdatePosition", arg0, arg1, arg2);
        }

        #endregion

        #region Instance methods

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}