/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka-streams-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Streams.Processor.Internals
{
    #region RecordCollectorImpl
    public partial class RecordCollectorImpl
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/RecordCollectorImpl.html#%3Cinit%3E(org.apache.kafka.common.utils.LogContext,org.apache.kafka.streams.processor.TaskId,org.apache.kafka.streams.processor.internals.StreamsProducer,org.apache.kafka.streams.errors.ProductionExceptionHandler,org.apache.kafka.streams.processor.internals.metrics.StreamsMetricsImpl,org.apache.kafka.streams.processor.internals.ProcessorTopology)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Utils.LogContext"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Streams.Processor.TaskId"/></param>
        /// <param name="arg2"><see cref="Org.Apache.Kafka.Streams.Processor.Internals.StreamsProducer"/></param>
        /// <param name="arg3"><see cref="Org.Apache.Kafka.Streams.Errors.ProductionExceptionHandler"/></param>
        /// <param name="arg4"><see cref="Org.Apache.Kafka.Streams.Processor.Internals.Metrics.StreamsMetricsImpl"/></param>
        /// <param name="arg5"><see cref="Org.Apache.Kafka.Streams.Processor.Internals.ProcessorTopology"/></param>
        public RecordCollectorImpl(Org.Apache.Kafka.Common.Utils.LogContext arg0, Org.Apache.Kafka.Streams.Processor.TaskId arg1, Org.Apache.Kafka.Streams.Processor.Internals.StreamsProducer arg2, Org.Apache.Kafka.Streams.Errors.ProductionExceptionHandler arg3, Org.Apache.Kafka.Streams.Processor.Internals.Metrics.StreamsMetricsImpl arg4, Org.Apache.Kafka.Streams.Processor.Internals.ProcessorTopology arg5)
            : base(arg0, arg1, arg2, arg3, arg4, arg5)
        {
        }

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Org.Apache.Kafka.Streams.Processor.Internals.RecordCollectorImpl"/> to <see cref="Org.Apache.Kafka.Streams.Processor.Internals.RecordCollector"/>
        /// </summary>
        public static implicit operator Org.Apache.Kafka.Streams.Processor.Internals.RecordCollector(Org.Apache.Kafka.Streams.Processor.Internals.RecordCollectorImpl t) => t.Cast<Org.Apache.Kafka.Streams.Processor.Internals.RecordCollector>();

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/RecordCollectorImpl.html#offsets()"/> 
        /// </summary>
        public Java.Util.Map<Org.Apache.Kafka.Common.TopicPartition, long?> Offsets
        {
            get { return IExecute<Java.Util.Map<Org.Apache.Kafka.Common.TopicPartition, long?>>("offsets"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/RecordCollectorImpl.html#send(java.lang.String,java.lang.Object,java.lang.Object,org.apache.kafka.common.header.Headers,java.lang.Integer,java.lang.Long,org.apache.kafka.common.serialization.Serializer,org.apache.kafka.common.serialization.Serializer,java.lang.String,org.apache.kafka.streams.processor.internals.InternalProcessorContext)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <param name="arg1"><typeparamref name="K"/></param>
        /// <param name="arg2"><typeparamref name="V"/></param>
        /// <param name="arg3"><see cref="Org.Apache.Kafka.Common.Header.Headers"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="long"/></param>
        /// <param name="arg6"><see cref="Org.Apache.Kafka.Common.Serialization.Serializer"/></param>
        /// <param name="arg7"><see cref="Org.Apache.Kafka.Common.Serialization.Serializer"/></param>
        /// <param name="arg8"><see cref="string"/></param>
        /// <param name="arg9"><see cref="Org.Apache.Kafka.Streams.Processor.Internals.InternalProcessorContext"/></param>
        /// <typeparam name="K"></typeparam>
        /// <typeparam name="V"></typeparam>
        public void Send<K, V>(string arg0, K arg1, V arg2, Org.Apache.Kafka.Common.Header.Headers arg3, int? arg4, long? arg5, Org.Apache.Kafka.Common.Serialization.Serializer<K> arg6, Org.Apache.Kafka.Common.Serialization.Serializer<V> arg7, string arg8, Org.Apache.Kafka.Streams.Processor.Internals.InternalProcessorContext<Java.Lang.Void, Java.Lang.Void> arg9)
        {
            IExecute("send", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/RecordCollectorImpl.html#send(java.lang.String,java.lang.Object,java.lang.Object,org.apache.kafka.common.header.Headers,java.lang.Long,org.apache.kafka.common.serialization.Serializer,org.apache.kafka.common.serialization.Serializer,java.lang.String,org.apache.kafka.streams.processor.internals.InternalProcessorContext,org.apache.kafka.streams.processor.StreamPartitioner)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <param name="arg1"><typeparamref name="K"/></param>
        /// <param name="arg2"><typeparamref name="V"/></param>
        /// <param name="arg3"><see cref="Org.Apache.Kafka.Common.Header.Headers"/></param>
        /// <param name="arg4"><see cref="long"/></param>
        /// <param name="arg5"><see cref="Org.Apache.Kafka.Common.Serialization.Serializer"/></param>
        /// <param name="arg6"><see cref="Org.Apache.Kafka.Common.Serialization.Serializer"/></param>
        /// <param name="arg7"><see cref="string"/></param>
        /// <param name="arg8"><see cref="Org.Apache.Kafka.Streams.Processor.Internals.InternalProcessorContext"/></param>
        /// <param name="arg9"><see cref="Org.Apache.Kafka.Streams.Processor.StreamPartitioner"/></param>
        /// <typeparam name="K"></typeparam>
        /// <typeparam name="V"></typeparam>
        /// <typeparam name="Arg9objectSuperK"><typeparamref name="K"/></typeparam>
        /// <typeparam name="Arg9objectSuperV"></typeparam>
        public void Send<K, V, Arg9objectSuperK, Arg9objectSuperV>(string arg0, K arg1, V arg2, Org.Apache.Kafka.Common.Header.Headers arg3, long? arg4, Org.Apache.Kafka.Common.Serialization.Serializer<K> arg5, Org.Apache.Kafka.Common.Serialization.Serializer<V> arg6, string arg7, Org.Apache.Kafka.Streams.Processor.Internals.InternalProcessorContext<Java.Lang.Void, Java.Lang.Void> arg8, Org.Apache.Kafka.Streams.Processor.StreamPartitioner<Arg9objectSuperK, Arg9objectSuperV> arg9) where Arg9objectSuperK: K
        {
            IExecute("send", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/RecordCollectorImpl.html#closeClean()"/>
        /// </summary>
        public void CloseClean()
        {
            IExecute("closeClean");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/RecordCollectorImpl.html#closeDirty()"/>
        /// </summary>
        public void CloseDirty()
        {
            IExecute("closeDirty");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/RecordCollectorImpl.html#flush()"/>
        /// </summary>
        public void Flush()
        {
            IExecute("flush");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/RecordCollectorImpl.html#initialize()"/>
        /// </summary>
        public void Initialize()
        {
            IExecute("initialize");
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}