/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka-streams-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Streams.State
{
    #region QueryableStoreTypes
    public partial class QueryableStoreTypes
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/QueryableStoreTypes.html#keyValueStore()"/> 
        /// </summary>
        public static Org.Apache.Kafka.Streams.State.QueryableStoreType KeyValueStore
        {
            get { return SExecute<Org.Apache.Kafka.Streams.State.QueryableStoreType>(LocalBridgeClazz, "keyValueStore"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/QueryableStoreTypes.html#sessionStore()"/> 
        /// </summary>
        public static Org.Apache.Kafka.Streams.State.QueryableStoreType SessionStore
        {
            get { return SExecute<Org.Apache.Kafka.Streams.State.QueryableStoreType>(LocalBridgeClazz, "sessionStore"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/QueryableStoreTypes.html#timestampedKeyValueStore()"/> 
        /// </summary>
        public static Org.Apache.Kafka.Streams.State.QueryableStoreType TimestampedKeyValueStore
        {
            get { return SExecute<Org.Apache.Kafka.Streams.State.QueryableStoreType>(LocalBridgeClazz, "timestampedKeyValueStore"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/QueryableStoreTypes.html#timestampedWindowStore()"/> 
        /// </summary>
        public static Org.Apache.Kafka.Streams.State.QueryableStoreType TimestampedWindowStore
        {
            get { return SExecute<Org.Apache.Kafka.Streams.State.QueryableStoreType>(LocalBridgeClazz, "timestampedWindowStore"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/QueryableStoreTypes.html#windowStore()"/> 
        /// </summary>
        public static Org.Apache.Kafka.Streams.State.QueryableStoreType WindowStore
        {
            get { return SExecute<Org.Apache.Kafka.Streams.State.QueryableStoreType>(LocalBridgeClazz, "windowStore"); }
        }

        #endregion

        #region Instance methods

        #endregion

        #region Nested classes
        #region KeyValueStoreType
        public partial class KeyValueStoreType
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region KeyValueStoreType<K, V>
        public partial class KeyValueStoreType<K, V>
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators
            /// <summary>
            /// Converter from <see cref="Org.Apache.Kafka.Streams.State.QueryableStoreTypes.KeyValueStoreType{K, V}"/> to <see cref="Org.Apache.Kafka.Streams.State.QueryableStoreTypes.KeyValueStoreType"/>
            /// </summary>
            public static implicit operator Org.Apache.Kafka.Streams.State.QueryableStoreTypes.KeyValueStoreType(Org.Apache.Kafka.Streams.State.QueryableStoreTypes.KeyValueStoreType<K, V> t) => t.Cast<Org.Apache.Kafka.Streams.State.QueryableStoreTypes.KeyValueStoreType>();

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region SessionStoreType
        public partial class SessionStoreType
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region SessionStoreType<K, V>
        public partial class SessionStoreType<K, V>
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators
            /// <summary>
            /// Converter from <see cref="Org.Apache.Kafka.Streams.State.QueryableStoreTypes.SessionStoreType{K, V}"/> to <see cref="Org.Apache.Kafka.Streams.State.QueryableStoreTypes.SessionStoreType"/>
            /// </summary>
            public static implicit operator Org.Apache.Kafka.Streams.State.QueryableStoreTypes.SessionStoreType(Org.Apache.Kafka.Streams.State.QueryableStoreTypes.SessionStoreType<K, V> t) => t.Cast<Org.Apache.Kafka.Streams.State.QueryableStoreTypes.SessionStoreType>();

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region WindowStoreType
        public partial class WindowStoreType
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region WindowStoreType<K, V>
        public partial class WindowStoreType<K, V>
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators
            /// <summary>
            /// Converter from <see cref="Org.Apache.Kafka.Streams.State.QueryableStoreTypes.WindowStoreType{K, V}"/> to <see cref="Org.Apache.Kafka.Streams.State.QueryableStoreTypes.WindowStoreType"/>
            /// </summary>
            public static implicit operator Org.Apache.Kafka.Streams.State.QueryableStoreTypes.WindowStoreType(Org.Apache.Kafka.Streams.State.QueryableStoreTypes.WindowStoreType<K, V> t) => t.Cast<Org.Apache.Kafka.Streams.State.QueryableStoreTypes.WindowStoreType>();

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}