/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.0.1.0)
*  using kafka-streams-3.5.1.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Streams
{
    #region StreamsConfig
    public partial class StreamsConfig
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#org.apache.kafka.streams.StreamsConfig(java.util.Map)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Map"/></param>
        public StreamsConfig(Java.Util.Map<object, object> arg0)
            : base(arg0)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#DUMMY_THREAD_INDEX"/>
        /// </summary>
        public static int DUMMY_THREAD_INDEX { get { return SGetField<int>(LocalBridgeClazz, "DUMMY_THREAD_INDEX"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#MAX_RACK_AWARE_ASSIGNMENT_TAG_KEY_LENGTH"/>
        /// </summary>
        public static int MAX_RACK_AWARE_ASSIGNMENT_TAG_KEY_LENGTH { get { return SGetField<int>(LocalBridgeClazz, "MAX_RACK_AWARE_ASSIGNMENT_TAG_KEY_LENGTH"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#MAX_RACK_AWARE_ASSIGNMENT_TAG_LIST_SIZE"/>
        /// </summary>
        public static int MAX_RACK_AWARE_ASSIGNMENT_TAG_LIST_SIZE { get { return SGetField<int>(LocalBridgeClazz, "MAX_RACK_AWARE_ASSIGNMENT_TAG_LIST_SIZE"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#MAX_RACK_AWARE_ASSIGNMENT_TAG_VALUE_LENGTH"/>
        /// </summary>
        public static int MAX_RACK_AWARE_ASSIGNMENT_TAG_VALUE_LENGTH { get { return SGetField<int>(LocalBridgeClazz, "MAX_RACK_AWARE_ASSIGNMENT_TAG_VALUE_LENGTH"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#ACCEPTABLE_RECOVERY_LAG_CONFIG"/>
        /// </summary>
        public static string ACCEPTABLE_RECOVERY_LAG_CONFIG { get { return SGetField<string>(LocalBridgeClazz, "ACCEPTABLE_RECOVERY_LAG_CONFIG"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#ADMIN_CLIENT_PREFIX"/>
        /// </summary>
        public static string ADMIN_CLIENT_PREFIX { get { return SGetField<string>(LocalBridgeClazz, "ADMIN_CLIENT_PREFIX"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#APPLICATION_ID_CONFIG"/>
        /// </summary>
        public static string APPLICATION_ID_CONFIG { get { return SGetField<string>(LocalBridgeClazz, "APPLICATION_ID_CONFIG"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#APPLICATION_SERVER_CONFIG"/>
        /// </summary>
        public static string APPLICATION_SERVER_CONFIG { get { return SGetField<string>(LocalBridgeClazz, "APPLICATION_SERVER_CONFIG"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#AT_LEAST_ONCE"/>
        /// </summary>
        public static string AT_LEAST_ONCE { get { return SGetField<string>(LocalBridgeClazz, "AT_LEAST_ONCE"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#BOOTSTRAP_SERVERS_CONFIG"/>
        /// </summary>
        public static string BOOTSTRAP_SERVERS_CONFIG { get { return SGetField<string>(LocalBridgeClazz, "BOOTSTRAP_SERVERS_CONFIG"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#BUFFERED_RECORDS_PER_PARTITION_CONFIG"/>
        /// </summary>
        public static string BUFFERED_RECORDS_PER_PARTITION_CONFIG { get { return SGetField<string>(LocalBridgeClazz, "BUFFERED_RECORDS_PER_PARTITION_CONFIG"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#BUFFERED_RECORDS_PER_PARTITION_DOC"/>
        /// </summary>
        public static string BUFFERED_RECORDS_PER_PARTITION_DOC { get { return SGetField<string>(LocalBridgeClazz, "BUFFERED_RECORDS_PER_PARTITION_DOC"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#BUILT_IN_METRICS_VERSION_CONFIG"/>
        /// </summary>
        public static string BUILT_IN_METRICS_VERSION_CONFIG { get { return SGetField<string>(LocalBridgeClazz, "BUILT_IN_METRICS_VERSION_CONFIG"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#CACHE_MAX_BYTES_BUFFERING_DOC"/>
        /// </summary>
        public static string CACHE_MAX_BYTES_BUFFERING_DOC { get { return SGetField<string>(LocalBridgeClazz, "CACHE_MAX_BYTES_BUFFERING_DOC"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#CLIENT_ID_CONFIG"/>
        /// </summary>
        public static string CLIENT_ID_CONFIG { get { return SGetField<string>(LocalBridgeClazz, "CLIENT_ID_CONFIG"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#CLIENT_TAG_PREFIX"/>
        /// </summary>
        public static string CLIENT_TAG_PREFIX { get { return SGetField<string>(LocalBridgeClazz, "CLIENT_TAG_PREFIX"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#COMMIT_INTERVAL_MS_CONFIG"/>
        /// </summary>
        public static string COMMIT_INTERVAL_MS_CONFIG { get { return SGetField<string>(LocalBridgeClazz, "COMMIT_INTERVAL_MS_CONFIG"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#CONNECTIONS_MAX_IDLE_MS_CONFIG"/>
        /// </summary>
        public static string CONNECTIONS_MAX_IDLE_MS_CONFIG { get { return SGetField<string>(LocalBridgeClazz, "CONNECTIONS_MAX_IDLE_MS_CONFIG"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#CONSUMER_PREFIX"/>
        /// </summary>
        public static string CONSUMER_PREFIX { get { return SGetField<string>(LocalBridgeClazz, "CONSUMER_PREFIX"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#DEFAULT_CLIENT_SUPPLIER_CONFIG"/>
        /// </summary>
        public static string DEFAULT_CLIENT_SUPPLIER_CONFIG { get { return SGetField<string>(LocalBridgeClazz, "DEFAULT_CLIENT_SUPPLIER_CONFIG"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#DEFAULT_CLIENT_SUPPLIER_DOC"/>
        /// </summary>
        public static string DEFAULT_CLIENT_SUPPLIER_DOC { get { return SGetField<string>(LocalBridgeClazz, "DEFAULT_CLIENT_SUPPLIER_DOC"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#DEFAULT_DESERIALIZATION_EXCEPTION_HANDLER_CLASS_CONFIG"/>
        /// </summary>
        public static string DEFAULT_DESERIALIZATION_EXCEPTION_HANDLER_CLASS_CONFIG { get { return SGetField<string>(LocalBridgeClazz, "DEFAULT_DESERIALIZATION_EXCEPTION_HANDLER_CLASS_CONFIG"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#DEFAULT_DESERIALIZATION_EXCEPTION_HANDLER_CLASS_DOC"/>
        /// </summary>
        public static string DEFAULT_DESERIALIZATION_EXCEPTION_HANDLER_CLASS_DOC { get { return SGetField<string>(LocalBridgeClazz, "DEFAULT_DESERIALIZATION_EXCEPTION_HANDLER_CLASS_DOC"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#DEFAULT_DSL_STORE_CONFIG"/>
        /// </summary>
        public static string DEFAULT_DSL_STORE_CONFIG { get { return SGetField<string>(LocalBridgeClazz, "DEFAULT_DSL_STORE_CONFIG"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#DEFAULT_DSL_STORE_DOC"/>
        /// </summary>
        public static string DEFAULT_DSL_STORE_DOC { get { return SGetField<string>(LocalBridgeClazz, "DEFAULT_DSL_STORE_DOC"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#DEFAULT_KEY_SERDE_CLASS_CONFIG"/>
        /// </summary>
        public static string DEFAULT_KEY_SERDE_CLASS_CONFIG { get { return SGetField<string>(LocalBridgeClazz, "DEFAULT_KEY_SERDE_CLASS_CONFIG"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#DEFAULT_PRODUCTION_EXCEPTION_HANDLER_CLASS_CONFIG"/>
        /// </summary>
        public static string DEFAULT_PRODUCTION_EXCEPTION_HANDLER_CLASS_CONFIG { get { return SGetField<string>(LocalBridgeClazz, "DEFAULT_PRODUCTION_EXCEPTION_HANDLER_CLASS_CONFIG"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#DEFAULT_TIMESTAMP_EXTRACTOR_CLASS_CONFIG"/>
        /// </summary>
        public static string DEFAULT_TIMESTAMP_EXTRACTOR_CLASS_CONFIG { get { return SGetField<string>(LocalBridgeClazz, "DEFAULT_TIMESTAMP_EXTRACTOR_CLASS_CONFIG"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#DEFAULT_TIMESTAMP_EXTRACTOR_CLASS_DOC"/>
        /// </summary>
        public static string DEFAULT_TIMESTAMP_EXTRACTOR_CLASS_DOC { get { return SGetField<string>(LocalBridgeClazz, "DEFAULT_TIMESTAMP_EXTRACTOR_CLASS_DOC"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#DEFAULT_VALUE_SERDE_CLASS_CONFIG"/>
        /// </summary>
        public static string DEFAULT_VALUE_SERDE_CLASS_CONFIG { get { return SGetField<string>(LocalBridgeClazz, "DEFAULT_VALUE_SERDE_CLASS_CONFIG"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#EXACTLY_ONCE_V2"/>
        /// </summary>
        public static string EXACTLY_ONCE_V2 { get { return SGetField<string>(LocalBridgeClazz, "EXACTLY_ONCE_V2"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#GLOBAL_CONSUMER_PREFIX"/>
        /// </summary>
        public static string GLOBAL_CONSUMER_PREFIX { get { return SGetField<string>(LocalBridgeClazz, "GLOBAL_CONSUMER_PREFIX"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#IN_MEMORY"/>
        /// </summary>
        public static string IN_MEMORY { get { return SGetField<string>(LocalBridgeClazz, "IN_MEMORY"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#MAIN_CONSUMER_PREFIX"/>
        /// </summary>
        public static string MAIN_CONSUMER_PREFIX { get { return SGetField<string>(LocalBridgeClazz, "MAIN_CONSUMER_PREFIX"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#MAX_TASK_IDLE_MS_CONFIG"/>
        /// </summary>
        public static string MAX_TASK_IDLE_MS_CONFIG { get { return SGetField<string>(LocalBridgeClazz, "MAX_TASK_IDLE_MS_CONFIG"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#MAX_TASK_IDLE_MS_DOC"/>
        /// </summary>
        public static string MAX_TASK_IDLE_MS_DOC { get { return SGetField<string>(LocalBridgeClazz, "MAX_TASK_IDLE_MS_DOC"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#MAX_WARMUP_REPLICAS_CONFIG"/>
        /// </summary>
        public static string MAX_WARMUP_REPLICAS_CONFIG { get { return SGetField<string>(LocalBridgeClazz, "MAX_WARMUP_REPLICAS_CONFIG"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#MERGE_REPARTITION_TOPICS"/>
        /// </summary>
        public static string MERGE_REPARTITION_TOPICS { get { return SGetField<string>(LocalBridgeClazz, "MERGE_REPARTITION_TOPICS"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#METADATA_MAX_AGE_CONFIG"/>
        /// </summary>
        public static string METADATA_MAX_AGE_CONFIG { get { return SGetField<string>(LocalBridgeClazz, "METADATA_MAX_AGE_CONFIG"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#METRIC_REPORTER_CLASSES_CONFIG"/>
        /// </summary>
        public static string METRIC_REPORTER_CLASSES_CONFIG { get { return SGetField<string>(LocalBridgeClazz, "METRIC_REPORTER_CLASSES_CONFIG"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#METRICS_LATEST"/>
        /// </summary>
        public static string METRICS_LATEST { get { return SGetField<string>(LocalBridgeClazz, "METRICS_LATEST"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#METRICS_NUM_SAMPLES_CONFIG"/>
        /// </summary>
        public static string METRICS_NUM_SAMPLES_CONFIG { get { return SGetField<string>(LocalBridgeClazz, "METRICS_NUM_SAMPLES_CONFIG"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#METRICS_RECORDING_LEVEL_CONFIG"/>
        /// </summary>
        public static string METRICS_RECORDING_LEVEL_CONFIG { get { return SGetField<string>(LocalBridgeClazz, "METRICS_RECORDING_LEVEL_CONFIG"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#METRICS_SAMPLE_WINDOW_MS_CONFIG"/>
        /// </summary>
        public static string METRICS_SAMPLE_WINDOW_MS_CONFIG { get { return SGetField<string>(LocalBridgeClazz, "METRICS_SAMPLE_WINDOW_MS_CONFIG"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#NO_OPTIMIZATION"/>
        /// </summary>
        public static string NO_OPTIMIZATION { get { return SGetField<string>(LocalBridgeClazz, "NO_OPTIMIZATION"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#NUM_STANDBY_REPLICAS_CONFIG"/>
        /// </summary>
        public static string NUM_STANDBY_REPLICAS_CONFIG { get { return SGetField<string>(LocalBridgeClazz, "NUM_STANDBY_REPLICAS_CONFIG"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#NUM_STREAM_THREADS_CONFIG"/>
        /// </summary>
        public static string NUM_STREAM_THREADS_CONFIG { get { return SGetField<string>(LocalBridgeClazz, "NUM_STREAM_THREADS_CONFIG"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#OPTIMIZE"/>
        /// </summary>
        public static string OPTIMIZE { get { return SGetField<string>(LocalBridgeClazz, "OPTIMIZE"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#POLL_MS_CONFIG"/>
        /// </summary>
        public static string POLL_MS_CONFIG { get { return SGetField<string>(LocalBridgeClazz, "POLL_MS_CONFIG"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#PROBING_REBALANCE_INTERVAL_MS_CONFIG"/>
        /// </summary>
        public static string PROBING_REBALANCE_INTERVAL_MS_CONFIG { get { return SGetField<string>(LocalBridgeClazz, "PROBING_REBALANCE_INTERVAL_MS_CONFIG"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#PROCESSING_GUARANTEE_CONFIG"/>
        /// </summary>
        public static string PROCESSING_GUARANTEE_CONFIG { get { return SGetField<string>(LocalBridgeClazz, "PROCESSING_GUARANTEE_CONFIG"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#PRODUCER_PREFIX"/>
        /// </summary>
        public static string PRODUCER_PREFIX { get { return SGetField<string>(LocalBridgeClazz, "PRODUCER_PREFIX"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#RACK_AWARE_ASSIGNMENT_TAGS_CONFIG"/>
        /// </summary>
        public static string RACK_AWARE_ASSIGNMENT_TAGS_CONFIG { get { return SGetField<string>(LocalBridgeClazz, "RACK_AWARE_ASSIGNMENT_TAGS_CONFIG"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#RECEIVE_BUFFER_CONFIG"/>
        /// </summary>
        public static string RECEIVE_BUFFER_CONFIG { get { return SGetField<string>(LocalBridgeClazz, "RECEIVE_BUFFER_CONFIG"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#RECONNECT_BACKOFF_MAX_MS_CONFIG"/>
        /// </summary>
        public static string RECONNECT_BACKOFF_MAX_MS_CONFIG { get { return SGetField<string>(LocalBridgeClazz, "RECONNECT_BACKOFF_MAX_MS_CONFIG"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#RECONNECT_BACKOFF_MS_CONFIG"/>
        /// </summary>
        public static string RECONNECT_BACKOFF_MS_CONFIG { get { return SGetField<string>(LocalBridgeClazz, "RECONNECT_BACKOFF_MS_CONFIG"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#REPARTITION_PURGE_INTERVAL_MS_CONFIG"/>
        /// </summary>
        public static string REPARTITION_PURGE_INTERVAL_MS_CONFIG { get { return SGetField<string>(LocalBridgeClazz, "REPARTITION_PURGE_INTERVAL_MS_CONFIG"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#REPLICATION_FACTOR_CONFIG"/>
        /// </summary>
        public static string REPLICATION_FACTOR_CONFIG { get { return SGetField<string>(LocalBridgeClazz, "REPLICATION_FACTOR_CONFIG"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#REQUEST_TIMEOUT_MS_CONFIG"/>
        /// </summary>
        public static string REQUEST_TIMEOUT_MS_CONFIG { get { return SGetField<string>(LocalBridgeClazz, "REQUEST_TIMEOUT_MS_CONFIG"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#RESTORE_CONSUMER_PREFIX"/>
        /// </summary>
        public static string RESTORE_CONSUMER_PREFIX { get { return SGetField<string>(LocalBridgeClazz, "RESTORE_CONSUMER_PREFIX"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#RETRY_BACKOFF_MS_CONFIG"/>
        /// </summary>
        public static string RETRY_BACKOFF_MS_CONFIG { get { return SGetField<string>(LocalBridgeClazz, "RETRY_BACKOFF_MS_CONFIG"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#REUSE_KTABLE_SOURCE_TOPICS"/>
        /// </summary>
        public static string REUSE_KTABLE_SOURCE_TOPICS { get { return SGetField<string>(LocalBridgeClazz, "REUSE_KTABLE_SOURCE_TOPICS"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#ROCKS_DB"/>
        /// </summary>
        public static string ROCKS_DB { get { return SGetField<string>(LocalBridgeClazz, "ROCKS_DB"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#ROCKSDB_CONFIG_SETTER_CLASS_CONFIG"/>
        /// </summary>
        public static string ROCKSDB_CONFIG_SETTER_CLASS_CONFIG { get { return SGetField<string>(LocalBridgeClazz, "ROCKSDB_CONFIG_SETTER_CLASS_CONFIG"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#SECURITY_PROTOCOL_CONFIG"/>
        /// </summary>
        public static string SECURITY_PROTOCOL_CONFIG { get { return SGetField<string>(LocalBridgeClazz, "SECURITY_PROTOCOL_CONFIG"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#SEND_BUFFER_CONFIG"/>
        /// </summary>
        public static string SEND_BUFFER_CONFIG { get { return SGetField<string>(LocalBridgeClazz, "SEND_BUFFER_CONFIG"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#SINGLE_STORE_SELF_JOIN"/>
        /// </summary>
        public static string SINGLE_STORE_SELF_JOIN { get { return SGetField<string>(LocalBridgeClazz, "SINGLE_STORE_SELF_JOIN"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#STATE_CLEANUP_DELAY_MS_CONFIG"/>
        /// </summary>
        public static string STATE_CLEANUP_DELAY_MS_CONFIG { get { return SGetField<string>(LocalBridgeClazz, "STATE_CLEANUP_DELAY_MS_CONFIG"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#STATE_DIR_CONFIG"/>
        /// </summary>
        public static string STATE_DIR_CONFIG { get { return SGetField<string>(LocalBridgeClazz, "STATE_DIR_CONFIG"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#STATESTORE_CACHE_MAX_BYTES_CONFIG"/>
        /// </summary>
        public static string STATESTORE_CACHE_MAX_BYTES_CONFIG { get { return SGetField<string>(LocalBridgeClazz, "STATESTORE_CACHE_MAX_BYTES_CONFIG"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#STATESTORE_CACHE_MAX_BYTES_DOC"/>
        /// </summary>
        public static string STATESTORE_CACHE_MAX_BYTES_DOC { get { return SGetField<string>(LocalBridgeClazz, "STATESTORE_CACHE_MAX_BYTES_DOC"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#TASK_TIMEOUT_MS_CONFIG"/>
        /// </summary>
        public static string TASK_TIMEOUT_MS_CONFIG { get { return SGetField<string>(LocalBridgeClazz, "TASK_TIMEOUT_MS_CONFIG"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#TASK_TIMEOUT_MS_DOC"/>
        /// </summary>
        public static string TASK_TIMEOUT_MS_DOC { get { return SGetField<string>(LocalBridgeClazz, "TASK_TIMEOUT_MS_DOC"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#TOPIC_PREFIX"/>
        /// </summary>
        public static string TOPIC_PREFIX { get { return SGetField<string>(LocalBridgeClazz, "TOPIC_PREFIX"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#TOPOLOGY_OPTIMIZATION_CONFIG"/>
        /// </summary>
        public static string TOPOLOGY_OPTIMIZATION_CONFIG { get { return SGetField<string>(LocalBridgeClazz, "TOPOLOGY_OPTIMIZATION_CONFIG"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#UPGRADE_FROM_0100"/>
        /// </summary>
        public static string UPGRADE_FROM_0100 { get { return SGetField<string>(LocalBridgeClazz, "UPGRADE_FROM_0100"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#UPGRADE_FROM_0101"/>
        /// </summary>
        public static string UPGRADE_FROM_0101 { get { return SGetField<string>(LocalBridgeClazz, "UPGRADE_FROM_0101"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#UPGRADE_FROM_0102"/>
        /// </summary>
        public static string UPGRADE_FROM_0102 { get { return SGetField<string>(LocalBridgeClazz, "UPGRADE_FROM_0102"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#UPGRADE_FROM_0110"/>
        /// </summary>
        public static string UPGRADE_FROM_0110 { get { return SGetField<string>(LocalBridgeClazz, "UPGRADE_FROM_0110"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#UPGRADE_FROM_10"/>
        /// </summary>
        public static string UPGRADE_FROM_10 { get { return SGetField<string>(LocalBridgeClazz, "UPGRADE_FROM_10"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#UPGRADE_FROM_11"/>
        /// </summary>
        public static string UPGRADE_FROM_11 { get { return SGetField<string>(LocalBridgeClazz, "UPGRADE_FROM_11"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#UPGRADE_FROM_20"/>
        /// </summary>
        public static string UPGRADE_FROM_20 { get { return SGetField<string>(LocalBridgeClazz, "UPGRADE_FROM_20"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#UPGRADE_FROM_21"/>
        /// </summary>
        public static string UPGRADE_FROM_21 { get { return SGetField<string>(LocalBridgeClazz, "UPGRADE_FROM_21"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#UPGRADE_FROM_22"/>
        /// </summary>
        public static string UPGRADE_FROM_22 { get { return SGetField<string>(LocalBridgeClazz, "UPGRADE_FROM_22"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#UPGRADE_FROM_23"/>
        /// </summary>
        public static string UPGRADE_FROM_23 { get { return SGetField<string>(LocalBridgeClazz, "UPGRADE_FROM_23"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#UPGRADE_FROM_24"/>
        /// </summary>
        public static string UPGRADE_FROM_24 { get { return SGetField<string>(LocalBridgeClazz, "UPGRADE_FROM_24"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#UPGRADE_FROM_25"/>
        /// </summary>
        public static string UPGRADE_FROM_25 { get { return SGetField<string>(LocalBridgeClazz, "UPGRADE_FROM_25"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#UPGRADE_FROM_26"/>
        /// </summary>
        public static string UPGRADE_FROM_26 { get { return SGetField<string>(LocalBridgeClazz, "UPGRADE_FROM_26"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#UPGRADE_FROM_27"/>
        /// </summary>
        public static string UPGRADE_FROM_27 { get { return SGetField<string>(LocalBridgeClazz, "UPGRADE_FROM_27"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#UPGRADE_FROM_28"/>
        /// </summary>
        public static string UPGRADE_FROM_28 { get { return SGetField<string>(LocalBridgeClazz, "UPGRADE_FROM_28"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#UPGRADE_FROM_30"/>
        /// </summary>
        public static string UPGRADE_FROM_30 { get { return SGetField<string>(LocalBridgeClazz, "UPGRADE_FROM_30"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#UPGRADE_FROM_31"/>
        /// </summary>
        public static string UPGRADE_FROM_31 { get { return SGetField<string>(LocalBridgeClazz, "UPGRADE_FROM_31"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#UPGRADE_FROM_32"/>
        /// </summary>
        public static string UPGRADE_FROM_32 { get { return SGetField<string>(LocalBridgeClazz, "UPGRADE_FROM_32"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#UPGRADE_FROM_33"/>
        /// </summary>
        public static string UPGRADE_FROM_33 { get { return SGetField<string>(LocalBridgeClazz, "UPGRADE_FROM_33"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#UPGRADE_FROM_34"/>
        /// </summary>
        public static string UPGRADE_FROM_34 { get { return SGetField<string>(LocalBridgeClazz, "UPGRADE_FROM_34"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#UPGRADE_FROM_CONFIG"/>
        /// </summary>
        public static string UPGRADE_FROM_CONFIG { get { return SGetField<string>(LocalBridgeClazz, "UPGRADE_FROM_CONFIG"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#WINDOW_SIZE_MS_CONFIG"/>
        /// </summary>
        public static string WINDOW_SIZE_MS_CONFIG { get { return SGetField<string>(LocalBridgeClazz, "WINDOW_SIZE_MS_CONFIG"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#WINDOW_STORE_CHANGE_LOG_ADDITIONAL_RETENTION_MS_CONFIG"/>
        /// </summary>
        public static string WINDOW_STORE_CHANGE_LOG_ADDITIONAL_RETENTION_MS_CONFIG { get { return SGetField<string>(LocalBridgeClazz, "WINDOW_STORE_CHANGE_LOG_ADDITIONAL_RETENTION_MS_CONFIG"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#WINDOWED_INNER_CLASS_SERDE"/>
        /// </summary>
        public static string WINDOWED_INNER_CLASS_SERDE { get { return SGetField<string>(LocalBridgeClazz, "WINDOWED_INNER_CLASS_SERDE"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#MAX_TASK_IDLE_MS_DISABLED"/>
        /// </summary>
        public static long MAX_TASK_IDLE_MS_DISABLED { get { return SGetField<long>(LocalBridgeClazz, "MAX_TASK_IDLE_MS_DISABLED"); } }

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#adminClientPrefix-java.lang.String-"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <returns><see cref="string"/></returns>
        public static string AdminClientPrefix(string arg0)
        {
            return SExecute<string>(LocalBridgeClazz, "adminClientPrefix", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#clientTagPrefix-java.lang.String-"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <returns><see cref="string"/></returns>
        public static string ClientTagPrefix(string arg0)
        {
            return SExecute<string>(LocalBridgeClazz, "clientTagPrefix", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#consumerPrefix-java.lang.String-"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <returns><see cref="string"/></returns>
        public static string ConsumerPrefix(string arg0)
        {
            return SExecute<string>(LocalBridgeClazz, "consumerPrefix", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#globalConsumerPrefix-java.lang.String-"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <returns><see cref="string"/></returns>
        public static string GlobalConsumerPrefix(string arg0)
        {
            return SExecute<string>(LocalBridgeClazz, "globalConsumerPrefix", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#mainConsumerPrefix-java.lang.String-"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <returns><see cref="string"/></returns>
        public static string MainConsumerPrefix(string arg0)
        {
            return SExecute<string>(LocalBridgeClazz, "mainConsumerPrefix", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#producerPrefix-java.lang.String-"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <returns><see cref="string"/></returns>
        public static string ProducerPrefix(string arg0)
        {
            return SExecute<string>(LocalBridgeClazz, "producerPrefix", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#restoreConsumerPrefix-java.lang.String-"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <returns><see cref="string"/></returns>
        public static string RestoreConsumerPrefix(string arg0)
        {
            return SExecute<string>(LocalBridgeClazz, "restoreConsumerPrefix", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#topicPrefix-java.lang.String-"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <returns><see cref="string"/></returns>
        public static string TopicPrefix(string arg0)
        {
            return SExecute<string>(LocalBridgeClazz, "topicPrefix", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#verifyTopologyOptimizationConfigs-java.lang.String-"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <returns><see cref="Java.Util.Set"/></returns>
        public static Java.Util.Set<string> VerifyTopologyOptimizationConfigs(string arg0)
        {
            return SExecute<Java.Util.Set<string>>(LocalBridgeClazz, "verifyTopologyOptimizationConfigs", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#configDef--"/>
        /// </summary>

        /// <returns><see cref="Org.Apache.Kafka.Common.Config.ConfigDef"/></returns>
        public static Org.Apache.Kafka.Common.Config.ConfigDef ConfigDef()
        {
            return SExecute<Org.Apache.Kafka.Common.Config.ConfigDef>(LocalBridgeClazz, "configDef");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#main-java.lang.String[]-"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        public static void Main(string[] arg0)
        {
            SExecute(LocalBridgeClazz, "main", new object[] { arg0 });
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#getClientTags--"/> 
        /// </summary>
        public Java.Util.Map<string, string> ClientTags
        {
            get { return IExecute<Java.Util.Map<string, string>>("getClientTags"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#getKafkaClientSupplier--"/> 
        /// </summary>
        public Org.Apache.Kafka.Streams.KafkaClientSupplier KafkaClientSupplier
        {
            get { return IExecute<Org.Apache.Kafka.Streams.KafkaClientSupplier>("getKafkaClientSupplier"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#getAdminConfigs-java.lang.String-"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <returns><see cref="Java.Util.Map"/></returns>
        public Java.Util.Map<string, object> GetAdminConfigs(string arg0)
        {
            return IExecute<Java.Util.Map<string, object>>("getAdminConfigs", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#getGlobalConsumerConfigs-java.lang.String-"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <returns><see cref="Java.Util.Map"/></returns>
        public Java.Util.Map<string, object> GetGlobalConsumerConfigs(string arg0)
        {
            return IExecute<Java.Util.Map<string, object>>("getGlobalConsumerConfigs", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#getMainConsumerConfigs-java.lang.String-java.lang.String-int-"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <param name="arg1"><see cref="string"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <returns><see cref="Java.Util.Map"/></returns>
        public Java.Util.Map<string, object> GetMainConsumerConfigs(string arg0, string arg1, int arg2)
        {
            return IExecute<Java.Util.Map<string, object>>("getMainConsumerConfigs", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#getProducerConfigs-java.lang.String-"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <returns><see cref="Java.Util.Map"/></returns>
        public Java.Util.Map<string, object> GetProducerConfigs(string arg0)
        {
            return IExecute<Java.Util.Map<string, object>>("getProducerConfigs", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#getRestoreConsumerConfigs-java.lang.String-"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <returns><see cref="Java.Util.Map"/></returns>
        public Java.Util.Map<string, object> GetRestoreConsumerConfigs(string arg0)
        {
            return IExecute<Java.Util.Map<string, object>>("getRestoreConsumerConfigs", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#defaultKeySerde--"/>
        /// </summary>

        /// <returns><see cref="Org.Apache.Kafka.Common.Serialization.Serde"/></returns>
        public Org.Apache.Kafka.Common.Serialization.Serde DefaultKeySerde()
        {
            return IExecute<Org.Apache.Kafka.Common.Serialization.Serde>("defaultKeySerde");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#defaultValueSerde--"/>
        /// </summary>

        /// <returns><see cref="Org.Apache.Kafka.Common.Serialization.Serde"/></returns>
        public Org.Apache.Kafka.Common.Serialization.Serde DefaultValueSerde()
        {
            return IExecute<Org.Apache.Kafka.Common.Serialization.Serde>("defaultValueSerde");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#defaultDeserializationExceptionHandler--"/>
        /// </summary>

        /// <returns><see cref="Org.Apache.Kafka.Streams.Errors.DeserializationExceptionHandler"/></returns>
        public Org.Apache.Kafka.Streams.Errors.DeserializationExceptionHandler DefaultDeserializationExceptionHandler()
        {
            return IExecute<Org.Apache.Kafka.Streams.Errors.DeserializationExceptionHandler>("defaultDeserializationExceptionHandler");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#defaultProductionExceptionHandler--"/>
        /// </summary>

        /// <returns><see cref="Org.Apache.Kafka.Streams.Errors.ProductionExceptionHandler"/></returns>
        public Org.Apache.Kafka.Streams.Errors.ProductionExceptionHandler DefaultProductionExceptionHandler()
        {
            return IExecute<Org.Apache.Kafka.Streams.Errors.ProductionExceptionHandler>("defaultProductionExceptionHandler");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.html#defaultTimestampExtractor--"/>
        /// </summary>

        /// <returns><see cref="Org.Apache.Kafka.Streams.Processor.TimestampExtractor"/></returns>
        public Org.Apache.Kafka.Streams.Processor.TimestampExtractor DefaultTimestampExtractor()
        {
            return IExecute<Org.Apache.Kafka.Streams.Processor.TimestampExtractor>("defaultTimestampExtractor");
        }

        #endregion

        #region Nested classes
        #region InternalConfig
        public partial class InternalConfig
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.InternalConfig.html#ASSIGNMENT_LISTENER"/>
            /// </summary>
            public static string ASSIGNMENT_LISTENER { get { return SGetField<string>(LocalBridgeClazz, "ASSIGNMENT_LISTENER"); } }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.InternalConfig.html#EMIT_INTERVAL_MS_KSTREAMS_OUTER_JOIN_SPURIOUS_RESULTS_FIX"/>
            /// </summary>
            public static string EMIT_INTERVAL_MS_KSTREAMS_OUTER_JOIN_SPURIOUS_RESULTS_FIX { get { return SGetField<string>(LocalBridgeClazz, "EMIT_INTERVAL_MS_KSTREAMS_OUTER_JOIN_SPURIOUS_RESULTS_FIX"); } }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.InternalConfig.html#EMIT_INTERVAL_MS_KSTREAMS_WINDOWED_AGGREGATION"/>
            /// </summary>
            public static string EMIT_INTERVAL_MS_KSTREAMS_WINDOWED_AGGREGATION { get { return SGetField<string>(LocalBridgeClazz, "EMIT_INTERVAL_MS_KSTREAMS_WINDOWED_AGGREGATION"); } }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.InternalConfig.html#INTERNAL_TASK_ASSIGNOR_CLASS"/>
            /// </summary>
            public static string INTERNAL_TASK_ASSIGNOR_CLASS { get { return SGetField<string>(LocalBridgeClazz, "INTERNAL_TASK_ASSIGNOR_CLASS"); } }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.InternalConfig.html#IQ_CONSISTENCY_OFFSET_VECTOR_ENABLED"/>
            /// </summary>
            public static string IQ_CONSISTENCY_OFFSET_VECTOR_ENABLED { get { return SGetField<string>(LocalBridgeClazz, "IQ_CONSISTENCY_OFFSET_VECTOR_ENABLED"); } }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.InternalConfig.html#REFERENCE_CONTAINER_PARTITION_ASSIGNOR"/>
            /// </summary>
            public static string REFERENCE_CONTAINER_PARTITION_ASSIGNOR { get { return SGetField<string>(LocalBridgeClazz, "REFERENCE_CONTAINER_PARTITION_ASSIGNOR"); } }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.InternalConfig.html#STATE_UPDATER_ENABLED"/>
            /// </summary>
            public static string STATE_UPDATER_ENABLED { get { return SGetField<string>(LocalBridgeClazz, "STATE_UPDATER_ENABLED"); } }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.InternalConfig.html#TOPIC_PREFIX_ALTERNATIVE"/>
            /// </summary>
            public static string TOPIC_PREFIX_ALTERNATIVE { get { return SGetField<string>(LocalBridgeClazz, "TOPIC_PREFIX_ALTERNATIVE"); } }

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.InternalConfig.html#getBoolean-java.util.Map-java.lang.String-boolean-"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Util.Map"/></param>
            /// <param name="arg1"><see cref="string"/></param>
            /// <param name="arg2"><see cref="bool"/></param>
            /// <returns><see cref="bool"/></returns>
            public static bool GetBoolean(Java.Util.Map<string, object> arg0, string arg1, bool arg2)
            {
                return SExecute<bool>(LocalBridgeClazz, "getBoolean", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.InternalConfig.html#getString-java.util.Map-java.lang.String-java.lang.String-"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Util.Map"/></param>
            /// <param name="arg1"><see cref="string"/></param>
            /// <param name="arg2"><see cref="string"/></param>
            /// <returns><see cref="string"/></returns>
            public static string GetString(Java.Util.Map<string, object> arg0, string arg1, string arg2)
            {
                return SExecute<string>(LocalBridgeClazz, "getString", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/3.5.1/org/apache/kafka/streams/StreamsConfig.InternalConfig.html#getLong-java.util.Map-java.lang.String-long-"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Util.Map"/></param>
            /// <param name="arg1"><see cref="string"/></param>
            /// <param name="arg2"><see cref="long"/></param>
            /// <returns><see cref="long"/></returns>
            public static long GetLong(Java.Util.Map<string, object> arg0, string arg1, long arg2)
            {
                return SExecute<long>(LocalBridgeClazz, "getLong", arg0, arg1, arg2);
            }

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}