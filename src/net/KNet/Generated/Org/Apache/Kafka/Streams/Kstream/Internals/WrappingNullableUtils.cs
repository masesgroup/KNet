/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka-streams-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Streams.Kstream.Internals
{
    #region WrappingNullableUtils
    public partial class WrappingNullableUtils
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/kstream/internals/WrappingNullableUtils.html#prepareKeyDeserializer(org.apache.kafka.common.serialization.Deserializer,org.apache.kafka.streams.processor.api.ProcessorContext,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Serialization.Deserializer"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Streams.Processor.Api.ProcessorContext"/></param>
        /// <param name="arg2"><see cref="string"/></param>
        /// <typeparam name="K"></typeparam>
        /// <returns><see cref="Org.Apache.Kafka.Common.Serialization.Deserializer"/></returns>
        public static Org.Apache.Kafka.Common.Serialization.Deserializer<K> PrepareKeyDeserializer<K>(Org.Apache.Kafka.Common.Serialization.Deserializer<K> arg0, Org.Apache.Kafka.Streams.Processor.Api.ProcessorContext arg1, string arg2)
        {
            return SExecute<Org.Apache.Kafka.Common.Serialization.Deserializer<K>>(LocalBridgeClazz, "prepareKeyDeserializer", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/kstream/internals/WrappingNullableUtils.html#prepareKeySerde(org.apache.kafka.common.serialization.Serde,org.apache.kafka.streams.processor.internals.SerdeGetter)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Serialization.Serde"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Streams.Processor.Internals.SerdeGetter"/></param>
        /// <typeparam name="K"></typeparam>
        /// <returns><see cref="Org.Apache.Kafka.Common.Serialization.Serde"/></returns>
        public static Org.Apache.Kafka.Common.Serialization.Serde<K> PrepareKeySerde<K>(Org.Apache.Kafka.Common.Serialization.Serde<K> arg0, Org.Apache.Kafka.Streams.Processor.Internals.SerdeGetter arg1)
        {
            return SExecute<Org.Apache.Kafka.Common.Serialization.Serde<K>>(LocalBridgeClazz, "prepareKeySerde", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/kstream/internals/WrappingNullableUtils.html#prepareKeySerializer(org.apache.kafka.common.serialization.Serializer,org.apache.kafka.streams.processor.api.ProcessorContext,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Serialization.Serializer"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Streams.Processor.Api.ProcessorContext"/></param>
        /// <param name="arg2"><see cref="string"/></param>
        /// <typeparam name="K"></typeparam>
        /// <returns><see cref="Org.Apache.Kafka.Common.Serialization.Serializer"/></returns>
        public static Org.Apache.Kafka.Common.Serialization.Serializer<K> PrepareKeySerializer<K>(Org.Apache.Kafka.Common.Serialization.Serializer<K> arg0, Org.Apache.Kafka.Streams.Processor.Api.ProcessorContext arg1, string arg2)
        {
            return SExecute<Org.Apache.Kafka.Common.Serialization.Serializer<K>>(LocalBridgeClazz, "prepareKeySerializer", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/kstream/internals/WrappingNullableUtils.html#initNullableDeserializer(org.apache.kafka.common.serialization.Deserializer,org.apache.kafka.streams.processor.internals.SerdeGetter)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Serialization.Deserializer"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Streams.Processor.Internals.SerdeGetter"/></param>
        /// <typeparam name="T"></typeparam>
        public static void InitNullableDeserializer<T>(Org.Apache.Kafka.Common.Serialization.Deserializer<T> arg0, Org.Apache.Kafka.Streams.Processor.Internals.SerdeGetter arg1)
        {
            SExecute(LocalBridgeClazz, "initNullableDeserializer", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/kstream/internals/WrappingNullableUtils.html#initNullableSerializer(org.apache.kafka.common.serialization.Serializer,org.apache.kafka.streams.processor.internals.SerdeGetter)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Serialization.Serializer"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Streams.Processor.Internals.SerdeGetter"/></param>
        /// <typeparam name="T"></typeparam>
        public static void InitNullableSerializer<T>(Org.Apache.Kafka.Common.Serialization.Serializer<T> arg0, Org.Apache.Kafka.Streams.Processor.Internals.SerdeGetter arg1)
        {
            SExecute(LocalBridgeClazz, "initNullableSerializer", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/kstream/internals/WrappingNullableUtils.html#prepareValueDeserializer(org.apache.kafka.common.serialization.Deserializer,org.apache.kafka.streams.processor.api.ProcessorContext,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Serialization.Deserializer"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Streams.Processor.Api.ProcessorContext"/></param>
        /// <param name="arg2"><see cref="string"/></param>
        /// <typeparam name="V"></typeparam>
        /// <returns><see cref="Org.Apache.Kafka.Common.Serialization.Deserializer"/></returns>
        public static Org.Apache.Kafka.Common.Serialization.Deserializer<V> PrepareValueDeserializer<V>(Org.Apache.Kafka.Common.Serialization.Deserializer<V> arg0, Org.Apache.Kafka.Streams.Processor.Api.ProcessorContext arg1, string arg2)
        {
            return SExecute<Org.Apache.Kafka.Common.Serialization.Deserializer<V>>(LocalBridgeClazz, "prepareValueDeserializer", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/kstream/internals/WrappingNullableUtils.html#prepareValueSerde(org.apache.kafka.common.serialization.Serde,org.apache.kafka.streams.processor.internals.SerdeGetter)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Serialization.Serde"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Streams.Processor.Internals.SerdeGetter"/></param>
        /// <typeparam name="V"></typeparam>
        /// <returns><see cref="Org.Apache.Kafka.Common.Serialization.Serde"/></returns>
        public static Org.Apache.Kafka.Common.Serialization.Serde<V> PrepareValueSerde<V>(Org.Apache.Kafka.Common.Serialization.Serde<V> arg0, Org.Apache.Kafka.Streams.Processor.Internals.SerdeGetter arg1)
        {
            return SExecute<Org.Apache.Kafka.Common.Serialization.Serde<V>>(LocalBridgeClazz, "prepareValueSerde", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/kstream/internals/WrappingNullableUtils.html#prepareValueSerializer(org.apache.kafka.common.serialization.Serializer,org.apache.kafka.streams.processor.api.ProcessorContext,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Serialization.Serializer"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Streams.Processor.Api.ProcessorContext"/></param>
        /// <param name="arg2"><see cref="string"/></param>
        /// <typeparam name="V"></typeparam>
        /// <returns><see cref="Org.Apache.Kafka.Common.Serialization.Serializer"/></returns>
        public static Org.Apache.Kafka.Common.Serialization.Serializer<V> PrepareValueSerializer<V>(Org.Apache.Kafka.Common.Serialization.Serializer<V> arg0, Org.Apache.Kafka.Streams.Processor.Api.ProcessorContext arg1, string arg2)
        {
            return SExecute<Org.Apache.Kafka.Common.Serialization.Serializer<V>>(LocalBridgeClazz, "prepareValueSerializer", arg0, arg1, arg2);
        }

        #endregion

        #region Instance methods

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}