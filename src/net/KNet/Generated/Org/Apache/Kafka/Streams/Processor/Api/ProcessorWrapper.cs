/*
*  Copyright (c) 2021-2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.6.3.0)
*  using kafka-streams-4.0.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Streams.Processor.Api
{
    #region ProcessorWrapper declaration
    /// <summary>
    /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/4.0.0/org/apache/kafka/streams/processor/api/ProcessorWrapper.html"/>
    /// </summary>
    public partial class ProcessorWrapper : Org.Apache.Kafka.Common.Configurable
    {
        const string _bridgeClassName = "org.apache.kafka.streams.processor.api.ProcessorWrapper";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        [global::System.Obsolete("ProcessorWrapper class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public ProcessorWrapper() { }
        /// <summary>
        /// Internal constructor: used internally from JCOBridge
        /// </summary>
        [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public ProcessorWrapper(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        [global::System.Obsolete("ProcessorWrapper class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public ProcessorWrapper(params object[] args) : base(args) { }

        private static readonly global::System.Exception _LocalBridgeClazzException = null;
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <inheritdoc/>
        public override string BridgeClassName => _bridgeClassName;
        /// <inheritdoc/>
        public override bool IsBridgeAbstract => true;
        /// <inheritdoc/>
        public override bool IsBridgeCloseable => false;
        /// <inheritdoc/>
        public override bool IsBridgeInterface => true;
        /// <inheritdoc/>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class

    }
    #endregion

    #region IProcessorWrapper
    /// <summary>
    /// .NET interface skeleton to be manually developed following <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/4.0.0/org/apache/kafka/streams/processor/api/ProcessorWrapper.html"/>
    /// </summary>
    public partial interface IProcessorWrapper : Org.Apache.Kafka.Common.IConfigurable
    {
        #region Instance methods

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion

    #region ProcessorWrapper implementation
    public partial class ProcessorWrapper : Org.Apache.Kafka.Streams.Processor.Api.IProcessorWrapper
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/4.0.0/org/apache/kafka/streams/processor/api/ProcessorWrapper.html#asWrapped(org.apache.kafka.streams.processor.api.ProcessorSupplier)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Streams.Processor.Api.ProcessorSupplier"/></param>
        /// <typeparam name="KIn"></typeparam>
        /// <typeparam name="VIn"></typeparam>
        /// <typeparam name="KOut"></typeparam>
        /// <typeparam name="VOut"></typeparam>
        /// <returns><see cref="Org.Apache.Kafka.Streams.Processor.Api.WrappedProcessorSupplier"/></returns>
        public static Org.Apache.Kafka.Streams.Processor.Api.WrappedProcessorSupplier<KIn, VIn, KOut, VOut> AsWrapped<KIn, VIn, KOut, VOut>(Org.Apache.Kafka.Streams.Processor.Api.ProcessorSupplier<KIn, VIn, KOut, VOut> arg0)
        {
            return SExecuteWithSignature<Org.Apache.Kafka.Streams.Processor.Api.WrappedProcessorSupplier<KIn, VIn, KOut, VOut>>(LocalBridgeClazz, "asWrapped", "(Lorg/apache/kafka/streams/processor/api/ProcessorSupplier;)Lorg/apache/kafka/streams/processor/api/WrappedProcessorSupplier;", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/4.0.0/org/apache/kafka/streams/processor/api/ProcessorWrapper.html#asWrappedFixedKey(org.apache.kafka.streams.processor.api.FixedKeyProcessorSupplier)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Streams.Processor.Api.FixedKeyProcessorSupplier"/></param>
        /// <typeparam name="KIn"></typeparam>
        /// <typeparam name="VIn"></typeparam>
        /// <typeparam name="VOut"></typeparam>
        /// <returns><see cref="Org.Apache.Kafka.Streams.Processor.Api.WrappedFixedKeyProcessorSupplier"/></returns>
        public static Org.Apache.Kafka.Streams.Processor.Api.WrappedFixedKeyProcessorSupplier<KIn, VIn, VOut> AsWrappedFixedKey<KIn, VIn, VOut>(Org.Apache.Kafka.Streams.Processor.Api.FixedKeyProcessorSupplier<KIn, VIn, VOut> arg0)
        {
            return SExecuteWithSignature<Org.Apache.Kafka.Streams.Processor.Api.WrappedFixedKeyProcessorSupplier<KIn, VIn, VOut>>(LocalBridgeClazz, "asWrappedFixedKey", "(Lorg/apache/kafka/streams/processor/api/FixedKeyProcessorSupplier;)Lorg/apache/kafka/streams/processor/api/WrappedFixedKeyProcessorSupplier;", arg0);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/4.0.0/org/apache/kafka/streams/processor/api/ProcessorWrapper.html#wrapProcessorSupplier(java.lang.String,org.apache.kafka.streams.processor.api.ProcessorSupplier)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Streams.Processor.Api.ProcessorSupplier"/></param>
        /// <typeparam name="KIn"></typeparam>
        /// <typeparam name="VIn"></typeparam>
        /// <typeparam name="KOut"></typeparam>
        /// <typeparam name="VOut"></typeparam>
        /// <returns><see cref="Org.Apache.Kafka.Streams.Processor.Api.WrappedProcessorSupplier"/></returns>
        public Org.Apache.Kafka.Streams.Processor.Api.WrappedProcessorSupplier<KIn, VIn, KOut, VOut> WrapProcessorSupplier<KIn, VIn, KOut, VOut>(Java.Lang.String arg0, Org.Apache.Kafka.Streams.Processor.Api.ProcessorSupplier<KIn, VIn, KOut, VOut> arg1)
        {
            return IExecuteWithSignature<Org.Apache.Kafka.Streams.Processor.Api.WrappedProcessorSupplier<KIn, VIn, KOut, VOut>>("wrapProcessorSupplier", "(Ljava/lang/String;Lorg/apache/kafka/streams/processor/api/ProcessorSupplier;)Lorg/apache/kafka/streams/processor/api/WrappedProcessorSupplier;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/4.0.0/org/apache/kafka/streams/processor/api/ProcessorWrapper.html#wrapFixedKeyProcessorSupplier(java.lang.String,org.apache.kafka.streams.processor.api.FixedKeyProcessorSupplier)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Streams.Processor.Api.FixedKeyProcessorSupplier"/></param>
        /// <typeparam name="KIn"></typeparam>
        /// <typeparam name="VIn"></typeparam>
        /// <typeparam name="VOut"></typeparam>
        /// <returns><see cref="Org.Apache.Kafka.Streams.Processor.Api.WrappedFixedKeyProcessorSupplier"/></returns>
        public Org.Apache.Kafka.Streams.Processor.Api.WrappedFixedKeyProcessorSupplier<KIn, VIn, VOut> WrapFixedKeyProcessorSupplier<KIn, VIn, VOut>(Java.Lang.String arg0, Org.Apache.Kafka.Streams.Processor.Api.FixedKeyProcessorSupplier<KIn, VIn, VOut> arg1)
        {
            return IExecuteWithSignature<Org.Apache.Kafka.Streams.Processor.Api.WrappedFixedKeyProcessorSupplier<KIn, VIn, VOut>>("wrapFixedKeyProcessorSupplier", "(Ljava/lang/String;Lorg/apache/kafka/streams/processor/api/FixedKeyProcessorSupplier;)Lorg/apache/kafka/streams/processor/api/WrappedFixedKeyProcessorSupplier;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/4.0.0/org/apache/kafka/streams/processor/api/ProcessorWrapper.html#configure(java.util.Map)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Map"/></param>
        public void Configure(Java.Util.Map<Java.Lang.String, object> arg0)
        {
            IExecuteWithSignature("configure", "(Ljava/util/Map;)V", arg0);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}