/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka-streams-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Streams.State.Internals
{
    #region AbstractStoreBuilder
    public partial class AbstractStoreBuilder
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/AbstractStoreBuilder.html#%3Cinit%3E(java.lang.String,org.apache.kafka.common.serialization.Serde,org.apache.kafka.common.serialization.Serde,org.apache.kafka.common.utils.Time)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Common.Serialization.Serde"/></param>
        /// <param name="arg2"><see cref="Org.Apache.Kafka.Common.Serialization.Serde"/></param>
        /// <param name="arg3"><see cref="Org.Apache.Kafka.Common.Utils.Time"/></param>
        public AbstractStoreBuilder(string arg0, Org.Apache.Kafka.Common.Serialization.Serde arg1, Org.Apache.Kafka.Common.Serialization.Serde arg2, Org.Apache.Kafka.Common.Utils.Time arg3)
            : base(arg0, arg1, arg2, arg3)
        {
        }

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Org.Apache.Kafka.Streams.State.Internals.AbstractStoreBuilder"/> to <see cref="Org.Apache.Kafka.Streams.State.StoreBuilder"/>
        /// </summary>
        public static implicit operator Org.Apache.Kafka.Streams.State.StoreBuilder(Org.Apache.Kafka.Streams.State.Internals.AbstractStoreBuilder t) => t.Cast<Org.Apache.Kafka.Streams.State.StoreBuilder>();

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/AbstractStoreBuilder.html#logConfig()"/> 
        /// </summary>
        public Java.Util.Map LogConfig
        {
            get { return IExecute<Java.Util.Map>("logConfig"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/AbstractStoreBuilder.html#loggingEnabled()"/> 
        /// </summary>
        public bool LoggingEnabled
        {
            get { return IExecute<bool>("loggingEnabled"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/AbstractStoreBuilder.html#name()"/> 
        /// </summary>
        public string Name
        {
            get { return IExecute<string>("name"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/AbstractStoreBuilder.html#withCachingDisabled()"/> 
        /// </summary>
        public Org.Apache.Kafka.Streams.State.StoreBuilder WithCachingDisabled
        {
            get { return IExecute<Org.Apache.Kafka.Streams.State.StoreBuilder>("withCachingDisabled"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/AbstractStoreBuilder.html#withCachingEnabled()"/> 
        /// </summary>
        public Org.Apache.Kafka.Streams.State.StoreBuilder WithCachingEnabled
        {
            get { return IExecute<Org.Apache.Kafka.Streams.State.StoreBuilder>("withCachingEnabled"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/AbstractStoreBuilder.html#withLoggingDisabled()"/> 
        /// </summary>
        public Org.Apache.Kafka.Streams.State.StoreBuilder WithLoggingDisabled
        {
            get { return IExecute<Org.Apache.Kafka.Streams.State.StoreBuilder>("withLoggingDisabled"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/AbstractStoreBuilder.html#withLoggingEnabled(java.util.Map)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Map"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Streams.State.StoreBuilder"/></returns>
        public Org.Apache.Kafka.Streams.State.StoreBuilder WithLoggingEnabled(Java.Util.Map arg0)
        {
            return IExecute<Org.Apache.Kafka.Streams.State.StoreBuilder>("withLoggingEnabled", arg0);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion

    #region AbstractStoreBuilder<K, V, T>
    public partial class AbstractStoreBuilder<K, V, T>
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/AbstractStoreBuilder.html#%3Cinit%3E(java.lang.String,org.apache.kafka.common.serialization.Serde,org.apache.kafka.common.serialization.Serde,org.apache.kafka.common.utils.Time)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Common.Serialization.Serde"/></param>
        /// <param name="arg2"><see cref="Org.Apache.Kafka.Common.Serialization.Serde"/></param>
        /// <param name="arg3"><see cref="Org.Apache.Kafka.Common.Utils.Time"/></param>
        public AbstractStoreBuilder(string arg0, Org.Apache.Kafka.Common.Serialization.Serde<K> arg1, Org.Apache.Kafka.Common.Serialization.Serde<V> arg2, Org.Apache.Kafka.Common.Utils.Time arg3)
            : base(arg0, arg1, arg2, arg3)
        {
        }

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Org.Apache.Kafka.Streams.State.Internals.AbstractStoreBuilder{K, V, T}"/> to <see cref="Org.Apache.Kafka.Streams.State.StoreBuilder{T}"/>
        /// </summary>
        public static implicit operator Org.Apache.Kafka.Streams.State.StoreBuilder<T>(Org.Apache.Kafka.Streams.State.Internals.AbstractStoreBuilder<K, V, T> t) => t.Cast<Org.Apache.Kafka.Streams.State.StoreBuilder<T>>();
        /// <summary>
        /// Converter from <see cref="Org.Apache.Kafka.Streams.State.Internals.AbstractStoreBuilder{K, V, T}"/> to <see cref="Org.Apache.Kafka.Streams.State.Internals.AbstractStoreBuilder"/>
        /// </summary>
        public static implicit operator Org.Apache.Kafka.Streams.State.Internals.AbstractStoreBuilder(Org.Apache.Kafka.Streams.State.Internals.AbstractStoreBuilder<K, V, T> t) => t.Cast<Org.Apache.Kafka.Streams.State.Internals.AbstractStoreBuilder>();

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/AbstractStoreBuilder.html#logConfig()"/> 
        /// </summary>
        public Java.Util.Map<string, string> LogConfig
        {
            get { return IExecute<Java.Util.Map<string, string>>("logConfig"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/AbstractStoreBuilder.html#loggingEnabled()"/> 
        /// </summary>
        public bool LoggingEnabled
        {
            get { return IExecute<bool>("loggingEnabled"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/AbstractStoreBuilder.html#name()"/> 
        /// </summary>
        public string Name
        {
            get { return IExecute<string>("name"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/AbstractStoreBuilder.html#withCachingDisabled()"/> 
        /// </summary>
        public Org.Apache.Kafka.Streams.State.StoreBuilder<T> WithCachingDisabled
        {
            get { return IExecute<Org.Apache.Kafka.Streams.State.StoreBuilder<T>>("withCachingDisabled"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/AbstractStoreBuilder.html#withCachingEnabled()"/> 
        /// </summary>
        public Org.Apache.Kafka.Streams.State.StoreBuilder<T> WithCachingEnabled
        {
            get { return IExecute<Org.Apache.Kafka.Streams.State.StoreBuilder<T>>("withCachingEnabled"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/AbstractStoreBuilder.html#withLoggingDisabled()"/> 
        /// </summary>
        public Org.Apache.Kafka.Streams.State.StoreBuilder<T> WithLoggingDisabled
        {
            get { return IExecute<Org.Apache.Kafka.Streams.State.StoreBuilder<T>>("withLoggingDisabled"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/AbstractStoreBuilder.html#withLoggingEnabled(java.util.Map)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Map"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Streams.State.StoreBuilder"/></returns>
        public Org.Apache.Kafka.Streams.State.StoreBuilder<T> WithLoggingEnabled(Java.Util.Map<string, string> arg0)
        {
            return IExecute<Org.Apache.Kafka.Streams.State.StoreBuilder<T>>("withLoggingEnabled", arg0);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}