/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka-streams-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Streams.Processor.Internals
{
    #region StreamThread
    public partial class StreamThread
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/StreamThread.html#%3Cinit%3E(org.apache.kafka.common.utils.Time,org.apache.kafka.streams.StreamsConfig,org.apache.kafka.clients.admin.Admin,org.apache.kafka.clients.consumer.Consumer,org.apache.kafka.clients.consumer.Consumer,org.apache.kafka.streams.processor.internals.ChangelogReader,java.lang.String,org.apache.kafka.streams.processor.internals.TaskManager,org.apache.kafka.streams.processor.internals.metrics.StreamsMetricsImpl,org.apache.kafka.streams.processor.internals.TopologyMetadata,java.lang.String,org.apache.kafka.common.utils.LogContext,java.util.concurrent.atomic.AtomicInteger,java.util.concurrent.atomic.AtomicLong,java.util.Queue,java.lang.Runnable,java.util.function.BiConsumer,java.util.function.Consumer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Utils.Time"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Streams.StreamsConfig"/></param>
        /// <param name="arg2"><see cref="Org.Apache.Kafka.Clients.Admin.Admin"/></param>
        /// <param name="arg3"><see cref="Org.Apache.Kafka.Clients.Consumer.Consumer"/></param>
        /// <param name="arg4"><see cref="Org.Apache.Kafka.Clients.Consumer.Consumer"/></param>
        /// <param name="arg5"><see cref="Org.Apache.Kafka.Streams.Processor.Internals.ChangelogReader"/></param>
        /// <param name="arg6"><see cref="string"/></param>
        /// <param name="arg7"><see cref="Org.Apache.Kafka.Streams.Processor.Internals.TaskManager"/></param>
        /// <param name="arg8"><see cref="Org.Apache.Kafka.Streams.Processor.Internals.Metrics.StreamsMetricsImpl"/></param>
        /// <param name="arg9"><see cref="Org.Apache.Kafka.Streams.Processor.Internals.TopologyMetadata"/></param>
        /// <param name="arg10"><see cref="string"/></param>
        /// <param name="arg11"><see cref="Org.Apache.Kafka.Common.Utils.LogContext"/></param>
        /// <param name="arg12"><see cref="Java.Util.Concurrent.Atomic.AtomicInteger"/></param>
        /// <param name="arg13"><see cref="Java.Util.Concurrent.Atomic.AtomicLong"/></param>
        /// <param name="arg14"><see cref="Java.Util.Queue"/></param>
        /// <param name="arg15"><see cref="Java.Lang.Runnable"/></param>
        /// <param name="arg16"><see cref="Java.Util.Function.BiConsumer"/></param>
        /// <param name="arg17"><see cref="Java.Util.Function.Consumer"/></param>
        public StreamThread(Org.Apache.Kafka.Common.Utils.Time arg0, Org.Apache.Kafka.Streams.StreamsConfig arg1, Org.Apache.Kafka.Clients.Admin.Admin arg2, Org.Apache.Kafka.Clients.Consumer.Consumer arg3, Org.Apache.Kafka.Clients.Consumer.Consumer arg4, Org.Apache.Kafka.Streams.Processor.Internals.ChangelogReader arg5, string arg6, Org.Apache.Kafka.Streams.Processor.Internals.TaskManager arg7, Org.Apache.Kafka.Streams.Processor.Internals.Metrics.StreamsMetricsImpl arg8, Org.Apache.Kafka.Streams.Processor.Internals.TopologyMetadata arg9, string arg10, Org.Apache.Kafka.Common.Utils.LogContext arg11, Java.Util.Concurrent.Atomic.AtomicInteger arg12, Java.Util.Concurrent.Atomic.AtomicLong arg13, Java.Util.Queue arg14, Java.Lang.Runnable arg15, Java.Util.Function.BiConsumer arg16, Java.Util.Function.Consumer arg17)
            : base(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/StreamThread.html#stateLock"/>
        /// </summary>
        public object stateLock { get { return IGetField("stateLock"); } }

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/StreamThread.html#create(org.apache.kafka.streams.processor.internals.TopologyMetadata,org.apache.kafka.streams.StreamsConfig,org.apache.kafka.streams.KafkaClientSupplier,org.apache.kafka.clients.admin.Admin,java.util.UUID,java.lang.String,org.apache.kafka.streams.processor.internals.metrics.StreamsMetricsImpl,org.apache.kafka.common.utils.Time,org.apache.kafka.streams.processor.internals.StreamsMetadataState,long,org.apache.kafka.streams.processor.internals.StateDirectory,org.apache.kafka.streams.processor.StateRestoreListener,int,java.lang.Runnable,java.util.function.BiConsumer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Streams.Processor.Internals.TopologyMetadata"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Streams.StreamsConfig"/></param>
        /// <param name="arg2"><see cref="Org.Apache.Kafka.Streams.KafkaClientSupplier"/></param>
        /// <param name="arg3"><see cref="Org.Apache.Kafka.Clients.Admin.Admin"/></param>
        /// <param name="arg4"><see cref="Java.Util.UUID"/></param>
        /// <param name="arg5"><see cref="string"/></param>
        /// <param name="arg6"><see cref="Org.Apache.Kafka.Streams.Processor.Internals.Metrics.StreamsMetricsImpl"/></param>
        /// <param name="arg7"><see cref="Org.Apache.Kafka.Common.Utils.Time"/></param>
        /// <param name="arg8"><see cref="Org.Apache.Kafka.Streams.Processor.Internals.StreamsMetadataState"/></param>
        /// <param name="arg9"><see cref="long"/></param>
        /// <param name="arg10"><see cref="Org.Apache.Kafka.Streams.Processor.Internals.StateDirectory"/></param>
        /// <param name="arg11"><see cref="Org.Apache.Kafka.Streams.Processor.StateRestoreListener"/></param>
        /// <param name="arg12"><see cref="int"/></param>
        /// <param name="arg13"><see cref="Java.Lang.Runnable"/></param>
        /// <param name="arg14"><see cref="Java.Util.Function.BiConsumer"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Streams.Processor.Internals.StreamThread"/></returns>
        public static Org.Apache.Kafka.Streams.Processor.Internals.StreamThread Create(Org.Apache.Kafka.Streams.Processor.Internals.TopologyMetadata arg0, Org.Apache.Kafka.Streams.StreamsConfig arg1, Org.Apache.Kafka.Streams.KafkaClientSupplier arg2, Org.Apache.Kafka.Clients.Admin.Admin arg3, Java.Util.UUID arg4, string arg5, Org.Apache.Kafka.Streams.Processor.Internals.Metrics.StreamsMetricsImpl arg6, Org.Apache.Kafka.Common.Utils.Time arg7, Org.Apache.Kafka.Streams.Processor.Internals.StreamsMetadataState arg8, long arg9, Org.Apache.Kafka.Streams.Processor.Internals.StateDirectory arg10, Org.Apache.Kafka.Streams.Processor.StateRestoreListener arg11, int arg12, Java.Lang.Runnable arg13, Java.Util.Function.BiConsumer<Java.Lang.Throwable, bool?> arg14)
        {
            return SExecute<Org.Apache.Kafka.Streams.Processor.Internals.StreamThread>(LocalBridgeClazz, "create", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/StreamThread.html#activeTaskMap()"/> 
        /// </summary>
        public Java.Util.Map<Org.Apache.Kafka.Streams.Processor.TaskId, Org.Apache.Kafka.Streams.Processor.Internals.Task> ActiveTaskMap
        {
            get { return IExecute<Java.Util.Map<Org.Apache.Kafka.Streams.Processor.TaskId, Org.Apache.Kafka.Streams.Processor.Internals.Task>>("activeTaskMap"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/StreamThread.html#activeTasks()"/> 
        /// </summary>
        public Java.Util.List<Org.Apache.Kafka.Streams.Processor.Internals.Task> ActiveTasks
        {
            get { return IExecute<Java.Util.List<Org.Apache.Kafka.Streams.Processor.Internals.Task>>("activeTasks"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/StreamThread.html#adminClientMetrics()"/> 
        /// </summary>
        public Java.Util.Map<Org.Apache.Kafka.Common.MetricName, Org.Apache.Kafka.Common.Metric> AdminClientMetrics
        {
            get { return IExecute<Java.Util.Map<Org.Apache.Kafka.Common.MetricName, Org.Apache.Kafka.Common.Metric>>("adminClientMetrics"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/StreamThread.html#allTasks()"/> 
        /// </summary>
        public Java.Util.Map<Org.Apache.Kafka.Streams.Processor.TaskId, Org.Apache.Kafka.Streams.Processor.Internals.Task> AllTasks
        {
            get { return IExecute<Java.Util.Map<Org.Apache.Kafka.Streams.Processor.TaskId, Org.Apache.Kafka.Streams.Processor.Internals.Task>>("allTasks"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/StreamThread.html#consumerMetrics()"/> 
        /// </summary>
        public Java.Util.Map<Org.Apache.Kafka.Common.MetricName, Org.Apache.Kafka.Common.Metric> ConsumerMetrics
        {
            get { return IExecute<Java.Util.Map<Org.Apache.Kafka.Common.MetricName, Org.Apache.Kafka.Common.Metric>>("consumerMetrics"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/StreamThread.html#getGroupInstanceID()"/> 
        /// </summary>
        public Java.Util.Optional<string> GroupInstanceID
        {
            get { return IExecute<Java.Util.Optional<string>>("getGroupInstanceID"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/StreamThread.html#isRunning()"/> 
        /// </summary>
        public bool IsRunning
        {
            get { return IExecute<bool>("isRunning"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/StreamThread.html#isThreadAlive()"/> 
        /// </summary>
        public bool IsThreadAlive
        {
            get { return IExecute<bool>("isThreadAlive"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/StreamThread.html#producerMetrics()"/> 
        /// </summary>
        public Java.Util.Map<Org.Apache.Kafka.Common.MetricName, Org.Apache.Kafka.Common.Metric> ProducerMetrics
        {
            get { return IExecute<Java.Util.Map<Org.Apache.Kafka.Common.MetricName, Org.Apache.Kafka.Common.Metric>>("producerMetrics"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/StreamThread.html#getStateLock()"/> 
        /// </summary>
        public object StateLock
        {
            get { return IExecute("getStateLock"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/StreamThread.html#threadMetadata()"/> 
        /// </summary>
        public Org.Apache.Kafka.Streams.ThreadMetadata ThreadMetadata
        {
            get { return IExecute<Org.Apache.Kafka.Streams.ThreadMetadata>("threadMetadata"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/StreamThread.html#waitOnThreadState(org.apache.kafka.streams.processor.internals.StreamThread.State,long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Streams.Processor.Internals.StreamThread.State"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool WaitOnThreadState(Org.Apache.Kafka.Streams.Processor.Internals.StreamThread.State arg0, long arg1)
        {
            return IExecute<bool>("waitOnThreadState", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/StreamThread.html#toString(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <returns><see cref="string"/></returns>
        public string ToString(string arg0)
        {
            return IExecute<string>("toString", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/StreamThread.html#state()"/>
        /// </summary>

        /// <returns><see cref="Org.Apache.Kafka.Streams.Processor.Internals.StreamThread.State"/></returns>
        public Org.Apache.Kafka.Streams.Processor.Internals.StreamThread.State StateMethod()
        {
            return IExecute<Org.Apache.Kafka.Streams.Processor.Internals.StreamThread.State>("state");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/StreamThread.html#maybeSendShutdown()"/>
        /// </summary>
        public void MaybeSendShutdown()
        {
            IExecute("maybeSendShutdown");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/StreamThread.html#requestLeaveGroupDuringShutdown()"/>
        /// </summary>
        public void RequestLeaveGroupDuringShutdown()
        {
            IExecute("requestLeaveGroupDuringShutdown");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/StreamThread.html#resizeCache(long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        public void ResizeCache(long arg0)
        {
            IExecute("resizeCache", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/StreamThread.html#sendShutdownRequest(org.apache.kafka.streams.processor.internals.assignment.AssignorError)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Streams.Processor.Internals.Assignment.AssignorError"/></param>
        public void SendShutdownRequest(Org.Apache.Kafka.Streams.Processor.Internals.Assignment.AssignorError arg0)
        {
            IExecute("sendShutdownRequest", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/StreamThread.html#setStateListener(org.apache.kafka.streams.processor.internals.StreamThread.StateListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Streams.Processor.Internals.StreamThread.StateListener"/></param>
        public void SetStateListener(Org.Apache.Kafka.Streams.Processor.Internals.StreamThread.StateListener arg0)
        {
            IExecute("setStateListener", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/StreamThread.html#setStreamsUncaughtExceptionHandler(java.util.function.BiConsumer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Function.BiConsumer"/></param>
        public void SetStreamsUncaughtExceptionHandler(Java.Util.Function.BiConsumer<Java.Lang.Throwable, bool?> arg0)
        {
            IExecute("setStreamsUncaughtExceptionHandler", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/StreamThread.html#shutdown()"/>
        /// </summary>
        public void Shutdown()
        {
            IExecute("shutdown");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/StreamThread.html#shutdownToError()"/>
        /// </summary>
        public void ShutdownToError()
        {
            IExecute("shutdownToError");
        }

        #endregion

        #region Nested classes
        #region State
        public partial class State
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators
            /// <summary>
            /// Converter from <see cref="Org.Apache.Kafka.Streams.Processor.Internals.StreamThread.State"/> to <see cref="Org.Apache.Kafka.Streams.Processor.Internals.ThreadStateTransitionValidator"/>
            /// </summary>
            public static implicit operator Org.Apache.Kafka.Streams.Processor.Internals.ThreadStateTransitionValidator(Org.Apache.Kafka.Streams.Processor.Internals.StreamThread.State t) => t.Cast<Org.Apache.Kafka.Streams.Processor.Internals.ThreadStateTransitionValidator>();

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/StreamThread.State.html#CREATED"/>
            /// </summary>
            public static Org.Apache.Kafka.Streams.Processor.Internals.StreamThread.State CREATED { get { return SGetField<Org.Apache.Kafka.Streams.Processor.Internals.StreamThread.State>(LocalBridgeClazz, "CREATED"); } }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/StreamThread.State.html#DEAD"/>
            /// </summary>
            public static Org.Apache.Kafka.Streams.Processor.Internals.StreamThread.State DEAD { get { return SGetField<Org.Apache.Kafka.Streams.Processor.Internals.StreamThread.State>(LocalBridgeClazz, "DEAD"); } }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/StreamThread.State.html#PARTITIONS_ASSIGNED"/>
            /// </summary>
            public static Org.Apache.Kafka.Streams.Processor.Internals.StreamThread.State PARTITIONS_ASSIGNED { get { return SGetField<Org.Apache.Kafka.Streams.Processor.Internals.StreamThread.State>(LocalBridgeClazz, "PARTITIONS_ASSIGNED"); } }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/StreamThread.State.html#PARTITIONS_REVOKED"/>
            /// </summary>
            public static Org.Apache.Kafka.Streams.Processor.Internals.StreamThread.State PARTITIONS_REVOKED { get { return SGetField<Org.Apache.Kafka.Streams.Processor.Internals.StreamThread.State>(LocalBridgeClazz, "PARTITIONS_REVOKED"); } }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/StreamThread.State.html#PENDING_SHUTDOWN"/>
            /// </summary>
            public static Org.Apache.Kafka.Streams.Processor.Internals.StreamThread.State PENDING_SHUTDOWN { get { return SGetField<Org.Apache.Kafka.Streams.Processor.Internals.StreamThread.State>(LocalBridgeClazz, "PENDING_SHUTDOWN"); } }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/StreamThread.State.html#RUNNING"/>
            /// </summary>
            public static Org.Apache.Kafka.Streams.Processor.Internals.StreamThread.State RUNNING { get { return SGetField<Org.Apache.Kafka.Streams.Processor.Internals.StreamThread.State>(LocalBridgeClazz, "RUNNING"); } }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/StreamThread.State.html#STARTING"/>
            /// </summary>
            public static Org.Apache.Kafka.Streams.Processor.Internals.StreamThread.State STARTING { get { return SGetField<Org.Apache.Kafka.Streams.Processor.Internals.StreamThread.State>(LocalBridgeClazz, "STARTING"); } }

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/StreamThread.State.html#values()"/> 
            /// </summary>
            public static Org.Apache.Kafka.Streams.Processor.Internals.StreamThread.State[] Values
            {
                get { return SExecuteArray<Org.Apache.Kafka.Streams.Processor.Internals.StreamThread.State>(LocalBridgeClazz, "values"); }
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/StreamThread.State.html#valueOf(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="string"/></param>
            /// <returns><see cref="Org.Apache.Kafka.Streams.Processor.Internals.StreamThread.State"/></returns>
            public static Org.Apache.Kafka.Streams.Processor.Internals.StreamThread.State ValueOf(string arg0)
            {
                return SExecute<Org.Apache.Kafka.Streams.Processor.Internals.StreamThread.State>(LocalBridgeClazz, "valueOf", arg0);
            }

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/StreamThread.State.html#isAlive()"/> 
            /// </summary>
            public bool IsAlive
            {
                get { return IExecute<bool>("isAlive"); }
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/StreamThread.State.html#isValidTransition(org.apache.kafka.streams.processor.internals.ThreadStateTransitionValidator)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Org.Apache.Kafka.Streams.Processor.Internals.ThreadStateTransitionValidator"/></param>
            /// <returns><see cref="bool"/></returns>
            public bool IsValidTransition(Org.Apache.Kafka.Streams.Processor.Internals.ThreadStateTransitionValidator arg0)
            {
                return IExecute<bool>("isValidTransition", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}