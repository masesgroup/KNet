/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka-streams-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Streams.Processor.Internals
{
    #region TopologyMetadata
    public partial class TopologyMetadata
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/TopologyMetadata.html#%3Cinit%3E(java.util.concurrent.ConcurrentNavigableMap,org.apache.kafka.streams.StreamsConfig)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Concurrent.ConcurrentNavigableMap"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Streams.StreamsConfig"/></param>
        public TopologyMetadata(Java.Util.Concurrent.ConcurrentNavigableMap arg0, Org.Apache.Kafka.Streams.StreamsConfig arg1)
            : base(arg0, arg1)
        {
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/TopologyMetadata.html#%3Cinit%3E(org.apache.kafka.streams.processor.internals.InternalTopologyBuilder,org.apache.kafka.streams.StreamsConfig)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Streams.Processor.Internals.InternalTopologyBuilder"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Streams.StreamsConfig"/></param>
        public TopologyMetadata(Org.Apache.Kafka.Streams.Processor.Internals.InternalTopologyBuilder arg0, Org.Apache.Kafka.Streams.StreamsConfig arg1)
            : base(arg0, arg1)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/TopologyMetadata.html#UNNAMED_TOPOLOGY"/>
        /// </summary>
        public static string UNNAMED_TOPOLOGY { get { return SGetField<string>(LocalBridgeClazz, "UNNAMED_TOPOLOGY"); } }

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/TopologyMetadata.html#getTopologyNameOrElseUnnamed(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <returns><see cref="string"/></returns>
        public static string GetTopologyNameOrElseUnnamed(string arg0)
        {
            return SExecute<string>(LocalBridgeClazz, "getTopologyNameOrElseUnnamed", arg0);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/TopologyMetadata.html#allFullSourceTopicNames()"/> 
        /// </summary>
        public Java.Util.Collection<string> AllFullSourceTopicNames
        {
            get { return IExecute<Java.Util.Collection<string>>("allFullSourceTopicNames"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/TopologyMetadata.html#getAllNamedTopologies()"/> 
        /// </summary>
        public Java.Util.Collection<Org.Apache.Kafka.Streams.Processor.Internals.Namedtopology.NamedTopology> AllNamedTopologies
        {
            get { return IExecute<Java.Util.Collection<Org.Apache.Kafka.Streams.Processor.Internals.Namedtopology.NamedTopology>>("getAllNamedTopologies"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/TopologyMetadata.html#copartitionGroups()"/> 
        /// </summary>
        public Java.Util.Collection<Java.Util.Set<string>> CopartitionGroups
        {
            get { return IExecute<Java.Util.Collection<Java.Util.Set<string>>>("copartitionGroups"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/TopologyMetadata.html#globalStateStores()"/> 
        /// </summary>
        public Java.Util.Map<string, Org.Apache.Kafka.Streams.Processor.StateStore> GlobalStateStores
        {
            get { return IExecute<Java.Util.Map<string, Org.Apache.Kafka.Streams.Processor.StateStore>>("globalStateStores"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/TopologyMetadata.html#globalTaskTopology()"/> 
        /// </summary>
        public Org.Apache.Kafka.Streams.Processor.Internals.ProcessorTopology GlobalTaskTopology
        {
            get { return IExecute<Org.Apache.Kafka.Streams.Processor.Internals.ProcessorTopology>("globalTaskTopology"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/TopologyMetadata.html#hasGlobalTopology()"/> 
        /// </summary>
        public bool HasGlobalTopology
        {
            get { return IExecute<bool>("hasGlobalTopology"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/TopologyMetadata.html#hasNamedTopologies()"/> 
        /// </summary>
        public bool HasNamedTopologies
        {
            get { return IExecute<bool>("hasNamedTopologies"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/TopologyMetadata.html#hasNoLocalTopology()"/> 
        /// </summary>
        public bool HasNoLocalTopology
        {
            get { return IExecute<bool>("hasNoLocalTopology"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/TopologyMetadata.html#hasOffsetResetOverrides()"/> 
        /// </summary>
        public bool HasOffsetResetOverrides
        {
            get { return IExecute<bool>("hasOffsetResetOverrides"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/TopologyMetadata.html#hasPersistentStores()"/> 
        /// </summary>
        public bool HasPersistentStores
        {
            get { return IExecute<bool>("hasPersistentStores"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/TopologyMetadata.html#isEmpty()"/> 
        /// </summary>
        public bool IsEmpty
        {
            get { return IExecute<bool>("isEmpty"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/TopologyMetadata.html#namedTopologiesView()"/> 
        /// </summary>
        public Java.Util.Set<string> NamedTopologiesView
        {
            get { return IExecute<Java.Util.Set<string>>("namedTopologiesView"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/TopologyMetadata.html#processingMode()"/> 
        /// </summary>
        public Org.Apache.Kafka.Streams.Internals.StreamsConfigUtils.ProcessingMode ProcessingMode
        {
            get { return IExecute<Org.Apache.Kafka.Streams.Internals.StreamsConfigUtils.ProcessingMode>("processingMode"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/TopologyMetadata.html#stateStoreNameToSourceTopics()"/> 
        /// </summary>
        public Java.Util.Map<string, Java.Util.List<string>> StateStoreNameToSourceTopics
        {
            get { return IExecute<Java.Util.Map<string, Java.Util.List<string>>>("stateStoreNameToSourceTopics"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/TopologyMetadata.html#taskExecutionMetadata()"/> 
        /// </summary>
        public Org.Apache.Kafka.Streams.Processor.Internals.TaskExecutionMetadata TaskExecutionMetadata
        {
            get { return IExecute<Org.Apache.Kafka.Streams.Processor.Internals.TaskExecutionMetadata>("taskExecutionMetadata"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/TopologyMetadata.html#topologyDescriptionString()"/> 
        /// </summary>
        public string TopologyDescriptionString
        {
            get { return IExecute<string>("topologyDescriptionString"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/TopologyMetadata.html#topologyToSubtopologyTopicsInfoMap()"/> 
        /// </summary>
        public Java.Util.Map<string, Java.Util.Map<Org.Apache.Kafka.Streams.Processor.Internals.TopologyMetadata.Subtopology, Org.Apache.Kafka.Streams.Processor.Internals.InternalTopologyBuilder.TopicsInfo>> TopologyToSubtopologyTopicsInfoMap
        {
            get { return IExecute<Java.Util.Map<string, Java.Util.Map<Org.Apache.Kafka.Streams.Processor.Internals.TopologyMetadata.Subtopology, Org.Apache.Kafka.Streams.Processor.Internals.InternalTopologyBuilder.TopicsInfo>>>("topologyToSubtopologyTopicsInfoMap"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/TopologyMetadata.html#usesPatternSubscription()"/> 
        /// </summary>
        public bool UsesPatternSubscription
        {
            get { return IExecute<bool>("usesPatternSubscription"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/TopologyMetadata.html#hasStore(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool HasStore(string arg0)
        {
            return IExecute<bool>("hasStore", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/TopologyMetadata.html#isPaused(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsPaused(string arg0)
        {
            return IExecute<bool>("isPaused", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/TopologyMetadata.html#needsUpdate(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool NeedsUpdate(string arg0)
        {
            return IExecute<bool>("needsUpdate", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/TopologyMetadata.html#getNumStreamThreads(org.apache.kafka.streams.StreamsConfig)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Streams.StreamsConfig"/></param>
        /// <returns><see cref="int"/></returns>
        public int GetNumStreamThreads(Org.Apache.Kafka.Streams.StreamsConfig arg0)
        {
            return IExecute<int>("getNumStreamThreads", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/TopologyMetadata.html#getStoreForChangelogTopic(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <returns><see cref="string"/></returns>
        public string GetStoreForChangelogTopic(string arg0)
        {
            return IExecute<string>("getStoreForChangelogTopic", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/TopologyMetadata.html#fullSourceTopicNamesForTopology(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <returns><see cref="Java.Util.Collection"/></returns>
        public Java.Util.Collection<string> FullSourceTopicNamesForTopology(string arg0)
        {
            return IExecute<Java.Util.Collection<string>>("fullSourceTopicNamesForTopology", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/TopologyMetadata.html#sourceTopicsForStore(java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <param name="arg1"><see cref="string"/></param>
        /// <returns><see cref="Java.Util.Collection"/></returns>
        public Java.Util.Collection<string> SourceTopicsForStore(string arg0, string arg1)
        {
            return IExecute<Java.Util.Collection<string>>("sourceTopicsForStore", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/TopologyMetadata.html#sourceTopicsForTopology(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <returns><see cref="Java.Util.Collection"/></returns>
        public Java.Util.Collection<string> SourceTopicsForTopology(string arg0)
        {
            return IExecute<Java.Util.Collection<string>>("sourceTopicsForTopology", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/TopologyMetadata.html#nodeToSourceTopics(org.apache.kafka.streams.processor.TaskId)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Streams.Processor.TaskId"/></param>
        /// <returns><see cref="Java.Util.Map"/></returns>
        public Java.Util.Map<string, Java.Util.List<string>> NodeToSourceTopics(Org.Apache.Kafka.Streams.Processor.TaskId arg0)
        {
            return IExecute<Java.Util.Map<string, Java.Util.List<string>>>("nodeToSourceTopics", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/TopologyMetadata.html#stateStoreNameToSourceTopicsForTopology(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <returns><see cref="Java.Util.Map"/></returns>
        public Java.Util.Map<string, Java.Util.List<string>> StateStoreNameToSourceTopicsForTopology(string arg0)
        {
            return IExecute<Java.Util.Map<string, Java.Util.List<string>>>("stateStoreNameToSourceTopicsForTopology", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/TopologyMetadata.html#subtopologyTopicsInfoMapExcluding(java.util.Set)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Set"/></param>
        /// <returns><see cref="Java.Util.Map"/></returns>
        public Java.Util.Map<Org.Apache.Kafka.Streams.Processor.Internals.TopologyMetadata.Subtopology, Org.Apache.Kafka.Streams.Processor.Internals.InternalTopologyBuilder.TopicsInfo> SubtopologyTopicsInfoMapExcluding(Java.Util.Set<string> arg0)
        {
            return IExecute<Java.Util.Map<Org.Apache.Kafka.Streams.Processor.Internals.TopologyMetadata.Subtopology, Org.Apache.Kafka.Streams.Processor.Internals.InternalTopologyBuilder.TopicsInfo>>("subtopologyTopicsInfoMapExcluding", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/TopologyMetadata.html#topologyVersion()"/>
        /// </summary>

        /// <returns><see cref="long"/></returns>
        public long TopologyVersionMethod()
        {
            return IExecute<long>("topologyVersion");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/TopologyMetadata.html#offsetResetStrategy(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Clients.Consumer.OffsetResetStrategy"/></returns>
        public Org.Apache.Kafka.Clients.Consumer.OffsetResetStrategy OffsetResetStrategy(string arg0)
        {
            return IExecute<Org.Apache.Kafka.Clients.Consumer.OffsetResetStrategy>("offsetResetStrategy", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/TopologyMetadata.html#unregisterTopology(org.apache.kafka.common.internals.KafkaFutureImpl,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Internals.KafkaFutureImpl"/></param>
        /// <param name="arg1"><see cref="string"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.KafkaFuture"/></returns>
        public Org.Apache.Kafka.Common.KafkaFuture<Java.Lang.Void> UnregisterTopology(Org.Apache.Kafka.Common.Internals.KafkaFutureImpl<Java.Lang.Void> arg0, string arg1)
        {
            return IExecute<Org.Apache.Kafka.Common.KafkaFuture<Java.Lang.Void>>("unregisterTopology", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/TopologyMetadata.html#lookupBuilderForNamedTopology(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Streams.Processor.Internals.InternalTopologyBuilder"/></returns>
        public Org.Apache.Kafka.Streams.Processor.Internals.InternalTopologyBuilder LookupBuilderForNamedTopology(string arg0)
        {
            return IExecute<Org.Apache.Kafka.Streams.Processor.Internals.InternalTopologyBuilder>("lookupBuilderForNamedTopology", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/TopologyMetadata.html#buildSubtopology(org.apache.kafka.streams.processor.TaskId)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Streams.Processor.TaskId"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Streams.Processor.Internals.ProcessorTopology"/></returns>
        public Org.Apache.Kafka.Streams.Processor.Internals.ProcessorTopology BuildSubtopology(Org.Apache.Kafka.Streams.Processor.TaskId arg0)
        {
            return IExecute<Org.Apache.Kafka.Streams.Processor.Internals.ProcessorTopology>("buildSubtopology", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/TopologyMetadata.html#getTaskConfigFor(org.apache.kafka.streams.processor.TaskId)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Streams.Processor.TaskId"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Streams.TopologyConfig.TaskConfig"/></returns>
        public Org.Apache.Kafka.Streams.TopologyConfig.TaskConfig GetTaskConfigFor(Org.Apache.Kafka.Streams.Processor.TaskId arg0)
        {
            return IExecute<Org.Apache.Kafka.Streams.TopologyConfig.TaskConfig>("getTaskConfigFor", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/TopologyMetadata.html#buildAndRewriteTopology()"/>
        /// </summary>
        public void BuildAndRewriteTopology()
        {
            IExecute("buildAndRewriteTopology");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/TopologyMetadata.html#executeTopologyUpdatesAndBumpThreadVersion(java.util.function.Consumer,java.util.function.Consumer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Function.Consumer"/></param>
        /// <param name="arg1"><see cref="Java.Util.Function.Consumer"/></param>
        public void ExecuteTopologyUpdatesAndBumpThreadVersion(Java.Util.Function.Consumer<Java.Util.Set<string>> arg0, Java.Util.Function.Consumer<Java.Util.Set<string>> arg1)
        {
            IExecute("executeTopologyUpdatesAndBumpThreadVersion", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/TopologyMetadata.html#maybeNotifyTopologyVersionListeners()"/>
        /// </summary>
        public void MaybeNotifyTopologyVersionListeners()
        {
            IExecute("maybeNotifyTopologyVersionListeners");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/TopologyMetadata.html#maybeWaitForNonEmptyTopology(java.util.function.Supplier)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Function.Supplier"/></param>
        public void MaybeWaitForNonEmptyTopology(Java.Util.Function.Supplier<Org.Apache.Kafka.Streams.Processor.Internals.StreamThread.State> arg0)
        {
            IExecute("maybeWaitForNonEmptyTopology", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/TopologyMetadata.html#pauseTopology(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        public void PauseTopology(string arg0)
        {
            IExecute("pauseTopology", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/TopologyMetadata.html#registerAndBuildNewTopology(org.apache.kafka.common.internals.KafkaFutureImpl,org.apache.kafka.streams.processor.internals.InternalTopologyBuilder)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Internals.KafkaFutureImpl"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Streams.Processor.Internals.InternalTopologyBuilder"/></param>
        public void RegisterAndBuildNewTopology(Org.Apache.Kafka.Common.Internals.KafkaFutureImpl<Java.Lang.Void> arg0, Org.Apache.Kafka.Streams.Processor.Internals.InternalTopologyBuilder arg1)
        {
            IExecute("registerAndBuildNewTopology", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/TopologyMetadata.html#registerThread(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        public void RegisterThread(string arg0)
        {
            IExecute("registerThread", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/TopologyMetadata.html#resumeTopology(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        public void ResumeTopology(string arg0)
        {
            IExecute("resumeTopology", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/TopologyMetadata.html#setLog(org.apache.kafka.common.utils.LogContext)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Utils.LogContext"/></param>
        public void SetLog(Org.Apache.Kafka.Common.Utils.LogContext arg0)
        {
            IExecute("setLog", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/TopologyMetadata.html#unregisterThread(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        public void UnregisterThread(string arg0)
        {
            IExecute("unregisterThread", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/TopologyMetadata.html#wakeupThreads()"/>
        /// </summary>
        public void WakeupThreads()
        {
            IExecute("wakeupThreads");
        }

        #endregion

        #region Nested classes
        #region Subtopology
        public partial class Subtopology
        {
            #region Constructors
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/TopologyMetadata.Subtopology.html#%3Cinit%3E(int,java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="string"/></param>
            public Subtopology(int arg0, string arg1)
                : base(arg0, arg1)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region TopologyVersion
        public partial class TopologyVersion
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/TopologyMetadata.TopologyVersion.html#topologyVersion"/>
            /// </summary>
            public Java.Util.Concurrent.Atomic.AtomicLong topologyVersion { get { return IGetField<Java.Util.Concurrent.Atomic.AtomicLong>("topologyVersion"); } set { ISetField("topologyVersion", value); } }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/TopologyMetadata.TopologyVersion.html#topologyCV"/>
            /// </summary>
            public Java.Util.Concurrent.Locks.Condition topologyCV { get { return IGetField<Java.Util.Concurrent.Locks.Condition>("topologyCV"); } set { ISetField("topologyCV", value); } }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/TopologyMetadata.TopologyVersion.html#topologyLock"/>
            /// </summary>
            public Java.Util.Concurrent.Locks.ReentrantLock topologyLock { get { return IGetField<Java.Util.Concurrent.Locks.ReentrantLock>("topologyLock"); } set { ISetField("topologyLock", value); } }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/TopologyMetadata.TopologyVersion.html#activeTopologyUpdateListeners"/>
            /// </summary>
            public Java.Util.List activeTopologyUpdateListeners { get { return IGetField<Java.Util.List>("activeTopologyUpdateListeners"); } set { ISetField("activeTopologyUpdateListeners", value); } }

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}