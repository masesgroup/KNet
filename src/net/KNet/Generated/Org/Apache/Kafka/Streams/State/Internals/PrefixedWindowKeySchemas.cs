/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka-streams-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Streams.State.Internals
{
    #region PrefixedWindowKeySchemas
    public partial class PrefixedWindowKeySchemas
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/PrefixedWindowKeySchemas.html#isTimeFirstSchemaKey(byte[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="byte"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool IsTimeFirstSchemaKey(byte[] arg0)
        {
            return SExecute<bool>(LocalBridgeClazz, "isTimeFirstSchemaKey", new object[] { arg0 });
        }

        #endregion

        #region Instance methods

        #endregion

        #region Nested classes
        #region KeyFirstWindowKeySchema
        public partial class KeyFirstWindowKeySchema
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/PrefixedWindowKeySchemas.KeyFirstWindowKeySchema.html#toStoreKeyBinary(java.lang.Object,long,int,org.apache.kafka.streams.state.StateSerdes)"/>
            /// </summary>
            /// <param name="arg0"><typeparamref name="K"/></param>
            /// <param name="arg1"><see cref="long"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            /// <param name="arg3"><see cref="Org.Apache.Kafka.Streams.State.StateSerdes"/></param>
            /// <typeparam name="K"></typeparam>
            /// <typeparam name="Arg3Extendsobject"></typeparam>
            /// <returns><see cref="Org.Apache.Kafka.Common.Utils.Bytes"/></returns>
            public static Org.Apache.Kafka.Common.Utils.Bytes ToStoreKeyBinary<K, Arg3Extendsobject>(K arg0, long arg1, int arg2, Org.Apache.Kafka.Streams.State.StateSerdes<K, Arg3Extendsobject> arg3)
            {
                return SExecute<Org.Apache.Kafka.Common.Utils.Bytes>(LocalBridgeClazz, "toStoreKeyBinary", arg0, arg1, arg2, arg3);
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/PrefixedWindowKeySchemas.KeyFirstWindowKeySchema.html#toStoreKeyBinary(org.apache.kafka.streams.kstream.Windowed,int,org.apache.kafka.streams.state.StateSerdes)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Org.Apache.Kafka.Streams.Kstream.Windowed"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="Org.Apache.Kafka.Streams.State.StateSerdes"/></param>
            /// <typeparam name="K"></typeparam>
            /// <typeparam name="Arg2Extendsobject"></typeparam>
            /// <returns><see cref="Org.Apache.Kafka.Common.Utils.Bytes"/></returns>
            public static Org.Apache.Kafka.Common.Utils.Bytes ToStoreKeyBinary<K, Arg2Extendsobject>(Org.Apache.Kafka.Streams.Kstream.Windowed<K> arg0, int arg1, Org.Apache.Kafka.Streams.State.StateSerdes<K, Arg2Extendsobject> arg2)
            {
                return SExecute<Org.Apache.Kafka.Common.Utils.Bytes>(LocalBridgeClazz, "toStoreKeyBinary", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/PrefixedWindowKeySchemas.KeyFirstWindowKeySchema.html#fromStoreKey(byte[],long,org.apache.kafka.common.serialization.Deserializer,java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="byte"/></param>
            /// <param name="arg1"><see cref="long"/></param>
            /// <param name="arg2"><see cref="Org.Apache.Kafka.Common.Serialization.Deserializer"/></param>
            /// <param name="arg3"><see cref="string"/></param>
            /// <typeparam name="K"></typeparam>
            /// <returns><see cref="Org.Apache.Kafka.Streams.Kstream.Windowed"/></returns>
            public static Org.Apache.Kafka.Streams.Kstream.Windowed<K> FromStoreKey<K>(byte[] arg0, long arg1, Org.Apache.Kafka.Common.Serialization.Deserializer<K> arg2, string arg3)
            {
                return SExecute<Org.Apache.Kafka.Streams.Kstream.Windowed<K>>(LocalBridgeClazz, "fromStoreKey", arg0, arg1, arg2, arg3);
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/PrefixedWindowKeySchemas.KeyFirstWindowKeySchema.html#fromNonPrefixWindowKey(byte[])"/>
            /// </summary>
            /// <param name="arg0"><see cref="byte"/></param>
            /// <returns><see cref="byte"/></returns>
            public static byte[] FromNonPrefixWindowKey(byte[] arg0)
            {
                return SExecuteArray<byte>(LocalBridgeClazz, "fromNonPrefixWindowKey", new object[] { arg0 });
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/PrefixedWindowKeySchemas.KeyFirstWindowKeySchema.html#toStoreKeyBinary(byte[],long,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="byte"/></param>
            /// <param name="arg1"><see cref="long"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            /// <returns><see cref="Org.Apache.Kafka.Common.Utils.Bytes"/></returns>
            public static Org.Apache.Kafka.Common.Utils.Bytes ToStoreKeyBinary(byte[] arg0, long arg1, int arg2)
            {
                return SExecute<Org.Apache.Kafka.Common.Utils.Bytes>(LocalBridgeClazz, "toStoreKeyBinary", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/PrefixedWindowKeySchemas.KeyFirstWindowKeySchema.html#toStoreKeyBinary(org.apache.kafka.common.utils.Bytes,long,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Utils.Bytes"/></param>
            /// <param name="arg1"><see cref="long"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            /// <returns><see cref="Org.Apache.Kafka.Common.Utils.Bytes"/></returns>
            public static Org.Apache.Kafka.Common.Utils.Bytes ToStoreKeyBinary(Org.Apache.Kafka.Common.Utils.Bytes arg0, long arg1, int arg2)
            {
                return SExecute<Org.Apache.Kafka.Common.Utils.Bytes>(LocalBridgeClazz, "toStoreKeyBinary", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/PrefixedWindowKeySchemas.KeyFirstWindowKeySchema.html#toStoreKeyBinary(org.apache.kafka.streams.kstream.Windowed,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Org.Apache.Kafka.Streams.Kstream.Windowed"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <returns><see cref="Org.Apache.Kafka.Common.Utils.Bytes"/></returns>
            public static Org.Apache.Kafka.Common.Utils.Bytes ToStoreKeyBinary(Org.Apache.Kafka.Streams.Kstream.Windowed<Org.Apache.Kafka.Common.Utils.Bytes> arg0, int arg1)
            {
                return SExecute<Org.Apache.Kafka.Common.Utils.Bytes>(LocalBridgeClazz, "toStoreKeyBinary", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/PrefixedWindowKeySchemas.KeyFirstWindowKeySchema.html#fromStoreBytesKey(byte[],long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="byte"/></param>
            /// <param name="arg1"><see cref="long"/></param>
            /// <returns><see cref="Org.Apache.Kafka.Streams.Kstream.Windowed"/></returns>
            public static Org.Apache.Kafka.Streams.Kstream.Windowed<Org.Apache.Kafka.Common.Utils.Bytes> FromStoreBytesKey(byte[] arg0, long arg1)
            {
                return SExecute<Org.Apache.Kafka.Streams.Kstream.Windowed<Org.Apache.Kafka.Common.Utils.Bytes>>(LocalBridgeClazz, "fromStoreBytesKey", arg0, arg1);
            }

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/PrefixedWindowKeySchemas.KeyFirstWindowKeySchema.html#segmentTimestamp(org.apache.kafka.common.utils.Bytes)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Utils.Bytes"/></param>
            /// <returns><see cref="long"/></returns>
            public long SegmentTimestamp(Org.Apache.Kafka.Common.Utils.Bytes arg0)
            {
                return IExecute<long>("segmentTimestamp", arg0);
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/PrefixedWindowKeySchemas.KeyFirstWindowKeySchema.html#lowerRange(org.apache.kafka.common.utils.Bytes,long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Utils.Bytes"/></param>
            /// <param name="arg1"><see cref="long"/></param>
            /// <returns><see cref="Org.Apache.Kafka.Common.Utils.Bytes"/></returns>
            public Org.Apache.Kafka.Common.Utils.Bytes LowerRange(Org.Apache.Kafka.Common.Utils.Bytes arg0, long arg1)
            {
                return IExecute<Org.Apache.Kafka.Common.Utils.Bytes>("lowerRange", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/PrefixedWindowKeySchemas.KeyFirstWindowKeySchema.html#lowerRangeFixedSize(org.apache.kafka.common.utils.Bytes,long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Utils.Bytes"/></param>
            /// <param name="arg1"><see cref="long"/></param>
            /// <returns><see cref="Org.Apache.Kafka.Common.Utils.Bytes"/></returns>
            public Org.Apache.Kafka.Common.Utils.Bytes LowerRangeFixedSize(Org.Apache.Kafka.Common.Utils.Bytes arg0, long arg1)
            {
                return IExecute<Org.Apache.Kafka.Common.Utils.Bytes>("lowerRangeFixedSize", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/PrefixedWindowKeySchemas.KeyFirstWindowKeySchema.html#upperRange(org.apache.kafka.common.utils.Bytes,long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Utils.Bytes"/></param>
            /// <param name="arg1"><see cref="long"/></param>
            /// <returns><see cref="Org.Apache.Kafka.Common.Utils.Bytes"/></returns>
            public Org.Apache.Kafka.Common.Utils.Bytes UpperRange(Org.Apache.Kafka.Common.Utils.Bytes arg0, long arg1)
            {
                return IExecute<Org.Apache.Kafka.Common.Utils.Bytes>("upperRange", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/PrefixedWindowKeySchemas.KeyFirstWindowKeySchema.html#upperRangeFixedSize(org.apache.kafka.common.utils.Bytes,long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Utils.Bytes"/></param>
            /// <param name="arg1"><see cref="long"/></param>
            /// <returns><see cref="Org.Apache.Kafka.Common.Utils.Bytes"/></returns>
            public Org.Apache.Kafka.Common.Utils.Bytes UpperRangeFixedSize(Org.Apache.Kafka.Common.Utils.Bytes arg0, long arg1)
            {
                return IExecute<Org.Apache.Kafka.Common.Utils.Bytes>("upperRangeFixedSize", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region TimeFirstWindowKeySchema
        public partial class TimeFirstWindowKeySchema
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/PrefixedWindowKeySchemas.TimeFirstWindowKeySchema.html#toStoreKeyBinary(java.lang.Object,long,int,org.apache.kafka.streams.state.StateSerdes)"/>
            /// </summary>
            /// <param name="arg0"><typeparamref name="K"/></param>
            /// <param name="arg1"><see cref="long"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            /// <param name="arg3"><see cref="Org.Apache.Kafka.Streams.State.StateSerdes"/></param>
            /// <typeparam name="K"></typeparam>
            /// <typeparam name="Arg3Extendsobject"></typeparam>
            /// <returns><see cref="Org.Apache.Kafka.Common.Utils.Bytes"/></returns>
            public static Org.Apache.Kafka.Common.Utils.Bytes ToStoreKeyBinary<K, Arg3Extendsobject>(K arg0, long arg1, int arg2, Org.Apache.Kafka.Streams.State.StateSerdes<K, Arg3Extendsobject> arg3)
            {
                return SExecute<Org.Apache.Kafka.Common.Utils.Bytes>(LocalBridgeClazz, "toStoreKeyBinary", arg0, arg1, arg2, arg3);
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/PrefixedWindowKeySchemas.TimeFirstWindowKeySchema.html#toStoreKeyBinary(org.apache.kafka.streams.kstream.Windowed,int,org.apache.kafka.streams.state.StateSerdes)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Org.Apache.Kafka.Streams.Kstream.Windowed"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="Org.Apache.Kafka.Streams.State.StateSerdes"/></param>
            /// <typeparam name="K"></typeparam>
            /// <typeparam name="Arg2Extendsobject"></typeparam>
            /// <returns><see cref="Org.Apache.Kafka.Common.Utils.Bytes"/></returns>
            public static Org.Apache.Kafka.Common.Utils.Bytes ToStoreKeyBinary<K, Arg2Extendsobject>(Org.Apache.Kafka.Streams.Kstream.Windowed<K> arg0, int arg1, Org.Apache.Kafka.Streams.State.StateSerdes<K, Arg2Extendsobject> arg2)
            {
                return SExecute<Org.Apache.Kafka.Common.Utils.Bytes>(LocalBridgeClazz, "toStoreKeyBinary", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/PrefixedWindowKeySchemas.TimeFirstWindowKeySchema.html#fromStoreKey(byte[],long,org.apache.kafka.common.serialization.Deserializer,java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="byte"/></param>
            /// <param name="arg1"><see cref="long"/></param>
            /// <param name="arg2"><see cref="Org.Apache.Kafka.Common.Serialization.Deserializer"/></param>
            /// <param name="arg3"><see cref="string"/></param>
            /// <typeparam name="K"></typeparam>
            /// <returns><see cref="Org.Apache.Kafka.Streams.Kstream.Windowed"/></returns>
            public static Org.Apache.Kafka.Streams.Kstream.Windowed<K> FromStoreKey<K>(byte[] arg0, long arg1, Org.Apache.Kafka.Common.Serialization.Deserializer<K> arg2, string arg3)
            {
                return SExecute<Org.Apache.Kafka.Streams.Kstream.Windowed<K>>(LocalBridgeClazz, "fromStoreKey", arg0, arg1, arg2, arg3);
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/PrefixedWindowKeySchemas.TimeFirstWindowKeySchema.html#fromNonPrefixWindowKey(byte[])"/>
            /// </summary>
            /// <param name="arg0"><see cref="byte"/></param>
            /// <returns><see cref="byte"/></returns>
            public static byte[] FromNonPrefixWindowKey(byte[] arg0)
            {
                return SExecuteArray<byte>(LocalBridgeClazz, "fromNonPrefixWindowKey", new object[] { arg0 });
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/PrefixedWindowKeySchemas.TimeFirstWindowKeySchema.html#toStoreKeyBinary(org.apache.kafka.common.utils.Bytes,long,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Utils.Bytes"/></param>
            /// <param name="arg1"><see cref="long"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            /// <returns><see cref="Org.Apache.Kafka.Common.Utils.Bytes"/></returns>
            public static Org.Apache.Kafka.Common.Utils.Bytes ToStoreKeyBinary(Org.Apache.Kafka.Common.Utils.Bytes arg0, long arg1, int arg2)
            {
                return SExecute<Org.Apache.Kafka.Common.Utils.Bytes>(LocalBridgeClazz, "toStoreKeyBinary", arg0, arg1, arg2);
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/PrefixedWindowKeySchemas.TimeFirstWindowKeySchema.html#toStoreKeyBinary(org.apache.kafka.streams.kstream.Windowed,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Org.Apache.Kafka.Streams.Kstream.Windowed"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <returns><see cref="Org.Apache.Kafka.Common.Utils.Bytes"/></returns>
            public static Org.Apache.Kafka.Common.Utils.Bytes ToStoreKeyBinary(Org.Apache.Kafka.Streams.Kstream.Windowed<Org.Apache.Kafka.Common.Utils.Bytes> arg0, int arg1)
            {
                return SExecute<Org.Apache.Kafka.Common.Utils.Bytes>(LocalBridgeClazz, "toStoreKeyBinary", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/PrefixedWindowKeySchemas.TimeFirstWindowKeySchema.html#fromStoreBytesKey(byte[],long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="byte"/></param>
            /// <param name="arg1"><see cref="long"/></param>
            /// <returns><see cref="Org.Apache.Kafka.Streams.Kstream.Windowed"/></returns>
            public static Org.Apache.Kafka.Streams.Kstream.Windowed<Org.Apache.Kafka.Common.Utils.Bytes> FromStoreBytesKey(byte[] arg0, long arg1)
            {
                return SExecute<Org.Apache.Kafka.Streams.Kstream.Windowed<Org.Apache.Kafka.Common.Utils.Bytes>>(LocalBridgeClazz, "fromStoreBytesKey", arg0, arg1);
            }

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/PrefixedWindowKeySchemas.TimeFirstWindowKeySchema.html#segmentTimestamp(org.apache.kafka.common.utils.Bytes)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Utils.Bytes"/></param>
            /// <returns><see cref="long"/></returns>
            public long SegmentTimestamp(Org.Apache.Kafka.Common.Utils.Bytes arg0)
            {
                return IExecute<long>("segmentTimestamp", arg0);
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/PrefixedWindowKeySchemas.TimeFirstWindowKeySchema.html#lowerRange(org.apache.kafka.common.utils.Bytes,long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Utils.Bytes"/></param>
            /// <param name="arg1"><see cref="long"/></param>
            /// <returns><see cref="Org.Apache.Kafka.Common.Utils.Bytes"/></returns>
            public Org.Apache.Kafka.Common.Utils.Bytes LowerRange(Org.Apache.Kafka.Common.Utils.Bytes arg0, long arg1)
            {
                return IExecute<Org.Apache.Kafka.Common.Utils.Bytes>("lowerRange", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/PrefixedWindowKeySchemas.TimeFirstWindowKeySchema.html#lowerRangeFixedSize(org.apache.kafka.common.utils.Bytes,long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Utils.Bytes"/></param>
            /// <param name="arg1"><see cref="long"/></param>
            /// <returns><see cref="Org.Apache.Kafka.Common.Utils.Bytes"/></returns>
            public Org.Apache.Kafka.Common.Utils.Bytes LowerRangeFixedSize(Org.Apache.Kafka.Common.Utils.Bytes arg0, long arg1)
            {
                return IExecute<Org.Apache.Kafka.Common.Utils.Bytes>("lowerRangeFixedSize", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/PrefixedWindowKeySchemas.TimeFirstWindowKeySchema.html#upperRange(org.apache.kafka.common.utils.Bytes,long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Utils.Bytes"/></param>
            /// <param name="arg1"><see cref="long"/></param>
            /// <returns><see cref="Org.Apache.Kafka.Common.Utils.Bytes"/></returns>
            public Org.Apache.Kafka.Common.Utils.Bytes UpperRange(Org.Apache.Kafka.Common.Utils.Bytes arg0, long arg1)
            {
                return IExecute<Org.Apache.Kafka.Common.Utils.Bytes>("upperRange", arg0, arg1);
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/PrefixedWindowKeySchemas.TimeFirstWindowKeySchema.html#upperRangeFixedSize(org.apache.kafka.common.utils.Bytes,long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Utils.Bytes"/></param>
            /// <param name="arg1"><see cref="long"/></param>
            /// <returns><see cref="Org.Apache.Kafka.Common.Utils.Bytes"/></returns>
            public Org.Apache.Kafka.Common.Utils.Bytes UpperRangeFixedSize(Org.Apache.Kafka.Common.Utils.Bytes arg0, long arg1)
            {
                return IExecute<Org.Apache.Kafka.Common.Utils.Bytes>("upperRangeFixedSize", arg0, arg1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}