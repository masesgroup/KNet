/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka-streams-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Streams.Processor.Internals
{
    #region GlobalStreamThread
    public partial class GlobalStreamThread
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/GlobalStreamThread.html#%3Cinit%3E(org.apache.kafka.streams.processor.internals.ProcessorTopology,org.apache.kafka.streams.StreamsConfig,org.apache.kafka.clients.consumer.Consumer,org.apache.kafka.streams.processor.internals.StateDirectory,long,org.apache.kafka.streams.processor.internals.metrics.StreamsMetricsImpl,org.apache.kafka.common.utils.Time,java.lang.String,org.apache.kafka.streams.processor.StateRestoreListener,java.util.function.Consumer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Streams.Processor.Internals.ProcessorTopology"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Streams.StreamsConfig"/></param>
        /// <param name="arg2"><see cref="Org.Apache.Kafka.Clients.Consumer.Consumer"/></param>
        /// <param name="arg3"><see cref="Org.Apache.Kafka.Streams.Processor.Internals.StateDirectory"/></param>
        /// <param name="arg4"><see cref="long"/></param>
        /// <param name="arg5"><see cref="Org.Apache.Kafka.Streams.Processor.Internals.Metrics.StreamsMetricsImpl"/></param>
        /// <param name="arg6"><see cref="Org.Apache.Kafka.Common.Utils.Time"/></param>
        /// <param name="arg7"><see cref="string"/></param>
        /// <param name="arg8"><see cref="Org.Apache.Kafka.Streams.Processor.StateRestoreListener"/></param>
        /// <param name="arg9"><see cref="Java.Util.Function.Consumer"/></param>
        public GlobalStreamThread(Org.Apache.Kafka.Streams.Processor.Internals.ProcessorTopology arg0, Org.Apache.Kafka.Streams.StreamsConfig arg1, Org.Apache.Kafka.Clients.Consumer.Consumer arg2, Org.Apache.Kafka.Streams.Processor.Internals.StateDirectory arg3, long arg4, Org.Apache.Kafka.Streams.Processor.Internals.Metrics.StreamsMetricsImpl arg5, Org.Apache.Kafka.Common.Utils.Time arg6, string arg7, Org.Apache.Kafka.Streams.Processor.StateRestoreListener arg8, Java.Util.Function.Consumer arg9)
            : base(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/GlobalStreamThread.html#consumerMetrics()"/> 
        /// </summary>
        public Java.Util.Map<Org.Apache.Kafka.Common.MetricName, Org.Apache.Kafka.Common.Metric> ConsumerMetrics
        {
            get { return IExecute<Java.Util.Map<Org.Apache.Kafka.Common.MetricName, Org.Apache.Kafka.Common.Metric>>("consumerMetrics"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/GlobalStreamThread.html#inErrorState()"/> 
        /// </summary>
        public bool InErrorState
        {
            get { return IExecute<bool>("inErrorState"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/GlobalStreamThread.html#stillInitializing()"/> 
        /// </summary>
        public bool StillInitializing
        {
            get { return IExecute<bool>("stillInitializing"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/GlobalStreamThread.html#stillRunning()"/> 
        /// </summary>
        public bool StillRunning
        {
            get { return IExecute<bool>("stillRunning"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/GlobalStreamThread.html#state()"/>
        /// </summary>

        /// <returns><see cref="Org.Apache.Kafka.Streams.Processor.Internals.GlobalStreamThread.State"/></returns>
        public Org.Apache.Kafka.Streams.Processor.Internals.GlobalStreamThread.State StateMethod()
        {
            return IExecute<Org.Apache.Kafka.Streams.Processor.Internals.GlobalStreamThread.State>("state");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/GlobalStreamThread.html#resize(long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        public void Resize(long arg0)
        {
            IExecute("resize", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/GlobalStreamThread.html#setStateListener(org.apache.kafka.streams.processor.internals.StreamThread.StateListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Streams.Processor.Internals.StreamThread.StateListener"/></param>
        public void SetStateListener(Org.Apache.Kafka.Streams.Processor.Internals.StreamThread.StateListener arg0)
        {
            IExecute("setStateListener", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/GlobalStreamThread.html#setUncaughtExceptionHandler(java.util.function.Consumer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Function.Consumer"/></param>
        public void SetUncaughtExceptionHandler(Java.Util.Function.Consumer<Java.Lang.Throwable> arg0)
        {
            IExecute("setUncaughtExceptionHandler", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/GlobalStreamThread.html#shutdown()"/>
        /// </summary>
        public void Shutdown()
        {
            IExecute("shutdown");
        }

        #endregion

        #region Nested classes
        #region State
        public partial class State
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators
            /// <summary>
            /// Converter from <see cref="Org.Apache.Kafka.Streams.Processor.Internals.GlobalStreamThread.State"/> to <see cref="Org.Apache.Kafka.Streams.Processor.Internals.ThreadStateTransitionValidator"/>
            /// </summary>
            public static implicit operator Org.Apache.Kafka.Streams.Processor.Internals.ThreadStateTransitionValidator(Org.Apache.Kafka.Streams.Processor.Internals.GlobalStreamThread.State t) => t.Cast<Org.Apache.Kafka.Streams.Processor.Internals.ThreadStateTransitionValidator>();

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/GlobalStreamThread.State.html#CREATED"/>
            /// </summary>
            public static Org.Apache.Kafka.Streams.Processor.Internals.GlobalStreamThread.State CREATED { get { return SGetField<Org.Apache.Kafka.Streams.Processor.Internals.GlobalStreamThread.State>(LocalBridgeClazz, "CREATED"); } }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/GlobalStreamThread.State.html#DEAD"/>
            /// </summary>
            public static Org.Apache.Kafka.Streams.Processor.Internals.GlobalStreamThread.State DEAD { get { return SGetField<Org.Apache.Kafka.Streams.Processor.Internals.GlobalStreamThread.State>(LocalBridgeClazz, "DEAD"); } }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/GlobalStreamThread.State.html#PENDING_SHUTDOWN"/>
            /// </summary>
            public static Org.Apache.Kafka.Streams.Processor.Internals.GlobalStreamThread.State PENDING_SHUTDOWN { get { return SGetField<Org.Apache.Kafka.Streams.Processor.Internals.GlobalStreamThread.State>(LocalBridgeClazz, "PENDING_SHUTDOWN"); } }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/GlobalStreamThread.State.html#RUNNING"/>
            /// </summary>
            public static Org.Apache.Kafka.Streams.Processor.Internals.GlobalStreamThread.State RUNNING { get { return SGetField<Org.Apache.Kafka.Streams.Processor.Internals.GlobalStreamThread.State>(LocalBridgeClazz, "RUNNING"); } }

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/GlobalStreamThread.State.html#values()"/> 
            /// </summary>
            public static Org.Apache.Kafka.Streams.Processor.Internals.GlobalStreamThread.State[] Values
            {
                get { return SExecuteArray<Org.Apache.Kafka.Streams.Processor.Internals.GlobalStreamThread.State>(LocalBridgeClazz, "values"); }
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/GlobalStreamThread.State.html#valueOf(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="string"/></param>
            /// <returns><see cref="Org.Apache.Kafka.Streams.Processor.Internals.GlobalStreamThread.State"/></returns>
            public static Org.Apache.Kafka.Streams.Processor.Internals.GlobalStreamThread.State ValueOf(string arg0)
            {
                return SExecute<Org.Apache.Kafka.Streams.Processor.Internals.GlobalStreamThread.State>(LocalBridgeClazz, "valueOf", arg0);
            }

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/GlobalStreamThread.State.html#inErrorState()"/> 
            /// </summary>
            public bool InErrorState
            {
                get { return IExecute<bool>("inErrorState"); }
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/GlobalStreamThread.State.html#isRunning()"/> 
            /// </summary>
            public bool IsRunning
            {
                get { return IExecute<bool>("isRunning"); }
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/GlobalStreamThread.State.html#isValidTransition(org.apache.kafka.streams.processor.internals.ThreadStateTransitionValidator)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Org.Apache.Kafka.Streams.Processor.Internals.ThreadStateTransitionValidator"/></param>
            /// <returns><see cref="bool"/></returns>
            public bool IsValidTransition(Org.Apache.Kafka.Streams.Processor.Internals.ThreadStateTransitionValidator arg0)
            {
                return IExecute<bool>("isValidTransition", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}