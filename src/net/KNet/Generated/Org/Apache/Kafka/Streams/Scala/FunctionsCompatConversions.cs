/*
*  Copyright 2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.13.0)
*  using kafka-streams-scala_2.13-4.0.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Streams.Scala
{
    #region FunctionsCompatConversions declaration
    /// <summary>
    /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/FunctionsCompatConversions.html"/>
    /// </summary>
    public partial class FunctionsCompatConversions : MASES.JCOBridge.C2JBridge.JVMBridgeBase<FunctionsCompatConversions>
    {
        const string _bridgeClassName = "org.apache.kafka.streams.scala.FunctionsCompatConversions";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public FunctionsCompatConversions() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public FunctionsCompatConversions(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class
        #region AggregatorFromFunction declaration
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/FunctionsCompatConversions.AggregatorFromFunction.html"/>
        /// </summary>
        public partial class AggregatorFromFunction : MASES.JCOBridge.C2JBridge.JVMBridgeBase<AggregatorFromFunction>
        {
            const string _bridgeClassName = "org.apache.kafka.streams.scala.FunctionsCompatConversions$AggregatorFromFunction";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public AggregatorFromFunction() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public AggregatorFromFunction(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region AggregatorFromFunction<K, V, VA> declaration
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/FunctionsCompatConversions.AggregatorFromFunction.html"/>
        /// </summary>
        /// <typeparam name="K"></typeparam>
        /// <typeparam name="V"></typeparam>
        /// <typeparam name="VA"></typeparam>
        public partial class AggregatorFromFunction<K, V, VA> : MASES.JCOBridge.C2JBridge.JVMBridgeBase<AggregatorFromFunction<K, V, VA>>
        {
            const string _bridgeClassName = "org.apache.kafka.streams.scala.FunctionsCompatConversions$AggregatorFromFunction";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public AggregatorFromFunction() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public AggregatorFromFunction(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region FlatValueMapperFromFunction declaration
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/FunctionsCompatConversions.FlatValueMapperFromFunction.html"/>
        /// </summary>
        public partial class FlatValueMapperFromFunction : MASES.JCOBridge.C2JBridge.JVMBridgeBase<FlatValueMapperFromFunction>
        {
            const string _bridgeClassName = "org.apache.kafka.streams.scala.FunctionsCompatConversions$FlatValueMapperFromFunction";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public FlatValueMapperFromFunction() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public FlatValueMapperFromFunction(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region FlatValueMapperFromFunction<V, VR> declaration
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/FunctionsCompatConversions.FlatValueMapperFromFunction.html"/>
        /// </summary>
        /// <typeparam name="V"></typeparam>
        /// <typeparam name="VR"></typeparam>
        public partial class FlatValueMapperFromFunction<V, VR> : MASES.JCOBridge.C2JBridge.JVMBridgeBase<FlatValueMapperFromFunction<V, VR>>
        {
            const string _bridgeClassName = "org.apache.kafka.streams.scala.FunctionsCompatConversions$FlatValueMapperFromFunction";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public FlatValueMapperFromFunction() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public FlatValueMapperFromFunction(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region FlatValueMapperWithKeyFromFunction declaration
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/FunctionsCompatConversions.FlatValueMapperWithKeyFromFunction.html"/>
        /// </summary>
        public partial class FlatValueMapperWithKeyFromFunction : MASES.JCOBridge.C2JBridge.JVMBridgeBase<FlatValueMapperWithKeyFromFunction>
        {
            const string _bridgeClassName = "org.apache.kafka.streams.scala.FunctionsCompatConversions$FlatValueMapperWithKeyFromFunction";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public FlatValueMapperWithKeyFromFunction() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public FlatValueMapperWithKeyFromFunction(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region FlatValueMapperWithKeyFromFunction<K, V, VR> declaration
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/FunctionsCompatConversions.FlatValueMapperWithKeyFromFunction.html"/>
        /// </summary>
        /// <typeparam name="K"></typeparam>
        /// <typeparam name="V"></typeparam>
        /// <typeparam name="VR"></typeparam>
        public partial class FlatValueMapperWithKeyFromFunction<K, V, VR> : MASES.JCOBridge.C2JBridge.JVMBridgeBase<FlatValueMapperWithKeyFromFunction<K, V, VR>>
        {
            const string _bridgeClassName = "org.apache.kafka.streams.scala.FunctionsCompatConversions$FlatValueMapperWithKeyFromFunction";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public FlatValueMapperWithKeyFromFunction() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public FlatValueMapperWithKeyFromFunction(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region ForeachActionFromFunction declaration
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/FunctionsCompatConversions.ForeachActionFromFunction.html"/>
        /// </summary>
        public partial class ForeachActionFromFunction : MASES.JCOBridge.C2JBridge.JVMBridgeBase<ForeachActionFromFunction>
        {
            const string _bridgeClassName = "org.apache.kafka.streams.scala.FunctionsCompatConversions$ForeachActionFromFunction";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public ForeachActionFromFunction() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public ForeachActionFromFunction(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region ForeachActionFromFunction<K, V> declaration
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/FunctionsCompatConversions.ForeachActionFromFunction.html"/>
        /// </summary>
        /// <typeparam name="K"></typeparam>
        /// <typeparam name="V"></typeparam>
        public partial class ForeachActionFromFunction<K, V> : MASES.JCOBridge.C2JBridge.JVMBridgeBase<ForeachActionFromFunction<K, V>>
        {
            const string _bridgeClassName = "org.apache.kafka.streams.scala.FunctionsCompatConversions$ForeachActionFromFunction";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public ForeachActionFromFunction() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public ForeachActionFromFunction(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region FunctionFromFunction declaration
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/FunctionsCompatConversions.FunctionFromFunction.html"/>
        /// </summary>
        public partial class FunctionFromFunction : MASES.JCOBridge.C2JBridge.JVMBridgeBase<FunctionFromFunction>
        {
            const string _bridgeClassName = "org.apache.kafka.streams.scala.FunctionsCompatConversions$FunctionFromFunction";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public FunctionFromFunction() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public FunctionFromFunction(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region FunctionFromFunction<V, VR> declaration
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/FunctionsCompatConversions.FunctionFromFunction.html"/>
        /// </summary>
        /// <typeparam name="V"></typeparam>
        /// <typeparam name="VR"></typeparam>
        public partial class FunctionFromFunction<V, VR> : MASES.JCOBridge.C2JBridge.JVMBridgeBase<FunctionFromFunction<V, VR>>
        {
            const string _bridgeClassName = "org.apache.kafka.streams.scala.FunctionsCompatConversions$FunctionFromFunction";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public FunctionFromFunction() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public FunctionFromFunction(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region InitializerFromFunction declaration
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/FunctionsCompatConversions.InitializerFromFunction.html"/>
        /// </summary>
        public partial class InitializerFromFunction : MASES.JCOBridge.C2JBridge.JVMBridgeBase<InitializerFromFunction>
        {
            const string _bridgeClassName = "org.apache.kafka.streams.scala.FunctionsCompatConversions$InitializerFromFunction";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public InitializerFromFunction() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public InitializerFromFunction(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region InitializerFromFunction<VA> declaration
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/FunctionsCompatConversions.InitializerFromFunction.html"/>
        /// </summary>
        /// <typeparam name="VA"></typeparam>
        public partial class InitializerFromFunction<VA> : MASES.JCOBridge.C2JBridge.JVMBridgeBase<InitializerFromFunction<VA>>
        {
            const string _bridgeClassName = "org.apache.kafka.streams.scala.FunctionsCompatConversions$InitializerFromFunction";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public InitializerFromFunction() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public InitializerFromFunction(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region KeyValueMapperFromFunction declaration
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/FunctionsCompatConversions.KeyValueMapperFromFunction.html"/>
        /// </summary>
        public partial class KeyValueMapperFromFunction : MASES.JCOBridge.C2JBridge.JVMBridgeBase<KeyValueMapperFromFunction>
        {
            const string _bridgeClassName = "org.apache.kafka.streams.scala.FunctionsCompatConversions$KeyValueMapperFromFunction";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public KeyValueMapperFromFunction() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public KeyValueMapperFromFunction(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region KeyValueMapperFromFunction<K, V, KR, VR> declaration
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/FunctionsCompatConversions.KeyValueMapperFromFunction.html"/>
        /// </summary>
        /// <typeparam name="K"></typeparam>
        /// <typeparam name="V"></typeparam>
        /// <typeparam name="KR"></typeparam>
        /// <typeparam name="VR"></typeparam>
        public partial class KeyValueMapperFromFunction<K, V, KR, VR> : MASES.JCOBridge.C2JBridge.JVMBridgeBase<KeyValueMapperFromFunction<K, V, KR, VR>>
        {
            const string _bridgeClassName = "org.apache.kafka.streams.scala.FunctionsCompatConversions$KeyValueMapperFromFunction";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public KeyValueMapperFromFunction() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public KeyValueMapperFromFunction(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region MapperFromFunction declaration
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/FunctionsCompatConversions.MapperFromFunction.html"/>
        /// </summary>
        public partial class MapperFromFunction : MASES.JCOBridge.C2JBridge.JVMBridgeBase<MapperFromFunction>
        {
            const string _bridgeClassName = "org.apache.kafka.streams.scala.FunctionsCompatConversions$MapperFromFunction";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public MapperFromFunction() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public MapperFromFunction(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region MapperFromFunction<T, U, VR> declaration
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/FunctionsCompatConversions.MapperFromFunction.html"/>
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <typeparam name="U"></typeparam>
        /// <typeparam name="VR"></typeparam>
        public partial class MapperFromFunction<T, U, VR> : MASES.JCOBridge.C2JBridge.JVMBridgeBase<MapperFromFunction<T, U, VR>>
        {
            const string _bridgeClassName = "org.apache.kafka.streams.scala.FunctionsCompatConversions$MapperFromFunction";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public MapperFromFunction() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public MapperFromFunction(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region MergerFromFunction declaration
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/FunctionsCompatConversions.MergerFromFunction.html"/>
        /// </summary>
        public partial class MergerFromFunction : MASES.JCOBridge.C2JBridge.JVMBridgeBase<MergerFromFunction>
        {
            const string _bridgeClassName = "org.apache.kafka.streams.scala.FunctionsCompatConversions$MergerFromFunction";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public MergerFromFunction() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public MergerFromFunction(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region MergerFromFunction<K, VR> declaration
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/FunctionsCompatConversions.MergerFromFunction.html"/>
        /// </summary>
        /// <typeparam name="K"></typeparam>
        /// <typeparam name="VR"></typeparam>
        public partial class MergerFromFunction<K, VR> : MASES.JCOBridge.C2JBridge.JVMBridgeBase<MergerFromFunction<K, VR>>
        {
            const string _bridgeClassName = "org.apache.kafka.streams.scala.FunctionsCompatConversions$MergerFromFunction";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public MergerFromFunction() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public MergerFromFunction(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region PredicateFromFunction declaration
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/FunctionsCompatConversions.PredicateFromFunction.html"/>
        /// </summary>
        public partial class PredicateFromFunction : MASES.JCOBridge.C2JBridge.JVMBridgeBase<PredicateFromFunction>
        {
            const string _bridgeClassName = "org.apache.kafka.streams.scala.FunctionsCompatConversions$PredicateFromFunction";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public PredicateFromFunction() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public PredicateFromFunction(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region PredicateFromFunction<K, V> declaration
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/FunctionsCompatConversions.PredicateFromFunction.html"/>
        /// </summary>
        /// <typeparam name="K"></typeparam>
        /// <typeparam name="V"></typeparam>
        public partial class PredicateFromFunction<K, V> : MASES.JCOBridge.C2JBridge.JVMBridgeBase<PredicateFromFunction<K, V>>
        {
            const string _bridgeClassName = "org.apache.kafka.streams.scala.FunctionsCompatConversions$PredicateFromFunction";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public PredicateFromFunction() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public PredicateFromFunction(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region ReducerFromFunction declaration
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/FunctionsCompatConversions.ReducerFromFunction.html"/>
        /// </summary>
        public partial class ReducerFromFunction : MASES.JCOBridge.C2JBridge.JVMBridgeBase<ReducerFromFunction>
        {
            const string _bridgeClassName = "org.apache.kafka.streams.scala.FunctionsCompatConversions$ReducerFromFunction";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public ReducerFromFunction() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public ReducerFromFunction(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region ReducerFromFunction<V> declaration
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/FunctionsCompatConversions.ReducerFromFunction.html"/>
        /// </summary>
        /// <typeparam name="V"></typeparam>
        public partial class ReducerFromFunction<V> : MASES.JCOBridge.C2JBridge.JVMBridgeBase<ReducerFromFunction<V>>
        {
            const string _bridgeClassName = "org.apache.kafka.streams.scala.FunctionsCompatConversions$ReducerFromFunction";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public ReducerFromFunction() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public ReducerFromFunction(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region TransformerSupplierAsJava declaration
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/FunctionsCompatConversions.TransformerSupplierAsJava.html"/>
        /// </summary>
        public partial class TransformerSupplierAsJava : MASES.JCOBridge.C2JBridge.JVMBridgeBase<TransformerSupplierAsJava>
        {
            const string _bridgeClassName = "org.apache.kafka.streams.scala.FunctionsCompatConversions$TransformerSupplierAsJava";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public TransformerSupplierAsJava() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public TransformerSupplierAsJava(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region TransformerSupplierAsJava<K, V, VO> declaration
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/FunctionsCompatConversions.TransformerSupplierAsJava.html"/>
        /// </summary>
        /// <typeparam name="K"></typeparam>
        /// <typeparam name="V"></typeparam>
        /// <typeparam name="VO"></typeparam>
        public partial class TransformerSupplierAsJava<K, V, VO> : MASES.JCOBridge.C2JBridge.JVMBridgeBase<TransformerSupplierAsJava<K, V, VO>>
        {
            const string _bridgeClassName = "org.apache.kafka.streams.scala.FunctionsCompatConversions$TransformerSupplierAsJava";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public TransformerSupplierAsJava() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public TransformerSupplierAsJava(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region TransformerSupplierFromFunction declaration
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/FunctionsCompatConversions.TransformerSupplierFromFunction.html"/>
        /// </summary>
        public partial class TransformerSupplierFromFunction : MASES.JCOBridge.C2JBridge.JVMBridgeBase<TransformerSupplierFromFunction>
        {
            const string _bridgeClassName = "org.apache.kafka.streams.scala.FunctionsCompatConversions$TransformerSupplierFromFunction";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public TransformerSupplierFromFunction() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public TransformerSupplierFromFunction(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region TransformerSupplierFromFunction<K, V, VO> declaration
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/FunctionsCompatConversions.TransformerSupplierFromFunction.html"/>
        /// </summary>
        /// <typeparam name="K"></typeparam>
        /// <typeparam name="V"></typeparam>
        /// <typeparam name="VO"></typeparam>
        public partial class TransformerSupplierFromFunction<K, V, VO> : MASES.JCOBridge.C2JBridge.JVMBridgeBase<TransformerSupplierFromFunction<K, V, VO>>
        {
            const string _bridgeClassName = "org.apache.kafka.streams.scala.FunctionsCompatConversions$TransformerSupplierFromFunction";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public TransformerSupplierFromFunction() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public TransformerSupplierFromFunction(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region ValueMapperFromFunction declaration
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/FunctionsCompatConversions.ValueMapperFromFunction.html"/>
        /// </summary>
        public partial class ValueMapperFromFunction : MASES.JCOBridge.C2JBridge.JVMBridgeBase<ValueMapperFromFunction>
        {
            const string _bridgeClassName = "org.apache.kafka.streams.scala.FunctionsCompatConversions$ValueMapperFromFunction";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public ValueMapperFromFunction() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public ValueMapperFromFunction(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region ValueMapperFromFunction<V, VR> declaration
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/FunctionsCompatConversions.ValueMapperFromFunction.html"/>
        /// </summary>
        /// <typeparam name="V"></typeparam>
        /// <typeparam name="VR"></typeparam>
        public partial class ValueMapperFromFunction<V, VR> : MASES.JCOBridge.C2JBridge.JVMBridgeBase<ValueMapperFromFunction<V, VR>>
        {
            const string _bridgeClassName = "org.apache.kafka.streams.scala.FunctionsCompatConversions$ValueMapperFromFunction";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public ValueMapperFromFunction() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public ValueMapperFromFunction(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region ValueMapperWithKeyFromFunction declaration
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/FunctionsCompatConversions.ValueMapperWithKeyFromFunction.html"/>
        /// </summary>
        public partial class ValueMapperWithKeyFromFunction : MASES.JCOBridge.C2JBridge.JVMBridgeBase<ValueMapperWithKeyFromFunction>
        {
            const string _bridgeClassName = "org.apache.kafka.streams.scala.FunctionsCompatConversions$ValueMapperWithKeyFromFunction";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public ValueMapperWithKeyFromFunction() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public ValueMapperWithKeyFromFunction(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region ValueMapperWithKeyFromFunction<K, V, VR> declaration
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/FunctionsCompatConversions.ValueMapperWithKeyFromFunction.html"/>
        /// </summary>
        /// <typeparam name="K"></typeparam>
        /// <typeparam name="V"></typeparam>
        /// <typeparam name="VR"></typeparam>
        public partial class ValueMapperWithKeyFromFunction<K, V, VR> : MASES.JCOBridge.C2JBridge.JVMBridgeBase<ValueMapperWithKeyFromFunction<K, V, VR>>
        {
            const string _bridgeClassName = "org.apache.kafka.streams.scala.FunctionsCompatConversions$ValueMapperWithKeyFromFunction";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public ValueMapperWithKeyFromFunction() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public ValueMapperWithKeyFromFunction(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region ValueTransformerSupplierAsJava declaration
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/FunctionsCompatConversions.ValueTransformerSupplierAsJava.html"/>
        /// </summary>
        public partial class ValueTransformerSupplierAsJava : MASES.JCOBridge.C2JBridge.JVMBridgeBase<ValueTransformerSupplierAsJava>
        {
            const string _bridgeClassName = "org.apache.kafka.streams.scala.FunctionsCompatConversions$ValueTransformerSupplierAsJava";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public ValueTransformerSupplierAsJava() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public ValueTransformerSupplierAsJava(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region ValueTransformerSupplierAsJava<V, VO> declaration
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/FunctionsCompatConversions.ValueTransformerSupplierAsJava.html"/>
        /// </summary>
        /// <typeparam name="V"></typeparam>
        /// <typeparam name="VO"></typeparam>
        public partial class ValueTransformerSupplierAsJava<V, VO> : MASES.JCOBridge.C2JBridge.JVMBridgeBase<ValueTransformerSupplierAsJava<V, VO>>
        {
            const string _bridgeClassName = "org.apache.kafka.streams.scala.FunctionsCompatConversions$ValueTransformerSupplierAsJava";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public ValueTransformerSupplierAsJava() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public ValueTransformerSupplierAsJava(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region ValueTransformerSupplierWithKeyAsJava declaration
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/FunctionsCompatConversions.ValueTransformerSupplierWithKeyAsJava.html"/>
        /// </summary>
        public partial class ValueTransformerSupplierWithKeyAsJava : MASES.JCOBridge.C2JBridge.JVMBridgeBase<ValueTransformerSupplierWithKeyAsJava>
        {
            const string _bridgeClassName = "org.apache.kafka.streams.scala.FunctionsCompatConversions$ValueTransformerSupplierWithKeyAsJava";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public ValueTransformerSupplierWithKeyAsJava() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public ValueTransformerSupplierWithKeyAsJava(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region ValueTransformerSupplierWithKeyAsJava<K, V, VO> declaration
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/FunctionsCompatConversions.ValueTransformerSupplierWithKeyAsJava.html"/>
        /// </summary>
        /// <typeparam name="K"></typeparam>
        /// <typeparam name="V"></typeparam>
        /// <typeparam name="VO"></typeparam>
        public partial class ValueTransformerSupplierWithKeyAsJava<K, V, VO> : MASES.JCOBridge.C2JBridge.JVMBridgeBase<ValueTransformerSupplierWithKeyAsJava<K, V, VO>>
        {
            const string _bridgeClassName = "org.apache.kafka.streams.scala.FunctionsCompatConversions$ValueTransformerSupplierWithKeyAsJava";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public ValueTransformerSupplierWithKeyAsJava() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public ValueTransformerSupplierWithKeyAsJava(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

    
    }
    #endregion

    #region FunctionsCompatConversions implementation
    public partial class FunctionsCompatConversions
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods

        #endregion

        #region Nested classes
        #region AggregatorFromFunction implementation
        public partial class AggregatorFromFunction
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/FunctionsCompatConversions.AggregatorFromFunction.html#asAggregator()"/>
            /// </summary>
            /// <returns><see cref="Org.Apache.Kafka.Streams.Kstream.Aggregator"/></returns>
            public Org.Apache.Kafka.Streams.Kstream.Aggregator AsAggregator()
            {
                return IExecuteWithSignature<Org.Apache.Kafka.Streams.Kstream.Aggregator>("asAggregator", "()Lorg/apache/kafka/streams/kstream/Aggregator;");
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/FunctionsCompatConversions.AggregatorFromFunction.html#asAggregator()"/>
            /// </summary>
            /// <returns><see cref="Org.Apache.Kafka.Streams.Kstream.Aggregator"/></returns>
            public Org.Apache.Kafka.Streams.Kstream.Aggregator AsAggregatorDirect()
            {
                return IExecuteWithSignature<Org.Apache.Kafka.Streams.Kstream.AggregatorDirect, Org.Apache.Kafka.Streams.Kstream.Aggregator>("asAggregator", "()Lorg/apache/kafka/streams/kstream/Aggregator;");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region AggregatorFromFunction<K, V, VA> implementation
        public partial class AggregatorFromFunction<K, V, VA>
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators
            /// <summary>
            /// Converter from <see cref="Org.Apache.Kafka.Streams.Scala.FunctionsCompatConversions.AggregatorFromFunction{K, V, VA}"/> to <see cref="Org.Apache.Kafka.Streams.Scala.FunctionsCompatConversions.AggregatorFromFunction"/>
            /// </summary>
            public static implicit operator Org.Apache.Kafka.Streams.Scala.FunctionsCompatConversions.AggregatorFromFunction(Org.Apache.Kafka.Streams.Scala.FunctionsCompatConversions.AggregatorFromFunction<K, V, VA> t) => t.Cast<Org.Apache.Kafka.Streams.Scala.FunctionsCompatConversions.AggregatorFromFunction>();

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/FunctionsCompatConversions.AggregatorFromFunction.html#asAggregator()"/>
            /// </summary>
            /// <returns><see cref="Org.Apache.Kafka.Streams.Kstream.Aggregator"/></returns>
            public Org.Apache.Kafka.Streams.Kstream.Aggregator<K, V, VA> AsAggregator()
            {
                return IExecuteWithSignature<Org.Apache.Kafka.Streams.Kstream.Aggregator<K, V, VA>>("asAggregator", "()Lorg/apache/kafka/streams/kstream/Aggregator;");
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/FunctionsCompatConversions.AggregatorFromFunction.html#asAggregator()"/>
            /// </summary>
            /// <returns><see cref="Org.Apache.Kafka.Streams.Kstream.Aggregator"/></returns>
            public Org.Apache.Kafka.Streams.Kstream.Aggregator<K, V, VA> AsAggregatorDirect()
            {
                return IExecuteWithSignature<Org.Apache.Kafka.Streams.Kstream.AggregatorDirect<K, V, VA>, Org.Apache.Kafka.Streams.Kstream.Aggregator<K, V, VA>>("asAggregator", "()Lorg/apache/kafka/streams/kstream/Aggregator;");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region FlatValueMapperFromFunction implementation
        public partial class FlatValueMapperFromFunction
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/FunctionsCompatConversions.FlatValueMapperFromFunction.html#asValueMapper()"/>
            /// </summary>
            /// <returns><see cref="Org.Apache.Kafka.Streams.Kstream.ValueMapper"/></returns>
            public Org.Apache.Kafka.Streams.Kstream.ValueMapper AsValueMapper()
            {
                return IExecuteWithSignature<Org.Apache.Kafka.Streams.Kstream.ValueMapper>("asValueMapper", "()Lorg/apache/kafka/streams/kstream/ValueMapper;");
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/FunctionsCompatConversions.FlatValueMapperFromFunction.html#asValueMapper()"/>
            /// </summary>
            /// <returns><see cref="Org.Apache.Kafka.Streams.Kstream.ValueMapper"/></returns>
            public Org.Apache.Kafka.Streams.Kstream.ValueMapper AsValueMapperDirect()
            {
                return IExecuteWithSignature<Org.Apache.Kafka.Streams.Kstream.ValueMapperDirect, Org.Apache.Kafka.Streams.Kstream.ValueMapper>("asValueMapper", "()Lorg/apache/kafka/streams/kstream/ValueMapper;");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region FlatValueMapperFromFunction<V, VR> implementation
        public partial class FlatValueMapperFromFunction<V, VR>
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators
            /// <summary>
            /// Converter from <see cref="Org.Apache.Kafka.Streams.Scala.FunctionsCompatConversions.FlatValueMapperFromFunction{V, VR}"/> to <see cref="Org.Apache.Kafka.Streams.Scala.FunctionsCompatConversions.FlatValueMapperFromFunction"/>
            /// </summary>
            public static implicit operator Org.Apache.Kafka.Streams.Scala.FunctionsCompatConversions.FlatValueMapperFromFunction(Org.Apache.Kafka.Streams.Scala.FunctionsCompatConversions.FlatValueMapperFromFunction<V, VR> t) => t.Cast<Org.Apache.Kafka.Streams.Scala.FunctionsCompatConversions.FlatValueMapperFromFunction>();

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/FunctionsCompatConversions.FlatValueMapperFromFunction.html#asValueMapper()"/>
            /// </summary>
            /// <returns><see cref="Org.Apache.Kafka.Streams.Kstream.ValueMapper"/></returns>
            public Org.Apache.Kafka.Streams.Kstream.ValueMapper<V, Java.Lang.Iterable<VR>> AsValueMapper()
            {
                return IExecuteWithSignature<Org.Apache.Kafka.Streams.Kstream.ValueMapper<V, Java.Lang.Iterable<VR>>>("asValueMapper", "()Lorg/apache/kafka/streams/kstream/ValueMapper;");
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/FunctionsCompatConversions.FlatValueMapperFromFunction.html#asValueMapper()"/>
            /// </summary>
            /// <returns><see cref="Org.Apache.Kafka.Streams.Kstream.ValueMapper"/></returns>
            public Org.Apache.Kafka.Streams.Kstream.ValueMapper<V, Java.Lang.Iterable<VR>> AsValueMapperDirect()
            {
                return IExecuteWithSignature<Org.Apache.Kafka.Streams.Kstream.ValueMapperDirect<V, Java.Lang.Iterable<VR>>, Org.Apache.Kafka.Streams.Kstream.ValueMapper<V, Java.Lang.Iterable<VR>>>("asValueMapper", "()Lorg/apache/kafka/streams/kstream/ValueMapper;");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region FlatValueMapperWithKeyFromFunction implementation
        public partial class FlatValueMapperWithKeyFromFunction
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/FunctionsCompatConversions.FlatValueMapperWithKeyFromFunction.html#asValueMapperWithKey()"/>
            /// </summary>
            /// <returns><see cref="Org.Apache.Kafka.Streams.Kstream.ValueMapperWithKey"/></returns>
            public Org.Apache.Kafka.Streams.Kstream.ValueMapperWithKey AsValueMapperWithKey()
            {
                return IExecuteWithSignature<Org.Apache.Kafka.Streams.Kstream.ValueMapperWithKey>("asValueMapperWithKey", "()Lorg/apache/kafka/streams/kstream/ValueMapperWithKey;");
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/FunctionsCompatConversions.FlatValueMapperWithKeyFromFunction.html#asValueMapperWithKey()"/>
            /// </summary>
            /// <returns><see cref="Org.Apache.Kafka.Streams.Kstream.ValueMapperWithKey"/></returns>
            public Org.Apache.Kafka.Streams.Kstream.ValueMapperWithKey AsValueMapperWithKeyDirect()
            {
                return IExecuteWithSignature<Org.Apache.Kafka.Streams.Kstream.ValueMapperWithKeyDirect, Org.Apache.Kafka.Streams.Kstream.ValueMapperWithKey>("asValueMapperWithKey", "()Lorg/apache/kafka/streams/kstream/ValueMapperWithKey;");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region FlatValueMapperWithKeyFromFunction<K, V, VR> implementation
        public partial class FlatValueMapperWithKeyFromFunction<K, V, VR>
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators
            /// <summary>
            /// Converter from <see cref="Org.Apache.Kafka.Streams.Scala.FunctionsCompatConversions.FlatValueMapperWithKeyFromFunction{K, V, VR}"/> to <see cref="Org.Apache.Kafka.Streams.Scala.FunctionsCompatConversions.FlatValueMapperWithKeyFromFunction"/>
            /// </summary>
            public static implicit operator Org.Apache.Kafka.Streams.Scala.FunctionsCompatConversions.FlatValueMapperWithKeyFromFunction(Org.Apache.Kafka.Streams.Scala.FunctionsCompatConversions.FlatValueMapperWithKeyFromFunction<K, V, VR> t) => t.Cast<Org.Apache.Kafka.Streams.Scala.FunctionsCompatConversions.FlatValueMapperWithKeyFromFunction>();

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/FunctionsCompatConversions.FlatValueMapperWithKeyFromFunction.html#asValueMapperWithKey()"/>
            /// </summary>
            /// <returns><see cref="Org.Apache.Kafka.Streams.Kstream.ValueMapperWithKey"/></returns>
            public Org.Apache.Kafka.Streams.Kstream.ValueMapperWithKey<K, V, Java.Lang.Iterable<VR>> AsValueMapperWithKey()
            {
                return IExecuteWithSignature<Org.Apache.Kafka.Streams.Kstream.ValueMapperWithKey<K, V, Java.Lang.Iterable<VR>>>("asValueMapperWithKey", "()Lorg/apache/kafka/streams/kstream/ValueMapperWithKey;");
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/FunctionsCompatConversions.FlatValueMapperWithKeyFromFunction.html#asValueMapperWithKey()"/>
            /// </summary>
            /// <returns><see cref="Org.Apache.Kafka.Streams.Kstream.ValueMapperWithKey"/></returns>
            public Org.Apache.Kafka.Streams.Kstream.ValueMapperWithKey<K, V, Java.Lang.Iterable<VR>> AsValueMapperWithKeyDirect()
            {
                return IExecuteWithSignature<Org.Apache.Kafka.Streams.Kstream.ValueMapperWithKeyDirect<K, V, Java.Lang.Iterable<VR>>, Org.Apache.Kafka.Streams.Kstream.ValueMapperWithKey<K, V, Java.Lang.Iterable<VR>>>("asValueMapperWithKey", "()Lorg/apache/kafka/streams/kstream/ValueMapperWithKey;");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region ForeachActionFromFunction implementation
        public partial class ForeachActionFromFunction
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/FunctionsCompatConversions.ForeachActionFromFunction.html#asForeachAction()"/>
            /// </summary>
            /// <returns><see cref="Org.Apache.Kafka.Streams.Kstream.ForeachAction"/></returns>
            public Org.Apache.Kafka.Streams.Kstream.ForeachAction AsForeachAction()
            {
                return IExecuteWithSignature<Org.Apache.Kafka.Streams.Kstream.ForeachAction>("asForeachAction", "()Lorg/apache/kafka/streams/kstream/ForeachAction;");
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/FunctionsCompatConversions.ForeachActionFromFunction.html#asForeachAction()"/>
            /// </summary>
            /// <returns><see cref="Org.Apache.Kafka.Streams.Kstream.ForeachAction"/></returns>
            public Org.Apache.Kafka.Streams.Kstream.ForeachAction AsForeachActionDirect()
            {
                return IExecuteWithSignature<Org.Apache.Kafka.Streams.Kstream.ForeachActionDirect, Org.Apache.Kafka.Streams.Kstream.ForeachAction>("asForeachAction", "()Lorg/apache/kafka/streams/kstream/ForeachAction;");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region ForeachActionFromFunction<K, V> implementation
        public partial class ForeachActionFromFunction<K, V>
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators
            /// <summary>
            /// Converter from <see cref="Org.Apache.Kafka.Streams.Scala.FunctionsCompatConversions.ForeachActionFromFunction{K, V}"/> to <see cref="Org.Apache.Kafka.Streams.Scala.FunctionsCompatConversions.ForeachActionFromFunction"/>
            /// </summary>
            public static implicit operator Org.Apache.Kafka.Streams.Scala.FunctionsCompatConversions.ForeachActionFromFunction(Org.Apache.Kafka.Streams.Scala.FunctionsCompatConversions.ForeachActionFromFunction<K, V> t) => t.Cast<Org.Apache.Kafka.Streams.Scala.FunctionsCompatConversions.ForeachActionFromFunction>();

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/FunctionsCompatConversions.ForeachActionFromFunction.html#asForeachAction()"/>
            /// </summary>
            /// <returns><see cref="Org.Apache.Kafka.Streams.Kstream.ForeachAction"/></returns>
            public Org.Apache.Kafka.Streams.Kstream.ForeachAction<K, V> AsForeachAction()
            {
                return IExecuteWithSignature<Org.Apache.Kafka.Streams.Kstream.ForeachAction<K, V>>("asForeachAction", "()Lorg/apache/kafka/streams/kstream/ForeachAction;");
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/FunctionsCompatConversions.ForeachActionFromFunction.html#asForeachAction()"/>
            /// </summary>
            /// <returns><see cref="Org.Apache.Kafka.Streams.Kstream.ForeachAction"/></returns>
            public Org.Apache.Kafka.Streams.Kstream.ForeachAction<K, V> AsForeachActionDirect()
            {
                return IExecuteWithSignature<Org.Apache.Kafka.Streams.Kstream.ForeachActionDirect<K, V>, Org.Apache.Kafka.Streams.Kstream.ForeachAction<K, V>>("asForeachAction", "()Lorg/apache/kafka/streams/kstream/ForeachAction;");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region FunctionFromFunction implementation
        public partial class FunctionFromFunction
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/FunctionsCompatConversions.FunctionFromFunction.html#asJavaFunction()"/>
            /// </summary>
            /// <returns><see cref="Java.Util.Function.Function"/></returns>
            public Java.Util.Function.Function AsJavaFunction()
            {
                return IExecuteWithSignature<Java.Util.Function.Function>("asJavaFunction", "()Ljava/util/function/Function;");
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/FunctionsCompatConversions.FunctionFromFunction.html#asJavaFunction()"/>
            /// </summary>
            /// <returns><see cref="Java.Util.Function.Function"/></returns>
            public Java.Util.Function.Function AsJavaFunctionDirect()
            {
                return IExecuteWithSignature<Java.Util.Function.FunctionDirect, Java.Util.Function.Function>("asJavaFunction", "()Ljava/util/function/Function;");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region FunctionFromFunction<V, VR> implementation
        public partial class FunctionFromFunction<V, VR>
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators
            /// <summary>
            /// Converter from <see cref="Org.Apache.Kafka.Streams.Scala.FunctionsCompatConversions.FunctionFromFunction{V, VR}"/> to <see cref="Org.Apache.Kafka.Streams.Scala.FunctionsCompatConversions.FunctionFromFunction"/>
            /// </summary>
            public static implicit operator Org.Apache.Kafka.Streams.Scala.FunctionsCompatConversions.FunctionFromFunction(Org.Apache.Kafka.Streams.Scala.FunctionsCompatConversions.FunctionFromFunction<V, VR> t) => t.Cast<Org.Apache.Kafka.Streams.Scala.FunctionsCompatConversions.FunctionFromFunction>();

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/FunctionsCompatConversions.FunctionFromFunction.html#asJavaFunction()"/>
            /// </summary>
            /// <returns><see cref="Java.Util.Function.Function"/></returns>
            public Java.Util.Function.Function<V, VR> AsJavaFunction()
            {
                return IExecuteWithSignature<Java.Util.Function.Function<V, VR>>("asJavaFunction", "()Ljava/util/function/Function;");
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/FunctionsCompatConversions.FunctionFromFunction.html#asJavaFunction()"/>
            /// </summary>
            /// <returns><see cref="Java.Util.Function.Function"/></returns>
            public Java.Util.Function.Function<V, VR> AsJavaFunctionDirect()
            {
                return IExecuteWithSignature<Java.Util.Function.FunctionDirect<V, VR>, Java.Util.Function.Function<V, VR>>("asJavaFunction", "()Ljava/util/function/Function;");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region InitializerFromFunction implementation
        public partial class InitializerFromFunction
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/FunctionsCompatConversions.InitializerFromFunction.html#asInitializer()"/>
            /// </summary>
            /// <returns><see cref="Org.Apache.Kafka.Streams.Kstream.Initializer"/></returns>
            public Org.Apache.Kafka.Streams.Kstream.Initializer AsInitializer()
            {
                return IExecuteWithSignature<Org.Apache.Kafka.Streams.Kstream.Initializer>("asInitializer", "()Lorg/apache/kafka/streams/kstream/Initializer;");
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/FunctionsCompatConversions.InitializerFromFunction.html#asInitializer()"/>
            /// </summary>
            /// <returns><see cref="Org.Apache.Kafka.Streams.Kstream.Initializer"/></returns>
            public Org.Apache.Kafka.Streams.Kstream.Initializer AsInitializerDirect()
            {
                return IExecuteWithSignature<Org.Apache.Kafka.Streams.Kstream.InitializerDirect, Org.Apache.Kafka.Streams.Kstream.Initializer>("asInitializer", "()Lorg/apache/kafka/streams/kstream/Initializer;");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region InitializerFromFunction<VA> implementation
        public partial class InitializerFromFunction<VA>
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators
            /// <summary>
            /// Converter from <see cref="Org.Apache.Kafka.Streams.Scala.FunctionsCompatConversions.InitializerFromFunction{VA}"/> to <see cref="Org.Apache.Kafka.Streams.Scala.FunctionsCompatConversions.InitializerFromFunction"/>
            /// </summary>
            public static implicit operator Org.Apache.Kafka.Streams.Scala.FunctionsCompatConversions.InitializerFromFunction(Org.Apache.Kafka.Streams.Scala.FunctionsCompatConversions.InitializerFromFunction<VA> t) => t.Cast<Org.Apache.Kafka.Streams.Scala.FunctionsCompatConversions.InitializerFromFunction>();

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/FunctionsCompatConversions.InitializerFromFunction.html#asInitializer()"/>
            /// </summary>
            /// <returns><see cref="Org.Apache.Kafka.Streams.Kstream.Initializer"/></returns>
            public Org.Apache.Kafka.Streams.Kstream.Initializer<VA> AsInitializer()
            {
                return IExecuteWithSignature<Org.Apache.Kafka.Streams.Kstream.Initializer<VA>>("asInitializer", "()Lorg/apache/kafka/streams/kstream/Initializer;");
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/FunctionsCompatConversions.InitializerFromFunction.html#asInitializer()"/>
            /// </summary>
            /// <returns><see cref="Org.Apache.Kafka.Streams.Kstream.Initializer"/></returns>
            public Org.Apache.Kafka.Streams.Kstream.Initializer<VA> AsInitializerDirect()
            {
                return IExecuteWithSignature<Org.Apache.Kafka.Streams.Kstream.InitializerDirect<VA>, Org.Apache.Kafka.Streams.Kstream.Initializer<VA>>("asInitializer", "()Lorg/apache/kafka/streams/kstream/Initializer;");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region KeyValueMapperFromFunction implementation
        public partial class KeyValueMapperFromFunction
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/FunctionsCompatConversions.KeyValueMapperFromFunction.html#asKeyValueMapper()"/>
            /// </summary>
            /// <returns><see cref="Org.Apache.Kafka.Streams.Kstream.KeyValueMapper"/></returns>
            public Org.Apache.Kafka.Streams.Kstream.KeyValueMapper AsKeyValueMapper()
            {
                return IExecuteWithSignature<Org.Apache.Kafka.Streams.Kstream.KeyValueMapper>("asKeyValueMapper", "()Lorg/apache/kafka/streams/kstream/KeyValueMapper;");
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/FunctionsCompatConversions.KeyValueMapperFromFunction.html#asKeyValueMapper()"/>
            /// </summary>
            /// <returns><see cref="Org.Apache.Kafka.Streams.Kstream.KeyValueMapper"/></returns>
            public Org.Apache.Kafka.Streams.Kstream.KeyValueMapper AsKeyValueMapperDirect()
            {
                return IExecuteWithSignature<Org.Apache.Kafka.Streams.Kstream.KeyValueMapperDirect, Org.Apache.Kafka.Streams.Kstream.KeyValueMapper>("asKeyValueMapper", "()Lorg/apache/kafka/streams/kstream/KeyValueMapper;");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region KeyValueMapperFromFunction<K, V, KR, VR> implementation
        public partial class KeyValueMapperFromFunction<K, V, KR, VR>
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators
            /// <summary>
            /// Converter from <see cref="Org.Apache.Kafka.Streams.Scala.FunctionsCompatConversions.KeyValueMapperFromFunction{K, V, KR, VR}"/> to <see cref="Org.Apache.Kafka.Streams.Scala.FunctionsCompatConversions.KeyValueMapperFromFunction"/>
            /// </summary>
            public static implicit operator Org.Apache.Kafka.Streams.Scala.FunctionsCompatConversions.KeyValueMapperFromFunction(Org.Apache.Kafka.Streams.Scala.FunctionsCompatConversions.KeyValueMapperFromFunction<K, V, KR, VR> t) => t.Cast<Org.Apache.Kafka.Streams.Scala.FunctionsCompatConversions.KeyValueMapperFromFunction>();

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/FunctionsCompatConversions.KeyValueMapperFromFunction.html#asKeyValueMapper()"/>
            /// </summary>
            /// <returns><see cref="Org.Apache.Kafka.Streams.Kstream.KeyValueMapper"/></returns>
            public Org.Apache.Kafka.Streams.Kstream.KeyValueMapper<K, V, Org.Apache.Kafka.Streams.KeyValue<KR, VR>> AsKeyValueMapper()
            {
                return IExecuteWithSignature<Org.Apache.Kafka.Streams.Kstream.KeyValueMapper<K, V, Org.Apache.Kafka.Streams.KeyValue<KR, VR>>>("asKeyValueMapper", "()Lorg/apache/kafka/streams/kstream/KeyValueMapper;");
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/FunctionsCompatConversions.KeyValueMapperFromFunction.html#asKeyValueMapper()"/>
            /// </summary>
            /// <returns><see cref="Org.Apache.Kafka.Streams.Kstream.KeyValueMapper"/></returns>
            public Org.Apache.Kafka.Streams.Kstream.KeyValueMapper<K, V, Org.Apache.Kafka.Streams.KeyValue<KR, VR>> AsKeyValueMapperDirect()
            {
                return IExecuteWithSignature<Org.Apache.Kafka.Streams.Kstream.KeyValueMapperDirect<K, V, Org.Apache.Kafka.Streams.KeyValue<KR, VR>>, Org.Apache.Kafka.Streams.Kstream.KeyValueMapper<K, V, Org.Apache.Kafka.Streams.KeyValue<KR, VR>>>("asKeyValueMapper", "()Lorg/apache/kafka/streams/kstream/KeyValueMapper;");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region MapperFromFunction implementation
        public partial class MapperFromFunction
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/FunctionsCompatConversions.MapperFromFunction.html#asKeyValueMapper()"/>
            /// </summary>
            /// <returns><see cref="Org.Apache.Kafka.Streams.Kstream.KeyValueMapper"/></returns>
            public Org.Apache.Kafka.Streams.Kstream.KeyValueMapper AsKeyValueMapper()
            {
                return IExecuteWithSignature<Org.Apache.Kafka.Streams.Kstream.KeyValueMapper>("asKeyValueMapper", "()Lorg/apache/kafka/streams/kstream/KeyValueMapper;");
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/FunctionsCompatConversions.MapperFromFunction.html#asKeyValueMapper()"/>
            /// </summary>
            /// <returns><see cref="Org.Apache.Kafka.Streams.Kstream.KeyValueMapper"/></returns>
            public Org.Apache.Kafka.Streams.Kstream.KeyValueMapper AsKeyValueMapperDirect()
            {
                return IExecuteWithSignature<Org.Apache.Kafka.Streams.Kstream.KeyValueMapperDirect, Org.Apache.Kafka.Streams.Kstream.KeyValueMapper>("asKeyValueMapper", "()Lorg/apache/kafka/streams/kstream/KeyValueMapper;");
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/FunctionsCompatConversions.MapperFromFunction.html#asValueJoiner()"/>
            /// </summary>
            /// <returns><see cref="Org.Apache.Kafka.Streams.Kstream.ValueJoiner"/></returns>
            public Org.Apache.Kafka.Streams.Kstream.ValueJoiner AsValueJoiner()
            {
                return IExecuteWithSignature<Org.Apache.Kafka.Streams.Kstream.ValueJoiner>("asValueJoiner", "()Lorg/apache/kafka/streams/kstream/ValueJoiner;");
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/FunctionsCompatConversions.MapperFromFunction.html#asValueJoiner()"/>
            /// </summary>
            /// <returns><see cref="Org.Apache.Kafka.Streams.Kstream.ValueJoiner"/></returns>
            public Org.Apache.Kafka.Streams.Kstream.ValueJoiner AsValueJoinerDirect()
            {
                return IExecuteWithSignature<Org.Apache.Kafka.Streams.Kstream.ValueJoinerDirect, Org.Apache.Kafka.Streams.Kstream.ValueJoiner>("asValueJoiner", "()Lorg/apache/kafka/streams/kstream/ValueJoiner;");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region MapperFromFunction<T, U, VR> implementation
        public partial class MapperFromFunction<T, U, VR>
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators
            /// <summary>
            /// Converter from <see cref="Org.Apache.Kafka.Streams.Scala.FunctionsCompatConversions.MapperFromFunction{T, U, VR}"/> to <see cref="Org.Apache.Kafka.Streams.Scala.FunctionsCompatConversions.MapperFromFunction"/>
            /// </summary>
            public static implicit operator Org.Apache.Kafka.Streams.Scala.FunctionsCompatConversions.MapperFromFunction(Org.Apache.Kafka.Streams.Scala.FunctionsCompatConversions.MapperFromFunction<T, U, VR> t) => t.Cast<Org.Apache.Kafka.Streams.Scala.FunctionsCompatConversions.MapperFromFunction>();

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/FunctionsCompatConversions.MapperFromFunction.html#asKeyValueMapper()"/>
            /// </summary>
            /// <returns><see cref="Org.Apache.Kafka.Streams.Kstream.KeyValueMapper"/></returns>
            public Org.Apache.Kafka.Streams.Kstream.KeyValueMapper<T, U, VR> AsKeyValueMapper()
            {
                return IExecuteWithSignature<Org.Apache.Kafka.Streams.Kstream.KeyValueMapper<T, U, VR>>("asKeyValueMapper", "()Lorg/apache/kafka/streams/kstream/KeyValueMapper;");
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/FunctionsCompatConversions.MapperFromFunction.html#asKeyValueMapper()"/>
            /// </summary>
            /// <returns><see cref="Org.Apache.Kafka.Streams.Kstream.KeyValueMapper"/></returns>
            public Org.Apache.Kafka.Streams.Kstream.KeyValueMapper<T, U, VR> AsKeyValueMapperDirect()
            {
                return IExecuteWithSignature<Org.Apache.Kafka.Streams.Kstream.KeyValueMapperDirect<T, U, VR>, Org.Apache.Kafka.Streams.Kstream.KeyValueMapper<T, U, VR>>("asKeyValueMapper", "()Lorg/apache/kafka/streams/kstream/KeyValueMapper;");
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/FunctionsCompatConversions.MapperFromFunction.html#asValueJoiner()"/>
            /// </summary>
            /// <returns><see cref="Org.Apache.Kafka.Streams.Kstream.ValueJoiner"/></returns>
            public Org.Apache.Kafka.Streams.Kstream.ValueJoiner<T, U, VR> AsValueJoiner()
            {
                return IExecuteWithSignature<Org.Apache.Kafka.Streams.Kstream.ValueJoiner<T, U, VR>>("asValueJoiner", "()Lorg/apache/kafka/streams/kstream/ValueJoiner;");
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/FunctionsCompatConversions.MapperFromFunction.html#asValueJoiner()"/>
            /// </summary>
            /// <returns><see cref="Org.Apache.Kafka.Streams.Kstream.ValueJoiner"/></returns>
            public Org.Apache.Kafka.Streams.Kstream.ValueJoiner<T, U, VR> AsValueJoinerDirect()
            {
                return IExecuteWithSignature<Org.Apache.Kafka.Streams.Kstream.ValueJoinerDirect<T, U, VR>, Org.Apache.Kafka.Streams.Kstream.ValueJoiner<T, U, VR>>("asValueJoiner", "()Lorg/apache/kafka/streams/kstream/ValueJoiner;");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region MergerFromFunction implementation
        public partial class MergerFromFunction
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/FunctionsCompatConversions.MergerFromFunction.html#asMerger()"/>
            /// </summary>
            /// <returns><see cref="Org.Apache.Kafka.Streams.Kstream.Merger"/></returns>
            public Org.Apache.Kafka.Streams.Kstream.Merger AsMerger()
            {
                return IExecuteWithSignature<Org.Apache.Kafka.Streams.Kstream.Merger>("asMerger", "()Lorg/apache/kafka/streams/kstream/Merger;");
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/FunctionsCompatConversions.MergerFromFunction.html#asMerger()"/>
            /// </summary>
            /// <returns><see cref="Org.Apache.Kafka.Streams.Kstream.Merger"/></returns>
            public Org.Apache.Kafka.Streams.Kstream.Merger AsMergerDirect()
            {
                return IExecuteWithSignature<Org.Apache.Kafka.Streams.Kstream.MergerDirect, Org.Apache.Kafka.Streams.Kstream.Merger>("asMerger", "()Lorg/apache/kafka/streams/kstream/Merger;");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region MergerFromFunction<K, VR> implementation
        public partial class MergerFromFunction<K, VR>
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators
            /// <summary>
            /// Converter from <see cref="Org.Apache.Kafka.Streams.Scala.FunctionsCompatConversions.MergerFromFunction{K, VR}"/> to <see cref="Org.Apache.Kafka.Streams.Scala.FunctionsCompatConversions.MergerFromFunction"/>
            /// </summary>
            public static implicit operator Org.Apache.Kafka.Streams.Scala.FunctionsCompatConversions.MergerFromFunction(Org.Apache.Kafka.Streams.Scala.FunctionsCompatConversions.MergerFromFunction<K, VR> t) => t.Cast<Org.Apache.Kafka.Streams.Scala.FunctionsCompatConversions.MergerFromFunction>();

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/FunctionsCompatConversions.MergerFromFunction.html#asMerger()"/>
            /// </summary>
            /// <returns><see cref="Org.Apache.Kafka.Streams.Kstream.Merger"/></returns>
            public Org.Apache.Kafka.Streams.Kstream.Merger<K, VR> AsMerger()
            {
                return IExecuteWithSignature<Org.Apache.Kafka.Streams.Kstream.Merger<K, VR>>("asMerger", "()Lorg/apache/kafka/streams/kstream/Merger;");
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/FunctionsCompatConversions.MergerFromFunction.html#asMerger()"/>
            /// </summary>
            /// <returns><see cref="Org.Apache.Kafka.Streams.Kstream.Merger"/></returns>
            public Org.Apache.Kafka.Streams.Kstream.Merger<K, VR> AsMergerDirect()
            {
                return IExecuteWithSignature<Org.Apache.Kafka.Streams.Kstream.MergerDirect<K, VR>, Org.Apache.Kafka.Streams.Kstream.Merger<K, VR>>("asMerger", "()Lorg/apache/kafka/streams/kstream/Merger;");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region PredicateFromFunction implementation
        public partial class PredicateFromFunction
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/FunctionsCompatConversions.PredicateFromFunction.html#asPredicate()"/>
            /// </summary>
            /// <returns><see cref="Org.Apache.Kafka.Streams.Kstream.Predicate"/></returns>
            public Org.Apache.Kafka.Streams.Kstream.Predicate AsPredicate()
            {
                return IExecuteWithSignature<Org.Apache.Kafka.Streams.Kstream.Predicate>("asPredicate", "()Lorg/apache/kafka/streams/kstream/Predicate;");
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/FunctionsCompatConversions.PredicateFromFunction.html#asPredicate()"/>
            /// </summary>
            /// <returns><see cref="Org.Apache.Kafka.Streams.Kstream.Predicate"/></returns>
            public Org.Apache.Kafka.Streams.Kstream.Predicate AsPredicateDirect()
            {
                return IExecuteWithSignature<Org.Apache.Kafka.Streams.Kstream.PredicateDirect, Org.Apache.Kafka.Streams.Kstream.Predicate>("asPredicate", "()Lorg/apache/kafka/streams/kstream/Predicate;");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region PredicateFromFunction<K, V> implementation
        public partial class PredicateFromFunction<K, V>
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators
            /// <summary>
            /// Converter from <see cref="Org.Apache.Kafka.Streams.Scala.FunctionsCompatConversions.PredicateFromFunction{K, V}"/> to <see cref="Org.Apache.Kafka.Streams.Scala.FunctionsCompatConversions.PredicateFromFunction"/>
            /// </summary>
            public static implicit operator Org.Apache.Kafka.Streams.Scala.FunctionsCompatConversions.PredicateFromFunction(Org.Apache.Kafka.Streams.Scala.FunctionsCompatConversions.PredicateFromFunction<K, V> t) => t.Cast<Org.Apache.Kafka.Streams.Scala.FunctionsCompatConversions.PredicateFromFunction>();

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/FunctionsCompatConversions.PredicateFromFunction.html#asPredicate()"/>
            /// </summary>
            /// <returns><see cref="Org.Apache.Kafka.Streams.Kstream.Predicate"/></returns>
            public Org.Apache.Kafka.Streams.Kstream.Predicate<K, V> AsPredicate()
            {
                return IExecuteWithSignature<Org.Apache.Kafka.Streams.Kstream.Predicate<K, V>>("asPredicate", "()Lorg/apache/kafka/streams/kstream/Predicate;");
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/FunctionsCompatConversions.PredicateFromFunction.html#asPredicate()"/>
            /// </summary>
            /// <returns><see cref="Org.Apache.Kafka.Streams.Kstream.Predicate"/></returns>
            public Org.Apache.Kafka.Streams.Kstream.Predicate<K, V> AsPredicateDirect()
            {
                return IExecuteWithSignature<Org.Apache.Kafka.Streams.Kstream.PredicateDirect<K, V>, Org.Apache.Kafka.Streams.Kstream.Predicate<K, V>>("asPredicate", "()Lorg/apache/kafka/streams/kstream/Predicate;");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region ReducerFromFunction implementation
        public partial class ReducerFromFunction
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/FunctionsCompatConversions.ReducerFromFunction.html#asReducer()"/>
            /// </summary>
            /// <returns><see cref="Org.Apache.Kafka.Streams.Kstream.Reducer"/></returns>
            public Org.Apache.Kafka.Streams.Kstream.Reducer AsReducer()
            {
                return IExecuteWithSignature<Org.Apache.Kafka.Streams.Kstream.Reducer>("asReducer", "()Lorg/apache/kafka/streams/kstream/Reducer;");
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/FunctionsCompatConversions.ReducerFromFunction.html#asReducer()"/>
            /// </summary>
            /// <returns><see cref="Org.Apache.Kafka.Streams.Kstream.Reducer"/></returns>
            public Org.Apache.Kafka.Streams.Kstream.Reducer AsReducerDirect()
            {
                return IExecuteWithSignature<Org.Apache.Kafka.Streams.Kstream.ReducerDirect, Org.Apache.Kafka.Streams.Kstream.Reducer>("asReducer", "()Lorg/apache/kafka/streams/kstream/Reducer;");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region ReducerFromFunction<V> implementation
        public partial class ReducerFromFunction<V>
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators
            /// <summary>
            /// Converter from <see cref="Org.Apache.Kafka.Streams.Scala.FunctionsCompatConversions.ReducerFromFunction{V}"/> to <see cref="Org.Apache.Kafka.Streams.Scala.FunctionsCompatConversions.ReducerFromFunction"/>
            /// </summary>
            public static implicit operator Org.Apache.Kafka.Streams.Scala.FunctionsCompatConversions.ReducerFromFunction(Org.Apache.Kafka.Streams.Scala.FunctionsCompatConversions.ReducerFromFunction<V> t) => t.Cast<Org.Apache.Kafka.Streams.Scala.FunctionsCompatConversions.ReducerFromFunction>();

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/FunctionsCompatConversions.ReducerFromFunction.html#asReducer()"/>
            /// </summary>
            /// <returns><see cref="Org.Apache.Kafka.Streams.Kstream.Reducer"/></returns>
            public Org.Apache.Kafka.Streams.Kstream.Reducer<V> AsReducer()
            {
                return IExecuteWithSignature<Org.Apache.Kafka.Streams.Kstream.Reducer<V>>("asReducer", "()Lorg/apache/kafka/streams/kstream/Reducer;");
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/FunctionsCompatConversions.ReducerFromFunction.html#asReducer()"/>
            /// </summary>
            /// <returns><see cref="Org.Apache.Kafka.Streams.Kstream.Reducer"/></returns>
            public Org.Apache.Kafka.Streams.Kstream.Reducer<V> AsReducerDirect()
            {
                return IExecuteWithSignature<Org.Apache.Kafka.Streams.Kstream.ReducerDirect<V>, Org.Apache.Kafka.Streams.Kstream.Reducer<V>>("asReducer", "()Lorg/apache/kafka/streams/kstream/Reducer;");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region TransformerSupplierAsJava implementation
        public partial class TransformerSupplierAsJava
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region TransformerSupplierAsJava<K, V, VO> implementation
        public partial class TransformerSupplierAsJava<K, V, VO>
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators
            /// <summary>
            /// Converter from <see cref="Org.Apache.Kafka.Streams.Scala.FunctionsCompatConversions.TransformerSupplierAsJava{K, V, VO}"/> to <see cref="Org.Apache.Kafka.Streams.Scala.FunctionsCompatConversions.TransformerSupplierAsJava"/>
            /// </summary>
            public static implicit operator Org.Apache.Kafka.Streams.Scala.FunctionsCompatConversions.TransformerSupplierAsJava(Org.Apache.Kafka.Streams.Scala.FunctionsCompatConversions.TransformerSupplierAsJava<K, V, VO> t) => t.Cast<Org.Apache.Kafka.Streams.Scala.FunctionsCompatConversions.TransformerSupplierAsJava>();

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region TransformerSupplierFromFunction implementation
        public partial class TransformerSupplierFromFunction
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region TransformerSupplierFromFunction<K, V, VO> implementation
        public partial class TransformerSupplierFromFunction<K, V, VO>
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators
            /// <summary>
            /// Converter from <see cref="Org.Apache.Kafka.Streams.Scala.FunctionsCompatConversions.TransformerSupplierFromFunction{K, V, VO}"/> to <see cref="Org.Apache.Kafka.Streams.Scala.FunctionsCompatConversions.TransformerSupplierFromFunction"/>
            /// </summary>
            public static implicit operator Org.Apache.Kafka.Streams.Scala.FunctionsCompatConversions.TransformerSupplierFromFunction(Org.Apache.Kafka.Streams.Scala.FunctionsCompatConversions.TransformerSupplierFromFunction<K, V, VO> t) => t.Cast<Org.Apache.Kafka.Streams.Scala.FunctionsCompatConversions.TransformerSupplierFromFunction>();

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region ValueMapperFromFunction implementation
        public partial class ValueMapperFromFunction
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/FunctionsCompatConversions.ValueMapperFromFunction.html#asValueMapper()"/>
            /// </summary>
            /// <returns><see cref="Org.Apache.Kafka.Streams.Kstream.ValueMapper"/></returns>
            public Org.Apache.Kafka.Streams.Kstream.ValueMapper AsValueMapper()
            {
                return IExecuteWithSignature<Org.Apache.Kafka.Streams.Kstream.ValueMapper>("asValueMapper", "()Lorg/apache/kafka/streams/kstream/ValueMapper;");
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/FunctionsCompatConversions.ValueMapperFromFunction.html#asValueMapper()"/>
            /// </summary>
            /// <returns><see cref="Org.Apache.Kafka.Streams.Kstream.ValueMapper"/></returns>
            public Org.Apache.Kafka.Streams.Kstream.ValueMapper AsValueMapperDirect()
            {
                return IExecuteWithSignature<Org.Apache.Kafka.Streams.Kstream.ValueMapperDirect, Org.Apache.Kafka.Streams.Kstream.ValueMapper>("asValueMapper", "()Lorg/apache/kafka/streams/kstream/ValueMapper;");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region ValueMapperFromFunction<V, VR> implementation
        public partial class ValueMapperFromFunction<V, VR>
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators
            /// <summary>
            /// Converter from <see cref="Org.Apache.Kafka.Streams.Scala.FunctionsCompatConversions.ValueMapperFromFunction{V, VR}"/> to <see cref="Org.Apache.Kafka.Streams.Scala.FunctionsCompatConversions.ValueMapperFromFunction"/>
            /// </summary>
            public static implicit operator Org.Apache.Kafka.Streams.Scala.FunctionsCompatConversions.ValueMapperFromFunction(Org.Apache.Kafka.Streams.Scala.FunctionsCompatConversions.ValueMapperFromFunction<V, VR> t) => t.Cast<Org.Apache.Kafka.Streams.Scala.FunctionsCompatConversions.ValueMapperFromFunction>();

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/FunctionsCompatConversions.ValueMapperFromFunction.html#asValueMapper()"/>
            /// </summary>
            /// <returns><see cref="Org.Apache.Kafka.Streams.Kstream.ValueMapper"/></returns>
            public Org.Apache.Kafka.Streams.Kstream.ValueMapper<V, VR> AsValueMapper()
            {
                return IExecuteWithSignature<Org.Apache.Kafka.Streams.Kstream.ValueMapper<V, VR>>("asValueMapper", "()Lorg/apache/kafka/streams/kstream/ValueMapper;");
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/FunctionsCompatConversions.ValueMapperFromFunction.html#asValueMapper()"/>
            /// </summary>
            /// <returns><see cref="Org.Apache.Kafka.Streams.Kstream.ValueMapper"/></returns>
            public Org.Apache.Kafka.Streams.Kstream.ValueMapper<V, VR> AsValueMapperDirect()
            {
                return IExecuteWithSignature<Org.Apache.Kafka.Streams.Kstream.ValueMapperDirect<V, VR>, Org.Apache.Kafka.Streams.Kstream.ValueMapper<V, VR>>("asValueMapper", "()Lorg/apache/kafka/streams/kstream/ValueMapper;");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region ValueMapperWithKeyFromFunction implementation
        public partial class ValueMapperWithKeyFromFunction
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/FunctionsCompatConversions.ValueMapperWithKeyFromFunction.html#asValueMapperWithKey()"/>
            /// </summary>
            /// <returns><see cref="Org.Apache.Kafka.Streams.Kstream.ValueMapperWithKey"/></returns>
            public Org.Apache.Kafka.Streams.Kstream.ValueMapperWithKey AsValueMapperWithKey()
            {
                return IExecuteWithSignature<Org.Apache.Kafka.Streams.Kstream.ValueMapperWithKey>("asValueMapperWithKey", "()Lorg/apache/kafka/streams/kstream/ValueMapperWithKey;");
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/FunctionsCompatConversions.ValueMapperWithKeyFromFunction.html#asValueMapperWithKey()"/>
            /// </summary>
            /// <returns><see cref="Org.Apache.Kafka.Streams.Kstream.ValueMapperWithKey"/></returns>
            public Org.Apache.Kafka.Streams.Kstream.ValueMapperWithKey AsValueMapperWithKeyDirect()
            {
                return IExecuteWithSignature<Org.Apache.Kafka.Streams.Kstream.ValueMapperWithKeyDirect, Org.Apache.Kafka.Streams.Kstream.ValueMapperWithKey>("asValueMapperWithKey", "()Lorg/apache/kafka/streams/kstream/ValueMapperWithKey;");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region ValueMapperWithKeyFromFunction<K, V, VR> implementation
        public partial class ValueMapperWithKeyFromFunction<K, V, VR>
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators
            /// <summary>
            /// Converter from <see cref="Org.Apache.Kafka.Streams.Scala.FunctionsCompatConversions.ValueMapperWithKeyFromFunction{K, V, VR}"/> to <see cref="Org.Apache.Kafka.Streams.Scala.FunctionsCompatConversions.ValueMapperWithKeyFromFunction"/>
            /// </summary>
            public static implicit operator Org.Apache.Kafka.Streams.Scala.FunctionsCompatConversions.ValueMapperWithKeyFromFunction(Org.Apache.Kafka.Streams.Scala.FunctionsCompatConversions.ValueMapperWithKeyFromFunction<K, V, VR> t) => t.Cast<Org.Apache.Kafka.Streams.Scala.FunctionsCompatConversions.ValueMapperWithKeyFromFunction>();

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/FunctionsCompatConversions.ValueMapperWithKeyFromFunction.html#asValueMapperWithKey()"/>
            /// </summary>
            /// <returns><see cref="Org.Apache.Kafka.Streams.Kstream.ValueMapperWithKey"/></returns>
            public Org.Apache.Kafka.Streams.Kstream.ValueMapperWithKey<K, V, VR> AsValueMapperWithKey()
            {
                return IExecuteWithSignature<Org.Apache.Kafka.Streams.Kstream.ValueMapperWithKey<K, V, VR>>("asValueMapperWithKey", "()Lorg/apache/kafka/streams/kstream/ValueMapperWithKey;");
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/FunctionsCompatConversions.ValueMapperWithKeyFromFunction.html#asValueMapperWithKey()"/>
            /// </summary>
            /// <returns><see cref="Org.Apache.Kafka.Streams.Kstream.ValueMapperWithKey"/></returns>
            public Org.Apache.Kafka.Streams.Kstream.ValueMapperWithKey<K, V, VR> AsValueMapperWithKeyDirect()
            {
                return IExecuteWithSignature<Org.Apache.Kafka.Streams.Kstream.ValueMapperWithKeyDirect<K, V, VR>, Org.Apache.Kafka.Streams.Kstream.ValueMapperWithKey<K, V, VR>>("asValueMapperWithKey", "()Lorg/apache/kafka/streams/kstream/ValueMapperWithKey;");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region ValueTransformerSupplierAsJava implementation
        public partial class ValueTransformerSupplierAsJava
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region ValueTransformerSupplierAsJava<V, VO> implementation
        public partial class ValueTransformerSupplierAsJava<V, VO>
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators
            /// <summary>
            /// Converter from <see cref="Org.Apache.Kafka.Streams.Scala.FunctionsCompatConversions.ValueTransformerSupplierAsJava{V, VO}"/> to <see cref="Org.Apache.Kafka.Streams.Scala.FunctionsCompatConversions.ValueTransformerSupplierAsJava"/>
            /// </summary>
            public static implicit operator Org.Apache.Kafka.Streams.Scala.FunctionsCompatConversions.ValueTransformerSupplierAsJava(Org.Apache.Kafka.Streams.Scala.FunctionsCompatConversions.ValueTransformerSupplierAsJava<V, VO> t) => t.Cast<Org.Apache.Kafka.Streams.Scala.FunctionsCompatConversions.ValueTransformerSupplierAsJava>();

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region ValueTransformerSupplierWithKeyAsJava implementation
        public partial class ValueTransformerSupplierWithKeyAsJava
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region ValueTransformerSupplierWithKeyAsJava<K, V, VO> implementation
        public partial class ValueTransformerSupplierWithKeyAsJava<K, V, VO>
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators
            /// <summary>
            /// Converter from <see cref="Org.Apache.Kafka.Streams.Scala.FunctionsCompatConversions.ValueTransformerSupplierWithKeyAsJava{K, V, VO}"/> to <see cref="Org.Apache.Kafka.Streams.Scala.FunctionsCompatConversions.ValueTransformerSupplierWithKeyAsJava"/>
            /// </summary>
            public static implicit operator Org.Apache.Kafka.Streams.Scala.FunctionsCompatConversions.ValueTransformerSupplierWithKeyAsJava(Org.Apache.Kafka.Streams.Scala.FunctionsCompatConversions.ValueTransformerSupplierWithKeyAsJava<K, V, VO> t) => t.Cast<Org.Apache.Kafka.Streams.Scala.FunctionsCompatConversions.ValueTransformerSupplierWithKeyAsJava>();

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}