/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka-streams-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Streams.Processor.Internals.Metrics
{
    #region StreamsMetricsImpl
    public partial class StreamsMetricsImpl
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImpl.html#%3Cinit%3E(org.apache.kafka.common.metrics.Metrics,java.lang.String,java.lang.String,org.apache.kafka.common.utils.Time)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Metrics.Metrics"/></param>
        /// <param name="arg1"><see cref="string"/></param>
        /// <param name="arg2"><see cref="string"/></param>
        /// <param name="arg3"><see cref="Org.Apache.Kafka.Common.Utils.Time"/></param>
        public StreamsMetricsImpl(Org.Apache.Kafka.Common.Metrics.Metrics arg0, string arg1, string arg2, Org.Apache.Kafka.Common.Utils.Time arg3)
            : base(arg0, arg1, arg2, arg3)
        {
        }

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Org.Apache.Kafka.Streams.Processor.Internals.Metrics.StreamsMetricsImpl"/> to <see cref="Org.Apache.Kafka.Streams.StreamsMetrics"/>
        /// </summary>
        public static implicit operator Org.Apache.Kafka.Streams.StreamsMetrics(Org.Apache.Kafka.Streams.Processor.Internals.Metrics.StreamsMetricsImpl t) => t.Cast<Org.Apache.Kafka.Streams.StreamsMetrics>();

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImpl.html#AVG_LATENCY_DESCRIPTION"/>
        /// </summary>
        public static string AVG_LATENCY_DESCRIPTION { get { return SGetField<string>(LocalBridgeClazz, "AVG_LATENCY_DESCRIPTION"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImpl.html#AVG_SUFFIX"/>
        /// </summary>
        public static string AVG_SUFFIX { get { return SGetField<string>(LocalBridgeClazz, "AVG_SUFFIX"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImpl.html#CACHE_LEVEL_GROUP"/>
        /// </summary>
        public static string CACHE_LEVEL_GROUP { get { return SGetField<string>(LocalBridgeClazz, "CACHE_LEVEL_GROUP"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImpl.html#CLIENT_ID_TAG"/>
        /// </summary>
        public static string CLIENT_ID_TAG { get { return SGetField<string>(LocalBridgeClazz, "CLIENT_ID_TAG"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImpl.html#CLIENT_LEVEL_GROUP"/>
        /// </summary>
        public static string CLIENT_LEVEL_GROUP { get { return SGetField<string>(LocalBridgeClazz, "CLIENT_LEVEL_GROUP"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImpl.html#GROUP_PREFIX"/>
        /// </summary>
        public static string GROUP_PREFIX { get { return SGetField<string>(LocalBridgeClazz, "GROUP_PREFIX"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImpl.html#GROUP_PREFIX_WO_DELIMITER"/>
        /// </summary>
        public static string GROUP_PREFIX_WO_DELIMITER { get { return SGetField<string>(LocalBridgeClazz, "GROUP_PREFIX_WO_DELIMITER"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImpl.html#GROUP_SUFFIX"/>
        /// </summary>
        public static string GROUP_SUFFIX { get { return SGetField<string>(LocalBridgeClazz, "GROUP_SUFFIX"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImpl.html#LATENCY_SUFFIX"/>
        /// </summary>
        public static string LATENCY_SUFFIX { get { return SGetField<string>(LocalBridgeClazz, "LATENCY_SUFFIX"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImpl.html#MAX_LATENCY_DESCRIPTION"/>
        /// </summary>
        public static string MAX_LATENCY_DESCRIPTION { get { return SGetField<string>(LocalBridgeClazz, "MAX_LATENCY_DESCRIPTION"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImpl.html#MAX_SUFFIX"/>
        /// </summary>
        public static string MAX_SUFFIX { get { return SGetField<string>(LocalBridgeClazz, "MAX_SUFFIX"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImpl.html#MIN_SUFFIX"/>
        /// </summary>
        public static string MIN_SUFFIX { get { return SGetField<string>(LocalBridgeClazz, "MIN_SUFFIX"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImpl.html#OPERATIONS"/>
        /// </summary>
        public static string OPERATIONS { get { return SGetField<string>(LocalBridgeClazz, "OPERATIONS"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImpl.html#PROCESSOR_NODE_ID_TAG"/>
        /// </summary>
        public static string PROCESSOR_NODE_ID_TAG { get { return SGetField<string>(LocalBridgeClazz, "PROCESSOR_NODE_ID_TAG"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImpl.html#PROCESSOR_NODE_LEVEL_GROUP"/>
        /// </summary>
        public static string PROCESSOR_NODE_LEVEL_GROUP { get { return SGetField<string>(LocalBridgeClazz, "PROCESSOR_NODE_LEVEL_GROUP"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImpl.html#RATE_DESCRIPTION"/>
        /// </summary>
        public static string RATE_DESCRIPTION { get { return SGetField<string>(LocalBridgeClazz, "RATE_DESCRIPTION"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImpl.html#RATE_DESCRIPTION_PREFIX"/>
        /// </summary>
        public static string RATE_DESCRIPTION_PREFIX { get { return SGetField<string>(LocalBridgeClazz, "RATE_DESCRIPTION_PREFIX"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImpl.html#RATE_DESCRIPTION_SUFFIX"/>
        /// </summary>
        public static string RATE_DESCRIPTION_SUFFIX { get { return SGetField<string>(LocalBridgeClazz, "RATE_DESCRIPTION_SUFFIX"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImpl.html#RATE_SUFFIX"/>
        /// </summary>
        public static string RATE_SUFFIX { get { return SGetField<string>(LocalBridgeClazz, "RATE_SUFFIX"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImpl.html#RATIO_SUFFIX"/>
        /// </summary>
        public static string RATIO_SUFFIX { get { return SGetField<string>(LocalBridgeClazz, "RATIO_SUFFIX"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImpl.html#RECORD_CACHE_ID_TAG"/>
        /// </summary>
        public static string RECORD_CACHE_ID_TAG { get { return SGetField<string>(LocalBridgeClazz, "RECORD_CACHE_ID_TAG"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImpl.html#RECORD_E2E_LATENCY"/>
        /// </summary>
        public static string RECORD_E2E_LATENCY { get { return SGetField<string>(LocalBridgeClazz, "RECORD_E2E_LATENCY"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImpl.html#RECORD_E2E_LATENCY_AVG_DESCRIPTION"/>
        /// </summary>
        public static string RECORD_E2E_LATENCY_AVG_DESCRIPTION { get { return SGetField<string>(LocalBridgeClazz, "RECORD_E2E_LATENCY_AVG_DESCRIPTION"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImpl.html#RECORD_E2E_LATENCY_DESCRIPTION_SUFFIX"/>
        /// </summary>
        public static string RECORD_E2E_LATENCY_DESCRIPTION_SUFFIX { get { return SGetField<string>(LocalBridgeClazz, "RECORD_E2E_LATENCY_DESCRIPTION_SUFFIX"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImpl.html#RECORD_E2E_LATENCY_MAX_DESCRIPTION"/>
        /// </summary>
        public static string RECORD_E2E_LATENCY_MAX_DESCRIPTION { get { return SGetField<string>(LocalBridgeClazz, "RECORD_E2E_LATENCY_MAX_DESCRIPTION"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImpl.html#RECORD_E2E_LATENCY_MIN_DESCRIPTION"/>
        /// </summary>
        public static string RECORD_E2E_LATENCY_MIN_DESCRIPTION { get { return SGetField<string>(LocalBridgeClazz, "RECORD_E2E_LATENCY_MIN_DESCRIPTION"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImpl.html#RECORDS_SUFFIX"/>
        /// </summary>
        public static string RECORDS_SUFFIX { get { return SGetField<string>(LocalBridgeClazz, "RECORDS_SUFFIX"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImpl.html#ROLLUP_VALUE"/>
        /// </summary>
        public static string ROLLUP_VALUE { get { return SGetField<string>(LocalBridgeClazz, "ROLLUP_VALUE"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImpl.html#STATE_STORE_LEVEL_GROUP"/>
        /// </summary>
        public static string STATE_STORE_LEVEL_GROUP { get { return SGetField<string>(LocalBridgeClazz, "STATE_STORE_LEVEL_GROUP"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImpl.html#STORE_ID_TAG"/>
        /// </summary>
        public static string STORE_ID_TAG { get { return SGetField<string>(LocalBridgeClazz, "STORE_ID_TAG"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImpl.html#TASK_ID_TAG"/>
        /// </summary>
        public static string TASK_ID_TAG { get { return SGetField<string>(LocalBridgeClazz, "TASK_ID_TAG"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImpl.html#TASK_LEVEL_GROUP"/>
        /// </summary>
        public static string TASK_LEVEL_GROUP { get { return SGetField<string>(LocalBridgeClazz, "TASK_LEVEL_GROUP"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImpl.html#THREAD_ID_TAG"/>
        /// </summary>
        public static string THREAD_ID_TAG { get { return SGetField<string>(LocalBridgeClazz, "THREAD_ID_TAG"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImpl.html#THREAD_LEVEL_GROUP"/>
        /// </summary>
        public static string THREAD_LEVEL_GROUP { get { return SGetField<string>(LocalBridgeClazz, "THREAD_LEVEL_GROUP"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImpl.html#TOPIC_LEVEL_GROUP"/>
        /// </summary>
        public static string TOPIC_LEVEL_GROUP { get { return SGetField<string>(LocalBridgeClazz, "TOPIC_LEVEL_GROUP"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImpl.html#TOPIC_NAME_TAG"/>
        /// </summary>
        public static string TOPIC_NAME_TAG { get { return SGetField<string>(LocalBridgeClazz, "TOPIC_NAME_TAG"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImpl.html#TOTAL_DESCRIPTION"/>
        /// </summary>
        public static string TOTAL_DESCRIPTION { get { return SGetField<string>(LocalBridgeClazz, "TOTAL_DESCRIPTION"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImpl.html#TOTAL_SUFFIX"/>
        /// </summary>
        public static string TOTAL_SUFFIX { get { return SGetField<string>(LocalBridgeClazz, "TOTAL_SUFFIX"); } }

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImpl.html#maybeMeasureLatency(java.util.function.Supplier,org.apache.kafka.common.utils.Time,org.apache.kafka.common.metrics.Sensor)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Function.Supplier"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Common.Utils.Time"/></param>
        /// <param name="arg2"><see cref="Org.Apache.Kafka.Common.Metrics.Sensor"/></param>
        /// <typeparam name="T"></typeparam>
        /// <returns><typeparamref name="T"/></returns>
        public static T MaybeMeasureLatency<T>(Java.Util.Function.Supplier<T> arg0, Org.Apache.Kafka.Common.Utils.Time arg1, Org.Apache.Kafka.Common.Metrics.Sensor arg2)
        {
            return SExecute<T>(LocalBridgeClazz, "maybeMeasureLatency", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImpl.html#addAvgAndMaxLatencyToSensor(org.apache.kafka.common.metrics.Sensor,java.lang.String,java.util.Map,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Metrics.Sensor"/></param>
        /// <param name="arg1"><see cref="string"/></param>
        /// <param name="arg2"><see cref="Java.Util.Map"/></param>
        /// <param name="arg3"><see cref="string"/></param>
        public static void AddAvgAndMaxLatencyToSensor(Org.Apache.Kafka.Common.Metrics.Sensor arg0, string arg1, Java.Util.Map<string, string> arg2, string arg3)
        {
            SExecute(LocalBridgeClazz, "addAvgAndMaxLatencyToSensor", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImpl.html#addAvgAndMaxToSensor(org.apache.kafka.common.metrics.Sensor,java.lang.String,java.util.Map,java.lang.String,java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Metrics.Sensor"/></param>
        /// <param name="arg1"><see cref="string"/></param>
        /// <param name="arg2"><see cref="Java.Util.Map"/></param>
        /// <param name="arg3"><see cref="string"/></param>
        /// <param name="arg4"><see cref="string"/></param>
        /// <param name="arg5"><see cref="string"/></param>
        public static void AddAvgAndMaxToSensor(Org.Apache.Kafka.Common.Metrics.Sensor arg0, string arg1, Java.Util.Map<string, string> arg2, string arg3, string arg4, string arg5)
        {
            SExecute(LocalBridgeClazz, "addAvgAndMaxToSensor", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImpl.html#addAvgAndMinAndMaxToSensor(org.apache.kafka.common.metrics.Sensor,java.lang.String,java.util.Map,java.lang.String,java.lang.String,java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Metrics.Sensor"/></param>
        /// <param name="arg1"><see cref="string"/></param>
        /// <param name="arg2"><see cref="Java.Util.Map"/></param>
        /// <param name="arg3"><see cref="string"/></param>
        /// <param name="arg4"><see cref="string"/></param>
        /// <param name="arg5"><see cref="string"/></param>
        /// <param name="arg6"><see cref="string"/></param>
        public static void AddAvgAndMinAndMaxToSensor(Org.Apache.Kafka.Common.Metrics.Sensor arg0, string arg1, Java.Util.Map<string, string> arg2, string arg3, string arg4, string arg5, string arg6)
        {
            SExecute(LocalBridgeClazz, "addAvgAndMinAndMaxToSensor", arg0, arg1, arg2, arg3, arg4, arg5, arg6);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImpl.html#addAvgAndSumMetricsToSensor(org.apache.kafka.common.metrics.Sensor,java.lang.String,java.util.Map,java.lang.String,java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Metrics.Sensor"/></param>
        /// <param name="arg1"><see cref="string"/></param>
        /// <param name="arg2"><see cref="Java.Util.Map"/></param>
        /// <param name="arg3"><see cref="string"/></param>
        /// <param name="arg4"><see cref="string"/></param>
        /// <param name="arg5"><see cref="string"/></param>
        public static void AddAvgAndSumMetricsToSensor(Org.Apache.Kafka.Common.Metrics.Sensor arg0, string arg1, Java.Util.Map<string, string> arg2, string arg3, string arg4, string arg5)
        {
            SExecute(LocalBridgeClazz, "addAvgAndSumMetricsToSensor", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImpl.html#addInvocationRateAndCountToSensor(org.apache.kafka.common.metrics.Sensor,java.lang.String,java.util.Map,java.lang.String,java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Metrics.Sensor"/></param>
        /// <param name="arg1"><see cref="string"/></param>
        /// <param name="arg2"><see cref="Java.Util.Map"/></param>
        /// <param name="arg3"><see cref="string"/></param>
        /// <param name="arg4"><see cref="string"/></param>
        /// <param name="arg5"><see cref="string"/></param>
        public static void AddInvocationRateAndCountToSensor(Org.Apache.Kafka.Common.Metrics.Sensor arg0, string arg1, Java.Util.Map<string, string> arg2, string arg3, string arg4, string arg5)
        {
            SExecute(LocalBridgeClazz, "addInvocationRateAndCountToSensor", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImpl.html#addInvocationRateAndCountToSensor(org.apache.kafka.common.metrics.Sensor,java.lang.String,java.util.Map,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Metrics.Sensor"/></param>
        /// <param name="arg1"><see cref="string"/></param>
        /// <param name="arg2"><see cref="Java.Util.Map"/></param>
        /// <param name="arg3"><see cref="string"/></param>
        public static void AddInvocationRateAndCountToSensor(Org.Apache.Kafka.Common.Metrics.Sensor arg0, string arg1, Java.Util.Map<string, string> arg2, string arg3)
        {
            SExecute(LocalBridgeClazz, "addInvocationRateAndCountToSensor", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImpl.html#addInvocationRateToSensor(org.apache.kafka.common.metrics.Sensor,java.lang.String,java.util.Map,java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Metrics.Sensor"/></param>
        /// <param name="arg1"><see cref="string"/></param>
        /// <param name="arg2"><see cref="Java.Util.Map"/></param>
        /// <param name="arg3"><see cref="string"/></param>
        /// <param name="arg4"><see cref="string"/></param>
        public static void AddInvocationRateToSensor(Org.Apache.Kafka.Common.Metrics.Sensor arg0, string arg1, Java.Util.Map<string, string> arg2, string arg3, string arg4)
        {
            SExecute(LocalBridgeClazz, "addInvocationRateToSensor", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImpl.html#addMinAndMaxToSensor(org.apache.kafka.common.metrics.Sensor,java.lang.String,java.util.Map,java.lang.String,java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Metrics.Sensor"/></param>
        /// <param name="arg1"><see cref="string"/></param>
        /// <param name="arg2"><see cref="Java.Util.Map"/></param>
        /// <param name="arg3"><see cref="string"/></param>
        /// <param name="arg4"><see cref="string"/></param>
        /// <param name="arg5"><see cref="string"/></param>
        public static void AddMinAndMaxToSensor(Org.Apache.Kafka.Common.Metrics.Sensor arg0, string arg1, Java.Util.Map<string, string> arg2, string arg3, string arg4, string arg5)
        {
            SExecute(LocalBridgeClazz, "addMinAndMaxToSensor", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImpl.html#addRateOfSumAndSumMetricsToSensor(org.apache.kafka.common.metrics.Sensor,java.lang.String,java.util.Map,java.lang.String,java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Metrics.Sensor"/></param>
        /// <param name="arg1"><see cref="string"/></param>
        /// <param name="arg2"><see cref="Java.Util.Map"/></param>
        /// <param name="arg3"><see cref="string"/></param>
        /// <param name="arg4"><see cref="string"/></param>
        /// <param name="arg5"><see cref="string"/></param>
        public static void AddRateOfSumAndSumMetricsToSensor(Org.Apache.Kafka.Common.Metrics.Sensor arg0, string arg1, Java.Util.Map<string, string> arg2, string arg3, string arg4, string arg5)
        {
            SExecute(LocalBridgeClazz, "addRateOfSumAndSumMetricsToSensor", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImpl.html#addRateOfSumMetricToSensor(org.apache.kafka.common.metrics.Sensor,java.lang.String,java.util.Map,java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Metrics.Sensor"/></param>
        /// <param name="arg1"><see cref="string"/></param>
        /// <param name="arg2"><see cref="Java.Util.Map"/></param>
        /// <param name="arg3"><see cref="string"/></param>
        /// <param name="arg4"><see cref="string"/></param>
        public static void AddRateOfSumMetricToSensor(Org.Apache.Kafka.Common.Metrics.Sensor arg0, string arg1, Java.Util.Map<string, string> arg2, string arg3, string arg4)
        {
            SExecute(LocalBridgeClazz, "addRateOfSumMetricToSensor", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImpl.html#addSumMetricToSensor(org.apache.kafka.common.metrics.Sensor,java.lang.String,java.util.Map,java.lang.String,boolean,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Metrics.Sensor"/></param>
        /// <param name="arg1"><see cref="string"/></param>
        /// <param name="arg2"><see cref="Java.Util.Map"/></param>
        /// <param name="arg3"><see cref="string"/></param>
        /// <param name="arg4"><see cref="bool"/></param>
        /// <param name="arg5"><see cref="string"/></param>
        public static void AddSumMetricToSensor(Org.Apache.Kafka.Common.Metrics.Sensor arg0, string arg1, Java.Util.Map<string, string> arg2, string arg3, bool arg4, string arg5)
        {
            SExecute(LocalBridgeClazz, "addSumMetricToSensor", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImpl.html#addSumMetricToSensor(org.apache.kafka.common.metrics.Sensor,java.lang.String,java.util.Map,java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Metrics.Sensor"/></param>
        /// <param name="arg1"><see cref="string"/></param>
        /// <param name="arg2"><see cref="Java.Util.Map"/></param>
        /// <param name="arg3"><see cref="string"/></param>
        /// <param name="arg4"><see cref="string"/></param>
        public static void AddSumMetricToSensor(Org.Apache.Kafka.Common.Metrics.Sensor arg0, string arg1, Java.Util.Map<string, string> arg2, string arg3, string arg4)
        {
            SExecute(LocalBridgeClazz, "addSumMetricToSensor", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImpl.html#addTotalCountAndSumMetricsToSensor(org.apache.kafka.common.metrics.Sensor,java.lang.String,java.util.Map,java.lang.String,java.lang.String,java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Metrics.Sensor"/></param>
        /// <param name="arg1"><see cref="string"/></param>
        /// <param name="arg2"><see cref="Java.Util.Map"/></param>
        /// <param name="arg3"><see cref="string"/></param>
        /// <param name="arg4"><see cref="string"/></param>
        /// <param name="arg5"><see cref="string"/></param>
        /// <param name="arg6"><see cref="string"/></param>
        public static void AddTotalCountAndSumMetricsToSensor(Org.Apache.Kafka.Common.Metrics.Sensor arg0, string arg1, Java.Util.Map<string, string> arg2, string arg3, string arg4, string arg5, string arg6)
        {
            SExecute(LocalBridgeClazz, "addTotalCountAndSumMetricsToSensor", arg0, arg1, arg2, arg3, arg4, arg5, arg6);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImpl.html#addValueMetricToSensor(org.apache.kafka.common.metrics.Sensor,java.lang.String,java.util.Map,java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Metrics.Sensor"/></param>
        /// <param name="arg1"><see cref="string"/></param>
        /// <param name="arg2"><see cref="Java.Util.Map"/></param>
        /// <param name="arg3"><see cref="string"/></param>
        /// <param name="arg4"><see cref="string"/></param>
        public static void AddValueMetricToSensor(Org.Apache.Kafka.Common.Metrics.Sensor arg0, string arg1, Java.Util.Map<string, string> arg2, string arg3, string arg4)
        {
            SExecute(LocalBridgeClazz, "addValueMetricToSensor", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImpl.html#maybeMeasureLatency(java.lang.Runnable,org.apache.kafka.common.utils.Time,org.apache.kafka.common.metrics.Sensor)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.Runnable"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Common.Utils.Time"/></param>
        /// <param name="arg2"><see cref="Org.Apache.Kafka.Common.Metrics.Sensor"/></param>
        public static void MaybeMeasureLatency(Java.Lang.Runnable arg0, Org.Apache.Kafka.Common.Utils.Time arg1, Org.Apache.Kafka.Common.Metrics.Sensor arg2)
        {
            SExecute(LocalBridgeClazz, "maybeMeasureLatency", arg0, arg1, arg2);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImpl.html#clientLevelTagMap()"/> 
        /// </summary>
        public Java.Util.Map<string, string> ClientLevelTagMap
        {
            get { return IExecute<Java.Util.Map<string, string>>("clientLevelTagMap"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImpl.html#metrics()"/> 
        /// </summary>
        public Java.Util.Map Metrics
        {
            get { return IExecute<Java.Util.Map>("metrics"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImpl.html#rocksDBMetricsRecordingTrigger()"/> 
        /// </summary>
        public Org.Apache.Kafka.Streams.State.Internals.Metrics.RocksDBMetricsRecordingTrigger RocksDBMetricsRecordingTrigger
        {
            get { return IExecute<Org.Apache.Kafka.Streams.State.Internals.Metrics.RocksDBMetricsRecordingTrigger>("rocksDBMetricsRecordingTrigger"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImpl.html#addClientLevelImmutableMetric(java.lang.String,java.lang.String,org.apache.kafka.common.metrics.Sensor.RecordingLevel,java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <param name="arg1"><see cref="string"/></param>
        /// <param name="arg2"><see cref="Org.Apache.Kafka.Common.Metrics.Sensor.RecordingLevel"/></param>
        /// <param name="arg3"><typeparamref name="T"/></param>
        /// <typeparam name="T"></typeparam>
        public void AddClientLevelImmutableMetric<T>(string arg0, string arg1, Org.Apache.Kafka.Common.Metrics.Sensor.RecordingLevel arg2, T arg3)
        {
            IExecute("addClientLevelImmutableMetric", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImpl.html#addClientLevelMutableMetric(java.lang.String,java.lang.String,org.apache.kafka.common.metrics.Sensor.RecordingLevel,org.apache.kafka.common.metrics.Gauge)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <param name="arg1"><see cref="string"/></param>
        /// <param name="arg2"><see cref="Org.Apache.Kafka.Common.Metrics.Sensor.RecordingLevel"/></param>
        /// <param name="arg3"><see cref="Org.Apache.Kafka.Common.Metrics.Gauge"/></param>
        /// <typeparam name="T"></typeparam>
        public void AddClientLevelMutableMetric<T>(string arg0, string arg1, Org.Apache.Kafka.Common.Metrics.Sensor.RecordingLevel arg2, Org.Apache.Kafka.Common.Metrics.Gauge<T> arg3)
        {
            IExecute("addClientLevelMutableMetric", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImpl.html#addStoreLevelMutableMetric(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.apache.kafka.common.metrics.Sensor.RecordingLevel,org.apache.kafka.common.metrics.Gauge)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <param name="arg1"><see cref="string"/></param>
        /// <param name="arg2"><see cref="string"/></param>
        /// <param name="arg3"><see cref="string"/></param>
        /// <param name="arg4"><see cref="string"/></param>
        /// <param name="arg5"><see cref="Org.Apache.Kafka.Common.Metrics.Sensor.RecordingLevel"/></param>
        /// <param name="arg6"><see cref="Org.Apache.Kafka.Common.Metrics.Gauge"/></param>
        /// <typeparam name="T"></typeparam>
        public void AddStoreLevelMutableMetric<T>(string arg0, string arg1, string arg2, string arg3, string arg4, Org.Apache.Kafka.Common.Metrics.Sensor.RecordingLevel arg5, Org.Apache.Kafka.Common.Metrics.Gauge<T> arg6)
        {
            IExecute("addStoreLevelMutableMetric", arg0, arg1, arg2, arg3, arg4, arg5, arg6);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImpl.html#addThreadLevelImmutableMetric(java.lang.String,java.lang.String,java.lang.String,java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <param name="arg1"><see cref="string"/></param>
        /// <param name="arg2"><see cref="string"/></param>
        /// <param name="arg3"><typeparamref name="T"/></param>
        /// <typeparam name="T"></typeparam>
        public void AddThreadLevelImmutableMetric<T>(string arg0, string arg1, string arg2, T arg3)
        {
            IExecute("addThreadLevelImmutableMetric", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImpl.html#addThreadLevelMutableMetric(java.lang.String,java.lang.String,java.lang.String,org.apache.kafka.common.metrics.Gauge)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <param name="arg1"><see cref="string"/></param>
        /// <param name="arg2"><see cref="string"/></param>
        /// <param name="arg3"><see cref="Org.Apache.Kafka.Common.Metrics.Gauge"/></param>
        /// <typeparam name="T"></typeparam>
        public void AddThreadLevelMutableMetric<T>(string arg0, string arg1, string arg2, Org.Apache.Kafka.Common.Metrics.Gauge<T> arg3)
        {
            IExecute("addThreadLevelMutableMetric", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImpl.html#clientLevelSensor(java.lang.String,org.apache.kafka.common.metrics.Sensor.RecordingLevel,org.apache.kafka.common.metrics.Sensor[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Common.Metrics.Sensor.RecordingLevel"/></param>
        /// <param name="arg2"><see cref="Org.Apache.Kafka.Common.Metrics.Sensor"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Metrics.Sensor"/></returns>
        public Org.Apache.Kafka.Common.Metrics.Sensor ClientLevelSensor(string arg0, Org.Apache.Kafka.Common.Metrics.Sensor.RecordingLevel arg1, params Org.Apache.Kafka.Common.Metrics.Sensor[] arg2)
        {
            if (arg2.Length == 0) return IExecute<Org.Apache.Kafka.Common.Metrics.Sensor>("clientLevelSensor", arg0, arg1); else return IExecute<Org.Apache.Kafka.Common.Metrics.Sensor>("clientLevelSensor", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImpl.html#storeLevelSensor(java.lang.String,java.lang.String,java.lang.String,org.apache.kafka.common.metrics.Sensor.RecordingLevel,org.apache.kafka.common.metrics.Sensor[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <param name="arg1"><see cref="string"/></param>
        /// <param name="arg2"><see cref="string"/></param>
        /// <param name="arg3"><see cref="Org.Apache.Kafka.Common.Metrics.Sensor.RecordingLevel"/></param>
        /// <param name="arg4"><see cref="Org.Apache.Kafka.Common.Metrics.Sensor"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Metrics.Sensor"/></returns>
        public Org.Apache.Kafka.Common.Metrics.Sensor StoreLevelSensor(string arg0, string arg1, string arg2, Org.Apache.Kafka.Common.Metrics.Sensor.RecordingLevel arg3, params Org.Apache.Kafka.Common.Metrics.Sensor[] arg4)
        {
            if (arg4.Length == 0) return IExecute<Org.Apache.Kafka.Common.Metrics.Sensor>("storeLevelSensor", arg0, arg1, arg2, arg3); else return IExecute<Org.Apache.Kafka.Common.Metrics.Sensor>("storeLevelSensor", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImpl.html#taskLevelSensor(java.lang.String,java.lang.String,java.lang.String,org.apache.kafka.common.metrics.Sensor.RecordingLevel,org.apache.kafka.common.metrics.Sensor[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <param name="arg1"><see cref="string"/></param>
        /// <param name="arg2"><see cref="string"/></param>
        /// <param name="arg3"><see cref="Org.Apache.Kafka.Common.Metrics.Sensor.RecordingLevel"/></param>
        /// <param name="arg4"><see cref="Org.Apache.Kafka.Common.Metrics.Sensor"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Metrics.Sensor"/></returns>
        public Org.Apache.Kafka.Common.Metrics.Sensor TaskLevelSensor(string arg0, string arg1, string arg2, Org.Apache.Kafka.Common.Metrics.Sensor.RecordingLevel arg3, params Org.Apache.Kafka.Common.Metrics.Sensor[] arg4)
        {
            if (arg4.Length == 0) return IExecute<Org.Apache.Kafka.Common.Metrics.Sensor>("taskLevelSensor", arg0, arg1, arg2, arg3); else return IExecute<Org.Apache.Kafka.Common.Metrics.Sensor>("taskLevelSensor", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImpl.html#threadLevelSensor(java.lang.String,java.lang.String,org.apache.kafka.common.metrics.Sensor.RecordingLevel,org.apache.kafka.common.metrics.Sensor[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <param name="arg1"><see cref="string"/></param>
        /// <param name="arg2"><see cref="Org.Apache.Kafka.Common.Metrics.Sensor.RecordingLevel"/></param>
        /// <param name="arg3"><see cref="Org.Apache.Kafka.Common.Metrics.Sensor"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Metrics.Sensor"/></returns>
        public Org.Apache.Kafka.Common.Metrics.Sensor ThreadLevelSensor(string arg0, string arg1, Org.Apache.Kafka.Common.Metrics.Sensor.RecordingLevel arg2, params Org.Apache.Kafka.Common.Metrics.Sensor[] arg3)
        {
            if (arg3.Length == 0) return IExecute<Org.Apache.Kafka.Common.Metrics.Sensor>("threadLevelSensor", arg0, arg1, arg2); else return IExecute<Org.Apache.Kafka.Common.Metrics.Sensor>("threadLevelSensor", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImpl.html#removeAllCacheLevelSensors(java.lang.String,java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <param name="arg1"><see cref="string"/></param>
        /// <param name="arg2"><see cref="string"/></param>
        public void RemoveAllCacheLevelSensors(string arg0, string arg1, string arg2)
        {
            IExecute("removeAllCacheLevelSensors", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImpl.html#removeAllClientLevelSensorsAndMetrics()"/>
        /// </summary>
        public void RemoveAllClientLevelSensorsAndMetrics()
        {
            IExecute("removeAllClientLevelSensorsAndMetrics");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImpl.html#removeAllNodeLevelSensors(java.lang.String,java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <param name="arg1"><see cref="string"/></param>
        /// <param name="arg2"><see cref="string"/></param>
        public void RemoveAllNodeLevelSensors(string arg0, string arg1, string arg2)
        {
            IExecute("removeAllNodeLevelSensors", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImpl.html#removeAllStoreLevelSensorsAndMetrics(java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <param name="arg1"><see cref="string"/></param>
        public void RemoveAllStoreLevelSensorsAndMetrics(string arg0, string arg1)
        {
            IExecute("removeAllStoreLevelSensorsAndMetrics", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImpl.html#removeAllTaskLevelSensors(java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <param name="arg1"><see cref="string"/></param>
        public void RemoveAllTaskLevelSensors(string arg0, string arg1)
        {
            IExecute("removeAllTaskLevelSensors", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImpl.html#removeAllThreadLevelMetrics(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        public void RemoveAllThreadLevelMetrics(string arg0)
        {
            IExecute("removeAllThreadLevelMetrics", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImpl.html#removeAllThreadLevelSensors(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        public void RemoveAllThreadLevelSensors(string arg0)
        {
            IExecute("removeAllThreadLevelSensors", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImpl.html#removeAllTopicLevelSensors(java.lang.String,java.lang.String,java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <param name="arg1"><see cref="string"/></param>
        /// <param name="arg2"><see cref="string"/></param>
        /// <param name="arg3"><see cref="string"/></param>
        public void RemoveAllTopicLevelSensors(string arg0, string arg1, string arg2, string arg3)
        {
            IExecute("removeAllTopicLevelSensors", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImpl.html#cacheLevelTagMap(java.lang.String,java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <param name="arg1"><see cref="string"/></param>
        /// <param name="arg2"><see cref="string"/></param>
        /// <returns><see cref="Java.Util.Map"/></returns>
        public Java.Util.Map<string, string> CacheLevelTagMap(string arg0, string arg1, string arg2)
        {
            return IExecute<Java.Util.Map<string, string>>("cacheLevelTagMap", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImpl.html#nodeLevelTagMap(java.lang.String,java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <param name="arg1"><see cref="string"/></param>
        /// <param name="arg2"><see cref="string"/></param>
        /// <returns><see cref="Java.Util.Map"/></returns>
        public Java.Util.Map<string, string> NodeLevelTagMap(string arg0, string arg1, string arg2)
        {
            return IExecute<Java.Util.Map<string, string>>("nodeLevelTagMap", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImpl.html#storeLevelTagMap(java.lang.String,java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <param name="arg1"><see cref="string"/></param>
        /// <param name="arg2"><see cref="string"/></param>
        /// <returns><see cref="Java.Util.Map"/></returns>
        public Java.Util.Map<string, string> StoreLevelTagMap(string arg0, string arg1, string arg2)
        {
            return IExecute<Java.Util.Map<string, string>>("storeLevelTagMap", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImpl.html#taskLevelTagMap(java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <param name="arg1"><see cref="string"/></param>
        /// <returns><see cref="Java.Util.Map"/></returns>
        public Java.Util.Map<string, string> TaskLevelTagMap(string arg0, string arg1)
        {
            return IExecute<Java.Util.Map<string, string>>("taskLevelTagMap", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImpl.html#threadLevelTagMap(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <returns><see cref="Java.Util.Map"/></returns>
        public Java.Util.Map<string, string> ThreadLevelTagMap(string arg0)
        {
            return IExecute<Java.Util.Map<string, string>>("threadLevelTagMap", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImpl.html#topicLevelTagMap(java.lang.String,java.lang.String,java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <param name="arg1"><see cref="string"/></param>
        /// <param name="arg2"><see cref="string"/></param>
        /// <param name="arg3"><see cref="string"/></param>
        /// <returns><see cref="Java.Util.Map"/></returns>
        public Java.Util.Map<string, string> TopicLevelTagMap(string arg0, string arg1, string arg2, string arg3)
        {
            return IExecute<Java.Util.Map<string, string>>("topicLevelTagMap", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImpl.html#addLatencyRateTotalSensor(java.lang.String,java.lang.String,java.lang.String,org.apache.kafka.common.metrics.Sensor.RecordingLevel,java.lang.String[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <param name="arg1"><see cref="string"/></param>
        /// <param name="arg2"><see cref="string"/></param>
        /// <param name="arg3"><see cref="Org.Apache.Kafka.Common.Metrics.Sensor.RecordingLevel"/></param>
        /// <param name="arg4"><see cref="string"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Metrics.Sensor"/></returns>
        public Org.Apache.Kafka.Common.Metrics.Sensor AddLatencyRateTotalSensor(string arg0, string arg1, string arg2, Org.Apache.Kafka.Common.Metrics.Sensor.RecordingLevel arg3, params string[] arg4)
        {
            if (arg4.Length == 0) return IExecute<Org.Apache.Kafka.Common.Metrics.Sensor>("addLatencyRateTotalSensor", arg0, arg1, arg2, arg3); else return IExecute<Org.Apache.Kafka.Common.Metrics.Sensor>("addLatencyRateTotalSensor", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImpl.html#addRateTotalSensor(java.lang.String,java.lang.String,java.lang.String,org.apache.kafka.common.metrics.Sensor.RecordingLevel,java.lang.String[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <param name="arg1"><see cref="string"/></param>
        /// <param name="arg2"><see cref="string"/></param>
        /// <param name="arg3"><see cref="Org.Apache.Kafka.Common.Metrics.Sensor.RecordingLevel"/></param>
        /// <param name="arg4"><see cref="string"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Metrics.Sensor"/></returns>
        public Org.Apache.Kafka.Common.Metrics.Sensor AddRateTotalSensor(string arg0, string arg1, string arg2, Org.Apache.Kafka.Common.Metrics.Sensor.RecordingLevel arg3, params string[] arg4)
        {
            if (arg4.Length == 0) return IExecute<Org.Apache.Kafka.Common.Metrics.Sensor>("addRateTotalSensor", arg0, arg1, arg2, arg3); else return IExecute<Org.Apache.Kafka.Common.Metrics.Sensor>("addRateTotalSensor", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImpl.html#addSensor(java.lang.String,org.apache.kafka.common.metrics.Sensor.RecordingLevel,org.apache.kafka.common.metrics.Sensor[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Common.Metrics.Sensor.RecordingLevel"/></param>
        /// <param name="arg2"><see cref="Org.Apache.Kafka.Common.Metrics.Sensor"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Metrics.Sensor"/></returns>
        public Org.Apache.Kafka.Common.Metrics.Sensor AddSensor(string arg0, Org.Apache.Kafka.Common.Metrics.Sensor.RecordingLevel arg1, params Org.Apache.Kafka.Common.Metrics.Sensor[] arg2)
        {
            if (arg2.Length == 0) return IExecute<Org.Apache.Kafka.Common.Metrics.Sensor>("addSensor", arg0, arg1); else return IExecute<Org.Apache.Kafka.Common.Metrics.Sensor>("addSensor", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImpl.html#addSensor(java.lang.String,org.apache.kafka.common.metrics.Sensor.RecordingLevel)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Common.Metrics.Sensor.RecordingLevel"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Metrics.Sensor"/></returns>
        public Org.Apache.Kafka.Common.Metrics.Sensor AddSensor(string arg0, Org.Apache.Kafka.Common.Metrics.Sensor.RecordingLevel arg1)
        {
            return IExecute<Org.Apache.Kafka.Common.Metrics.Sensor>("addSensor", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImpl.html#cacheLevelSensor(java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.apache.kafka.common.metrics.Sensor.RecordingLevel,org.apache.kafka.common.metrics.Sensor[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <param name="arg1"><see cref="string"/></param>
        /// <param name="arg2"><see cref="string"/></param>
        /// <param name="arg3"><see cref="string"/></param>
        /// <param name="arg4"><see cref="Org.Apache.Kafka.Common.Metrics.Sensor.RecordingLevel"/></param>
        /// <param name="arg5"><see cref="Org.Apache.Kafka.Common.Metrics.Sensor"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Metrics.Sensor"/></returns>
        public Org.Apache.Kafka.Common.Metrics.Sensor CacheLevelSensor(string arg0, string arg1, string arg2, string arg3, Org.Apache.Kafka.Common.Metrics.Sensor.RecordingLevel arg4, params Org.Apache.Kafka.Common.Metrics.Sensor[] arg5)
        {
            if (arg5.Length == 0) return IExecute<Org.Apache.Kafka.Common.Metrics.Sensor>("cacheLevelSensor", arg0, arg1, arg2, arg3, arg4); else return IExecute<Org.Apache.Kafka.Common.Metrics.Sensor>("cacheLevelSensor", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImpl.html#nodeLevelSensor(java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.apache.kafka.common.metrics.Sensor.RecordingLevel,org.apache.kafka.common.metrics.Sensor[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <param name="arg1"><see cref="string"/></param>
        /// <param name="arg2"><see cref="string"/></param>
        /// <param name="arg3"><see cref="string"/></param>
        /// <param name="arg4"><see cref="Org.Apache.Kafka.Common.Metrics.Sensor.RecordingLevel"/></param>
        /// <param name="arg5"><see cref="Org.Apache.Kafka.Common.Metrics.Sensor"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Metrics.Sensor"/></returns>
        public Org.Apache.Kafka.Common.Metrics.Sensor NodeLevelSensor(string arg0, string arg1, string arg2, string arg3, Org.Apache.Kafka.Common.Metrics.Sensor.RecordingLevel arg4, params Org.Apache.Kafka.Common.Metrics.Sensor[] arg5)
        {
            if (arg5.Length == 0) return IExecute<Org.Apache.Kafka.Common.Metrics.Sensor>("nodeLevelSensor", arg0, arg1, arg2, arg3, arg4); else return IExecute<Org.Apache.Kafka.Common.Metrics.Sensor>("nodeLevelSensor", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImpl.html#topicLevelSensor(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.apache.kafka.common.metrics.Sensor.RecordingLevel,org.apache.kafka.common.metrics.Sensor[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <param name="arg1"><see cref="string"/></param>
        /// <param name="arg2"><see cref="string"/></param>
        /// <param name="arg3"><see cref="string"/></param>
        /// <param name="arg4"><see cref="string"/></param>
        /// <param name="arg5"><see cref="Org.Apache.Kafka.Common.Metrics.Sensor.RecordingLevel"/></param>
        /// <param name="arg6"><see cref="Org.Apache.Kafka.Common.Metrics.Sensor"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Metrics.Sensor"/></returns>
        public Org.Apache.Kafka.Common.Metrics.Sensor TopicLevelSensor(string arg0, string arg1, string arg2, string arg3, string arg4, Org.Apache.Kafka.Common.Metrics.Sensor.RecordingLevel arg5, params Org.Apache.Kafka.Common.Metrics.Sensor[] arg6)
        {
            if (arg6.Length == 0) return IExecute<Org.Apache.Kafka.Common.Metrics.Sensor>("topicLevelSensor", arg0, arg1, arg2, arg3, arg4, arg5); else return IExecute<Org.Apache.Kafka.Common.Metrics.Sensor>("topicLevelSensor", arg0, arg1, arg2, arg3, arg4, arg5, arg6);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImpl.html#version()"/>
        /// </summary>

        /// <returns><see cref="Org.Apache.Kafka.Streams.Processor.Internals.Metrics.StreamsMetricsImpl.Version"/></returns>
        public Org.Apache.Kafka.Streams.Processor.Internals.Metrics.StreamsMetricsImpl.Version VersionMethod()
        {
            return IExecute<Org.Apache.Kafka.Streams.Processor.Internals.Metrics.StreamsMetricsImpl.Version>("version");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImpl.html#removeSensor(org.apache.kafka.common.metrics.Sensor)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Metrics.Sensor"/></param>
        public void RemoveSensor(Org.Apache.Kafka.Common.Metrics.Sensor arg0)
        {
            IExecute("removeSensor", arg0);
        }

        #endregion

        #region Nested classes
        #region Version
        public partial class Version
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImpl.Version.html#LATEST"/>
            /// </summary>
            public static Org.Apache.Kafka.Streams.Processor.Internals.Metrics.StreamsMetricsImpl.Version LATEST { get { return SGetField<Org.Apache.Kafka.Streams.Processor.Internals.Metrics.StreamsMetricsImpl.Version>(LocalBridgeClazz, "LATEST"); } }

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImpl.Version.html#values()"/> 
            /// </summary>
            public static Org.Apache.Kafka.Streams.Processor.Internals.Metrics.StreamsMetricsImpl.Version[] Values
            {
                get { return SExecuteArray<Org.Apache.Kafka.Streams.Processor.Internals.Metrics.StreamsMetricsImpl.Version>(LocalBridgeClazz, "values"); }
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/metrics/StreamsMetricsImpl.Version.html#valueOf(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="string"/></param>
            /// <returns><see cref="Org.Apache.Kafka.Streams.Processor.Internals.Metrics.StreamsMetricsImpl.Version"/></returns>
            public static Org.Apache.Kafka.Streams.Processor.Internals.Metrics.StreamsMetricsImpl.Version ValueOf(string arg0)
            {
                return SExecute<Org.Apache.Kafka.Streams.Processor.Internals.Metrics.StreamsMetricsImpl.Version>(LocalBridgeClazz, "valueOf", arg0);
            }

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}