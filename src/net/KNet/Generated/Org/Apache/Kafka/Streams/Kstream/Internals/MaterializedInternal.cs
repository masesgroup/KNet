/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka-streams-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Streams.Kstream.Internals
{
    #region MaterializedInternal
    public partial class MaterializedInternal
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/kstream/internals/MaterializedInternal.html#%3Cinit%3E(org.apache.kafka.streams.kstream.Materialized,org.apache.kafka.streams.kstream.internals.InternalNameProvider,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Streams.Kstream.Materialized"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Streams.Kstream.Internals.InternalNameProvider"/></param>
        /// <param name="arg2"><see cref="string"/></param>
        public MaterializedInternal(Org.Apache.Kafka.Streams.Kstream.Materialized arg0, Org.Apache.Kafka.Streams.Kstream.Internals.InternalNameProvider arg1, string arg2)
            : base(arg0, arg1, arg2)
        {
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/kstream/internals/MaterializedInternal.html#%3Cinit%3E(org.apache.kafka.streams.kstream.Materialized)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Streams.Kstream.Materialized"/></param>
        public MaterializedInternal(Org.Apache.Kafka.Streams.Kstream.Materialized arg0)
            : base(arg0)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/kstream/internals/MaterializedInternal.html#cachingEnabled()"/> 
        /// </summary>
        public bool CachingEnabled
        {
            get { return IExecute<bool>("cachingEnabled"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/kstream/internals/MaterializedInternal.html#keySerde()"/> 
        /// </summary>
        public Org.Apache.Kafka.Common.Serialization.Serde KeySerde
        {
            get { return IExecute<Org.Apache.Kafka.Common.Serialization.Serde>("keySerde"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/kstream/internals/MaterializedInternal.html#loggingEnabled()"/> 
        /// </summary>
        public bool LoggingEnabled
        {
            get { return IExecute<bool>("loggingEnabled"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/kstream/internals/MaterializedInternal.html#queryableStoreName()"/> 
        /// </summary>
        public string QueryableStoreName
        {
            get { return IExecute<string>("queryableStoreName"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/kstream/internals/MaterializedInternal.html#storeName()"/> 
        /// </summary>
        public string StoreName
        {
            get { return IExecute<string>("storeName"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/kstream/internals/MaterializedInternal.html#storeSupplier()"/> 
        /// </summary>
        public Org.Apache.Kafka.Streams.State.StoreSupplier StoreSupplier
        {
            get { return IExecute<Org.Apache.Kafka.Streams.State.StoreSupplier>("storeSupplier"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/kstream/internals/MaterializedInternal.html#storeType()"/> 
        /// </summary>
        public Org.Apache.Kafka.Streams.Kstream.Materialized.StoreType StoreType
        {
            get { return IExecute<Org.Apache.Kafka.Streams.Kstream.Materialized.StoreType>("storeType"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/kstream/internals/MaterializedInternal.html#valueSerde()"/> 
        /// </summary>
        public Org.Apache.Kafka.Common.Serialization.Serde ValueSerde
        {
            get { return IExecute<Org.Apache.Kafka.Common.Serialization.Serde>("valueSerde"); }
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion

    #region MaterializedInternal<K, V, S>
    public partial class MaterializedInternal<K, V, S>
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/kstream/internals/MaterializedInternal.html#%3Cinit%3E(org.apache.kafka.streams.kstream.Materialized,org.apache.kafka.streams.kstream.internals.InternalNameProvider,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Streams.Kstream.Materialized"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Streams.Kstream.Internals.InternalNameProvider"/></param>
        /// <param name="arg2"><see cref="string"/></param>
        public MaterializedInternal(Org.Apache.Kafka.Streams.Kstream.Materialized arg0, Org.Apache.Kafka.Streams.Kstream.Internals.InternalNameProvider arg1, string arg2)
            : base(arg0, arg1, arg2)
        {
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/kstream/internals/MaterializedInternal.html#%3Cinit%3E(org.apache.kafka.streams.kstream.Materialized)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Streams.Kstream.Materialized"/></param>
        public MaterializedInternal(Org.Apache.Kafka.Streams.Kstream.Materialized arg0)
            : base(arg0)
        {
        }

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Org.Apache.Kafka.Streams.Kstream.Internals.MaterializedInternal{K, V, S}"/> to <see cref="Org.Apache.Kafka.Streams.Kstream.Internals.MaterializedInternal"/>
        /// </summary>
        public static implicit operator Org.Apache.Kafka.Streams.Kstream.Internals.MaterializedInternal(Org.Apache.Kafka.Streams.Kstream.Internals.MaterializedInternal<K, V, S> t) => t.Cast<Org.Apache.Kafka.Streams.Kstream.Internals.MaterializedInternal>();

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/kstream/internals/MaterializedInternal.html#cachingEnabled()"/> 
        /// </summary>
        public bool CachingEnabled
        {
            get { return IExecute<bool>("cachingEnabled"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/kstream/internals/MaterializedInternal.html#keySerde()"/> 
        /// </summary>
        public Org.Apache.Kafka.Common.Serialization.Serde<K> KeySerde
        {
            get { return IExecute<Org.Apache.Kafka.Common.Serialization.Serde<K>>("keySerde"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/kstream/internals/MaterializedInternal.html#loggingEnabled()"/> 
        /// </summary>
        public bool LoggingEnabled
        {
            get { return IExecute<bool>("loggingEnabled"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/kstream/internals/MaterializedInternal.html#queryableStoreName()"/> 
        /// </summary>
        public string QueryableStoreName
        {
            get { return IExecute<string>("queryableStoreName"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/kstream/internals/MaterializedInternal.html#storeName()"/> 
        /// </summary>
        public string StoreName
        {
            get { return IExecute<string>("storeName"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/kstream/internals/MaterializedInternal.html#storeSupplier()"/> 
        /// </summary>
        public Org.Apache.Kafka.Streams.State.StoreSupplier<S> StoreSupplier
        {
            get { return IExecute<Org.Apache.Kafka.Streams.State.StoreSupplier<S>>("storeSupplier"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/kstream/internals/MaterializedInternal.html#storeType()"/> 
        /// </summary>
        public Org.Apache.Kafka.Streams.Kstream.Materialized.StoreType StoreType
        {
            get { return IExecute<Org.Apache.Kafka.Streams.Kstream.Materialized.StoreType>("storeType"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/kstream/internals/MaterializedInternal.html#valueSerde()"/> 
        /// </summary>
        public Org.Apache.Kafka.Common.Serialization.Serde<V> ValueSerde
        {
            get { return IExecute<Org.Apache.Kafka.Common.Serialization.Serde<V>>("valueSerde"); }
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}