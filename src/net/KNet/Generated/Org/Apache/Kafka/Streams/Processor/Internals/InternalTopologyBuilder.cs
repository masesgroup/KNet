/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka-streams-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Streams.Processor.Internals
{
    #region InternalTopologyBuilder
    public partial class InternalTopologyBuilder
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.html#%3Cinit%3E(org.apache.kafka.streams.TopologyConfig)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Streams.TopologyConfig"/></param>
        public InternalTopologyBuilder(Org.Apache.Kafka.Streams.TopologyConfig arg0)
            : base(arg0)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.html#allSourcePatternStrings()"/> 
        /// </summary>
        public Java.Util.List<string> AllSourcePatternStrings
        {
            get { return IExecute<Java.Util.List<string>>("allSourcePatternStrings"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.html#allStateStoreNames()"/> 
        /// </summary>
        public Java.Util.Set<string> AllStateStoreNames
        {
            get { return IExecute<Java.Util.Set<string>>("allStateStoreNames"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.html#buildGlobalStateTopology()"/> 
        /// </summary>
        public Org.Apache.Kafka.Streams.Processor.Internals.ProcessorTopology BuildGlobalStateTopology
        {
            get { return IExecute<Org.Apache.Kafka.Streams.Processor.Internals.ProcessorTopology>("buildGlobalStateTopology"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.html#buildTopology()"/> 
        /// </summary>
        public Org.Apache.Kafka.Streams.Processor.Internals.ProcessorTopology BuildTopology
        {
            get { return IExecute<Org.Apache.Kafka.Streams.Processor.Internals.ProcessorTopology>("buildTopology"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.html#copartitionGroups()"/> 
        /// </summary>
        public Java.Util.Collection<Java.Util.Set<string>> CopartitionGroups
        {
            get { return IExecute<Java.Util.Collection<Java.Util.Set<string>>>("copartitionGroups"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.html#describe()"/> 
        /// </summary>
        public Org.Apache.Kafka.Streams.Processor.Internals.InternalTopologyBuilder.TopologyDescription Describe
        {
            get { return IExecute<Org.Apache.Kafka.Streams.Processor.Internals.InternalTopologyBuilder.TopologyDescription>("describe"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.html#fullSourceTopicNames()"/> 
        /// </summary>
        public Java.Util.List<string> FullSourceTopicNames
        {
            get { return IExecute<Java.Util.List<string>>("fullSourceTopicNames"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.html#globalStateStores()"/> 
        /// </summary>
        public Java.Util.Map<string, Org.Apache.Kafka.Streams.Processor.StateStore> GlobalStateStores
        {
            get { return IExecute<Java.Util.Map<string, Org.Apache.Kafka.Streams.Processor.StateStore>>("globalStateStores"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.html#hasGlobalStores()"/> 
        /// </summary>
        public bool HasGlobalStores
        {
            get { return IExecute<bool>("hasGlobalStores"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.html#hasNamedTopology()"/> 
        /// </summary>
        public bool HasNamedTopology
        {
            get { return IExecute<bool>("hasNamedTopology"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.html#hasNoLocalTopology()"/> 
        /// </summary>
        public bool HasNoLocalTopology
        {
            get { return IExecute<bool>("hasNoLocalTopology"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.html#hasOffsetResetOverrides()"/> 
        /// </summary>
        public bool HasOffsetResetOverrides
        {
            get { return IExecute<bool>("hasOffsetResetOverrides"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.html#hasPersistentStores()"/> 
        /// </summary>
        public bool HasPersistentStores
        {
            get { return IExecute<bool>("hasPersistentStores"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.html#namedTopology()"/> 
        /// </summary>
        public Org.Apache.Kafka.Streams.Processor.Internals.Namedtopology.NamedTopology NamedTopology
        {
            get { return IExecute<Org.Apache.Kafka.Streams.Processor.Internals.Namedtopology.NamedTopology>("namedTopology"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.html#nodeGroups()"/> 
        /// </summary>
        public Java.Util.Map<int?, Java.Util.Set<string>> NodeGroups
        {
            get { return IExecute<Java.Util.Map<int?, Java.Util.Set<string>>>("nodeGroups"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.html#nodeToSourceTopics()"/> 
        /// </summary>
        public Java.Util.Map<string, Java.Util.List<string>> NodeToSourceTopics
        {
            get { return IExecute<Java.Util.Map<string, Java.Util.List<string>>>("nodeToSourceTopics"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.html#stateStoreNameToFullSourceTopicNames()"/> 
        /// </summary>
        public Java.Util.Map<string, Java.Util.List<string>> StateStoreNameToFullSourceTopicNames
        {
            get { return IExecute<Java.Util.Map<string, Java.Util.List<string>>>("stateStoreNameToFullSourceTopicNames"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.html#stateStores()"/> 
        /// </summary>
        public Java.Util.Map StateStores
        {
            get { return IExecute<Java.Util.Map>("stateStores"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.html#subtopologyToTopicsInfo()"/> 
        /// </summary>
        public Java.Util.Map<Org.Apache.Kafka.Streams.Processor.Internals.TopologyMetadata.Subtopology, Org.Apache.Kafka.Streams.Processor.Internals.InternalTopologyBuilder.TopicsInfo> SubtopologyToTopicsInfo
        {
            get { return IExecute<Java.Util.Map<Org.Apache.Kafka.Streams.Processor.Internals.TopologyMetadata.Subtopology, Org.Apache.Kafka.Streams.Processor.Internals.InternalTopologyBuilder.TopicsInfo>>("subtopologyToTopicsInfo"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.html#topologyConfigs()"/> 
        /// </summary>
        public Org.Apache.Kafka.Streams.TopologyConfig TopologyConfigs
        {
            get { return IExecute<Org.Apache.Kafka.Streams.TopologyConfig>("topologyConfigs"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.html#topologyName()"/> 
        /// </summary>
        public string TopologyName
        {
            get { return IExecute<string>("topologyName"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.html#containsTopic(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool ContainsTopic(string arg0)
        {
            return IExecute<bool>("containsTopic", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.html#hasStore(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool HasStore(string arg0)
        {
            return IExecute<bool>("hasStore", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.html#addSink(java.lang.String,java.lang.String,org.apache.kafka.common.serialization.Serializer,org.apache.kafka.common.serialization.Serializer,org.apache.kafka.streams.processor.StreamPartitioner,java.lang.String[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <param name="arg1"><see cref="string"/></param>
        /// <param name="arg2"><see cref="Org.Apache.Kafka.Common.Serialization.Serializer"/></param>
        /// <param name="arg3"><see cref="Org.Apache.Kafka.Common.Serialization.Serializer"/></param>
        /// <param name="arg4"><see cref="Org.Apache.Kafka.Streams.Processor.StreamPartitioner"/></param>
        /// <param name="arg5"><see cref="string"/></param>
        /// <typeparam name="K"></typeparam>
        /// <typeparam name="V"></typeparam>
        /// <typeparam name="Arg4objectSuperK"><typeparamref name="K"/></typeparam>
        /// <typeparam name="Arg4objectSuperV"></typeparam>
        public void AddSink<K, V, Arg4objectSuperK, Arg4objectSuperV>(string arg0, string arg1, Org.Apache.Kafka.Common.Serialization.Serializer<K> arg2, Org.Apache.Kafka.Common.Serialization.Serializer<V> arg3, Org.Apache.Kafka.Streams.Processor.StreamPartitioner<Arg4objectSuperK, Arg4objectSuperV> arg4, params string[] arg5) where Arg4objectSuperK: K
        {
            if (arg5.Length == 0) IExecute("addSink", arg0, arg1, arg2, arg3, arg4); else IExecute("addSink", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.html#addSink(java.lang.String,org.apache.kafka.streams.processor.TopicNameExtractor,org.apache.kafka.common.serialization.Serializer,org.apache.kafka.common.serialization.Serializer,org.apache.kafka.streams.processor.StreamPartitioner,java.lang.String[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Streams.Processor.TopicNameExtractor"/></param>
        /// <param name="arg2"><see cref="Org.Apache.Kafka.Common.Serialization.Serializer"/></param>
        /// <param name="arg3"><see cref="Org.Apache.Kafka.Common.Serialization.Serializer"/></param>
        /// <param name="arg4"><see cref="Org.Apache.Kafka.Streams.Processor.StreamPartitioner"/></param>
        /// <param name="arg5"><see cref="string"/></param>
        /// <typeparam name="K"></typeparam>
        /// <typeparam name="V"></typeparam>
        /// <typeparam name="Arg4objectSuperK"><typeparamref name="K"/></typeparam>
        /// <typeparam name="Arg4objectSuperV"></typeparam>
        public void AddSink<K, V, Arg4objectSuperK, Arg4objectSuperV>(string arg0, Org.Apache.Kafka.Streams.Processor.TopicNameExtractor<K, V> arg1, Org.Apache.Kafka.Common.Serialization.Serializer<K> arg2, Org.Apache.Kafka.Common.Serialization.Serializer<V> arg3, Org.Apache.Kafka.Streams.Processor.StreamPartitioner<Arg4objectSuperK, Arg4objectSuperV> arg4, params string[] arg5) where Arg4objectSuperK: K
        {
            if (arg5.Length == 0) IExecute("addSink", arg0, arg1, arg2, arg3, arg4); else IExecute("addSink", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.html#addProcessor(java.lang.String,org.apache.kafka.streams.processor.api.ProcessorSupplier,java.lang.String[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Streams.Processor.Api.ProcessorSupplier"/></param>
        /// <param name="arg2"><see cref="string"/></param>
        /// <typeparam name="KIn"></typeparam>
        /// <typeparam name="VIn"></typeparam>
        /// <typeparam name="KOut"></typeparam>
        /// <typeparam name="VOut"></typeparam>
        public void AddProcessor<KIn, VIn, KOut, VOut>(string arg0, Org.Apache.Kafka.Streams.Processor.Api.ProcessorSupplier<KIn, VIn, KOut, VOut> arg1, params string[] arg2)
        {
            if (arg2.Length == 0) IExecute("addProcessor", arg0, arg1); else IExecute("addProcessor", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.html#addProcessor(java.lang.String,org.apache.kafka.streams.processor.api.FixedKeyProcessorSupplier,java.lang.String[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Streams.Processor.Api.FixedKeyProcessorSupplier"/></param>
        /// <param name="arg2"><see cref="string"/></param>
        /// <typeparam name="KIn"></typeparam>
        /// <typeparam name="VIn"></typeparam>
        /// <typeparam name="VOut"></typeparam>
        public void AddProcessor<KIn, VIn, VOut>(string arg0, Org.Apache.Kafka.Streams.Processor.Api.FixedKeyProcessorSupplier<KIn, VIn, VOut> arg1, params string[] arg2)
        {
            if (arg2.Length == 0) IExecute("addProcessor", arg0, arg1); else IExecute("addProcessor", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.html#addGlobalStore(org.apache.kafka.streams.state.StoreBuilder,java.lang.String,org.apache.kafka.streams.processor.TimestampExtractor,org.apache.kafka.common.serialization.Deserializer,org.apache.kafka.common.serialization.Deserializer,java.lang.String,java.lang.String,org.apache.kafka.streams.processor.api.ProcessorSupplier)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Streams.State.StoreBuilder"/></param>
        /// <param name="arg1"><see cref="string"/></param>
        /// <param name="arg2"><see cref="Org.Apache.Kafka.Streams.Processor.TimestampExtractor"/></param>
        /// <param name="arg3"><see cref="Org.Apache.Kafka.Common.Serialization.Deserializer"/></param>
        /// <param name="arg4"><see cref="Org.Apache.Kafka.Common.Serialization.Deserializer"/></param>
        /// <param name="arg5"><see cref="string"/></param>
        /// <param name="arg6"><see cref="string"/></param>
        /// <param name="arg7"><see cref="Org.Apache.Kafka.Streams.Processor.Api.ProcessorSupplier"/></param>
        /// <typeparam name="KIn"></typeparam>
        /// <typeparam name="VIn"></typeparam>
        public void AddGlobalStore<KIn, VIn>(Org.Apache.Kafka.Streams.State.StoreBuilder arg0, string arg1, Org.Apache.Kafka.Streams.Processor.TimestampExtractor arg2, Org.Apache.Kafka.Common.Serialization.Deserializer<KIn> arg3, Org.Apache.Kafka.Common.Serialization.Deserializer<VIn> arg4, string arg5, string arg6, Org.Apache.Kafka.Streams.Processor.Api.ProcessorSupplier<KIn, VIn, Java.Lang.Void, Java.Lang.Void> arg7)
        {
            IExecute("addGlobalStore", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.html#setApplicationId(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Streams.Processor.Internals.InternalTopologyBuilder"/></returns>
        public Org.Apache.Kafka.Streams.Processor.Internals.InternalTopologyBuilder SetApplicationId(string arg0)
        {
            return IExecute<Org.Apache.Kafka.Streams.Processor.Internals.InternalTopologyBuilder>("setApplicationId", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.html#rewriteTopology(org.apache.kafka.streams.StreamsConfig)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Streams.StreamsConfig"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Streams.Processor.Internals.InternalTopologyBuilder"/></returns>
        public Org.Apache.Kafka.Streams.Processor.Internals.InternalTopologyBuilder RewriteTopology(Org.Apache.Kafka.Streams.StreamsConfig arg0)
        {
            return IExecute<Org.Apache.Kafka.Streams.Processor.Internals.InternalTopologyBuilder>("rewriteTopology", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.html#setNamedTopology(org.apache.kafka.streams.processor.internals.namedtopology.NamedTopology)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Streams.Processor.Internals.Namedtopology.NamedTopology"/></param>
        public void SetNamedTopology(Org.Apache.Kafka.Streams.Processor.Internals.Namedtopology.NamedTopology arg0)
        {
            IExecute("setNamedTopology", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.html#setStreamsConfig(org.apache.kafka.streams.StreamsConfig)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Streams.StreamsConfig"/></param>
        public void SetStreamsConfig(Org.Apache.Kafka.Streams.StreamsConfig arg0)
        {
            IExecute("setStreamsConfig", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.html#addInternalTopic(java.lang.String,org.apache.kafka.streams.processor.internals.InternalTopicProperties)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Streams.Processor.Internals.InternalTopicProperties"/></param>
        public void AddInternalTopic(string arg0, Org.Apache.Kafka.Streams.Processor.Internals.InternalTopicProperties arg1)
        {
            IExecute("addInternalTopic", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.html#addSource(org.apache.kafka.streams.Topology.AutoOffsetReset,java.lang.String,org.apache.kafka.streams.processor.TimestampExtractor,org.apache.kafka.common.serialization.Deserializer,org.apache.kafka.common.serialization.Deserializer,java.lang.String[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Streams.Topology.AutoOffsetReset"/></param>
        /// <param name="arg1"><see cref="string"/></param>
        /// <param name="arg2"><see cref="Org.Apache.Kafka.Streams.Processor.TimestampExtractor"/></param>
        /// <param name="arg3"><see cref="Org.Apache.Kafka.Common.Serialization.Deserializer"/></param>
        /// <param name="arg4"><see cref="Org.Apache.Kafka.Common.Serialization.Deserializer"/></param>
        /// <param name="arg5"><see cref="string"/></param>
        /// <typeparam name="Arg3Extendsobject"></typeparam>
        /// <typeparam name="Arg4Extendsobject"></typeparam>
        public void AddSource<Arg3Extendsobject, Arg4Extendsobject>(Org.Apache.Kafka.Streams.Topology.AutoOffsetReset arg0, string arg1, Org.Apache.Kafka.Streams.Processor.TimestampExtractor arg2, Org.Apache.Kafka.Common.Serialization.Deserializer<Arg3Extendsobject> arg3, Org.Apache.Kafka.Common.Serialization.Deserializer<Arg4Extendsobject> arg4, params string[] arg5)
        {
            if (arg5.Length == 0) IExecute("addSource", arg0, arg1, arg2, arg3, arg4); else IExecute("addSource", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.html#addSource(org.apache.kafka.streams.Topology.AutoOffsetReset,java.lang.String,org.apache.kafka.streams.processor.TimestampExtractor,org.apache.kafka.common.serialization.Deserializer,org.apache.kafka.common.serialization.Deserializer,java.util.regex.Pattern)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Streams.Topology.AutoOffsetReset"/></param>
        /// <param name="arg1"><see cref="string"/></param>
        /// <param name="arg2"><see cref="Org.Apache.Kafka.Streams.Processor.TimestampExtractor"/></param>
        /// <param name="arg3"><see cref="Org.Apache.Kafka.Common.Serialization.Deserializer"/></param>
        /// <param name="arg4"><see cref="Org.Apache.Kafka.Common.Serialization.Deserializer"/></param>
        /// <param name="arg5"><see cref="Java.Util.Regex.Pattern"/></param>
        /// <typeparam name="Arg3Extendsobject"></typeparam>
        /// <typeparam name="Arg4Extendsobject"></typeparam>
        public void AddSource<Arg3Extendsobject, Arg4Extendsobject>(Org.Apache.Kafka.Streams.Topology.AutoOffsetReset arg0, string arg1, Org.Apache.Kafka.Streams.Processor.TimestampExtractor arg2, Org.Apache.Kafka.Common.Serialization.Deserializer<Arg3Extendsobject> arg3, Org.Apache.Kafka.Common.Serialization.Deserializer<Arg4Extendsobject> arg4, Java.Util.Regex.Pattern arg5)
        {
            IExecute("addSource", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.html#addStateStore(org.apache.kafka.streams.state.StoreBuilder,boolean,java.lang.String[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Streams.State.StoreBuilder"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        /// <param name="arg2"><see cref="string"/></param>
        public void AddStateStore(Org.Apache.Kafka.Streams.State.StoreBuilder arg0, bool arg1, params string[] arg2)
        {
            if (arg2.Length == 0) IExecute("addStateStore", arg0, arg1); else IExecute("addStateStore", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.html#addStateStore(org.apache.kafka.streams.state.StoreBuilder,java.lang.String[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Streams.State.StoreBuilder"/></param>
        /// <param name="arg1"><see cref="string"/></param>
        public void AddStateStore(Org.Apache.Kafka.Streams.State.StoreBuilder arg0, params string[] arg1)
        {
            if (arg1.Length == 0) IExecute("addStateStore", arg0); else IExecute("addStateStore", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.html#connectProcessorAndStateStores(java.lang.String,java.lang.String[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <param name="arg1"><see cref="string"/></param>
        public void ConnectProcessorAndStateStores(string arg0, params string[] arg1)
        {
            if (arg1.Length == 0) IExecute("connectProcessorAndStateStores", arg0); else IExecute("connectProcessorAndStateStores", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.html#copartitionSources(java.util.Collection)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Collection"/></param>
        public void CopartitionSources(Java.Util.Collection<string> arg0)
        {
            IExecute("copartitionSources", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.html#maybeUpdateCopartitionSourceGroups(java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <param name="arg1"><see cref="string"/></param>
        public void MaybeUpdateCopartitionSourceGroups(string arg0, string arg1)
        {
            IExecute("maybeUpdateCopartitionSourceGroups", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.html#decoratePseudoTopic(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <returns><see cref="string"/></returns>
        public string DecoratePseudoTopic(string arg0)
        {
            return IExecute<string>("decoratePseudoTopic", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.html#getStoreForChangelogTopic(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <returns><see cref="string"/></returns>
        public string GetStoreForChangelogTopic(string arg0)
        {
            return IExecute<string>("getStoreForChangelogTopic", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.html#sourceTopicsForStore(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <returns><see cref="Java.Util.Collection"/></returns>
        public Java.Util.Collection<string> SourceTopicsForStore(string arg0)
        {
            return IExecute<Java.Util.Collection<string>>("sourceTopicsForStore", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.html#offsetResetStrategy(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Clients.Consumer.OffsetResetStrategy"/></returns>
        public Org.Apache.Kafka.Clients.Consumer.OffsetResetStrategy OffsetResetStrategy(string arg0)
        {
            return IExecute<Org.Apache.Kafka.Clients.Consumer.OffsetResetStrategy>("offsetResetStrategy", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.html#buildSubtopology(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Streams.Processor.Internals.ProcessorTopology"/></returns>
        public Org.Apache.Kafka.Streams.Processor.Internals.ProcessorTopology BuildSubtopology(int arg0)
        {
            return IExecute<Org.Apache.Kafka.Streams.Processor.Internals.ProcessorTopology>("buildSubtopology", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.html#connectSourceStoreAndTopic(java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <param name="arg1"><see cref="string"/></param>
        public void ConnectSourceStoreAndTopic(string arg0, string arg1)
        {
            IExecute("connectSourceStoreAndTopic", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.html#validateCopartition()"/>
        /// </summary>
        public void ValidateCopartition()
        {
            IExecute("validateCopartition");
        }

        #endregion

        #region Nested classes
        #region AbstractNode
        public partial class AbstractNode
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.AbstractNode.html#name()"/> 
            /// </summary>
            public string Name
            {
                get { return IExecute<string>("name"); }
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.AbstractNode.html#predecessors()"/> 
            /// </summary>
            public Java.Util.Set<Org.Apache.Kafka.Streams.TopologyDescription.Node> Predecessors
            {
                get { return IExecute<Java.Util.Set<Org.Apache.Kafka.Streams.TopologyDescription.Node>>("predecessors"); }
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.AbstractNode.html#successors()"/> 
            /// </summary>
            public Java.Util.Set<Org.Apache.Kafka.Streams.TopologyDescription.Node> Successors
            {
                get { return IExecute<Java.Util.Set<Org.Apache.Kafka.Streams.TopologyDescription.Node>>("successors"); }
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.AbstractNode.html#addPredecessor(org.apache.kafka.streams.TopologyDescription.Node)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Org.Apache.Kafka.Streams.TopologyDescription.Node"/></param>
            public void AddPredecessor(Org.Apache.Kafka.Streams.TopologyDescription.Node arg0)
            {
                IExecute("addPredecessor", arg0);
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.AbstractNode.html#addSuccessor(org.apache.kafka.streams.TopologyDescription.Node)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Org.Apache.Kafka.Streams.TopologyDescription.Node"/></param>
            public void AddSuccessor(Org.Apache.Kafka.Streams.TopologyDescription.Node arg0)
            {
                IExecute("addSuccessor", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region GlobalStore
        public partial class GlobalStore
        {
            #region Constructors
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.GlobalStore.html#%3Cinit%3E(java.lang.String,java.lang.String,java.lang.String,java.lang.String,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="string"/></param>
            /// <param name="arg1"><see cref="string"/></param>
            /// <param name="arg2"><see cref="string"/></param>
            /// <param name="arg3"><see cref="string"/></param>
            /// <param name="arg4"><see cref="int"/></param>
            public GlobalStore(string arg0, string arg1, string arg2, string arg3, int arg4)
                : base(arg0, arg1, arg2, arg3, arg4)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.GlobalStore.html#id()"/> 
            /// </summary>
            public int Id
            {
                get { return IExecute<int>("id"); }
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.GlobalStore.html#processor()"/>
            /// </summary>

            /// <returns><see cref="Org.Apache.Kafka.Streams.TopologyDescription.Processor"/></returns>
            public Org.Apache.Kafka.Streams.TopologyDescription.Processor ProcessorMethod()
            {
                return IExecute<Org.Apache.Kafka.Streams.TopologyDescription.Processor>("processor");
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.GlobalStore.html#source()"/>
            /// </summary>

            /// <returns><see cref="Org.Apache.Kafka.Streams.TopologyDescription.Source"/></returns>
            public Org.Apache.Kafka.Streams.TopologyDescription.Source SourceMethod()
            {
                return IExecute<Org.Apache.Kafka.Streams.TopologyDescription.Source>("source");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region Processor
        public partial class Processor
        {
            #region Constructors
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.Processor.html#%3Cinit%3E(java.lang.String,java.util.Set)"/>
            /// </summary>
            /// <param name="arg0"><see cref="string"/></param>
            /// <param name="arg1"><see cref="Java.Util.Set"/></param>
            public Processor(string arg0, Java.Util.Set arg1)
                : base(arg0, arg1)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.Processor.html#stores()"/> 
            /// </summary>
            public Java.Util.Set<string> Stores
            {
                get { return IExecute<Java.Util.Set<string>>("stores"); }
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region Sink
        public partial class Sink
        {
            #region Constructors
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.Sink.html#%3Cinit%3E(java.lang.String,java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="string"/></param>
            /// <param name="arg1"><see cref="string"/></param>
            public Sink(string arg0, string arg1)
                : base(arg0, arg1)
            {
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.Sink.html#%3Cinit%3E(java.lang.String,org.apache.kafka.streams.processor.TopicNameExtractor)"/>
            /// </summary>
            /// <param name="arg0"><see cref="string"/></param>
            /// <param name="arg1"><see cref="Org.Apache.Kafka.Streams.Processor.TopicNameExtractor"/></param>
            public Sink(string arg0, Org.Apache.Kafka.Streams.Processor.TopicNameExtractor arg1)
                : base(arg0, arg1)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.Sink.html#topic()"/> 
            /// </summary>
            public string Topic
            {
                get { return IExecute<string>("topic"); }
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.Sink.html#topicNameExtractor()"/> 
            /// </summary>
            public Org.Apache.Kafka.Streams.Processor.TopicNameExtractor TopicNameExtractor
            {
                get { return IExecute<Org.Apache.Kafka.Streams.Processor.TopicNameExtractor>("topicNameExtractor"); }
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region Sink<K, V>
        public partial class Sink<K, V>
        {
            #region Constructors
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.Sink.html#%3Cinit%3E(java.lang.String,java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="string"/></param>
            /// <param name="arg1"><see cref="string"/></param>
            public Sink(string arg0, string arg1)
                : base(arg0, arg1)
            {
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.Sink.html#%3Cinit%3E(java.lang.String,org.apache.kafka.streams.processor.TopicNameExtractor)"/>
            /// </summary>
            /// <param name="arg0"><see cref="string"/></param>
            /// <param name="arg1"><see cref="Org.Apache.Kafka.Streams.Processor.TopicNameExtractor"/></param>
            public Sink(string arg0, Org.Apache.Kafka.Streams.Processor.TopicNameExtractor<K, V> arg1)
                : base(arg0, arg1)
            {
            }

            #endregion

            #region Class/Interface conversion operators
            /// <summary>
            /// Converter from <see cref="Org.Apache.Kafka.Streams.Processor.Internals.InternalTopologyBuilder.Sink{K, V}"/> to <see cref="Org.Apache.Kafka.Streams.Processor.Internals.InternalTopologyBuilder.Sink"/>
            /// </summary>
            public static implicit operator Org.Apache.Kafka.Streams.Processor.Internals.InternalTopologyBuilder.Sink(Org.Apache.Kafka.Streams.Processor.Internals.InternalTopologyBuilder.Sink<K, V> t) => t.Cast<Org.Apache.Kafka.Streams.Processor.Internals.InternalTopologyBuilder.Sink>();

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.Sink.html#topic()"/> 
            /// </summary>
            public string Topic
            {
                get { return IExecute<string>("topic"); }
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.Sink.html#topicNameExtractor()"/> 
            /// </summary>
            public Org.Apache.Kafka.Streams.Processor.TopicNameExtractor<K, V> TopicNameExtractor
            {
                get { return IExecute<Org.Apache.Kafka.Streams.Processor.TopicNameExtractor<K, V>>("topicNameExtractor"); }
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region Source
        public partial class Source
        {
            #region Constructors
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.Source.html#%3Cinit%3E(java.lang.String,java.util.Set,java.util.regex.Pattern)"/>
            /// </summary>
            /// <param name="arg0"><see cref="string"/></param>
            /// <param name="arg1"><see cref="Java.Util.Set"/></param>
            /// <param name="arg2"><see cref="Java.Util.Regex.Pattern"/></param>
            public Source(string arg0, Java.Util.Set arg1, Java.Util.Regex.Pattern arg2)
                : base(arg0, arg1, arg2)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.Source.html#topicPattern()"/> 
            /// </summary>
            public Java.Util.Regex.Pattern TopicPattern
            {
                get { return IExecute<Java.Util.Regex.Pattern>("topicPattern"); }
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.Source.html#topicSet()"/> 
            /// </summary>
            public Java.Util.Set<string> TopicSet
            {
                get { return IExecute<Java.Util.Set<string>>("topicSet"); }
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region StateStoreFactory
        public partial class StateStoreFactory
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.StateStoreFactory.html#build()"/> 
            /// </summary>
            public Org.Apache.Kafka.Streams.Processor.StateStore Build
            {
                get { return IExecute<Org.Apache.Kafka.Streams.Processor.StateStore>("build"); }
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.StateStoreFactory.html#loggingEnabled()"/> 
            /// </summary>
            public bool LoggingEnabled
            {
                get { return IExecute<bool>("loggingEnabled"); }
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region StateStoreFactory<S>
        public partial class StateStoreFactory<S>
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators
            /// <summary>
            /// Converter from <see cref="Org.Apache.Kafka.Streams.Processor.Internals.InternalTopologyBuilder.StateStoreFactory{S}"/> to <see cref="Org.Apache.Kafka.Streams.Processor.Internals.InternalTopologyBuilder.StateStoreFactory"/>
            /// </summary>
            public static implicit operator Org.Apache.Kafka.Streams.Processor.Internals.InternalTopologyBuilder.StateStoreFactory(Org.Apache.Kafka.Streams.Processor.Internals.InternalTopologyBuilder.StateStoreFactory<S> t) => t.Cast<Org.Apache.Kafka.Streams.Processor.Internals.InternalTopologyBuilder.StateStoreFactory>();

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.StateStoreFactory.html#build()"/> 
            /// </summary>
            public S Build
            {
                get { return IExecute<S>("build"); }
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.StateStoreFactory.html#loggingEnabled()"/> 
            /// </summary>
            public bool LoggingEnabled
            {
                get { return IExecute<bool>("loggingEnabled"); }
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region SubtopologyDescription
        public partial class SubtopologyDescription
        {
            #region Constructors
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.SubtopologyDescription.html#%3Cinit%3E(int,java.util.Set)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="Java.Util.Set"/></param>
            public SubtopologyDescription(int arg0, Java.Util.Set arg1)
                : base(arg0, arg1)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.SubtopologyDescription.html#id()"/> 
            /// </summary>
            public int Id
            {
                get { return IExecute<int>("id"); }
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.SubtopologyDescription.html#nodes()"/> 
            /// </summary>
            public Java.Util.Set<Org.Apache.Kafka.Streams.TopologyDescription.Node> Nodes
            {
                get { return IExecute<Java.Util.Set<Org.Apache.Kafka.Streams.TopologyDescription.Node>>("nodes"); }
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region TopicsInfo
        public partial class TopicsInfo
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.TopicsInfo.html#repartitionSourceTopics"/>
            /// </summary>
            public Java.Util.Map repartitionSourceTopics { get { return IGetField<Java.Util.Map>("repartitionSourceTopics"); } }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.TopicsInfo.html#stateChangelogTopics"/>
            /// </summary>
            public Java.Util.Map stateChangelogTopics { get { return IGetField<Java.Util.Map>("stateChangelogTopics"); } }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.TopicsInfo.html#sinkTopics"/>
            /// </summary>
            public Java.Util.Set sinkTopics { get { return IGetField<Java.Util.Set>("sinkTopics"); } }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.TopicsInfo.html#sourceTopics"/>
            /// </summary>
            public Java.Util.Set sourceTopics { get { return IGetField<Java.Util.Set>("sourceTopics"); } }

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.TopicsInfo.html#nonSourceChangelogTopics()"/> 
            /// </summary>
            public Java.Util.Set<Org.Apache.Kafka.Streams.Processor.Internals.InternalTopicConfig> NonSourceChangelogTopics
            {
                get { return IExecute<Java.Util.Set<Org.Apache.Kafka.Streams.Processor.Internals.InternalTopicConfig>>("nonSourceChangelogTopics"); }
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.TopicsInfo.html#sourceTopicChangelogs()"/> 
            /// </summary>
            public Java.Util.Set<string> SourceTopicChangelogs
            {
                get { return IExecute<Java.Util.Set<string>>("sourceTopicChangelogs"); }
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region TopologyDescription
        public partial class TopologyDescription
        {
            #region Constructors
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.TopologyDescription.html#%3Cinit%3E(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="string"/></param>
            public TopologyDescription(string arg0)
                : base(arg0)
            {
            }

            #endregion

            #region Class/Interface conversion operators
            /// <summary>
            /// Converter from <see cref="Org.Apache.Kafka.Streams.Processor.Internals.InternalTopologyBuilder.TopologyDescription"/> to <see cref="Org.Apache.Kafka.Streams.TopologyDescription"/>
            /// </summary>
            public static implicit operator Org.Apache.Kafka.Streams.TopologyDescription(Org.Apache.Kafka.Streams.Processor.Internals.InternalTopologyBuilder.TopologyDescription t) => t.Cast<Org.Apache.Kafka.Streams.TopologyDescription>();

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.TopologyDescription.html#globalStores()"/> 
            /// </summary>
            public Java.Util.Set<Org.Apache.Kafka.Streams.TopologyDescription.GlobalStore> GlobalStores
            {
                get { return IExecute<Java.Util.Set<Org.Apache.Kafka.Streams.TopologyDescription.GlobalStore>>("globalStores"); }
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.TopologyDescription.html#subtopologies()"/> 
            /// </summary>
            public Java.Util.Set<Org.Apache.Kafka.Streams.TopologyDescription.Subtopology> Subtopologies
            {
                get { return IExecute<Java.Util.Set<Org.Apache.Kafka.Streams.TopologyDescription.Subtopology>>("subtopologies"); }
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.TopologyDescription.html#addGlobalStore(org.apache.kafka.streams.TopologyDescription.GlobalStore)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Org.Apache.Kafka.Streams.TopologyDescription.GlobalStore"/></param>
            public void AddGlobalStore(Org.Apache.Kafka.Streams.TopologyDescription.GlobalStore arg0)
            {
                IExecute("addGlobalStore", arg0);
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/InternalTopologyBuilder.TopologyDescription.html#addSubtopology(org.apache.kafka.streams.TopologyDescription.Subtopology)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Org.Apache.Kafka.Streams.TopologyDescription.Subtopology"/></param>
            public void AddSubtopology(Org.Apache.Kafka.Streams.TopologyDescription.Subtopology arg0)
            {
                IExecute("addSubtopology", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}