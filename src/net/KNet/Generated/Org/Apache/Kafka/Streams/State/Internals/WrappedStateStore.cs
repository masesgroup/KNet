/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka-streams-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Streams.State.Internals
{
    #region WrappedStateStore
    public partial class WrappedStateStore
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/WrappedStateStore.html#%3Cinit%3E(org.apache.kafka.streams.processor.StateStore)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Streams.Processor.StateStore"/></param>
        public WrappedStateStore(Org.Apache.Kafka.Streams.Processor.StateStore arg0)
            : base(arg0)
        {
        }

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Org.Apache.Kafka.Streams.State.Internals.WrappedStateStore"/> to <see cref="Org.Apache.Kafka.Streams.Processor.StateStore"/>
        /// </summary>
        public static implicit operator Org.Apache.Kafka.Streams.Processor.StateStore(Org.Apache.Kafka.Streams.State.Internals.WrappedStateStore t) => t.Cast<Org.Apache.Kafka.Streams.Processor.StateStore>();
        /// <summary>
        /// Converter from <see cref="Org.Apache.Kafka.Streams.State.Internals.WrappedStateStore"/> to <see cref="Org.Apache.Kafka.Streams.State.Internals.CachedStateStore"/>
        /// </summary>
        public static implicit operator Org.Apache.Kafka.Streams.State.Internals.CachedStateStore(Org.Apache.Kafka.Streams.State.Internals.WrappedStateStore t) => t.Cast<Org.Apache.Kafka.Streams.State.Internals.CachedStateStore>();

        #endregion

        #region Fields

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/WrappedStateStore.html#isTimestamped(org.apache.kafka.streams.processor.StateStore)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Streams.Processor.StateStore"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool IsTimestamped(Org.Apache.Kafka.Streams.Processor.StateStore arg0)
        {
            return SExecute<bool>(LocalBridgeClazz, "isTimestamped", arg0);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/WrappedStateStore.html#isOpen()"/> 
        /// </summary>
        public bool IsOpen
        {
            get { return IExecute<bool>("isOpen"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/WrappedStateStore.html#name()"/> 
        /// </summary>
        public string Name
        {
            get { return IExecute<string>("name"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/WrappedStateStore.html#persistent()"/> 
        /// </summary>
        public bool Persistent
        {
            get { return IExecute<bool>("persistent"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/WrappedStateStore.html#getPosition()"/> 
        /// </summary>
        public Org.Apache.Kafka.Streams.Query.Position Position
        {
            get { return IExecute<Org.Apache.Kafka.Streams.Query.Position>("getPosition"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/WrappedStateStore.html#wrapped()"/> 
        /// </summary>
        public Org.Apache.Kafka.Streams.Processor.StateStore Wrapped
        {
            get { return IExecute<Org.Apache.Kafka.Streams.Processor.StateStore>("wrapped"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/WrappedStateStore.html#query(org.apache.kafka.streams.query.Query,org.apache.kafka.streams.query.PositionBound,org.apache.kafka.streams.query.QueryConfig)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Streams.Query.Query"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Streams.Query.PositionBound"/></param>
        /// <param name="arg2"><see cref="Org.Apache.Kafka.Streams.Query.QueryConfig"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Streams.Query.QueryResult"/></returns>
        public Org.Apache.Kafka.Streams.Query.QueryResult Query(Org.Apache.Kafka.Streams.Query.Query arg0, Org.Apache.Kafka.Streams.Query.PositionBound arg1, Org.Apache.Kafka.Streams.Query.QueryConfig arg2)
        {
            return IExecute<Org.Apache.Kafka.Streams.Query.QueryResult>("query", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/WrappedStateStore.html#setFlushListener(org.apache.kafka.streams.state.internals.CacheFlushListener,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Streams.State.Internals.CacheFlushListener"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool SetFlushListener(Org.Apache.Kafka.Streams.State.Internals.CacheFlushListener arg0, bool arg1)
        {
            return IExecute<bool>("setFlushListener", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/WrappedStateStore.html#close()"/>
        /// </summary>
        public void Close()
        {
            IExecute("close");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/WrappedStateStore.html#flush()"/>
        /// </summary>
        public void Flush()
        {
            IExecute("flush");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/WrappedStateStore.html#flushCache()"/>
        /// </summary>
        public void FlushCache()
        {
            IExecute("flushCache");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/WrappedStateStore.html#init(org.apache.kafka.streams.processor.StateStoreContext,org.apache.kafka.streams.processor.StateStore)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Streams.Processor.StateStoreContext"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Streams.Processor.StateStore"/></param>
        public void Init(Org.Apache.Kafka.Streams.Processor.StateStoreContext arg0, Org.Apache.Kafka.Streams.Processor.StateStore arg1)
        {
            IExecute("init", arg0, arg1);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion

    #region WrappedStateStore<S, K, V>
    public partial class WrappedStateStore<S, K, V>
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/WrappedStateStore.html#%3Cinit%3E(org.apache.kafka.streams.processor.StateStore)"/>
        /// </summary>
        /// <param name="arg0"><typeparamref name="S"/></param>
        public WrappedStateStore(S arg0)
            : base(arg0)
        {
        }

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Org.Apache.Kafka.Streams.State.Internals.WrappedStateStore{S, K, V}"/> to <see cref="Org.Apache.Kafka.Streams.Processor.StateStore"/>
        /// </summary>
        public static implicit operator Org.Apache.Kafka.Streams.Processor.StateStore(Org.Apache.Kafka.Streams.State.Internals.WrappedStateStore<S, K, V> t) => t.Cast<Org.Apache.Kafka.Streams.Processor.StateStore>();
        /// <summary>
        /// Converter from <see cref="Org.Apache.Kafka.Streams.State.Internals.WrappedStateStore{S, K, V}"/> to <see cref="Org.Apache.Kafka.Streams.State.Internals.CachedStateStore{K, V}"/>
        /// </summary>
        public static implicit operator Org.Apache.Kafka.Streams.State.Internals.CachedStateStore<K, V>(Org.Apache.Kafka.Streams.State.Internals.WrappedStateStore<S, K, V> t) => t.Cast<Org.Apache.Kafka.Streams.State.Internals.CachedStateStore<K, V>>();
        /// <summary>
        /// Converter from <see cref="Org.Apache.Kafka.Streams.State.Internals.WrappedStateStore{S, K, V}"/> to <see cref="Org.Apache.Kafka.Streams.State.Internals.WrappedStateStore"/>
        /// </summary>
        public static implicit operator Org.Apache.Kafka.Streams.State.Internals.WrappedStateStore(Org.Apache.Kafka.Streams.State.Internals.WrappedStateStore<S, K, V> t) => t.Cast<Org.Apache.Kafka.Streams.State.Internals.WrappedStateStore>();

        #endregion

        #region Fields

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/WrappedStateStore.html#isTimestamped(org.apache.kafka.streams.processor.StateStore)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Streams.Processor.StateStore"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool IsTimestamped(Org.Apache.Kafka.Streams.Processor.StateStore arg0)
        {
            return SExecute<bool>(LocalBridgeClazz, "isTimestamped", arg0);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/WrappedStateStore.html#isOpen()"/> 
        /// </summary>
        public bool IsOpen
        {
            get { return IExecute<bool>("isOpen"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/WrappedStateStore.html#name()"/> 
        /// </summary>
        public string Name
        {
            get { return IExecute<string>("name"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/WrappedStateStore.html#persistent()"/> 
        /// </summary>
        public bool Persistent
        {
            get { return IExecute<bool>("persistent"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/WrappedStateStore.html#getPosition()"/> 
        /// </summary>
        public Org.Apache.Kafka.Streams.Query.Position Position
        {
            get { return IExecute<Org.Apache.Kafka.Streams.Query.Position>("getPosition"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/WrappedStateStore.html#wrapped()"/> 
        /// </summary>
        public S Wrapped
        {
            get { return IExecute<S>("wrapped"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/WrappedStateStore.html#query(org.apache.kafka.streams.query.Query,org.apache.kafka.streams.query.PositionBound,org.apache.kafka.streams.query.QueryConfig)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Streams.Query.Query"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Streams.Query.PositionBound"/></param>
        /// <param name="arg2"><see cref="Org.Apache.Kafka.Streams.Query.QueryConfig"/></param>
        /// <typeparam name="R"></typeparam>
        /// <returns><see cref="Org.Apache.Kafka.Streams.Query.QueryResult"/></returns>
        public Org.Apache.Kafka.Streams.Query.QueryResult<R> Query<R>(Org.Apache.Kafka.Streams.Query.Query<R> arg0, Org.Apache.Kafka.Streams.Query.PositionBound arg1, Org.Apache.Kafka.Streams.Query.QueryConfig arg2)
        {
            return IExecute<Org.Apache.Kafka.Streams.Query.QueryResult<R>>("query", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/WrappedStateStore.html#setFlushListener(org.apache.kafka.streams.state.internals.CacheFlushListener,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Streams.State.Internals.CacheFlushListener"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool SetFlushListener(Org.Apache.Kafka.Streams.State.Internals.CacheFlushListener<K, V> arg0, bool arg1)
        {
            return IExecute<bool>("setFlushListener", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/WrappedStateStore.html#close()"/>
        /// </summary>
        public void Close()
        {
            IExecute("close");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/WrappedStateStore.html#flush()"/>
        /// </summary>
        public void Flush()
        {
            IExecute("flush");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/WrappedStateStore.html#flushCache()"/>
        /// </summary>
        public void FlushCache()
        {
            IExecute("flushCache");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/WrappedStateStore.html#init(org.apache.kafka.streams.processor.StateStoreContext,org.apache.kafka.streams.processor.StateStore)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Streams.Processor.StateStoreContext"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Streams.Processor.StateStore"/></param>
        public void Init(Org.Apache.Kafka.Streams.Processor.StateStoreContext arg0, Org.Apache.Kafka.Streams.Processor.StateStore arg1)
        {
            IExecute("init", arg0, arg1);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}