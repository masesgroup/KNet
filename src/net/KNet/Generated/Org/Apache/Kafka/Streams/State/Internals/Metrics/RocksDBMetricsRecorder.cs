/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka-streams-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Streams.State.Internals.Metrics
{
    #region RocksDBMetricsRecorder
    public partial class RocksDBMetricsRecorder
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/metrics/RocksDBMetricsRecorder.html#%3Cinit%3E(java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <param name="arg1"><see cref="string"/></param>
        public RocksDBMetricsRecorder(string arg0, string arg1)
            : base(arg0, arg1)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/metrics/RocksDBMetricsRecorder.html#storeName()"/> 
        /// </summary>
        public string StoreName
        {
            get { return IExecute<string>("storeName"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/metrics/RocksDBMetricsRecorder.html#taskId()"/> 
        /// </summary>
        public Org.Apache.Kafka.Streams.Processor.TaskId TaskId
        {
            get { return IExecute<Org.Apache.Kafka.Streams.Processor.TaskId>("taskId"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/metrics/RocksDBMetricsRecorder.html#addValueProviders(java.lang.String,org.rocksdb.RocksDB,org.rocksdb.Cache,org.rocksdb.Statistics)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <param name="arg1"><see cref="Org.Rocksdb.RocksDB"/></param>
        /// <param name="arg2"><see cref="Org.Rocksdb.Cache"/></param>
        /// <param name="arg3"><see cref="Org.Rocksdb.Statistics"/></param>
        public void AddValueProviders(string arg0, Org.Rocksdb.RocksDB arg1, Org.Rocksdb.Cache arg2, Org.Rocksdb.Statistics arg3)
        {
            IExecute("addValueProviders", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/metrics/RocksDBMetricsRecorder.html#init(org.apache.kafka.streams.processor.internals.metrics.StreamsMetricsImpl,org.apache.kafka.streams.processor.TaskId)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Streams.Processor.Internals.Metrics.StreamsMetricsImpl"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Streams.Processor.TaskId"/></param>
        public void Init(Org.Apache.Kafka.Streams.Processor.Internals.Metrics.StreamsMetricsImpl arg0, Org.Apache.Kafka.Streams.Processor.TaskId arg1)
        {
            IExecute("init", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/metrics/RocksDBMetricsRecorder.html#record(long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        public void Record(long arg0)
        {
            IExecute("record", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/metrics/RocksDBMetricsRecorder.html#removeValueProviders(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        public void RemoveValueProviders(string arg0)
        {
            IExecute("removeValueProviders", arg0);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}