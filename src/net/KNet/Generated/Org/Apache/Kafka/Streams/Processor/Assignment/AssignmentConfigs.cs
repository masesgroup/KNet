/*
*  Copyright (c) 2021-2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.6.3.0)
*  using kafka-streams-4.0.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Streams.Processor.Assignment
{
    #region AssignmentConfigs declaration
    /// <summary>
    /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/4.0.0/org/apache/kafka/streams/processor/assignment/AssignmentConfigs.html"/>
    /// </summary>
    public partial class AssignmentConfigs : MASES.JCOBridge.C2JBridge.JVMBridgeBase<AssignmentConfigs>
    {
        const string _bridgeClassName = "org.apache.kafka.streams.processor.assignment.AssignmentConfigs";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public AssignmentConfigs() { }
        /// <summary>
        /// Internal constructor: used internally from JCOBridge
        /// </summary>
        [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public AssignmentConfigs(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public AssignmentConfigs(params object[] args) : base(args) { }

        private static readonly global::System.Exception _LocalBridgeClazzException = null;
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <inheritdoc/>
        public override string BridgeClassName => _bridgeClassName;
        /// <inheritdoc/>
        public override bool IsBridgeAbstract => false;
        /// <inheritdoc/>
        public override bool IsBridgeCloseable => false;
        /// <inheritdoc/>
        public override bool IsBridgeInterface => false;
        /// <inheritdoc/>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class

    }
    #endregion

    #region AssignmentConfigs implementation
    public partial class AssignmentConfigs
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/4.0.0/org/apache/kafka/streams/processor/assignment/AssignmentConfigs.html#%3Cinit%3E(java.lang.Long,java.lang.Integer,java.lang.Integer,java.lang.Long,java.util.List)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.Long"/></param>
        /// <param name="arg1"><see cref="Java.Lang.Integer"/></param>
        /// <param name="arg2"><see cref="Java.Lang.Integer"/></param>
        /// <param name="arg3"><see cref="Java.Lang.Long"/></param>
        /// <param name="arg4"><see cref="Java.Util.List"/></param>
        public AssignmentConfigs(Java.Lang.Long arg0, Java.Lang.Integer arg1, Java.Lang.Integer arg2, Java.Lang.Long arg3, Java.Util.List<Java.Lang.String> arg4)
            : base(arg0, arg1, arg2, arg3, arg4)
        {
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/4.0.0/org/apache/kafka/streams/processor/assignment/AssignmentConfigs.html#%3Cinit%3E(long,int,int,long,java.util.List,int,int,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="long"/></param>
        /// <param name="arg4"><see cref="Java.Util.List"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        /// <param name="arg6"><see cref="int"/></param>
        /// <param name="arg7"><see cref="Java.Lang.String"/></param>
        public AssignmentConfigs(long arg0, int arg1, int arg2, long arg3, Java.Util.List<Java.Lang.String> arg4, int arg5, int arg6, Java.Lang.String arg7)
            : base(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
        {
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/4.0.0/org/apache/kafka/streams/processor/assignment/AssignmentConfigs.html#%3Cinit%3E(long,int,int,long,java.util.List,java.util.OptionalInt,java.util.OptionalInt,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="long"/></param>
        /// <param name="arg4"><see cref="Java.Util.List"/></param>
        /// <param name="arg5"><see cref="Java.Util.OptionalInt"/></param>
        /// <param name="arg6"><see cref="Java.Util.OptionalInt"/></param>
        /// <param name="arg7"><see cref="Java.Lang.String"/></param>
        public AssignmentConfigs(long arg0, int arg1, int arg2, long arg3, Java.Util.List<Java.Lang.String> arg4, Java.Util.OptionalInt arg5, Java.Util.OptionalInt arg6, Java.Lang.String arg7)
            : base(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/4.0.0/org/apache/kafka/streams/processor/assignment/AssignmentConfigs.html#of(org.apache.kafka.streams.StreamsConfig)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Streams.StreamsConfig"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Streams.Processor.Assignment.AssignmentConfigs"/></returns>
        public static Org.Apache.Kafka.Streams.Processor.Assignment.AssignmentConfigs Of(Org.Apache.Kafka.Streams.StreamsConfig arg0)
        {
            return SExecuteWithSignature<Org.Apache.Kafka.Streams.Processor.Assignment.AssignmentConfigs>(LocalBridgeClazz, "of", "(Lorg/apache/kafka/streams/StreamsConfig;)Lorg/apache/kafka/streams/processor/assignment/AssignmentConfigs;", arg0);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/4.0.0/org/apache/kafka/streams/processor/assignment/AssignmentConfigs.html#maxWarmupReplicas()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int MaxWarmupReplicas()
        {
            return IExecuteWithSignature<int>("maxWarmupReplicas", "()I");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/4.0.0/org/apache/kafka/streams/processor/assignment/AssignmentConfigs.html#numStandbyReplicas()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int NumStandbyReplicas()
        {
            return IExecuteWithSignature<int>("numStandbyReplicas", "()I");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/4.0.0/org/apache/kafka/streams/processor/assignment/AssignmentConfigs.html#rackAwareAssignmentStrategy()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String RackAwareAssignmentStrategy()
        {
            return IExecuteWithSignature<Java.Lang.String>("rackAwareAssignmentStrategy", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/4.0.0/org/apache/kafka/streams/processor/assignment/AssignmentConfigs.html#rackAwareAssignmentTags()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Java.Lang.String> RackAwareAssignmentTags()
        {
            return IExecuteWithSignature<Java.Util.List<Java.Lang.String>>("rackAwareAssignmentTags", "()Ljava/util/List;");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/4.0.0/org/apache/kafka/streams/processor/assignment/AssignmentConfigs.html#rackAwareNonOverlapCost()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.OptionalInt"/></returns>
        public Java.Util.OptionalInt RackAwareNonOverlapCost()
        {
            return IExecuteWithSignature<Java.Util.OptionalInt>("rackAwareNonOverlapCost", "()Ljava/util/OptionalInt;");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/4.0.0/org/apache/kafka/streams/processor/assignment/AssignmentConfigs.html#rackAwareTrafficCost()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.OptionalInt"/></returns>
        public Java.Util.OptionalInt RackAwareTrafficCost()
        {
            return IExecuteWithSignature<Java.Util.OptionalInt>("rackAwareTrafficCost", "()Ljava/util/OptionalInt;");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/4.0.0/org/apache/kafka/streams/processor/assignment/AssignmentConfigs.html#acceptableRecoveryLag()"/>
        /// </summary>
        /// <returns><see cref="long"/></returns>
        public long AcceptableRecoveryLag()
        {
            return IExecuteWithSignature<long>("acceptableRecoveryLag", "()J");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams/4.0.0/org/apache/kafka/streams/processor/assignment/AssignmentConfigs.html#probingRebalanceIntervalMs()"/>
        /// </summary>
        /// <returns><see cref="long"/></returns>
        public long ProbingRebalanceIntervalMs()
        {
            return IExecuteWithSignature<long>("probingRebalanceIntervalMs", "()J");
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}