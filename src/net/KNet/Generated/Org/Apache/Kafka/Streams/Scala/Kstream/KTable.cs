/*
*  Copyright (c) 2021-2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.6.4.0)
*  using kafka-streams-scala_2.13-4.0.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Streams.Scala.Kstream
{
    #region KTable declaration
    /// <summary>
    /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/kstream/KTable.html"/>
    /// </summary>
    public partial class KTable : MASES.JCOBridge.C2JBridge.JVMBridgeBase<KTable>
    {
        const string _bridgeClassName = "org.apache.kafka.streams.scala.kstream.KTable";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public KTable() { }
        /// <summary>
        /// Internal constructor: used internally from JCOBridge
        /// </summary>
        [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public KTable(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public KTable(params object[] args) : base(args) { }

        private static readonly global::System.Exception _LocalBridgeClazzException = null;
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <inheritdoc/>
        public override string BridgeClassName => _bridgeClassName;
        /// <inheritdoc/>
        public override bool IsBridgeAbstract => false;
        /// <inheritdoc/>
        public override bool IsBridgeCloseable => false;
        /// <inheritdoc/>
        public override bool IsBridgeInterface => false;
        /// <inheritdoc/>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class

    }
    #endregion

    #region KTable<K, V> declaration
    /// <summary>
    /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/kstream/KTable.html"/>
    /// </summary>
    /// <typeparam name="K"></typeparam>
    /// <typeparam name="V"></typeparam>
    public partial class KTable<K, V> : MASES.JCOBridge.C2JBridge.JVMBridgeBase<KTable<K, V>>
    {
        const string _bridgeClassName = "org.apache.kafka.streams.scala.kstream.KTable";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public KTable() { }
        /// <summary>
        /// Internal constructor: used internally from JCOBridge
        /// </summary>
        [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public KTable(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public KTable(params object[] args) : base(args) { }

        private static readonly global::System.Exception _LocalBridgeClazzException = null;
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <inheritdoc/>
        public override string BridgeClassName => _bridgeClassName;
        /// <inheritdoc/>
        public override bool IsBridgeAbstract => false;
        /// <inheritdoc/>
        public override bool IsBridgeCloseable => false;
        /// <inheritdoc/>
        public override bool IsBridgeInterface => false;
        /// <inheritdoc/>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class
    
    }
    #endregion

    #region KTable implementation
    public partial class KTable
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/kstream/KTable.html#%3Cinit%3E(org.apache.kafka.streams.kstream.KTable)"/>
        /// </summary>
        /// <param name="inner"><see cref="Org.Apache.Kafka.Streams.Kstream.KTable"/></param>
        public KTable(Org.Apache.Kafka.Streams.Kstream.KTable inner)
            : base(inner)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/kstream/KTable.html#queryableStoreName()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String QueryableStoreName()
        {
            return IExecuteWithSignature<Java.Lang.String>("queryableStoreName", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/kstream/KTable.html#inner()"/>
        /// </summary>
        /// <returns><see cref="Org.Apache.Kafka.Streams.Kstream.KTable"/></returns>
        public Org.Apache.Kafka.Streams.Kstream.KTable Inner()
        {
            return IExecuteWithSignature<Org.Apache.Kafka.Streams.Kstream.KTable>("inner", "()Lorg/apache/kafka/streams/kstream/KTable;");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/kstream/KTable.html#toStream()"/>
        /// </summary>
        /// <returns><see cref="Org.Apache.Kafka.Streams.Scala.Kstream.KStream"/></returns>
        public Org.Apache.Kafka.Streams.Scala.Kstream.KStream ToStream()
        {
            return IExecuteWithSignature<Org.Apache.Kafka.Streams.Scala.Kstream.KStream>("toStream", "()Lorg/apache/kafka/streams/scala/kstream/KStream;");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/kstream/KTable.html#toStream(org.apache.kafka.streams.kstream.Named)"/>
        /// </summary>
        /// <param name="named"><see cref="Org.Apache.Kafka.Streams.Kstream.Named"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Streams.Scala.Kstream.KStream"/></returns>
        public Org.Apache.Kafka.Streams.Scala.Kstream.KStream ToStream(Org.Apache.Kafka.Streams.Kstream.Named named)
        {
            return IExecuteWithSignature<Org.Apache.Kafka.Streams.Scala.Kstream.KStream>("toStream", "(Lorg/apache/kafka/streams/kstream/Named;)Lorg/apache/kafka/streams/scala/kstream/KStream;", named);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/kstream/KTable.html#suppress(org.apache.kafka.streams.kstream.Suppressed)"/>
        /// </summary>
        /// <param name="suppressed"><see cref="Org.Apache.Kafka.Streams.Kstream.Suppressed"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Streams.Scala.Kstream.KTable"/></returns>
        public Org.Apache.Kafka.Streams.Scala.Kstream.KTable Suppress(Org.Apache.Kafka.Streams.Kstream.Suppressed suppressed)
        {
            return IExecuteWithSignature<Org.Apache.Kafka.Streams.Scala.Kstream.KTable>("suppress", "(Lorg/apache/kafka/streams/kstream/Suppressed;)Lorg/apache/kafka/streams/scala/kstream/KTable;", suppressed);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion

    #region KTable<K, V> implementation
    public partial class KTable<K, V>
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/kstream/KTable.html#%3Cinit%3E(org.apache.kafka.streams.kstream.KTable)"/>
        /// </summary>
        /// <param name="inner"><see cref="Org.Apache.Kafka.Streams.Kstream.KTable"/></param>
        public KTable(Org.Apache.Kafka.Streams.Kstream.KTable<K, V> inner)
            : base(inner)
        {
        }

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Org.Apache.Kafka.Streams.Scala.Kstream.KTable{K, V}"/> to <see cref="Org.Apache.Kafka.Streams.Scala.Kstream.KTable"/>
        /// </summary>
        public static implicit operator Org.Apache.Kafka.Streams.Scala.Kstream.KTable(Org.Apache.Kafka.Streams.Scala.Kstream.KTable<K, V> t) => t.Cast<Org.Apache.Kafka.Streams.Scala.Kstream.KTable>();

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/kstream/KTable.html#queryableStoreName()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String QueryableStoreName()
        {
            return IExecuteWithSignature<Java.Lang.String>("queryableStoreName", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/kstream/KTable.html#inner()"/>
        /// </summary>
        /// <returns><see cref="Org.Apache.Kafka.Streams.Kstream.KTable"/></returns>
        public Org.Apache.Kafka.Streams.Kstream.KTable<K, V> Inner()
        {
            return IExecuteWithSignature<Org.Apache.Kafka.Streams.Kstream.KTable<K, V>>("inner", "()Lorg/apache/kafka/streams/kstream/KTable;");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/kstream/KTable.html#toStream()"/>
        /// </summary>
        /// <returns><see cref="Org.Apache.Kafka.Streams.Scala.Kstream.KStream"/></returns>
        public Org.Apache.Kafka.Streams.Scala.Kstream.KStream<K, V> ToStream()
        {
            return IExecuteWithSignature<Org.Apache.Kafka.Streams.Scala.Kstream.KStream<K, V>>("toStream", "()Lorg/apache/kafka/streams/scala/kstream/KStream;");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/kstream/KTable.html#toStream(org.apache.kafka.streams.kstream.Named)"/>
        /// </summary>
        /// <param name="named"><see cref="Org.Apache.Kafka.Streams.Kstream.Named"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Streams.Scala.Kstream.KStream"/></returns>
        public Org.Apache.Kafka.Streams.Scala.Kstream.KStream<K, V> ToStream(Org.Apache.Kafka.Streams.Kstream.Named named)
        {
            return IExecuteWithSignature<Org.Apache.Kafka.Streams.Scala.Kstream.KStream<K, V>>("toStream", "(Lorg/apache/kafka/streams/kstream/Named;)Lorg/apache/kafka/streams/scala/kstream/KStream;", named);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/kstream/KTable.html#suppress(org.apache.kafka.streams.kstream.Suppressed)"/>
        /// </summary>
        /// <param name="suppressed"><see cref="Org.Apache.Kafka.Streams.Kstream.Suppressed"/></param>
        /// <typeparam name="SuppressedobjectSuperK"><typeparamref name="K"/></typeparam>
        /// <returns><see cref="Org.Apache.Kafka.Streams.Scala.Kstream.KTable"/></returns>
        public Org.Apache.Kafka.Streams.Scala.Kstream.KTable<K, V> Suppress<SuppressedobjectSuperK>(Org.Apache.Kafka.Streams.Kstream.Suppressed<SuppressedobjectSuperK> suppressed) where SuppressedobjectSuperK : K
        {
            return IExecuteWithSignature<Org.Apache.Kafka.Streams.Scala.Kstream.KTable<K, V>>("suppress", "(Lorg/apache/kafka/streams/kstream/Suppressed;)Lorg/apache/kafka/streams/scala/kstream/KTable;", suppressed);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}