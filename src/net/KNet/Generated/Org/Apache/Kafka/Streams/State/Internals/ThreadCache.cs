/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka-streams-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Streams.State.Internals
{
    #region ThreadCache
    public partial class ThreadCache
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/ThreadCache.html#%3Cinit%3E(org.apache.kafka.common.utils.LogContext,long,org.apache.kafka.streams.processor.internals.metrics.StreamsMetricsImpl)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Utils.LogContext"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        /// <param name="arg2"><see cref="Org.Apache.Kafka.Streams.Processor.Internals.Metrics.StreamsMetricsImpl"/></param>
        public ThreadCache(Org.Apache.Kafka.Common.Utils.LogContext arg0, long arg1, Org.Apache.Kafka.Streams.Processor.Internals.Metrics.StreamsMetricsImpl arg2)
            : base(arg0, arg1, arg2)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/ThreadCache.html#nameSpaceFromTaskIdAndStore(java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <param name="arg1"><see cref="string"/></param>
        /// <returns><see cref="string"/></returns>
        public static string NameSpaceFromTaskIdAndStore(string arg0, string arg1)
        {
            return SExecute<string>(LocalBridgeClazz, "nameSpaceFromTaskIdAndStore", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/ThreadCache.html#taskIDfromCacheName(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <returns><see cref="string"/></returns>
        public static string TaskIDfromCacheName(string arg0)
        {
            return SExecute<string>(LocalBridgeClazz, "taskIDfromCacheName", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/ThreadCache.html#underlyingStoreNamefromCacheName(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <returns><see cref="string"/></returns>
        public static string UnderlyingStoreNamefromCacheName(string arg0)
        {
            return SExecute<string>(LocalBridgeClazz, "underlyingStoreNamefromCacheName", arg0);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/ThreadCache.html#evicts()"/> 
        /// </summary>
        public long Evicts
        {
            get { return IExecute<long>("evicts"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/ThreadCache.html#flushes()"/> 
        /// </summary>
        public long Flushes
        {
            get { return IExecute<long>("flushes"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/ThreadCache.html#puts()"/> 
        /// </summary>
        public long Puts
        {
            get { return IExecute<long>("puts"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/ThreadCache.html#gets()"/> 
        /// </summary>
        public long s
        {
            get { return IExecute<long>("gets"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/ThreadCache.html#size()"/> 
        /// </summary>
        public long Size
        {
            get { return IExecute<long>("size"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/ThreadCache.html#resize(long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        public void Resize(long arg0)
        {
            IExecute("resize", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/ThreadCache.html#addDirtyEntryFlushListener(java.lang.String,org.apache.kafka.streams.state.internals.ThreadCache.DirtyEntryFlushListener)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Streams.State.Internals.ThreadCache.DirtyEntryFlushListener"/></param>
        public void AddDirtyEntryFlushListener(string arg0, Org.Apache.Kafka.Streams.State.Internals.ThreadCache.DirtyEntryFlushListener arg1)
        {
            IExecute("addDirtyEntryFlushListener", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/ThreadCache.html#flush(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        public void Flush(string arg0)
        {
            IExecute("flush", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/ThreadCache.html#putAll(java.lang.String,java.util.List)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <param name="arg1"><see cref="Java.Util.List"/></param>
        public void PutAll(string arg0, Java.Util.List<Org.Apache.Kafka.Streams.KeyValue<Org.Apache.Kafka.Common.Utils.Bytes, Org.Apache.Kafka.Streams.State.Internals.LRUCacheEntry>> arg1)
        {
            IExecute("putAll", arg0, arg1);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}