/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka-streams-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Streams.State.Internals
{
    #region StreamsMetadataImpl
    public partial class StreamsMetadataImpl
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/StreamsMetadataImpl.html#%3Cinit%3E(org.apache.kafka.streams.state.HostInfo,java.util.Set,java.util.Set,java.util.Set,java.util.Set,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Streams.State.HostInfo"/></param>
        /// <param name="arg1"><see cref="Java.Util.Set"/></param>
        /// <param name="arg2"><see cref="Java.Util.Set"/></param>
        /// <param name="arg3"><see cref="Java.Util.Set"/></param>
        /// <param name="arg4"><see cref="Java.Util.Set"/></param>
        /// <param name="arg5"><see cref="string"/></param>
        public StreamsMetadataImpl(Org.Apache.Kafka.Streams.State.HostInfo arg0, Java.Util.Set arg1, Java.Util.Set arg2, Java.Util.Set arg3, Java.Util.Set arg4, string arg5)
            : base(arg0, arg1, arg2, arg3, arg4, arg5)
        {
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/StreamsMetadataImpl.html#%3Cinit%3E(org.apache.kafka.streams.state.HostInfo,java.util.Set,java.util.Set,java.util.Set,java.util.Set)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Streams.State.HostInfo"/></param>
        /// <param name="arg1"><see cref="Java.Util.Set"/></param>
        /// <param name="arg2"><see cref="Java.Util.Set"/></param>
        /// <param name="arg3"><see cref="Java.Util.Set"/></param>
        /// <param name="arg4"><see cref="Java.Util.Set"/></param>
        public StreamsMetadataImpl(Org.Apache.Kafka.Streams.State.HostInfo arg0, Java.Util.Set arg1, Java.Util.Set arg2, Java.Util.Set arg3, Java.Util.Set arg4)
            : base(arg0, arg1, arg2, arg3, arg4)
        {
        }

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Org.Apache.Kafka.Streams.State.Internals.StreamsMetadataImpl"/> to <see cref="Org.Apache.Kafka.Streams.StreamsMetadata"/>
        /// </summary>
        public static implicit operator Org.Apache.Kafka.Streams.StreamsMetadata(Org.Apache.Kafka.Streams.State.Internals.StreamsMetadataImpl t) => t.Cast<Org.Apache.Kafka.Streams.StreamsMetadata>();

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/StreamsMetadataImpl.html#host()"/> 
        /// </summary>
        public string Host
        {
            get { return IExecute<string>("host"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/StreamsMetadataImpl.html#hostInfo()"/> 
        /// </summary>
        public Org.Apache.Kafka.Streams.State.HostInfo HostInfo
        {
            get { return IExecute<Org.Apache.Kafka.Streams.State.HostInfo>("hostInfo"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/StreamsMetadataImpl.html#port()"/> 
        /// </summary>
        public int Port
        {
            get { return IExecute<int>("port"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/StreamsMetadataImpl.html#standbyStateStoreNames()"/> 
        /// </summary>
        public Java.Util.Set<string> StandbyStateStoreNames
        {
            get { return IExecute<Java.Util.Set<string>>("standbyStateStoreNames"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/StreamsMetadataImpl.html#standbyTopicPartitions()"/> 
        /// </summary>
        public Java.Util.Set<Org.Apache.Kafka.Common.TopicPartition> StandbyTopicPartitions
        {
            get { return IExecute<Java.Util.Set<Org.Apache.Kafka.Common.TopicPartition>>("standbyTopicPartitions"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/StreamsMetadataImpl.html#stateStoreNames()"/> 
        /// </summary>
        public Java.Util.Set<string> StateStoreNames
        {
            get { return IExecute<Java.Util.Set<string>>("stateStoreNames"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/StreamsMetadataImpl.html#topicPartitions()"/> 
        /// </summary>
        public Java.Util.Set<Org.Apache.Kafka.Common.TopicPartition> TopicPartitions
        {
            get { return IExecute<Java.Util.Set<Org.Apache.Kafka.Common.TopicPartition>>("topicPartitions"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/state/internals/StreamsMetadataImpl.html#topologyName()"/> 
        /// </summary>
        public string TopologyName
        {
            get { return IExecute<string>("topologyName"); }
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}