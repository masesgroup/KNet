/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka-streams-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Streams.Processor.Internals
{
    #region ProcessorNode
    public partial class ProcessorNode
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/ProcessorNode.html#%3Cinit%3E(java.lang.String,org.apache.kafka.streams.processor.api.FixedKeyProcessor,java.util.Set)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Streams.Processor.Api.FixedKeyProcessor"/></param>
        /// <param name="arg2"><see cref="Java.Util.Set"/></param>
        public ProcessorNode(string arg0, Org.Apache.Kafka.Streams.Processor.Api.FixedKeyProcessor arg1, Java.Util.Set arg2)
            : base(arg0, arg1, arg2)
        {
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/ProcessorNode.html#%3Cinit%3E(java.lang.String,org.apache.kafka.streams.processor.api.Processor,java.util.Set)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Streams.Processor.Api.Processor"/></param>
        /// <param name="arg2"><see cref="Java.Util.Set"/></param>
        public ProcessorNode(string arg0, Org.Apache.Kafka.Streams.Processor.Api.Processor arg1, Java.Util.Set arg2)
            : base(arg0, arg1, arg2)
        {
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/ProcessorNode.html#%3Cinit%3E(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        public ProcessorNode(string arg0)
            : base(arg0)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/ProcessorNode.html#stateStores"/>
        /// </summary>
        public Java.Util.Set stateStores { get { return IGetField<Java.Util.Set>("stateStores"); } }

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/ProcessorNode.html#children()"/> 
        /// </summary>
        public Java.Util.List Children
        {
            get { return IExecute<Java.Util.List>("children"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/ProcessorNode.html#isTerminalNode()"/> 
        /// </summary>
        public bool IsTerminalNode
        {
            get { return IExecute<bool>("isTerminalNode"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/ProcessorNode.html#name()"/> 
        /// </summary>
        public string Name
        {
            get { return IExecute<string>("name"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/ProcessorNode.html#toString(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <returns><see cref="string"/></returns>
        public string ToString(string arg0)
        {
            return IExecute<string>("toString", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/ProcessorNode.html#addChild(org.apache.kafka.streams.processor.internals.ProcessorNode)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Streams.Processor.Internals.ProcessorNode"/></param>
        public void AddChild(Org.Apache.Kafka.Streams.Processor.Internals.ProcessorNode arg0)
        {
            IExecute("addChild", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/ProcessorNode.html#close()"/>
        /// </summary>
        public void Close()
        {
            IExecute("close");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/ProcessorNode.html#init(org.apache.kafka.streams.processor.internals.InternalProcessorContext)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Streams.Processor.Internals.InternalProcessorContext"/></param>
        public void Init(Org.Apache.Kafka.Streams.Processor.Internals.InternalProcessorContext arg0)
        {
            IExecute("init", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/ProcessorNode.html#process(org.apache.kafka.streams.processor.api.Record)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Streams.Processor.Api.Record"/></param>
        public void Process(Org.Apache.Kafka.Streams.Processor.Api.Record arg0)
        {
            IExecute("process", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/ProcessorNode.html#punctuate(long,org.apache.kafka.streams.processor.Punctuator)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Streams.Processor.Punctuator"/></param>
        public void Punctuate(long arg0, Org.Apache.Kafka.Streams.Processor.Punctuator arg1)
        {
            IExecute("punctuate", arg0, arg1);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion

    #region ProcessorNode<KIn, VIn, KOut, VOut>
    public partial class ProcessorNode<KIn, VIn, KOut, VOut>
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/ProcessorNode.html#%3Cinit%3E(java.lang.String,org.apache.kafka.streams.processor.api.FixedKeyProcessor,java.util.Set)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Streams.Processor.Api.FixedKeyProcessor"/></param>
        /// <param name="arg2"><see cref="Java.Util.Set"/></param>
        public ProcessorNode(string arg0, Org.Apache.Kafka.Streams.Processor.Api.FixedKeyProcessor<KIn, VIn, VOut> arg1, Java.Util.Set<string> arg2)
            : base(arg0, arg1, arg2)
        {
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/ProcessorNode.html#%3Cinit%3E(java.lang.String,org.apache.kafka.streams.processor.api.Processor,java.util.Set)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Streams.Processor.Api.Processor"/></param>
        /// <param name="arg2"><see cref="Java.Util.Set"/></param>
        public ProcessorNode(string arg0, Org.Apache.Kafka.Streams.Processor.Api.Processor<KIn, VIn, KOut, VOut> arg1, Java.Util.Set<string> arg2)
            : base(arg0, arg1, arg2)
        {
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/ProcessorNode.html#%3Cinit%3E(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        public ProcessorNode(string arg0)
            : base(arg0)
        {
        }

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Org.Apache.Kafka.Streams.Processor.Internals.ProcessorNode{KIn, VIn, KOut, VOut}"/> to <see cref="Org.Apache.Kafka.Streams.Processor.Internals.ProcessorNode"/>
        /// </summary>
        public static implicit operator Org.Apache.Kafka.Streams.Processor.Internals.ProcessorNode(Org.Apache.Kafka.Streams.Processor.Internals.ProcessorNode<KIn, VIn, KOut, VOut> t) => t.Cast<Org.Apache.Kafka.Streams.Processor.Internals.ProcessorNode>();

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/ProcessorNode.html#stateStores"/>
        /// </summary>
        public Java.Util.Set<string> stateStores { get { return IGetField<Java.Util.Set<string>>("stateStores"); } }

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/ProcessorNode.html#children()"/> 
        /// </summary>
        public Java.Util.List Children
        {
            get { return IExecute<Java.Util.List>("children"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/ProcessorNode.html#isTerminalNode()"/> 
        /// </summary>
        public bool IsTerminalNode
        {
            get { return IExecute<bool>("isTerminalNode"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/ProcessorNode.html#name()"/> 
        /// </summary>
        public string Name
        {
            get { return IExecute<string>("name"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/ProcessorNode.html#toString(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <returns><see cref="string"/></returns>
        public string ToString(string arg0)
        {
            return IExecute<string>("toString", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/ProcessorNode.html#addChild(org.apache.kafka.streams.processor.internals.ProcessorNode)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Streams.Processor.Internals.ProcessorNode"/></param>
        /// <typeparam name="Arg0Extendsobject"></typeparam>
        public void AddChild<Arg0Extendsobject>(Org.Apache.Kafka.Streams.Processor.Internals.ProcessorNode<KOut, VOut, Arg0Extendsobject, Arg0Extendsobject> arg0)
        {
            IExecute("addChild", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/ProcessorNode.html#close()"/>
        /// </summary>
        public void Close()
        {
            IExecute("close");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/ProcessorNode.html#init(org.apache.kafka.streams.processor.internals.InternalProcessorContext)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Streams.Processor.Internals.InternalProcessorContext"/></param>
        public void Init(Org.Apache.Kafka.Streams.Processor.Internals.InternalProcessorContext<KOut, VOut> arg0)
        {
            IExecute("init", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/ProcessorNode.html#process(org.apache.kafka.streams.processor.api.Record)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Streams.Processor.Api.Record"/></param>
        public void Process(Org.Apache.Kafka.Streams.Processor.Api.Record<KIn, VIn> arg0)
        {
            IExecute("process", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/ProcessorNode.html#punctuate(long,org.apache.kafka.streams.processor.Punctuator)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Streams.Processor.Punctuator"/></param>
        public void Punctuate(long arg0, Org.Apache.Kafka.Streams.Processor.Punctuator arg1)
        {
            IExecute("punctuate", arg0, arg1);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}