/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka-streams-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Streams.Processor.Internals.Assignment
{
    #region AssignmentInfo
    public partial class AssignmentInfo
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/assignment/AssignmentInfo.html#%3Cinit%3E(int,int,java.util.List,java.util.Map,java.util.Map,java.util.Map,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Util.List"/></param>
        /// <param name="arg3"><see cref="Java.Util.Map"/></param>
        /// <param name="arg4"><see cref="Java.Util.Map"/></param>
        /// <param name="arg5"><see cref="Java.Util.Map"/></param>
        /// <param name="arg6"><see cref="int"/></param>
        public AssignmentInfo(int arg0, int arg1, Java.Util.List arg2, Java.Util.Map arg3, Java.Util.Map arg4, Java.Util.Map arg5, int arg6)
            : base(arg0, arg1, arg2, arg3, arg4, arg5, arg6)
        {
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/assignment/AssignmentInfo.html#%3Cinit%3E(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public AssignmentInfo(int arg0, int arg1)
            : base(arg0, arg1)
        {
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/assignment/AssignmentInfo.html#%3Cinit%3E(int,java.util.List,java.util.Map,java.util.Map,java.util.Map,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Util.List"/></param>
        /// <param name="arg2"><see cref="Java.Util.Map"/></param>
        /// <param name="arg3"><see cref="Java.Util.Map"/></param>
        /// <param name="arg4"><see cref="Java.Util.Map"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        public AssignmentInfo(int arg0, Java.Util.List arg1, Java.Util.Map arg2, Java.Util.Map arg3, Java.Util.Map arg4, int arg5)
            : base(arg0, arg1, arg2, arg3, arg4, arg5)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/assignment/AssignmentInfo.html#decode(java.nio.ByteBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Nio.ByteBuffer"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Streams.Processor.Internals.Assignment.AssignmentInfo"/></returns>
        public static Org.Apache.Kafka.Streams.Processor.Internals.Assignment.AssignmentInfo Decode(Java.Nio.ByteBuffer arg0)
        {
            return SExecute<Org.Apache.Kafka.Streams.Processor.Internals.Assignment.AssignmentInfo>(LocalBridgeClazz, "decode", arg0);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/assignment/AssignmentInfo.html#activeTasks()"/> 
        /// </summary>
        public Java.Util.List<Org.Apache.Kafka.Streams.Processor.TaskId> ActiveTasks
        {
            get { return IExecute<Java.Util.List<Org.Apache.Kafka.Streams.Processor.TaskId>>("activeTasks"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/assignment/AssignmentInfo.html#commonlySupportedVersion()"/> 
        /// </summary>
        public int CommonlySupportedVersion
        {
            get { return IExecute<int>("commonlySupportedVersion"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/assignment/AssignmentInfo.html#encode()"/> 
        /// </summary>
        public Java.Nio.ByteBuffer Encode
        {
            get { return IExecute<Java.Nio.ByteBuffer>("encode"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/assignment/AssignmentInfo.html#errCode()"/> 
        /// </summary>
        public int ErrCode
        {
            get { return IExecute<int>("errCode"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/assignment/AssignmentInfo.html#nextRebalanceMs()"/> 
        /// </summary>
        public long NextRebalanceMs
        {
            get { return IExecute<long>("nextRebalanceMs"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/assignment/AssignmentInfo.html#partitionsByHost()"/> 
        /// </summary>
        public Java.Util.Map<Org.Apache.Kafka.Streams.State.HostInfo, Java.Util.Set<Org.Apache.Kafka.Common.TopicPartition>> PartitionsByHost
        {
            get { return IExecute<Java.Util.Map<Org.Apache.Kafka.Streams.State.HostInfo, Java.Util.Set<Org.Apache.Kafka.Common.TopicPartition>>>("partitionsByHost"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/assignment/AssignmentInfo.html#standbyPartitionByHost()"/> 
        /// </summary>
        public Java.Util.Map<Org.Apache.Kafka.Streams.State.HostInfo, Java.Util.Set<Org.Apache.Kafka.Common.TopicPartition>> StandbyPartitionByHost
        {
            get { return IExecute<Java.Util.Map<Org.Apache.Kafka.Streams.State.HostInfo, Java.Util.Set<Org.Apache.Kafka.Common.TopicPartition>>>("standbyPartitionByHost"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/assignment/AssignmentInfo.html#standbyTasks()"/> 
        /// </summary>
        public Java.Util.Map<Org.Apache.Kafka.Streams.Processor.TaskId, Java.Util.Set<Org.Apache.Kafka.Common.TopicPartition>> StandbyTasks
        {
            get { return IExecute<Java.Util.Map<Org.Apache.Kafka.Streams.Processor.TaskId, Java.Util.Set<Org.Apache.Kafka.Common.TopicPartition>>>("standbyTasks"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/assignment/AssignmentInfo.html#version()"/> 
        /// </summary>
        public int Version
        {
            get { return IExecute<int>("version"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/assignment/AssignmentInfo.html#setNextRebalanceTime(long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        public void SetNextRebalanceTime(long arg0)
        {
            IExecute("setNextRebalanceTime", arg0);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}