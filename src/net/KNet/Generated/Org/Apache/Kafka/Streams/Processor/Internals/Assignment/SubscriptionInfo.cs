/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka-streams-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Streams.Processor.Internals.Assignment
{
    #region SubscriptionInfo
    public partial class SubscriptionInfo
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/assignment/SubscriptionInfo.html#%3Cinit%3E(int,int,java.util.UUID,java.lang.String,java.util.Map,byte,int,java.util.Map)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Java.Util.UUID"/></param>
        /// <param name="arg3"><see cref="string"/></param>
        /// <param name="arg4"><see cref="Java.Util.Map"/></param>
        /// <param name="arg5"><see cref="byte"/></param>
        /// <param name="arg6"><see cref="int"/></param>
        /// <param name="arg7"><see cref="Java.Util.Map"/></param>
        public SubscriptionInfo(int arg0, int arg1, Java.Util.UUID arg2, string arg3, Java.Util.Map arg4, byte arg5, int arg6, Java.Util.Map arg7)
            : base(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/assignment/SubscriptionInfo.html#UNKNOWN_OFFSET_SUM"/>
        /// </summary>
        public static long UNKNOWN_OFFSET_SUM { get { return SGetField<long>(LocalBridgeClazz, "UNKNOWN_OFFSET_SUM"); } }

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/assignment/SubscriptionInfo.html#getActiveTasksFromTaskOffsetSumMap(java.util.Map)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Map"/></param>
        /// <returns><see cref="Java.Util.Set"/></returns>
        public static Java.Util.Set<Org.Apache.Kafka.Streams.Processor.TaskId> GetActiveTasksFromTaskOffsetSumMap(Java.Util.Map<Org.Apache.Kafka.Streams.Processor.TaskId, long?> arg0)
        {
            return SExecute<Java.Util.Set<Org.Apache.Kafka.Streams.Processor.TaskId>>(LocalBridgeClazz, "getActiveTasksFromTaskOffsetSumMap", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/assignment/SubscriptionInfo.html#getStandbyTasksFromTaskOffsetSumMap(java.util.Map)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Map"/></param>
        /// <returns><see cref="Java.Util.Set"/></returns>
        public static Java.Util.Set<Org.Apache.Kafka.Streams.Processor.TaskId> GetStandbyTasksFromTaskOffsetSumMap(Java.Util.Map<Org.Apache.Kafka.Streams.Processor.TaskId, long?> arg0)
        {
            return SExecute<Java.Util.Set<Org.Apache.Kafka.Streams.Processor.TaskId>>(LocalBridgeClazz, "getStandbyTasksFromTaskOffsetSumMap", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/assignment/SubscriptionInfo.html#decode(java.nio.ByteBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Nio.ByteBuffer"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Streams.Processor.Internals.Assignment.SubscriptionInfo"/></returns>
        public static Org.Apache.Kafka.Streams.Processor.Internals.Assignment.SubscriptionInfo Decode(Java.Nio.ByteBuffer arg0)
        {
            return SExecute<Org.Apache.Kafka.Streams.Processor.Internals.Assignment.SubscriptionInfo>(LocalBridgeClazz, "decode", arg0);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/assignment/SubscriptionInfo.html#clientTags()"/> 
        /// </summary>
        public Java.Util.Map<string, string> ClientTags
        {
            get { return IExecute<Java.Util.Map<string, string>>("clientTags"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/assignment/SubscriptionInfo.html#encode()"/> 
        /// </summary>
        public Java.Nio.ByteBuffer Encode
        {
            get { return IExecute<Java.Nio.ByteBuffer>("encode"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/assignment/SubscriptionInfo.html#errorCode()"/> 
        /// </summary>
        public int ErrorCode
        {
            get { return IExecute<int>("errorCode"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/assignment/SubscriptionInfo.html#latestSupportedVersion()"/> 
        /// </summary>
        public int LatestSupportedVersion
        {
            get { return IExecute<int>("latestSupportedVersion"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/assignment/SubscriptionInfo.html#prevTasks()"/> 
        /// </summary>
        public Java.Util.Set<Org.Apache.Kafka.Streams.Processor.TaskId> PrevTasks
        {
            get { return IExecute<Java.Util.Set<Org.Apache.Kafka.Streams.Processor.TaskId>>("prevTasks"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/assignment/SubscriptionInfo.html#processId()"/> 
        /// </summary>
        public Java.Util.UUID ProcessId
        {
            get { return IExecute<Java.Util.UUID>("processId"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/assignment/SubscriptionInfo.html#standbyTasks()"/> 
        /// </summary>
        public Java.Util.Set<Org.Apache.Kafka.Streams.Processor.TaskId> StandbyTasks
        {
            get { return IExecute<Java.Util.Set<Org.Apache.Kafka.Streams.Processor.TaskId>>("standbyTasks"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/assignment/SubscriptionInfo.html#taskOffsetSums()"/> 
        /// </summary>
        public Java.Util.Map<Org.Apache.Kafka.Streams.Processor.TaskId, long?> TaskOffsetSums
        {
            get { return IExecute<Java.Util.Map<Org.Apache.Kafka.Streams.Processor.TaskId, long?>>("taskOffsetSums"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/assignment/SubscriptionInfo.html#userEndPoint()"/> 
        /// </summary>
        public string UserEndPoint
        {
            get { return IExecute<string>("userEndPoint"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/assignment/SubscriptionInfo.html#version()"/> 
        /// </summary>
        public int Version
        {
            get { return IExecute<int>("version"); }
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}