/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka-streams-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Streams.Processor.Internals
{
    #region RepartitionTopics
    public partial class RepartitionTopics
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/RepartitionTopics.html#%3Cinit%3E(org.apache.kafka.streams.processor.internals.TopologyMetadata,org.apache.kafka.streams.processor.internals.InternalTopicManager,org.apache.kafka.streams.processor.internals.assignment.CopartitionedTopicsEnforcer,org.apache.kafka.common.Cluster,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Streams.Processor.Internals.TopologyMetadata"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Streams.Processor.Internals.InternalTopicManager"/></param>
        /// <param name="arg2"><see cref="Org.Apache.Kafka.Streams.Processor.Internals.Assignment.CopartitionedTopicsEnforcer"/></param>
        /// <param name="arg3"><see cref="Org.Apache.Kafka.Common.Cluster"/></param>
        /// <param name="arg4"><see cref="string"/></param>
        public RepartitionTopics(Org.Apache.Kafka.Streams.Processor.Internals.TopologyMetadata arg0, Org.Apache.Kafka.Streams.Processor.Internals.InternalTopicManager arg1, Org.Apache.Kafka.Streams.Processor.Internals.Assignment.CopartitionedTopicsEnforcer arg2, Org.Apache.Kafka.Common.Cluster arg3, string arg4)
            : base(arg0, arg1, arg2, arg3, arg4)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/RepartitionTopics.html#missingSourceTopicExceptions()"/> 
        /// </summary>
        public Java.Util.Queue<Org.Apache.Kafka.Streams.Errors.StreamsException> MissingSourceTopicExceptions
        {
            get { return IExecute<Java.Util.Queue<Org.Apache.Kafka.Streams.Errors.StreamsException>>("missingSourceTopicExceptions"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/RepartitionTopics.html#topicPartitionsInfo()"/> 
        /// </summary>
        public Java.Util.Map<Org.Apache.Kafka.Common.TopicPartition, Org.Apache.Kafka.Common.PartitionInfo> TopicPartitionsInfo
        {
            get { return IExecute<Java.Util.Map<Org.Apache.Kafka.Common.TopicPartition, Org.Apache.Kafka.Common.PartitionInfo>>("topicPartitionsInfo"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/RepartitionTopics.html#topologiesWithMissingInputTopics()"/> 
        /// </summary>
        public Java.Util.Set<string> TopologiesWithMissingInputTopics
        {
            get { return IExecute<Java.Util.Set<string>>("topologiesWithMissingInputTopics"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-streams/3.4.0/org/apache/kafka/streams/processor/internals/RepartitionTopics.html#setup()"/>
        /// </summary>
        public void Setup()
        {
            IExecute("setup");
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}