/*
*  Copyright 2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.12.0)
*  using kafka-streams-scala_2.13-4.0.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Streams.Scala
{
    #region ImplicitConversions declaration
    /// <summary>
    /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/ImplicitConversions.html"/>
    /// </summary>
    public partial class ImplicitConversions : MASES.JCOBridge.C2JBridge.JVMBridgeBase<ImplicitConversions>
    {
        const string _bridgeClassName = "org.apache.kafka.streams.scala.ImplicitConversions";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public ImplicitConversions() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public ImplicitConversions(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class

    }
    #endregion

    #region ImplicitConversions implementation
    public partial class ImplicitConversions
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/ImplicitConversions.html#materializedFromSerde(org.apache.kafka.common.serialization.Serde,org.apache.kafka.common.serialization.Serde)"/>
        /// </summary>
        /// <param name="keySerde"><see cref="Org.Apache.Kafka.Common.Serialization.Serde"/></param>
        /// <param name="valueSerde"><see cref="Org.Apache.Kafka.Common.Serialization.Serde"/></param>
        /// <typeparam name="K"></typeparam>
        /// <typeparam name="V"></typeparam>
        /// <returns><see cref="Org.Apache.Kafka.Streams.Kstream.Materialized"/></returns>
        public static Org.Apache.Kafka.Streams.Kstream.Materialized MaterializedFromSerde<K, V>(Org.Apache.Kafka.Common.Serialization.Serde<K> keySerde, Org.Apache.Kafka.Common.Serialization.Serde<V> valueSerde)
        {
            return SExecuteWithSignature<Org.Apache.Kafka.Streams.Kstream.Materialized>(LocalBridgeClazz, "materializedFromSerde", "(Lorg/apache/kafka/common/serialization/Serde;Lorg/apache/kafka/common/serialization/Serde;)Lorg/apache/kafka/streams/kstream/Materialized;", keySerde, valueSerde);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/ImplicitConversions.html#joinedFromKeyValueOtherSerde(org.apache.kafka.common.serialization.Serde,org.apache.kafka.common.serialization.Serde,org.apache.kafka.common.serialization.Serde)"/>
        /// </summary>
        /// <param name="keySerde"><see cref="Org.Apache.Kafka.Common.Serialization.Serde"/></param>
        /// <param name="valueSerde"><see cref="Org.Apache.Kafka.Common.Serialization.Serde"/></param>
        /// <param name="otherValueSerde"><see cref="Org.Apache.Kafka.Common.Serialization.Serde"/></param>
        /// <typeparam name="K"></typeparam>
        /// <typeparam name="V"></typeparam>
        /// <typeparam name="VO"></typeparam>
        /// <returns><see cref="Org.Apache.Kafka.Streams.Kstream.Joined"/></returns>
        public static Org.Apache.Kafka.Streams.Kstream.Joined<K, V, VO> JoinedFromKeyValueOtherSerde<K, V, VO>(Org.Apache.Kafka.Common.Serialization.Serde<K> keySerde, Org.Apache.Kafka.Common.Serialization.Serde<V> valueSerde, Org.Apache.Kafka.Common.Serialization.Serde<VO> otherValueSerde)
        {
            return SExecuteWithSignature<Org.Apache.Kafka.Streams.Kstream.Joined<K, V, VO>>(LocalBridgeClazz, "joinedFromKeyValueOtherSerde", "(Lorg/apache/kafka/common/serialization/Serde;Lorg/apache/kafka/common/serialization/Serde;Lorg/apache/kafka/common/serialization/Serde;)Lorg/apache/kafka/streams/kstream/Joined;", keySerde, valueSerde, otherValueSerde);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/ImplicitConversions.html#streamJoinFromKeyValueOtherSerde(org.apache.kafka.common.serialization.Serde,org.apache.kafka.common.serialization.Serde,org.apache.kafka.common.serialization.Serde)"/>
        /// </summary>
        /// <param name="keySerde"><see cref="Org.Apache.Kafka.Common.Serialization.Serde"/></param>
        /// <param name="valueSerde"><see cref="Org.Apache.Kafka.Common.Serialization.Serde"/></param>
        /// <param name="otherValueSerde"><see cref="Org.Apache.Kafka.Common.Serialization.Serde"/></param>
        /// <typeparam name="K"></typeparam>
        /// <typeparam name="V"></typeparam>
        /// <typeparam name="VO"></typeparam>
        /// <returns><see cref="Org.Apache.Kafka.Streams.Kstream.StreamJoined"/></returns>
        public static Org.Apache.Kafka.Streams.Kstream.StreamJoined<K, V, VO> StreamJoinFromKeyValueOtherSerde<K, V, VO>(Org.Apache.Kafka.Common.Serialization.Serde<K> keySerde, Org.Apache.Kafka.Common.Serialization.Serde<V> valueSerde, Org.Apache.Kafka.Common.Serialization.Serde<VO> otherValueSerde)
        {
            return SExecuteWithSignature<Org.Apache.Kafka.Streams.Kstream.StreamJoined<K, V, VO>>(LocalBridgeClazz, "streamJoinFromKeyValueOtherSerde", "(Lorg/apache/kafka/common/serialization/Serde;Lorg/apache/kafka/common/serialization/Serde;Lorg/apache/kafka/common/serialization/Serde;)Lorg/apache/kafka/streams/kstream/StreamJoined;", keySerde, valueSerde, otherValueSerde);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/ImplicitConversions.html#consumedFromSerde(org.apache.kafka.common.serialization.Serde,org.apache.kafka.common.serialization.Serde)"/>
        /// </summary>
        /// <param name="keySerde"><see cref="Org.Apache.Kafka.Common.Serialization.Serde"/></param>
        /// <param name="valueSerde"><see cref="Org.Apache.Kafka.Common.Serialization.Serde"/></param>
        /// <typeparam name="K"></typeparam>
        /// <typeparam name="V"></typeparam>
        /// <returns><see cref="Org.Apache.Kafka.Streams.Kstream.Consumed"/></returns>
        public static Org.Apache.Kafka.Streams.Kstream.Consumed<K, V> ConsumedFromSerde<K, V>(Org.Apache.Kafka.Common.Serialization.Serde<K> keySerde, Org.Apache.Kafka.Common.Serialization.Serde<V> valueSerde)
        {
            return SExecuteWithSignature<Org.Apache.Kafka.Streams.Kstream.Consumed<K, V>>(LocalBridgeClazz, "consumedFromSerde", "(Lorg/apache/kafka/common/serialization/Serde;Lorg/apache/kafka/common/serialization/Serde;)Lorg/apache/kafka/streams/kstream/Consumed;", keySerde, valueSerde);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/ImplicitConversions.html#groupedFromSerde(org.apache.kafka.common.serialization.Serde,org.apache.kafka.common.serialization.Serde)"/>
        /// </summary>
        /// <param name="keySerde"><see cref="Org.Apache.Kafka.Common.Serialization.Serde"/></param>
        /// <param name="valueSerde"><see cref="Org.Apache.Kafka.Common.Serialization.Serde"/></param>
        /// <typeparam name="K"></typeparam>
        /// <typeparam name="V"></typeparam>
        /// <returns><see cref="Org.Apache.Kafka.Streams.Kstream.Grouped"/></returns>
        public static Org.Apache.Kafka.Streams.Kstream.Grouped<K, V> GroupedFromSerde<K, V>(Org.Apache.Kafka.Common.Serialization.Serde<K> keySerde, Org.Apache.Kafka.Common.Serialization.Serde<V> valueSerde)
        {
            return SExecuteWithSignature<Org.Apache.Kafka.Streams.Kstream.Grouped<K, V>>(LocalBridgeClazz, "groupedFromSerde", "(Lorg/apache/kafka/common/serialization/Serde;Lorg/apache/kafka/common/serialization/Serde;)Lorg/apache/kafka/streams/kstream/Grouped;", keySerde, valueSerde);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/ImplicitConversions.html#producedFromSerde(org.apache.kafka.common.serialization.Serde,org.apache.kafka.common.serialization.Serde)"/>
        /// </summary>
        /// <param name="keySerde"><see cref="Org.Apache.Kafka.Common.Serialization.Serde"/></param>
        /// <param name="valueSerde"><see cref="Org.Apache.Kafka.Common.Serialization.Serde"/></param>
        /// <typeparam name="K"></typeparam>
        /// <typeparam name="V"></typeparam>
        /// <returns><see cref="Org.Apache.Kafka.Streams.Kstream.Produced"/></returns>
        public static Org.Apache.Kafka.Streams.Kstream.Produced<K, V> ProducedFromSerde<K, V>(Org.Apache.Kafka.Common.Serialization.Serde<K> keySerde, Org.Apache.Kafka.Common.Serialization.Serde<V> valueSerde)
        {
            return SExecuteWithSignature<Org.Apache.Kafka.Streams.Kstream.Produced<K, V>>(LocalBridgeClazz, "producedFromSerde", "(Lorg/apache/kafka/common/serialization/Serde;Lorg/apache/kafka/common/serialization/Serde;)Lorg/apache/kafka/streams/kstream/Produced;", keySerde, valueSerde);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/ImplicitConversions.html#repartitionedFromSerde(org.apache.kafka.common.serialization.Serde,org.apache.kafka.common.serialization.Serde)"/>
        /// </summary>
        /// <param name="keySerde"><see cref="Org.Apache.Kafka.Common.Serialization.Serde"/></param>
        /// <param name="valueSerde"><see cref="Org.Apache.Kafka.Common.Serialization.Serde"/></param>
        /// <typeparam name="K"></typeparam>
        /// <typeparam name="V"></typeparam>
        /// <returns><see cref="Org.Apache.Kafka.Streams.Kstream.Repartitioned"/></returns>
        public static Org.Apache.Kafka.Streams.Kstream.Repartitioned<K, V> RepartitionedFromSerde<K, V>(Org.Apache.Kafka.Common.Serialization.Serde<K> keySerde, Org.Apache.Kafka.Common.Serialization.Serde<V> valueSerde)
        {
            return SExecuteWithSignature<Org.Apache.Kafka.Streams.Kstream.Repartitioned<K, V>>(LocalBridgeClazz, "repartitionedFromSerde", "(Lorg/apache/kafka/common/serialization/Serde;Lorg/apache/kafka/common/serialization/Serde;)Lorg/apache/kafka/streams/kstream/Repartitioned;", keySerde, valueSerde);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/ImplicitConversions.html#wrapCogroupedKStream(org.apache.kafka.streams.kstream.CogroupedKStream)"/>
        /// </summary>
        /// <param name="inner"><see cref="Org.Apache.Kafka.Streams.Kstream.CogroupedKStream"/></param>
        /// <typeparam name="K"></typeparam>
        /// <typeparam name="V"></typeparam>
        /// <returns><see cref="Org.Apache.Kafka.Streams.Scala.Kstream.CogroupedKStream"/></returns>
        public static Org.Apache.Kafka.Streams.Scala.Kstream.CogroupedKStream<K, V> WrapCogroupedKStream<K, V>(Org.Apache.Kafka.Streams.Kstream.CogroupedKStream<K, V> inner)
        {
            return SExecuteWithSignature<Org.Apache.Kafka.Streams.Scala.Kstream.CogroupedKStream<K, V>>(LocalBridgeClazz, "wrapCogroupedKStream", "(Lorg/apache/kafka/streams/kstream/CogroupedKStream;)Lorg/apache/kafka/streams/scala/kstream/CogroupedKStream;", inner);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/ImplicitConversions.html#wrapKGroupedStream(org.apache.kafka.streams.kstream.KGroupedStream)"/>
        /// </summary>
        /// <param name="inner"><see cref="Org.Apache.Kafka.Streams.Kstream.KGroupedStream"/></param>
        /// <typeparam name="K"></typeparam>
        /// <typeparam name="V"></typeparam>
        /// <returns><see cref="Org.Apache.Kafka.Streams.Scala.Kstream.KGroupedStream"/></returns>
        public static Org.Apache.Kafka.Streams.Scala.Kstream.KGroupedStream<K, V> WrapKGroupedStream<K, V>(Org.Apache.Kafka.Streams.Kstream.KGroupedStream<K, V> inner)
        {
            return SExecuteWithSignature<Org.Apache.Kafka.Streams.Scala.Kstream.KGroupedStream<K, V>>(LocalBridgeClazz, "wrapKGroupedStream", "(Lorg/apache/kafka/streams/kstream/KGroupedStream;)Lorg/apache/kafka/streams/scala/kstream/KGroupedStream;", inner);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/ImplicitConversions.html#wrapKGroupedTable(org.apache.kafka.streams.kstream.KGroupedTable)"/>
        /// </summary>
        /// <param name="inner"><see cref="Org.Apache.Kafka.Streams.Kstream.KGroupedTable"/></param>
        /// <typeparam name="K"></typeparam>
        /// <typeparam name="V"></typeparam>
        /// <returns><see cref="Org.Apache.Kafka.Streams.Scala.Kstream.KGroupedTable"/></returns>
        public static Org.Apache.Kafka.Streams.Scala.Kstream.KGroupedTable<K, V> WrapKGroupedTable<K, V>(Org.Apache.Kafka.Streams.Kstream.KGroupedTable<K, V> inner)
        {
            return SExecuteWithSignature<Org.Apache.Kafka.Streams.Scala.Kstream.KGroupedTable<K, V>>(LocalBridgeClazz, "wrapKGroupedTable", "(Lorg/apache/kafka/streams/kstream/KGroupedTable;)Lorg/apache/kafka/streams/scala/kstream/KGroupedTable;", inner);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/ImplicitConversions.html#wrapKStream(org.apache.kafka.streams.kstream.KStream)"/>
        /// </summary>
        /// <param name="inner"><see cref="Org.Apache.Kafka.Streams.Kstream.KStream"/></param>
        /// <typeparam name="K"></typeparam>
        /// <typeparam name="V"></typeparam>
        /// <returns><see cref="Org.Apache.Kafka.Streams.Scala.Kstream.KStream"/></returns>
        public static Org.Apache.Kafka.Streams.Scala.Kstream.KStream<K, V> WrapKStream<K, V>(Org.Apache.Kafka.Streams.Kstream.KStream<K, V> inner)
        {
            return SExecuteWithSignature<Org.Apache.Kafka.Streams.Scala.Kstream.KStream<K, V>>(LocalBridgeClazz, "wrapKStream", "(Lorg/apache/kafka/streams/kstream/KStream;)Lorg/apache/kafka/streams/scala/kstream/KStream;", inner);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/ImplicitConversions.html#wrapKTable(org.apache.kafka.streams.kstream.KTable)"/>
        /// </summary>
        /// <param name="inner"><see cref="Org.Apache.Kafka.Streams.Kstream.KTable"/></param>
        /// <typeparam name="K"></typeparam>
        /// <typeparam name="V"></typeparam>
        /// <returns><see cref="Org.Apache.Kafka.Streams.Scala.Kstream.KTable"/></returns>
        public static Org.Apache.Kafka.Streams.Scala.Kstream.KTable<K, V> WrapKTable<K, V>(Org.Apache.Kafka.Streams.Kstream.KTable<K, V> inner)
        {
            return SExecuteWithSignature<Org.Apache.Kafka.Streams.Scala.Kstream.KTable<K, V>>(LocalBridgeClazz, "wrapKTable", "(Lorg/apache/kafka/streams/kstream/KTable;)Lorg/apache/kafka/streams/scala/kstream/KTable;", inner);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/ImplicitConversions.html#wrapSessionWindowedCogroupedKStream(org.apache.kafka.streams.kstream.SessionWindowedCogroupedKStream)"/>
        /// </summary>
        /// <param name="inner"><see cref="Org.Apache.Kafka.Streams.Kstream.SessionWindowedCogroupedKStream"/></param>
        /// <typeparam name="K"></typeparam>
        /// <typeparam name="V"></typeparam>
        /// <returns><see cref="Org.Apache.Kafka.Streams.Scala.Kstream.SessionWindowedCogroupedKStream"/></returns>
        public static Org.Apache.Kafka.Streams.Scala.Kstream.SessionWindowedCogroupedKStream<K, V> WrapSessionWindowedCogroupedKStream<K, V>(Org.Apache.Kafka.Streams.Kstream.SessionWindowedCogroupedKStream<K, V> inner)
        {
            return SExecuteWithSignature<Org.Apache.Kafka.Streams.Scala.Kstream.SessionWindowedCogroupedKStream<K, V>>(LocalBridgeClazz, "wrapSessionWindowedCogroupedKStream", "(Lorg/apache/kafka/streams/kstream/SessionWindowedCogroupedKStream;)Lorg/apache/kafka/streams/scala/kstream/SessionWindowedCogroupedKStream;", inner);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/ImplicitConversions.html#wrapSessionWindowedKStream(org.apache.kafka.streams.kstream.SessionWindowedKStream)"/>
        /// </summary>
        /// <param name="inner"><see cref="Org.Apache.Kafka.Streams.Kstream.SessionWindowedKStream"/></param>
        /// <typeparam name="K"></typeparam>
        /// <typeparam name="V"></typeparam>
        /// <returns><see cref="Org.Apache.Kafka.Streams.Scala.Kstream.SessionWindowedKStream"/></returns>
        public static Org.Apache.Kafka.Streams.Scala.Kstream.SessionWindowedKStream<K, V> WrapSessionWindowedKStream<K, V>(Org.Apache.Kafka.Streams.Kstream.SessionWindowedKStream<K, V> inner)
        {
            return SExecuteWithSignature<Org.Apache.Kafka.Streams.Scala.Kstream.SessionWindowedKStream<K, V>>(LocalBridgeClazz, "wrapSessionWindowedKStream", "(Lorg/apache/kafka/streams/kstream/SessionWindowedKStream;)Lorg/apache/kafka/streams/scala/kstream/SessionWindowedKStream;", inner);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/ImplicitConversions.html#wrapTimeWindowedCogroupedKStream(org.apache.kafka.streams.kstream.TimeWindowedCogroupedKStream)"/>
        /// </summary>
        /// <param name="inner"><see cref="Org.Apache.Kafka.Streams.Kstream.TimeWindowedCogroupedKStream"/></param>
        /// <typeparam name="K"></typeparam>
        /// <typeparam name="V"></typeparam>
        /// <returns><see cref="Org.Apache.Kafka.Streams.Scala.Kstream.TimeWindowedCogroupedKStream"/></returns>
        public static Org.Apache.Kafka.Streams.Scala.Kstream.TimeWindowedCogroupedKStream<K, V> WrapTimeWindowedCogroupedKStream<K, V>(Org.Apache.Kafka.Streams.Kstream.TimeWindowedCogroupedKStream<K, V> inner)
        {
            return SExecuteWithSignature<Org.Apache.Kafka.Streams.Scala.Kstream.TimeWindowedCogroupedKStream<K, V>>(LocalBridgeClazz, "wrapTimeWindowedCogroupedKStream", "(Lorg/apache/kafka/streams/kstream/TimeWindowedCogroupedKStream;)Lorg/apache/kafka/streams/scala/kstream/TimeWindowedCogroupedKStream;", inner);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-streams-scala_2.13/4.0.0/org/apache/kafka/streams/scala/ImplicitConversions.html#wrapTimeWindowedKStream(org.apache.kafka.streams.kstream.TimeWindowedKStream)"/>
        /// </summary>
        /// <param name="inner"><see cref="Org.Apache.Kafka.Streams.Kstream.TimeWindowedKStream"/></param>
        /// <typeparam name="K"></typeparam>
        /// <typeparam name="V"></typeparam>
        /// <returns><see cref="Org.Apache.Kafka.Streams.Scala.Kstream.TimeWindowedKStream"/></returns>
        public static Org.Apache.Kafka.Streams.Scala.Kstream.TimeWindowedKStream<K, V> WrapTimeWindowedKStream<K, V>(Org.Apache.Kafka.Streams.Kstream.TimeWindowedKStream<K, V> inner)
        {
            return SExecuteWithSignature<Org.Apache.Kafka.Streams.Scala.Kstream.TimeWindowedKStream<K, V>>(LocalBridgeClazz, "wrapTimeWindowedKStream", "(Lorg/apache/kafka/streams/kstream/TimeWindowedKStream;)Lorg/apache/kafka/streams/scala/kstream/TimeWindowedKStream;", inner);
        }

        #endregion

        #region Instance methods

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}