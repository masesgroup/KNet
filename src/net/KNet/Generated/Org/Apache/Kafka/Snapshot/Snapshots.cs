/*
*  Copyright 2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.12.0)
*  using kafka-raft-4.0.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Snapshot
{
    #region Snapshots declaration
    /// <summary>
    /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/snapshot/Snapshots.html"/>
    /// </summary>
    public partial class Snapshots : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Snapshots>
    {
        const string _bridgeClassName = "org.apache.kafka.snapshot.Snapshots";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public Snapshots() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public Snapshots(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class

    }
    #endregion

    #region Snapshots implementation
    public partial class Snapshots
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/snapshot/Snapshots.html#DELETE_SUFFIX"/>
        /// </summary>
        public static Java.Lang.String DELETE_SUFFIX { get { if (!_DELETE_SUFFIXReady) { _DELETE_SUFFIXContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DELETE_SUFFIX"); _DELETE_SUFFIXReady = true; } return _DELETE_SUFFIXContent; } }
        private static Java.Lang.String _DELETE_SUFFIXContent = default;
        private static bool _DELETE_SUFFIXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/snapshot/Snapshots.html#SUFFIX"/>
        /// </summary>
        public static Java.Lang.String SUFFIX { get { if (!_SUFFIXReady) { _SUFFIXContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SUFFIX"); _SUFFIXReady = true; } return _SUFFIXContent; } }
        private static Java.Lang.String _SUFFIXContent = default;
        private static bool _SUFFIXReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/snapshot/Snapshots.html#BOOTSTRAP_SNAPSHOT_ID"/>
        /// </summary>
        public static Org.Apache.Kafka.Raft.OffsetAndEpoch BOOTSTRAP_SNAPSHOT_ID { get { if (!_BOOTSTRAP_SNAPSHOT_IDReady) { _BOOTSTRAP_SNAPSHOT_IDContent = SGetField<Org.Apache.Kafka.Raft.OffsetAndEpoch>(LocalBridgeClazz, "BOOTSTRAP_SNAPSHOT_ID"); _BOOTSTRAP_SNAPSHOT_IDReady = true; } return _BOOTSTRAP_SNAPSHOT_IDContent; } }
        private static Org.Apache.Kafka.Raft.OffsetAndEpoch _BOOTSTRAP_SNAPSHOT_IDContent = default;
        private static bool _BOOTSTRAP_SNAPSHOT_IDReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/snapshot/Snapshots.html#deleteIfExists(java.nio.file.Path,org.apache.kafka.raft.OffsetAndEpoch)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Nio.File.Path"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Raft.OffsetAndEpoch"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool DeleteIfExists(Java.Nio.File.Path arg0, Org.Apache.Kafka.Raft.OffsetAndEpoch arg1)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "deleteIfExists", "(Ljava/nio/file/Path;Lorg/apache/kafka/raft/OffsetAndEpoch;)Z", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/snapshot/Snapshots.html#filenameFromSnapshotId(org.apache.kafka.raft.OffsetAndEpoch)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Raft.OffsetAndEpoch"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public static Java.Lang.String FilenameFromSnapshotId(Org.Apache.Kafka.Raft.OffsetAndEpoch arg0)
        {
            return SExecuteWithSignature<Java.Lang.String>(LocalBridgeClazz, "filenameFromSnapshotId", "(Lorg/apache/kafka/raft/OffsetAndEpoch;)Ljava/lang/String;", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/snapshot/Snapshots.html#createTempFile(java.nio.file.Path,org.apache.kafka.raft.OffsetAndEpoch)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Nio.File.Path"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Raft.OffsetAndEpoch"/></param>
        /// <returns><see cref="Java.Nio.File.Path"/></returns>
        public static Java.Nio.File.Path CreateTempFile(Java.Nio.File.Path arg0, Org.Apache.Kafka.Raft.OffsetAndEpoch arg1)
        {
            return SExecuteWithSignature<Java.Nio.File.Path>(LocalBridgeClazz, "createTempFile", "(Ljava/nio/file/Path;Lorg/apache/kafka/raft/OffsetAndEpoch;)Ljava/nio/file/Path;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/snapshot/Snapshots.html#markForDelete(java.nio.file.Path,org.apache.kafka.raft.OffsetAndEpoch)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Nio.File.Path"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Raft.OffsetAndEpoch"/></param>
        /// <returns><see cref="Java.Nio.File.Path"/></returns>
        public static Java.Nio.File.Path MarkForDelete(Java.Nio.File.Path arg0, Org.Apache.Kafka.Raft.OffsetAndEpoch arg1)
        {
            return SExecuteWithSignature<Java.Nio.File.Path>(LocalBridgeClazz, "markForDelete", "(Ljava/nio/file/Path;Lorg/apache/kafka/raft/OffsetAndEpoch;)Ljava/nio/file/Path;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/snapshot/Snapshots.html#snapshotPath(java.nio.file.Path,org.apache.kafka.raft.OffsetAndEpoch)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Nio.File.Path"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Raft.OffsetAndEpoch"/></param>
        /// <returns><see cref="Java.Nio.File.Path"/></returns>
        public static Java.Nio.File.Path SnapshotPath(Java.Nio.File.Path arg0, Org.Apache.Kafka.Raft.OffsetAndEpoch arg1)
        {
            return SExecuteWithSignature<Java.Nio.File.Path>(LocalBridgeClazz, "snapshotPath", "(Ljava/nio/file/Path;Lorg/apache/kafka/raft/OffsetAndEpoch;)Ljava/nio/file/Path;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/snapshot/Snapshots.html#parse(java.nio.file.Path)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Nio.File.Path"/></param>
        /// <returns><see cref="Java.Util.Optional"/></returns>
        public static Java.Util.Optional<Org.Apache.Kafka.Snapshot.SnapshotPath> Parse(Java.Nio.File.Path arg0)
        {
            return SExecuteWithSignature<Java.Util.Optional<Org.Apache.Kafka.Snapshot.SnapshotPath>>(LocalBridgeClazz, "parse", "(Ljava/nio/file/Path;)Ljava/util/Optional;", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/snapshot/Snapshots.html#lastContainedLogTimestamp(java.nio.file.Path,org.apache.kafka.raft.OffsetAndEpoch)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Nio.File.Path"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Raft.OffsetAndEpoch"/></param>
        /// <returns><see cref="long"/></returns>
        public static long LastContainedLogTimestamp(Java.Nio.File.Path arg0, Org.Apache.Kafka.Raft.OffsetAndEpoch arg1)
        {
            return SExecuteWithSignature<long>(LocalBridgeClazz, "lastContainedLogTimestamp", "(Ljava/nio/file/Path;Lorg/apache/kafka/raft/OffsetAndEpoch;)J", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/snapshot/Snapshots.html#lastContainedLogTimestamp(org.apache.kafka.snapshot.RawSnapshotReader)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Snapshot.RawSnapshotReader"/></param>
        /// <returns><see cref="long"/></returns>
        public static long LastContainedLogTimestamp(Org.Apache.Kafka.Snapshot.RawSnapshotReader arg0)
        {
            return SExecuteWithSignature<long>(LocalBridgeClazz, "lastContainedLogTimestamp", "(Lorg/apache/kafka/snapshot/RawSnapshotReader;)J", arg0);
        }

        #endregion

        #region Instance methods

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}