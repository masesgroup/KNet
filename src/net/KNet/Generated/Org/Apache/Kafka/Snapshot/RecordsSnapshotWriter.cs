/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.11.0)
*  using kafka-raft-3.9.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Snapshot
{
    #region RecordsSnapshotWriter declaration
    /// <summary>
    /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.9.0/org/apache/kafka/snapshot/RecordsSnapshotWriter.html"/>
    /// </summary>
    public partial class RecordsSnapshotWriter : Org.Apache.Kafka.Snapshot.SnapshotWriter
    {
        const string _bridgeClassName = "org.apache.kafka.snapshot.RecordsSnapshotWriter";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public RecordsSnapshotWriter() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public RecordsSnapshotWriter(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => true;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class
        #region Builder declaration
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.9.0/org/apache/kafka/snapshot/RecordsSnapshotWriter.Builder.html"/>
        /// </summary>
        public partial class Builder : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Builder>
        {
            const string _bridgeClassName = "org.apache.kafka.snapshot.RecordsSnapshotWriter$Builder";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public Builder() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public Builder(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

    
    }
    #endregion

    #region RecordsSnapshotWriter<T> declaration
    /// <summary>
    /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.9.0/org/apache/kafka/snapshot/RecordsSnapshotWriter.html"/>
    /// </summary>
    /// <typeparam name="T"></typeparam>
    public partial class RecordsSnapshotWriter<T> : Org.Apache.Kafka.Snapshot.SnapshotWriter<T>
    {
        const string _bridgeClassName = "org.apache.kafka.snapshot.RecordsSnapshotWriter";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public RecordsSnapshotWriter() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public RecordsSnapshotWriter(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => true;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class
    
    }
    #endregion

    #region RecordsSnapshotWriter implementation
    public partial class RecordsSnapshotWriter
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.9.0/org/apache/kafka/snapshot/RecordsSnapshotWriter.html#isFrozen--"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsFrozen()
        {
            return IExecuteWithSignature<bool>("isFrozen", "()Z");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.9.0/org/apache/kafka/snapshot/RecordsSnapshotWriter.html#lastContainedLogEpoch--"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int LastContainedLogEpoch()
        {
            return IExecuteWithSignature<int>("lastContainedLogEpoch", "()I");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.9.0/org/apache/kafka/snapshot/RecordsSnapshotWriter.html#freeze--"/>
        /// </summary>
        /// <returns><see cref="long"/></returns>
        public long Freeze()
        {
            return IExecuteWithSignature<long>("freeze", "()J");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.9.0/org/apache/kafka/snapshot/RecordsSnapshotWriter.html#lastContainedLogOffset--"/>
        /// </summary>
        /// <returns><see cref="long"/></returns>
        public long LastContainedLogOffset()
        {
            return IExecuteWithSignature<long>("lastContainedLogOffset", "()J");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.9.0/org/apache/kafka/snapshot/RecordsSnapshotWriter.html#snapshotId--"/>
        /// </summary>
        /// <returns><see cref="Org.Apache.Kafka.Raft.OffsetAndEpoch"/></returns>
        public Org.Apache.Kafka.Raft.OffsetAndEpoch SnapshotId()
        {
            return IExecuteWithSignature<Org.Apache.Kafka.Raft.OffsetAndEpoch>("snapshotId", "()Lorg/apache/kafka/raft/OffsetAndEpoch;");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.9.0/org/apache/kafka/snapshot/RecordsSnapshotWriter.html#append-java.util.List-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.List"/></param>
        public void Append(Java.Util.List arg0)
        {
            IExecuteWithSignature("append", "(Ljava/util/List;)V", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.9.0/org/apache/kafka/snapshot/RecordsSnapshotWriter.html#close--"/>
        /// </summary>
        public void Close()
        {
            IExecuteWithSignature("close", "()V");
        }

        #endregion

        #region Nested classes
        #region Builder implementation
        public partial class Builder
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.9.0/org/apache/kafka/snapshot/RecordsSnapshotWriter.Builder.html#setLastContainedLogTimestamp-long-"/>
            /// </summary>
            /// <param name="arg0"><see cref="long"/></param>
            /// <returns><see cref="Org.Apache.Kafka.Snapshot.RecordsSnapshotWriter.Builder"/></returns>
            public Org.Apache.Kafka.Snapshot.RecordsSnapshotWriter.Builder SetLastContainedLogTimestamp(long arg0)
            {
                return IExecuteWithSignature<Org.Apache.Kafka.Snapshot.RecordsSnapshotWriter.Builder>("setLastContainedLogTimestamp", "(J)Lorg/apache/kafka/snapshot/RecordsSnapshotWriter$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.9.0/org/apache/kafka/snapshot/RecordsSnapshotWriter.Builder.html#setMaxBatchSize-int-"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Org.Apache.Kafka.Snapshot.RecordsSnapshotWriter.Builder"/></returns>
            public Org.Apache.Kafka.Snapshot.RecordsSnapshotWriter.Builder SetMaxBatchSize(int arg0)
            {
                return IExecuteWithSignature<Org.Apache.Kafka.Snapshot.RecordsSnapshotWriter.Builder>("setMaxBatchSize", "(I)Lorg/apache/kafka/snapshot/RecordsSnapshotWriter$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.9.0/org/apache/kafka/snapshot/RecordsSnapshotWriter.Builder.html#setMemoryPool-org.apache.kafka.common.memory.MemoryPool-"/>
            /// </summary>
            /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Memory.MemoryPool"/></param>
            /// <returns><see cref="Org.Apache.Kafka.Snapshot.RecordsSnapshotWriter.Builder"/></returns>
            public Org.Apache.Kafka.Snapshot.RecordsSnapshotWriter.Builder SetMemoryPool(Org.Apache.Kafka.Common.Memory.MemoryPool arg0)
            {
                return IExecuteWithSignature<Org.Apache.Kafka.Snapshot.RecordsSnapshotWriter.Builder>("setMemoryPool", "(Lorg/apache/kafka/common/memory/MemoryPool;)Lorg/apache/kafka/snapshot/RecordsSnapshotWriter$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.9.0/org/apache/kafka/snapshot/RecordsSnapshotWriter.Builder.html#setRawSnapshotWriter-org.apache.kafka.snapshot.RawSnapshotWriter-"/>
            /// </summary>
            /// <param name="arg0"><see cref="Org.Apache.Kafka.Snapshot.RawSnapshotWriter"/></param>
            /// <returns><see cref="Org.Apache.Kafka.Snapshot.RecordsSnapshotWriter.Builder"/></returns>
            public Org.Apache.Kafka.Snapshot.RecordsSnapshotWriter.Builder SetRawSnapshotWriter(Org.Apache.Kafka.Snapshot.RawSnapshotWriter arg0)
            {
                return IExecuteWithSignature<Org.Apache.Kafka.Snapshot.RecordsSnapshotWriter.Builder>("setRawSnapshotWriter", "(Lorg/apache/kafka/snapshot/RawSnapshotWriter;)Lorg/apache/kafka/snapshot/RecordsSnapshotWriter$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.9.0/org/apache/kafka/snapshot/RecordsSnapshotWriter.Builder.html#setTime-org.apache.kafka.common.utils.Time-"/>
            /// </summary>
            /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Utils.Time"/></param>
            /// <returns><see cref="Org.Apache.Kafka.Snapshot.RecordsSnapshotWriter.Builder"/></returns>
            public Org.Apache.Kafka.Snapshot.RecordsSnapshotWriter.Builder SetTime(Org.Apache.Kafka.Common.Utils.Time arg0)
            {
                return IExecuteWithSignature<Org.Apache.Kafka.Snapshot.RecordsSnapshotWriter.Builder>("setTime", "(Lorg/apache/kafka/common/utils/Time;)Lorg/apache/kafka/snapshot/RecordsSnapshotWriter$Builder;", arg0);
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.9.0/org/apache/kafka/snapshot/RecordsSnapshotWriter.Builder.html#setVoterSet-java.util.Optional-"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Util.Optional"/></param>
            /// <returns><see cref="Org.Apache.Kafka.Snapshot.RecordsSnapshotWriter.Builder"/></returns>
            public Org.Apache.Kafka.Snapshot.RecordsSnapshotWriter.Builder SetVoterSet(Java.Util.Optional<Org.Apache.Kafka.Raft.VoterSet> arg0)
            {
                return IExecuteWithSignature<Org.Apache.Kafka.Snapshot.RecordsSnapshotWriter.Builder>("setVoterSet", "(Ljava/util/Optional;)Lorg/apache/kafka/snapshot/RecordsSnapshotWriter$Builder;", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion

    #region RecordsSnapshotWriter<T> implementation
    public partial class RecordsSnapshotWriter<T>
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Org.Apache.Kafka.Snapshot.RecordsSnapshotWriter{T}"/> to <see cref="Org.Apache.Kafka.Snapshot.RecordsSnapshotWriter"/>
        /// </summary>
        public static implicit operator Org.Apache.Kafka.Snapshot.RecordsSnapshotWriter(Org.Apache.Kafka.Snapshot.RecordsSnapshotWriter<T> t) => t.Cast<Org.Apache.Kafka.Snapshot.RecordsSnapshotWriter>();

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.9.0/org/apache/kafka/snapshot/RecordsSnapshotWriter.html#isFrozen--"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsFrozen()
        {
            return IExecuteWithSignature<bool>("isFrozen", "()Z");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.9.0/org/apache/kafka/snapshot/RecordsSnapshotWriter.html#lastContainedLogEpoch--"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int LastContainedLogEpoch()
        {
            return IExecuteWithSignature<int>("lastContainedLogEpoch", "()I");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.9.0/org/apache/kafka/snapshot/RecordsSnapshotWriter.html#freeze--"/>
        /// </summary>
        /// <returns><see cref="long"/></returns>
        public long Freeze()
        {
            return IExecuteWithSignature<long>("freeze", "()J");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.9.0/org/apache/kafka/snapshot/RecordsSnapshotWriter.html#lastContainedLogOffset--"/>
        /// </summary>
        /// <returns><see cref="long"/></returns>
        public long LastContainedLogOffset()
        {
            return IExecuteWithSignature<long>("lastContainedLogOffset", "()J");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.9.0/org/apache/kafka/snapshot/RecordsSnapshotWriter.html#snapshotId--"/>
        /// </summary>
        /// <returns><see cref="Org.Apache.Kafka.Raft.OffsetAndEpoch"/></returns>
        public Org.Apache.Kafka.Raft.OffsetAndEpoch SnapshotId()
        {
            return IExecuteWithSignature<Org.Apache.Kafka.Raft.OffsetAndEpoch>("snapshotId", "()Lorg/apache/kafka/raft/OffsetAndEpoch;");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.9.0/org/apache/kafka/snapshot/RecordsSnapshotWriter.html#append-java.util.List-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.List"/></param>
        public void Append(Java.Util.List<T> arg0)
        {
            IExecuteWithSignature("append", "(Ljava/util/List;)V", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.9.0/org/apache/kafka/snapshot/RecordsSnapshotWriter.html#close--"/>
        /// </summary>
        public void Close()
        {
            IExecuteWithSignature("close", "()V");
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}