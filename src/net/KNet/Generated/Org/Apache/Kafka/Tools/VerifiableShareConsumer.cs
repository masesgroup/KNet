/*
*  Copyright (c) 2021-2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.6.4.0)
*  using kafka-tools-4.1.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Tools
{
    #region VerifiableShareConsumer declaration
    /// <summary>
    /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-tools/4.1.0/org/apache/kafka/tools/VerifiableShareConsumer.html"/>
    /// </summary>
    public partial class VerifiableShareConsumer : MASES.JCOBridge.C2JBridge.JVMBridgeBase<VerifiableShareConsumer>, MASES.JCOBridge.C2JBridge.IJVMBridgeMain
    {
        const string _bridgeClassName = "org.apache.kafka.tools.VerifiableShareConsumer";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public VerifiableShareConsumer() { }
        /// <summary>
        /// Internal constructor: used internally from JCOBridge
        /// </summary>
        [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public VerifiableShareConsumer(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public VerifiableShareConsumer(params object[] args) : base(args) { }

        private static readonly global::System.Exception _LocalBridgeClazzException = null;
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <inheritdoc/>
        public override string BridgeClassName => _bridgeClassName;
        /// <inheritdoc/>
        public override bool IsBridgeAbstract => false;
        /// <inheritdoc/>
        public override bool IsBridgeCloseable => true;
        /// <inheritdoc/>
        public override bool IsBridgeInterface => false;
        /// <inheritdoc/>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class
        #region AcknowledgementMode declaration
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-tools/4.1.0/org/apache/kafka/tools/VerifiableShareConsumer.AcknowledgementMode.html"/>
        /// </summary>
        public partial class AcknowledgementMode : Java.Lang.Enum<Org.Apache.Kafka.Tools.VerifiableShareConsumer.AcknowledgementMode>
        {
            const string _bridgeClassName = "org.apache.kafka.tools.VerifiableShareConsumer$AcknowledgementMode";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public AcknowledgementMode() { }
            /// <summary>
            /// Internal constructor: used internally from JCOBridge
            /// </summary>
            [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public AcknowledgementMode(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public AcknowledgementMode(params object[] args) : base(args) { }

            private static readonly global::System.Exception _LocalBridgeClazzException = null;
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <inheritdoc/>
            public override string BridgeClassName => _bridgeClassName;
            /// <inheritdoc/>
            public override bool IsBridgeAbstract => false;
            /// <inheritdoc/>
            public override bool IsBridgeCloseable => false;
            /// <inheritdoc/>
            public override bool IsBridgeInterface => false;
            /// <inheritdoc/>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region PartitionData declaration
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-tools/4.1.0/org/apache/kafka/tools/VerifiableShareConsumer.PartitionData.html"/>
        /// </summary>
        public partial class PartitionData : MASES.JCOBridge.C2JBridge.JVMBridgeBase<PartitionData>
        {
            const string _bridgeClassName = "org.apache.kafka.tools.VerifiableShareConsumer$PartitionData";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public PartitionData() { }
            /// <summary>
            /// Internal constructor: used internally from JCOBridge
            /// </summary>
            [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public PartitionData(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public PartitionData(params object[] args) : base(args) { }

            private static readonly global::System.Exception _LocalBridgeClazzException = null;
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <inheritdoc/>
            public override string BridgeClassName => _bridgeClassName;
            /// <inheritdoc/>
            public override bool IsBridgeAbstract => false;
            /// <inheritdoc/>
            public override bool IsBridgeCloseable => false;
            /// <inheritdoc/>
            public override bool IsBridgeInterface => false;
            /// <inheritdoc/>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region RecordData declaration
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-tools/4.1.0/org/apache/kafka/tools/VerifiableShareConsumer.RecordData.html"/>
        /// </summary>
        public partial class RecordData : MASES.JCOBridge.C2JBridge.JVMBridgeBase<RecordData>
        {
            const string _bridgeClassName = "org.apache.kafka.tools.VerifiableShareConsumer$RecordData";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public RecordData() { }
            /// <summary>
            /// Internal constructor: used internally from JCOBridge
            /// </summary>
            [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public RecordData(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public RecordData(params object[] args) : base(args) { }

            private static readonly global::System.Exception _LocalBridgeClazzException = null;
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <inheritdoc/>
            public override string BridgeClassName => _bridgeClassName;
            /// <inheritdoc/>
            public override bool IsBridgeAbstract => false;
            /// <inheritdoc/>
            public override bool IsBridgeCloseable => false;
            /// <inheritdoc/>
            public override bool IsBridgeInterface => false;
            /// <inheritdoc/>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region RecordsConsumed declaration
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-tools/4.1.0/org/apache/kafka/tools/VerifiableShareConsumer.RecordsConsumed.html"/>
        /// </summary>
        public partial class RecordsConsumed : MASES.JCOBridge.C2JBridge.JVMBridgeBase<RecordsConsumed>
        {
            const string _bridgeClassName = "org.apache.kafka.tools.VerifiableShareConsumer$RecordsConsumed";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public RecordsConsumed() { }
            /// <summary>
            /// Internal constructor: used internally from JCOBridge
            /// </summary>
            [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public RecordsConsumed(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public RecordsConsumed(params object[] args) : base(args) { }

            private static readonly global::System.Exception _LocalBridgeClazzException = null;
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <inheritdoc/>
            public override string BridgeClassName => _bridgeClassName;
            /// <inheritdoc/>
            public override bool IsBridgeAbstract => false;
            /// <inheritdoc/>
            public override bool IsBridgeCloseable => false;
            /// <inheritdoc/>
            public override bool IsBridgeInterface => false;
            /// <inheritdoc/>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region RecordSetSummary declaration
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-tools/4.1.0/org/apache/kafka/tools/VerifiableShareConsumer.RecordSetSummary.html"/>
        /// </summary>
        public partial class RecordSetSummary : Org.Apache.Kafka.Tools.VerifiableShareConsumer.PartitionData
        {
            const string _bridgeClassName = "org.apache.kafka.tools.VerifiableShareConsumer$RecordSetSummary";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public RecordSetSummary() { }
            /// <summary>
            /// Internal constructor: used internally from JCOBridge
            /// </summary>
            [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public RecordSetSummary(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public RecordSetSummary(params object[] args) : base(args) { }

            private static readonly global::System.Exception _LocalBridgeClazzException = null;
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <inheritdoc/>
            public override string BridgeClassName => _bridgeClassName;
            /// <inheritdoc/>
            public override bool IsBridgeAbstract => false;
            /// <inheritdoc/>
            public override bool IsBridgeCloseable => false;
            /// <inheritdoc/>
            public override bool IsBridgeInterface => false;
            /// <inheritdoc/>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

    
    }
    #endregion

    #region VerifiableShareConsumer implementation
    public partial class VerifiableShareConsumer : Java.Io.ICloseable, Org.Apache.Kafka.Clients.Consumer.IAcknowledgementCommitCallback
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-tools/4.1.0/org/apache/kafka/tools/VerifiableShareConsumer.html#%3Cinit%3E(org.apache.kafka.clients.consumer.KafkaShareConsumer,org.apache.kafka.clients.admin.Admin,java.io.PrintStream,java.lang.Integer,java.lang.String,org.apache.kafka.tools.VerifiableShareConsumer.AcknowledgementMode,java.lang.String,java.lang.String,java.lang.Boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Clients.Consumer.KafkaShareConsumer"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Clients.Admin.Admin"/></param>
        /// <param name="arg2"><see cref="Java.Io.PrintStream"/></param>
        /// <param name="arg3"><see cref="Java.Lang.Integer"/></param>
        /// <param name="arg4"><see cref="Java.Lang.String"/></param>
        /// <param name="arg5"><see cref="Org.Apache.Kafka.Tools.VerifiableShareConsumer.AcknowledgementMode"/></param>
        /// <param name="arg6"><see cref="Java.Lang.String"/></param>
        /// <param name="arg7"><see cref="Java.Lang.String"/></param>
        /// <param name="arg8"><see cref="Java.Lang.Boolean"/></param>
        public VerifiableShareConsumer(Org.Apache.Kafka.Clients.Consumer.KafkaShareConsumer<Java.Lang.String, Java.Lang.String> arg0, Org.Apache.Kafka.Clients.Admin.Admin arg1, Java.Io.PrintStream arg2, Java.Lang.Integer arg3, Java.Lang.String arg4, Org.Apache.Kafka.Tools.VerifiableShareConsumer.AcknowledgementMode arg5, Java.Lang.String arg6, Java.Lang.String arg7, Java.Lang.Boolean arg8)
            : base(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
        {
        }

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Org.Apache.Kafka.Tools.VerifiableShareConsumer"/> to <see cref="Java.Io.Closeable"/>
        /// </summary>
        public static implicit operator Java.Io.Closeable(Org.Apache.Kafka.Tools.VerifiableShareConsumer t) => t.Cast<Java.Io.Closeable>();
        /// <summary>
        /// Converter from <see cref="Org.Apache.Kafka.Tools.VerifiableShareConsumer"/> to <see cref="Org.Apache.Kafka.Clients.Consumer.AcknowledgementCommitCallback"/>
        /// </summary>
        public static implicit operator Org.Apache.Kafka.Clients.Consumer.AcknowledgementCommitCallback(Org.Apache.Kafka.Tools.VerifiableShareConsumer t) => t.Cast<Org.Apache.Kafka.Clients.Consumer.AcknowledgementCommitCallback>();

        #endregion

        #region Fields

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-tools/4.1.0/org/apache/kafka/tools/VerifiableShareConsumer.html#main(java.lang.String[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        public static void Main(Java.Lang.String[] arg0)
        {
            SExecuteWithSignature(LocalBridgeClazz, "main", "([Ljava/lang/String;)V", new object[] { arg0 });
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-tools/4.1.0/org/apache/kafka/tools/VerifiableShareConsumer.html#close()"/>
        /// </summary>
        public void Close()
        {
            IExecuteWithSignature("close", "()V");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-tools/4.1.0/org/apache/kafka/tools/VerifiableShareConsumer.html#onComplete(java.util.Map,java.lang.Exception)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Map"/></param>
        /// <param name="arg1"><see cref="Java.Lang.Exception"/></param>
        public void OnComplete(Java.Util.Map<Org.Apache.Kafka.Common.TopicIdPartition, Java.Util.Set<Java.Lang.Long>> arg0, MASES.JCOBridge.C2JBridge.JVMBridgeException arg1)
        {
            IExecuteWithSignature("onComplete", "(Ljava/util/Map;Ljava/lang/Exception;)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-tools/4.1.0/org/apache/kafka/tools/VerifiableShareConsumer.html#run()"/>
        /// </summary>
        public void Run()
        {
            IExecuteWithSignature("run", "()V");
        }

        #endregion

        #region Nested classes
        #region AcknowledgementMode implementation
        public partial class AcknowledgementMode
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-tools/4.1.0/org/apache/kafka/tools/VerifiableShareConsumer.AcknowledgementMode.html#ASYNC"/>
            /// </summary>
            public static Org.Apache.Kafka.Tools.VerifiableShareConsumer.AcknowledgementMode ASYNC { get { if (!_ASYNCReady) { _ASYNCContent = SGetField<Org.Apache.Kafka.Tools.VerifiableShareConsumer.AcknowledgementMode>(LocalBridgeClazz, "ASYNC"); _ASYNCReady = true; } return _ASYNCContent; } }
            private static Org.Apache.Kafka.Tools.VerifiableShareConsumer.AcknowledgementMode _ASYNCContent = default;
            private static bool _ASYNCReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-tools/4.1.0/org/apache/kafka/tools/VerifiableShareConsumer.AcknowledgementMode.html#AUTO"/>
            /// </summary>
            public static Org.Apache.Kafka.Tools.VerifiableShareConsumer.AcknowledgementMode AUTO { get { if (!_AUTOReady) { _AUTOContent = SGetField<Org.Apache.Kafka.Tools.VerifiableShareConsumer.AcknowledgementMode>(LocalBridgeClazz, "AUTO"); _AUTOReady = true; } return _AUTOContent; } }
            private static Org.Apache.Kafka.Tools.VerifiableShareConsumer.AcknowledgementMode _AUTOContent = default;
            private static bool _AUTOReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-tools/4.1.0/org/apache/kafka/tools/VerifiableShareConsumer.AcknowledgementMode.html#SYNC"/>
            /// </summary>
            public static Org.Apache.Kafka.Tools.VerifiableShareConsumer.AcknowledgementMode SYNC { get { if (!_SYNCReady) { _SYNCContent = SGetField<Org.Apache.Kafka.Tools.VerifiableShareConsumer.AcknowledgementMode>(LocalBridgeClazz, "SYNC"); _SYNCReady = true; } return _SYNCContent; } }
            private static Org.Apache.Kafka.Tools.VerifiableShareConsumer.AcknowledgementMode _SYNCContent = default;
            private static bool _SYNCReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-tools/4.1.0/org/apache/kafka/tools/VerifiableShareConsumer.AcknowledgementMode.html#valueOf(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Org.Apache.Kafka.Tools.VerifiableShareConsumer.AcknowledgementMode"/></returns>
            public static Org.Apache.Kafka.Tools.VerifiableShareConsumer.AcknowledgementMode ValueOf(Java.Lang.String arg0)
            {
                return SExecuteWithSignature<Org.Apache.Kafka.Tools.VerifiableShareConsumer.AcknowledgementMode>(LocalBridgeClazz, "valueOf", "(Ljava/lang/String;)Lorg/apache/kafka/tools/VerifiableShareConsumer$AcknowledgementMode;", arg0);
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-tools/4.1.0/org/apache/kafka/tools/VerifiableShareConsumer.AcknowledgementMode.html#values()"/>
            /// </summary>
            /// <returns><see cref="Org.Apache.Kafka.Tools.VerifiableShareConsumer.AcknowledgementMode"/></returns>
            public static Org.Apache.Kafka.Tools.VerifiableShareConsumer.AcknowledgementMode[] Values()
            {
                return SExecuteWithSignatureArray<Org.Apache.Kafka.Tools.VerifiableShareConsumer.AcknowledgementMode>(LocalBridgeClazz, "values", "()[Lorg/apache/kafka/tools/VerifiableShareConsumer$AcknowledgementMode;");
            }

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region PartitionData implementation
        public partial class PartitionData
        {
            #region Constructors
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-tools/4.1.0/org/apache/kafka/tools/VerifiableShareConsumer.PartitionData.html#%3Cinit%3E(java.lang.String,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            public PartitionData(Java.Lang.String arg0, int arg1)
                : base(arg0, arg1)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-tools/4.1.0/org/apache/kafka/tools/VerifiableShareConsumer.PartitionData.html#partition()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int Partition()
            {
                return IExecuteWithSignature<int>("partition", "()I");
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-tools/4.1.0/org/apache/kafka/tools/VerifiableShareConsumer.PartitionData.html#topic()"/>
            /// </summary>
            /// <returns><see cref="Java.Lang.String"/></returns>
            public Java.Lang.String Topic()
            {
                return IExecuteWithSignature<Java.Lang.String>("topic", "()Ljava/lang/String;");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region RecordData implementation
        public partial class RecordData
        {
            #region Constructors
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-tools/4.1.0/org/apache/kafka/tools/VerifiableShareConsumer.RecordData.html#%3Cinit%3E(org.apache.kafka.clients.consumer.ConsumerRecord)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Org.Apache.Kafka.Clients.Consumer.ConsumerRecord"/></param>
            public RecordData(Org.Apache.Kafka.Clients.Consumer.ConsumerRecord<Java.Lang.String, Java.Lang.String> arg0)
                : base(arg0)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-tools/4.1.0/org/apache/kafka/tools/VerifiableShareConsumer.RecordData.html#partition()"/>
            /// </summary>
            /// <returns><see cref="int"/></returns>
            public int Partition()
            {
                return IExecuteWithSignature<int>("partition", "()I");
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-tools/4.1.0/org/apache/kafka/tools/VerifiableShareConsumer.RecordData.html#key()"/>
            /// </summary>
            /// <returns><see cref="Java.Lang.String"/></returns>
            public Java.Lang.String Key()
            {
                return IExecuteWithSignature<Java.Lang.String>("key", "()Ljava/lang/String;");
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-tools/4.1.0/org/apache/kafka/tools/VerifiableShareConsumer.RecordData.html#topic()"/>
            /// </summary>
            /// <returns><see cref="Java.Lang.String"/></returns>
            public Java.Lang.String Topic()
            {
                return IExecuteWithSignature<Java.Lang.String>("topic", "()Ljava/lang/String;");
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-tools/4.1.0/org/apache/kafka/tools/VerifiableShareConsumer.RecordData.html#value()"/>
            /// </summary>
            /// <returns><see cref="Java.Lang.String"/></returns>
            public Java.Lang.String Value()
            {
                return IExecuteWithSignature<Java.Lang.String>("value", "()Ljava/lang/String;");
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-tools/4.1.0/org/apache/kafka/tools/VerifiableShareConsumer.RecordData.html#offset()"/>
            /// </summary>
            /// <returns><see cref="long"/></returns>
            public long Offset()
            {
                return IExecuteWithSignature<long>("offset", "()J");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region RecordsConsumed implementation
        public partial class RecordsConsumed
        {
            #region Constructors
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-tools/4.1.0/org/apache/kafka/tools/VerifiableShareConsumer.RecordsConsumed.html#%3Cinit%3E(long,java.util.List)"/>
            /// </summary>
            /// <param name="arg0"><see cref="long"/></param>
            /// <param name="arg1"><see cref="Java.Util.List"/></param>
            public RecordsConsumed(long arg0, Java.Util.List<Org.Apache.Kafka.Tools.VerifiableShareConsumer.RecordSetSummary> arg1)
                : base(arg0, arg1)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-tools/4.1.0/org/apache/kafka/tools/VerifiableShareConsumer.RecordsConsumed.html#partitions()"/>
            /// </summary>
            /// <returns><see cref="Java.Util.List"/></returns>
            public Java.Util.List<Org.Apache.Kafka.Tools.VerifiableShareConsumer.RecordSetSummary> Partitions()
            {
                return IExecuteWithSignature<Java.Util.List<Org.Apache.Kafka.Tools.VerifiableShareConsumer.RecordSetSummary>>("partitions", "()Ljava/util/List;");
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-tools/4.1.0/org/apache/kafka/tools/VerifiableShareConsumer.RecordsConsumed.html#count()"/>
            /// </summary>
            /// <returns><see cref="long"/></returns>
            public long Count()
            {
                return IExecuteWithSignature<long>("count", "()J");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region RecordSetSummary implementation
        public partial class RecordSetSummary
        {
            #region Constructors
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-tools/4.1.0/org/apache/kafka/tools/VerifiableShareConsumer.RecordSetSummary.html#%3Cinit%3E(java.lang.String,int,java.util.Set)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="Java.Util.Set"/></param>
            public RecordSetSummary(Java.Lang.String arg0, int arg1, Java.Util.Set<Java.Lang.Long> arg2)
                : base(arg0, arg1, arg2)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-tools/4.1.0/org/apache/kafka/tools/VerifiableShareConsumer.RecordSetSummary.html#offsets()"/>
            /// </summary>
            /// <returns><see cref="Java.Util.Set"/></returns>
            public Java.Util.Set<Java.Lang.Long> Offsets()
            {
                return IExecuteWithSignature<Java.Util.Set<Java.Lang.Long>>("offsets", "()Ljava/util/Set;");
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-tools/4.1.0/org/apache/kafka/tools/VerifiableShareConsumer.RecordSetSummary.html#count()"/>
            /// </summary>
            /// <returns><see cref="long"/></returns>
            public long Count()
            {
                return IExecuteWithSignature<long>("count", "()J");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}