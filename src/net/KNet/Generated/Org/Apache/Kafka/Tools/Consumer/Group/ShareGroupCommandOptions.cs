/*
*  Copyright (c) 2021-2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.6.2.0)
*  using kafka-tools-4.0.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Tools.Consumer.Group
{
    #region ShareGroupCommandOptions declaration
    /// <summary>
    /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-tools/4.0.0/org/apache/kafka/tools/consumer/group/ShareGroupCommandOptions.html"/>
    /// </summary>
    public partial class ShareGroupCommandOptions : MASES.JCOBridge.C2JBridge.JVMBridgeBase<ShareGroupCommandOptions>
    {
        const string _bridgeClassName = "org.apache.kafka.tools.consumer.group.ShareGroupCommandOptions";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public ShareGroupCommandOptions() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public ShareGroupCommandOptions(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, false);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <inheritdoc/>
        public override string BridgeClassName => _bridgeClassName;
        /// <inheritdoc/>
        public override bool IsBridgeAbstract => false;
        /// <inheritdoc/>
        public override bool IsBridgeCloseable => false;
        /// <inheritdoc/>
        public override bool IsBridgeInterface => false;
        /// <inheritdoc/>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class

    }
    #endregion

    #region ShareGroupCommandOptions implementation
    public partial class ShareGroupCommandOptions
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-tools/4.0.0/org/apache/kafka/tools/consumer/group/ShareGroupCommandOptions.html#%3Cinit%3E(java.lang.String[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        public ShareGroupCommandOptions(Java.Lang.String[] arg0)
            : base(arg0)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-tools/4.0.0/org/apache/kafka/tools/consumer/group/ShareGroupCommandOptions.html#allDeleteOffsetsOpts"/>
        /// </summary>
        public Java.Util.Set allDeleteOffsetsOpts { get { if (!_allDeleteOffsetsOptsReady) { _allDeleteOffsetsOptsContent = IGetField<Java.Util.Set>("allDeleteOffsetsOpts"); _allDeleteOffsetsOptsReady = true; } return _allDeleteOffsetsOptsContent; } }
        private Java.Util.Set _allDeleteOffsetsOptsContent = default;
        private bool _allDeleteOffsetsOptsReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-tools/4.0.0/org/apache/kafka/tools/consumer/group/ShareGroupCommandOptions.html#allResetOffsetScenarioOpts"/>
        /// </summary>
        public Java.Util.Set allResetOffsetScenarioOpts { get { if (!_allResetOffsetScenarioOptsReady) { _allResetOffsetScenarioOptsContent = IGetField<Java.Util.Set>("allResetOffsetScenarioOpts"); _allResetOffsetScenarioOptsReady = true; } return _allResetOffsetScenarioOptsContent; } }
        private Java.Util.Set _allResetOffsetScenarioOptsContent = default;
        private bool _allResetOffsetScenarioOptsReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-tools/4.0.0/org/apache/kafka/tools/consumer/group/ShareGroupCommandOptions.html#allShareGroupLevelOpts"/>
        /// </summary>
        public Java.Util.Set allShareGroupLevelOpts { get { if (!_allShareGroupLevelOptsReady) { _allShareGroupLevelOptsContent = IGetField<Java.Util.Set>("allShareGroupLevelOpts"); _allShareGroupLevelOptsReady = true; } return _allShareGroupLevelOptsContent; } }
        private Java.Util.Set _allShareGroupLevelOptsContent = default;
        private bool _allShareGroupLevelOptsReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-tools/4.0.0/org/apache/kafka/tools/consumer/group/ShareGroupCommandOptions.html#ALL_TOPICS_DOC"/>
        /// </summary>
        public static Java.Lang.String ALL_TOPICS_DOC { get { if (!_ALL_TOPICS_DOCReady) { _ALL_TOPICS_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ALL_TOPICS_DOC"); _ALL_TOPICS_DOCReady = true; } return _ALL_TOPICS_DOCContent; } }
        private static Java.Lang.String _ALL_TOPICS_DOCContent = default;
        private static bool _ALL_TOPICS_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-tools/4.0.0/org/apache/kafka/tools/consumer/group/ShareGroupCommandOptions.html#BOOTSTRAP_SERVER_DOC"/>
        /// </summary>
        public static Java.Lang.String BOOTSTRAP_SERVER_DOC { get { if (!_BOOTSTRAP_SERVER_DOCReady) { _BOOTSTRAP_SERVER_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "BOOTSTRAP_SERVER_DOC"); _BOOTSTRAP_SERVER_DOCReady = true; } return _BOOTSTRAP_SERVER_DOCContent; } }
        private static Java.Lang.String _BOOTSTRAP_SERVER_DOCContent = default;
        private static bool _BOOTSTRAP_SERVER_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-tools/4.0.0/org/apache/kafka/tools/consumer/group/ShareGroupCommandOptions.html#COMMAND_CONFIG_DOC"/>
        /// </summary>
        public static Java.Lang.String COMMAND_CONFIG_DOC { get { if (!_COMMAND_CONFIG_DOCReady) { _COMMAND_CONFIG_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "COMMAND_CONFIG_DOC"); _COMMAND_CONFIG_DOCReady = true; } return _COMMAND_CONFIG_DOCContent; } }
        private static Java.Lang.String _COMMAND_CONFIG_DOCContent = default;
        private static bool _COMMAND_CONFIG_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-tools/4.0.0/org/apache/kafka/tools/consumer/group/ShareGroupCommandOptions.html#DELETE_DOC"/>
        /// </summary>
        public static Java.Lang.String DELETE_DOC { get { if (!_DELETE_DOCReady) { _DELETE_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DELETE_DOC"); _DELETE_DOCReady = true; } return _DELETE_DOCContent; } }
        private static Java.Lang.String _DELETE_DOCContent = default;
        private static bool _DELETE_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-tools/4.0.0/org/apache/kafka/tools/consumer/group/ShareGroupCommandOptions.html#DELETE_OFFSETS_DOC"/>
        /// </summary>
        public static Java.Lang.String DELETE_OFFSETS_DOC { get { if (!_DELETE_OFFSETS_DOCReady) { _DELETE_OFFSETS_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DELETE_OFFSETS_DOC"); _DELETE_OFFSETS_DOCReady = true; } return _DELETE_OFFSETS_DOCContent; } }
        private static Java.Lang.String _DELETE_OFFSETS_DOCContent = default;
        private static bool _DELETE_OFFSETS_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-tools/4.0.0/org/apache/kafka/tools/consumer/group/ShareGroupCommandOptions.html#DESCRIBE_DOC"/>
        /// </summary>
        public static Java.Lang.String DESCRIBE_DOC { get { if (!_DESCRIBE_DOCReady) { _DESCRIBE_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DESCRIBE_DOC"); _DESCRIBE_DOCReady = true; } return _DESCRIBE_DOCContent; } }
        private static Java.Lang.String _DESCRIBE_DOCContent = default;
        private static bool _DESCRIBE_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-tools/4.0.0/org/apache/kafka/tools/consumer/group/ShareGroupCommandOptions.html#DRY_RUN_DOC"/>
        /// </summary>
        public static Java.Lang.String DRY_RUN_DOC { get { if (!_DRY_RUN_DOCReady) { _DRY_RUN_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DRY_RUN_DOC"); _DRY_RUN_DOCReady = true; } return _DRY_RUN_DOCContent; } }
        private static Java.Lang.String _DRY_RUN_DOCContent = default;
        private static bool _DRY_RUN_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-tools/4.0.0/org/apache/kafka/tools/consumer/group/ShareGroupCommandOptions.html#EXECUTE_DOC"/>
        /// </summary>
        public static Java.Lang.String EXECUTE_DOC { get { if (!_EXECUTE_DOCReady) { _EXECUTE_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EXECUTE_DOC"); _EXECUTE_DOCReady = true; } return _EXECUTE_DOCContent; } }
        private static Java.Lang.String _EXECUTE_DOCContent = default;
        private static bool _EXECUTE_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-tools/4.0.0/org/apache/kafka/tools/consumer/group/ShareGroupCommandOptions.html#GROUP_DOC"/>
        /// </summary>
        public static Java.Lang.String GROUP_DOC { get { if (!_GROUP_DOCReady) { _GROUP_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "GROUP_DOC"); _GROUP_DOCReady = true; } return _GROUP_DOCContent; } }
        private static Java.Lang.String _GROUP_DOCContent = default;
        private static bool _GROUP_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-tools/4.0.0/org/apache/kafka/tools/consumer/group/ShareGroupCommandOptions.html#LIST_DOC"/>
        /// </summary>
        public static Java.Lang.String LIST_DOC { get { if (!_LIST_DOCReady) { _LIST_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "LIST_DOC"); _LIST_DOCReady = true; } return _LIST_DOCContent; } }
        private static Java.Lang.String _LIST_DOCContent = default;
        private static bool _LIST_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-tools/4.0.0/org/apache/kafka/tools/consumer/group/ShareGroupCommandOptions.html#MEMBERS_DOC"/>
        /// </summary>
        public static Java.Lang.String MEMBERS_DOC { get { if (!_MEMBERS_DOCReady) { _MEMBERS_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "MEMBERS_DOC"); _MEMBERS_DOCReady = true; } return _MEMBERS_DOCContent; } }
        private static Java.Lang.String _MEMBERS_DOCContent = default;
        private static bool _MEMBERS_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-tools/4.0.0/org/apache/kafka/tools/consumer/group/ShareGroupCommandOptions.html#NL"/>
        /// </summary>
        public static Java.Lang.String NL { get { if (!_NLReady) { _NLContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "NL"); _NLReady = true; } return _NLContent; } }
        private static Java.Lang.String _NLContent = default;
        private static bool _NLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-tools/4.0.0/org/apache/kafka/tools/consumer/group/ShareGroupCommandOptions.html#OFFSETS_DOC"/>
        /// </summary>
        public static Java.Lang.String OFFSETS_DOC { get { if (!_OFFSETS_DOCReady) { _OFFSETS_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "OFFSETS_DOC"); _OFFSETS_DOCReady = true; } return _OFFSETS_DOCContent; } }
        private static Java.Lang.String _OFFSETS_DOCContent = default;
        private static bool _OFFSETS_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-tools/4.0.0/org/apache/kafka/tools/consumer/group/ShareGroupCommandOptions.html#RESET_OFFSETS_DOC"/>
        /// </summary>
        public static Java.Lang.String RESET_OFFSETS_DOC { get { if (!_RESET_OFFSETS_DOCReady) { _RESET_OFFSETS_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "RESET_OFFSETS_DOC"); _RESET_OFFSETS_DOCReady = true; } return _RESET_OFFSETS_DOCContent; } }
        private static Java.Lang.String _RESET_OFFSETS_DOCContent = default;
        private static bool _RESET_OFFSETS_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-tools/4.0.0/org/apache/kafka/tools/consumer/group/ShareGroupCommandOptions.html#RESET_TO_DATETIME_DOC"/>
        /// </summary>
        public static Java.Lang.String RESET_TO_DATETIME_DOC { get { if (!_RESET_TO_DATETIME_DOCReady) { _RESET_TO_DATETIME_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "RESET_TO_DATETIME_DOC"); _RESET_TO_DATETIME_DOCReady = true; } return _RESET_TO_DATETIME_DOCContent; } }
        private static Java.Lang.String _RESET_TO_DATETIME_DOCContent = default;
        private static bool _RESET_TO_DATETIME_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-tools/4.0.0/org/apache/kafka/tools/consumer/group/ShareGroupCommandOptions.html#RESET_TO_EARLIEST_DOC"/>
        /// </summary>
        public static Java.Lang.String RESET_TO_EARLIEST_DOC { get { if (!_RESET_TO_EARLIEST_DOCReady) { _RESET_TO_EARLIEST_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "RESET_TO_EARLIEST_DOC"); _RESET_TO_EARLIEST_DOCReady = true; } return _RESET_TO_EARLIEST_DOCContent; } }
        private static Java.Lang.String _RESET_TO_EARLIEST_DOCContent = default;
        private static bool _RESET_TO_EARLIEST_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-tools/4.0.0/org/apache/kafka/tools/consumer/group/ShareGroupCommandOptions.html#RESET_TO_LATEST_DOC"/>
        /// </summary>
        public static Java.Lang.String RESET_TO_LATEST_DOC { get { if (!_RESET_TO_LATEST_DOCReady) { _RESET_TO_LATEST_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "RESET_TO_LATEST_DOC"); _RESET_TO_LATEST_DOCReady = true; } return _RESET_TO_LATEST_DOCContent; } }
        private static Java.Lang.String _RESET_TO_LATEST_DOCContent = default;
        private static bool _RESET_TO_LATEST_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-tools/4.0.0/org/apache/kafka/tools/consumer/group/ShareGroupCommandOptions.html#STATE_DOC"/>
        /// </summary>
        public static Java.Lang.String STATE_DOC { get { if (!_STATE_DOCReady) { _STATE_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "STATE_DOC"); _STATE_DOCReady = true; } return _STATE_DOCContent; } }
        private static Java.Lang.String _STATE_DOCContent = default;
        private static bool _STATE_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-tools/4.0.0/org/apache/kafka/tools/consumer/group/ShareGroupCommandOptions.html#TIMEOUT_MS_DOC"/>
        /// </summary>
        public static Java.Lang.String TIMEOUT_MS_DOC { get { if (!_TIMEOUT_MS_DOCReady) { _TIMEOUT_MS_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TIMEOUT_MS_DOC"); _TIMEOUT_MS_DOCReady = true; } return _TIMEOUT_MS_DOCContent; } }
        private static Java.Lang.String _TIMEOUT_MS_DOCContent = default;
        private static bool _TIMEOUT_MS_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-tools/4.0.0/org/apache/kafka/tools/consumer/group/ShareGroupCommandOptions.html#TOPIC_DOC"/>
        /// </summary>
        public static Java.Lang.String TOPIC_DOC { get { if (!_TOPIC_DOCReady) { _TOPIC_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TOPIC_DOC"); _TOPIC_DOCReady = true; } return _TOPIC_DOCContent; } }
        private static Java.Lang.String _TOPIC_DOCContent = default;
        private static bool _TOPIC_DOCReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-tools/4.0.0/org/apache/kafka/tools/consumer/group/ShareGroupCommandOptions.html#checkArgs()"/>
        /// </summary>
        public void CheckArgs()
        {
            IExecuteWithSignature("checkArgs", "()V");
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}