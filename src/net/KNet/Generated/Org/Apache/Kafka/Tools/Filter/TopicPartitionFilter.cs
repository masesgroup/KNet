/*
*  Copyright (c) 2021-2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.6.3.0)
*  using kafka-tools-4.1.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Tools.Filter
{
    #region TopicPartitionFilter declaration
    /// <summary>
    /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-tools/4.0.0/org/apache/kafka/tools/filter/TopicPartitionFilter.html"/>
    /// </summary>
    public partial class TopicPartitionFilter : MASES.JCOBridge.C2JBridge.JVMBridgeBase<TopicPartitionFilter>
    {
        const string _bridgeClassName = "org.apache.kafka.tools.filter.TopicPartitionFilter";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        [global::System.Obsolete("TopicPartitionFilter class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public TopicPartitionFilter() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        [global::System.Obsolete("TopicPartitionFilter class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public TopicPartitionFilter(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, false);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <inheritdoc/>
        public override string BridgeClassName => _bridgeClassName;
        /// <inheritdoc/>
        public override bool IsBridgeAbstract => true;
        /// <inheritdoc/>
        public override bool IsBridgeCloseable => false;
        /// <inheritdoc/>
        public override bool IsBridgeInterface => true;
        /// <inheritdoc/>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class
        #region CompositeTopicPartitionFilter declaration
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-tools/4.0.0/org/apache/kafka/tools/filter/TopicPartitionFilter.CompositeTopicPartitionFilter.html"/>
        /// </summary>
        public partial class CompositeTopicPartitionFilter : Org.Apache.Kafka.Tools.Filter.TopicPartitionFilter
        {
            const string _bridgeClassName = "org.apache.kafka.tools.filter.TopicPartitionFilter$CompositeTopicPartitionFilter";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public CompositeTopicPartitionFilter() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public CompositeTopicPartitionFilter(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, false);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <inheritdoc/>
            public override string BridgeClassName => _bridgeClassName;
            /// <inheritdoc/>
            public override bool IsBridgeAbstract => false;
            /// <inheritdoc/>
            public override bool IsBridgeCloseable => false;
            /// <inheritdoc/>
            public override bool IsBridgeInterface => false;
            /// <inheritdoc/>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region TopicFilterAndPartitionFilter declaration
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-tools/4.0.0/org/apache/kafka/tools/filter/TopicPartitionFilter.TopicFilterAndPartitionFilter.html"/>
        /// </summary>
        public partial class TopicFilterAndPartitionFilter : Org.Apache.Kafka.Tools.Filter.TopicPartitionFilter
        {
            const string _bridgeClassName = "org.apache.kafka.tools.filter.TopicPartitionFilter$TopicFilterAndPartitionFilter";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public TopicFilterAndPartitionFilter() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public TopicFilterAndPartitionFilter(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, false);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <inheritdoc/>
            public override string BridgeClassName => _bridgeClassName;
            /// <inheritdoc/>
            public override bool IsBridgeAbstract => false;
            /// <inheritdoc/>
            public override bool IsBridgeCloseable => false;
            /// <inheritdoc/>
            public override bool IsBridgeInterface => false;
            /// <inheritdoc/>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

    
    }
    #endregion

    #region ITopicPartitionFilter
    /// <summary>
    /// .NET interface skeleton to be manually developed following <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-tools/4.0.0/org/apache/kafka/tools/filter/TopicPartitionFilter.html"/>
    /// </summary>
    public partial interface ITopicPartitionFilter
    {
        #region Instance methods

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion

    #region TopicPartitionFilter implementation
    public partial class TopicPartitionFilter : Org.Apache.Kafka.Tools.Filter.ITopicPartitionFilter
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-tools/4.0.0/org/apache/kafka/tools/filter/TopicPartitionFilter.html#isTopicAllowed(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsTopicAllowed(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<bool>("isTopicAllowed", "(Ljava/lang/String;)Z", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-tools/4.0.0/org/apache/kafka/tools/filter/TopicPartitionFilter.html#isTopicPartitionAllowed(org.apache.kafka.common.TopicPartition)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.TopicPartition"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsTopicPartitionAllowed(Org.Apache.Kafka.Common.TopicPartition arg0)
        {
            return IExecuteWithSignature<bool>("isTopicPartitionAllowed", "(Lorg/apache/kafka/common/TopicPartition;)Z", arg0);
        }

        #endregion

        #region Nested classes
        #region CompositeTopicPartitionFilter implementation
        public partial class CompositeTopicPartitionFilter
        {
            #region Constructors
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-tools/4.0.0/org/apache/kafka/tools/filter/TopicPartitionFilter.CompositeTopicPartitionFilter.html#%3Cinit%3E(java.util.List)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Util.List"/></param>
            public CompositeTopicPartitionFilter(Java.Util.List<Org.Apache.Kafka.Tools.Filter.TopicPartitionFilter> arg0)
                : base(arg0)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-tools/4.0.0/org/apache/kafka/tools/filter/TopicPartitionFilter.CompositeTopicPartitionFilter.html#isTopicAllowed(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="bool"/></returns>
            public bool IsTopicAllowed(Java.Lang.String arg0)
            {
                return IExecuteWithSignature<bool>("isTopicAllowed", "(Ljava/lang/String;)Z", arg0);
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-tools/4.0.0/org/apache/kafka/tools/filter/TopicPartitionFilter.CompositeTopicPartitionFilter.html#isTopicPartitionAllowed(org.apache.kafka.common.TopicPartition)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.TopicPartition"/></param>
            /// <returns><see cref="bool"/></returns>
            public bool IsTopicPartitionAllowed(Org.Apache.Kafka.Common.TopicPartition arg0)
            {
                return IExecuteWithSignature<bool>("isTopicPartitionAllowed", "(Lorg/apache/kafka/common/TopicPartition;)Z", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region TopicFilterAndPartitionFilter implementation
        public partial class TopicFilterAndPartitionFilter
        {
            #region Constructors
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-tools/4.0.0/org/apache/kafka/tools/filter/TopicPartitionFilter.TopicFilterAndPartitionFilter.html#%3Cinit%3E(org.apache.kafka.tools.filter.TopicFilter.IncludeList,org.apache.kafka.tools.filter.PartitionFilter)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Org.Apache.Kafka.Tools.Filter.TopicFilter.IncludeList"/></param>
            /// <param name="arg1"><see cref="Org.Apache.Kafka.Tools.Filter.PartitionFilter"/></param>
            public TopicFilterAndPartitionFilter(Org.Apache.Kafka.Tools.Filter.TopicFilter.IncludeList arg0, Org.Apache.Kafka.Tools.Filter.PartitionFilter arg1)
                : base(arg0, arg1)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-tools/4.0.0/org/apache/kafka/tools/filter/TopicPartitionFilter.TopicFilterAndPartitionFilter.html#isTopicAllowed(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="bool"/></returns>
            public bool IsTopicAllowed(Java.Lang.String arg0)
            {
                return IExecuteWithSignature<bool>("isTopicAllowed", "(Ljava/lang/String;)Z", arg0);
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-tools/4.0.0/org/apache/kafka/tools/filter/TopicPartitionFilter.TopicFilterAndPartitionFilter.html#isTopicPartitionAllowed(org.apache.kafka.common.TopicPartition)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.TopicPartition"/></param>
            /// <returns><see cref="bool"/></returns>
            public bool IsTopicPartitionAllowed(Org.Apache.Kafka.Common.TopicPartition arg0)
            {
                return IExecuteWithSignature<bool>("isTopicPartitionAllowed", "(Lorg/apache/kafka/common/TopicPartition;)Z", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}