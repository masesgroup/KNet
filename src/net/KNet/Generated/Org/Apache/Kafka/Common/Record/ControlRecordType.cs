/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka-clients-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Common.Record
{
    #region ControlRecordType
    public partial class ControlRecordType
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/ControlRecordType.html#ABORT"/>
        /// </summary>
        public static Org.Apache.Kafka.Common.Record.ControlRecordType ABORT { get { return SGetField<Org.Apache.Kafka.Common.Record.ControlRecordType>(LocalBridgeClazz, "ABORT"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/ControlRecordType.html#COMMIT"/>
        /// </summary>
        public static Org.Apache.Kafka.Common.Record.ControlRecordType COMMIT { get { return SGetField<Org.Apache.Kafka.Common.Record.ControlRecordType>(LocalBridgeClazz, "COMMIT"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/ControlRecordType.html#LEADER_CHANGE"/>
        /// </summary>
        public static Org.Apache.Kafka.Common.Record.ControlRecordType LEADER_CHANGE { get { return SGetField<Org.Apache.Kafka.Common.Record.ControlRecordType>(LocalBridgeClazz, "LEADER_CHANGE"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/ControlRecordType.html#SNAPSHOT_FOOTER"/>
        /// </summary>
        public static Org.Apache.Kafka.Common.Record.ControlRecordType SNAPSHOT_FOOTER { get { return SGetField<Org.Apache.Kafka.Common.Record.ControlRecordType>(LocalBridgeClazz, "SNAPSHOT_FOOTER"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/ControlRecordType.html#SNAPSHOT_HEADER"/>
        /// </summary>
        public static Org.Apache.Kafka.Common.Record.ControlRecordType SNAPSHOT_HEADER { get { return SGetField<Org.Apache.Kafka.Common.Record.ControlRecordType>(LocalBridgeClazz, "SNAPSHOT_HEADER"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/ControlRecordType.html#UNKNOWN"/>
        /// </summary>
        public static Org.Apache.Kafka.Common.Record.ControlRecordType UNKNOWN { get { return SGetField<Org.Apache.Kafka.Common.Record.ControlRecordType>(LocalBridgeClazz, "UNKNOWN"); } }

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/ControlRecordType.html#fromTypeId(short)"/>
        /// </summary>
        /// <param name="arg0"><see cref="short"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Record.ControlRecordType"/></returns>
        public static Org.Apache.Kafka.Common.Record.ControlRecordType FromTypeId(short arg0)
        {
            return SExecute<Org.Apache.Kafka.Common.Record.ControlRecordType>(LocalBridgeClazz, "fromTypeId", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/ControlRecordType.html#parse(java.nio.ByteBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Nio.ByteBuffer"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Record.ControlRecordType"/></returns>
        public static Org.Apache.Kafka.Common.Record.ControlRecordType Parse(Java.Nio.ByteBuffer arg0)
        {
            return SExecute<Org.Apache.Kafka.Common.Record.ControlRecordType>(LocalBridgeClazz, "parse", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/ControlRecordType.html#valueOf(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Record.ControlRecordType"/></returns>
        public static Org.Apache.Kafka.Common.Record.ControlRecordType ValueOf(string arg0)
        {
            return SExecute<Org.Apache.Kafka.Common.Record.ControlRecordType>(LocalBridgeClazz, "valueOf", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/ControlRecordType.html#values()"/>
        /// </summary>

        /// <returns><see cref="Org.Apache.Kafka.Common.Record.ControlRecordType"/></returns>
        public static Org.Apache.Kafka.Common.Record.ControlRecordType[] Values()
        {
            return SExecuteArray<Org.Apache.Kafka.Common.Record.ControlRecordType>(LocalBridgeClazz, "values");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/ControlRecordType.html#parseTypeId(java.nio.ByteBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Nio.ByteBuffer"/></param>
        /// <returns><see cref="short"/></returns>
        public static short ParseTypeId(Java.Nio.ByteBuffer arg0)
        {
            return SExecute<short>(LocalBridgeClazz, "parseTypeId", arg0);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/ControlRecordType.html#recordKey()"/>
        /// </summary>

        /// <returns><see cref="Org.Apache.Kafka.Common.Protocol.Types.Struct"/></returns>
        public Org.Apache.Kafka.Common.Protocol.Types.Struct RecordKey()
        {
            return IExecute<Org.Apache.Kafka.Common.Protocol.Types.Struct>("recordKey");
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}