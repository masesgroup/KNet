/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka-clients-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Common.Requests
{
    #region FindCoordinatorRequest
    public partial class FindCoordinatorRequest
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/requests/FindCoordinatorRequest.html#MIN_BATCHED_VERSION"/>
        /// </summary>
        public static short MIN_BATCHED_VERSION { get { return SGetField<short>(LocalBridgeClazz, "MIN_BATCHED_VERSION"); } }

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/requests/FindCoordinatorRequest.html#parse(java.nio.ByteBuffer,short)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Nio.ByteBuffer"/></param>
        /// <param name="arg1"><see cref="short"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Requests.FindCoordinatorRequest"/></returns>
        public static Org.Apache.Kafka.Common.Requests.FindCoordinatorRequest Parse(Java.Nio.ByteBuffer arg0, short arg1)
        {
            return SExecute<Org.Apache.Kafka.Common.Requests.FindCoordinatorRequest>(LocalBridgeClazz, "parse", arg0, arg1);
        }

        #endregion

        #region Instance methods

        #endregion

        #region Nested classes
        #region Builder
        public partial class Builder
        {
            #region Constructors
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/requests/FindCoordinatorRequest.Builder.html#%3Cinit%3E(org.apache.kafka.common.message.FindCoordinatorRequestData)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Message.FindCoordinatorRequestData"/></param>
            public Builder(Org.Apache.Kafka.Common.Message.FindCoordinatorRequestData arg0)
                : base(arg0)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/requests/FindCoordinatorRequest.Builder.html#data()"/> 
            /// </summary>
            public Org.Apache.Kafka.Common.Message.FindCoordinatorRequestData Data
            {
                get { return IExecute<Org.Apache.Kafka.Common.Message.FindCoordinatorRequestData>("data"); }
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region CoordinatorType
        public partial class CoordinatorType
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/requests/FindCoordinatorRequest.CoordinatorType.html#GROUP"/>
            /// </summary>
            public static Org.Apache.Kafka.Common.Requests.FindCoordinatorRequest.CoordinatorType GROUP { get { return SGetField<Org.Apache.Kafka.Common.Requests.FindCoordinatorRequest.CoordinatorType>(LocalBridgeClazz, "GROUP"); } }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/requests/FindCoordinatorRequest.CoordinatorType.html#TRANSACTION"/>
            /// </summary>
            public static Org.Apache.Kafka.Common.Requests.FindCoordinatorRequest.CoordinatorType TRANSACTION { get { return SGetField<Org.Apache.Kafka.Common.Requests.FindCoordinatorRequest.CoordinatorType>(LocalBridgeClazz, "TRANSACTION"); } }

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/requests/FindCoordinatorRequest.CoordinatorType.html#values()"/> 
            /// </summary>
            public static Org.Apache.Kafka.Common.Requests.FindCoordinatorRequest.CoordinatorType[] Values
            {
                get { return SExecuteArray<Org.Apache.Kafka.Common.Requests.FindCoordinatorRequest.CoordinatorType>(LocalBridgeClazz, "values"); }
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/requests/FindCoordinatorRequest.CoordinatorType.html#forId(byte)"/>
            /// </summary>
            /// <param name="arg0"><see cref="byte"/></param>
            /// <returns><see cref="Org.Apache.Kafka.Common.Requests.FindCoordinatorRequest.CoordinatorType"/></returns>
            public static Org.Apache.Kafka.Common.Requests.FindCoordinatorRequest.CoordinatorType ForId(byte arg0)
            {
                return SExecute<Org.Apache.Kafka.Common.Requests.FindCoordinatorRequest.CoordinatorType>(LocalBridgeClazz, "forId", arg0);
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/requests/FindCoordinatorRequest.CoordinatorType.html#valueOf(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="string"/></param>
            /// <returns><see cref="Org.Apache.Kafka.Common.Requests.FindCoordinatorRequest.CoordinatorType"/></returns>
            public static Org.Apache.Kafka.Common.Requests.FindCoordinatorRequest.CoordinatorType ValueOf(string arg0)
            {
                return SExecute<Org.Apache.Kafka.Common.Requests.FindCoordinatorRequest.CoordinatorType>(LocalBridgeClazz, "valueOf", arg0);
            }

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/requests/FindCoordinatorRequest.CoordinatorType.html#id()"/> 
            /// </summary>
            public byte Id
            {
                get { return IExecute<byte>("id"); }
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region NoBatchedFindCoordinatorsException
        public partial class NoBatchedFindCoordinatorsException
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}