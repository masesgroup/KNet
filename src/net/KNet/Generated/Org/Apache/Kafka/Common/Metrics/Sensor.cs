/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.1.0.0)
*  using kafka-clients-3.6.1.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Common.Metrics
{
    #region Sensor
    public partial class Sensor
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.6.1/org/apache/kafka/common/metrics/Sensor.html#add-org.apache.kafka.common.MetricName-org.apache.kafka.common.metrics.MeasurableStat-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.MetricName"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Common.Metrics.MeasurableStat"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool Add(Org.Apache.Kafka.Common.MetricName arg0, Org.Apache.Kafka.Common.Metrics.MeasurableStat arg1)
        {
            return IExecute<bool>("add", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.6.1/org/apache/kafka/common/metrics/Sensor.html#add-org.apache.kafka.common.metrics.CompoundStat-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Metrics.CompoundStat"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool Add(Org.Apache.Kafka.Common.Metrics.CompoundStat arg0)
        {
            return IExecute<bool>("add", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.6.1/org/apache/kafka/common/metrics/Sensor.html#hasExpired--"/>
        /// </summary>

        /// <returns><see cref="bool"/></returns>
        public bool HasExpired()
        {
            return IExecute<bool>("hasExpired");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.6.1/org/apache/kafka/common/metrics/Sensor.html#shouldRecord--"/>
        /// </summary>

        /// <returns><see cref="bool"/></returns>
        public bool ShouldRecord()
        {
            return IExecute<bool>("shouldRecord");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.6.1/org/apache/kafka/common/metrics/Sensor.html#name--"/>
        /// </summary>

        /// <returns><see cref="string"/></returns>
        public string Name()
        {
            return IExecute<string>("name");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.6.1/org/apache/kafka/common/metrics/Sensor.html#add-org.apache.kafka.common.MetricName-org.apache.kafka.common.metrics.MeasurableStat-org.apache.kafka.common.metrics.MetricConfig-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.MetricName"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Common.Metrics.MeasurableStat"/></param>
        /// <param name="arg2"><see cref="Org.Apache.Kafka.Common.Metrics.MetricConfig"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool Add(Org.Apache.Kafka.Common.MetricName arg0, Org.Apache.Kafka.Common.Metrics.MeasurableStat arg1, Org.Apache.Kafka.Common.Metrics.MetricConfig arg2)
        {
            return IExecute<bool>("add", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.6.1/org/apache/kafka/common/metrics/Sensor.html#add-org.apache.kafka.common.metrics.CompoundStat-org.apache.kafka.common.metrics.MetricConfig-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Metrics.CompoundStat"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Common.Metrics.MetricConfig"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool Add(Org.Apache.Kafka.Common.Metrics.CompoundStat arg0, Org.Apache.Kafka.Common.Metrics.MetricConfig arg1)
        {
            return IExecute<bool>("add", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.6.1/org/apache/kafka/common/metrics/Sensor.html#hasMetrics--"/>
        /// </summary>

        /// <returns><see cref="bool"/></returns>
        public bool HasMetrics()
        {
            return IExecute<bool>("hasMetrics");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.6.1/org/apache/kafka/common/metrics/Sensor.html#checkQuotas--"/>
        /// </summary>
        public void CheckQuotas()
        {
            IExecute("checkQuotas");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.6.1/org/apache/kafka/common/metrics/Sensor.html#checkQuotas-long-"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        public void CheckQuotas(long arg0)
        {
            IExecute("checkQuotas", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.6.1/org/apache/kafka/common/metrics/Sensor.html#record--"/>
        /// </summary>
        public void Record()
        {
            IExecute("record");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.6.1/org/apache/kafka/common/metrics/Sensor.html#record-double-long-boolean-"/>
        /// </summary>
        /// <param name="arg0"><see cref="double"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        /// <param name="arg2"><see cref="bool"/></param>
        public void Record(double arg0, long arg1, bool arg2)
        {
            IExecute("record", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.6.1/org/apache/kafka/common/metrics/Sensor.html#record-double-long-"/>
        /// </summary>
        /// <param name="arg0"><see cref="double"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        public void Record(double arg0, long arg1)
        {
            IExecute("record", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.6.1/org/apache/kafka/common/metrics/Sensor.html#record-double-"/>
        /// </summary>
        /// <param name="arg0"><see cref="double"/></param>
        public void Record(double arg0)
        {
            IExecute("record", arg0);
        }

        #endregion

        #region Nested classes
        #region RecordingLevel
        public partial class RecordingLevel
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.6.1/org/apache/kafka/common/metrics/Sensor.RecordingLevel.html#name"/>
            /// </summary>
            public string name { get { return IGetField<string>("name"); } }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.6.1/org/apache/kafka/common/metrics/Sensor.RecordingLevel.html#id"/>
            /// </summary>
            public short id { get { return IGetField<short>("id"); } }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.6.1/org/apache/kafka/common/metrics/Sensor.RecordingLevel.html#MAX_RECORDING_LEVEL_KEY"/>
            /// </summary>
            public static int MAX_RECORDING_LEVEL_KEY { get { return SGetField<int>(LocalBridgeClazz, "MAX_RECORDING_LEVEL_KEY"); } }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.6.1/org/apache/kafka/common/metrics/Sensor.RecordingLevel.html#DEBUG"/>
            /// </summary>
            public static Org.Apache.Kafka.Common.Metrics.Sensor.RecordingLevel DEBUG { get { return SGetField<Org.Apache.Kafka.Common.Metrics.Sensor.RecordingLevel>(LocalBridgeClazz, "DEBUG"); } }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.6.1/org/apache/kafka/common/metrics/Sensor.RecordingLevel.html#INFO"/>
            /// </summary>
            public static Org.Apache.Kafka.Common.Metrics.Sensor.RecordingLevel INFO { get { return SGetField<Org.Apache.Kafka.Common.Metrics.Sensor.RecordingLevel>(LocalBridgeClazz, "INFO"); } }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.6.1/org/apache/kafka/common/metrics/Sensor.RecordingLevel.html#TRACE"/>
            /// </summary>
            public static Org.Apache.Kafka.Common.Metrics.Sensor.RecordingLevel TRACE { get { return SGetField<Org.Apache.Kafka.Common.Metrics.Sensor.RecordingLevel>(LocalBridgeClazz, "TRACE"); } }

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.6.1/org/apache/kafka/common/metrics/Sensor.RecordingLevel.html#forId-int-"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Org.Apache.Kafka.Common.Metrics.Sensor.RecordingLevel"/></returns>
            public static Org.Apache.Kafka.Common.Metrics.Sensor.RecordingLevel ForId(int arg0)
            {
                return SExecute<Org.Apache.Kafka.Common.Metrics.Sensor.RecordingLevel>(LocalBridgeClazz, "forId", arg0);
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.6.1/org/apache/kafka/common/metrics/Sensor.RecordingLevel.html#forName-java.lang.String-"/>
            /// </summary>
            /// <param name="arg0"><see cref="string"/></param>
            /// <returns><see cref="Org.Apache.Kafka.Common.Metrics.Sensor.RecordingLevel"/></returns>
            public static Org.Apache.Kafka.Common.Metrics.Sensor.RecordingLevel ForName(string arg0)
            {
                return SExecute<Org.Apache.Kafka.Common.Metrics.Sensor.RecordingLevel>(LocalBridgeClazz, "forName", arg0);
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.6.1/org/apache/kafka/common/metrics/Sensor.RecordingLevel.html#valueOf-java.lang.String-"/>
            /// </summary>
            /// <param name="arg0"><see cref="string"/></param>
            /// <returns><see cref="Org.Apache.Kafka.Common.Metrics.Sensor.RecordingLevel"/></returns>
            public static Org.Apache.Kafka.Common.Metrics.Sensor.RecordingLevel ValueOf(string arg0)
            {
                return SExecute<Org.Apache.Kafka.Common.Metrics.Sensor.RecordingLevel>(LocalBridgeClazz, "valueOf", arg0);
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.6.1/org/apache/kafka/common/metrics/Sensor.RecordingLevel.html#values--"/>
            /// </summary>

            /// <returns><see cref="Org.Apache.Kafka.Common.Metrics.Sensor.RecordingLevel"/></returns>
            public static Org.Apache.Kafka.Common.Metrics.Sensor.RecordingLevel[] Values()
            {
                return SExecuteArray<Org.Apache.Kafka.Common.Metrics.Sensor.RecordingLevel>(LocalBridgeClazz, "values");
            }

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.6.1/org/apache/kafka/common/metrics/Sensor.RecordingLevel.html#shouldRecord-int-"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="bool"/></returns>
            public bool ShouldRecord(int arg0)
            {
                return IExecute<bool>("shouldRecord", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}