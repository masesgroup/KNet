/*
*  Copyright 2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.12.0)
*  using kafka-clients-4.0.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Common
{
    #region ClassicGroupState declaration
    /// <summary>
    /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.0.0/org/apache/kafka/common/ClassicGroupState.html"/>
    /// </summary>
    public partial class ClassicGroupState : Java.Lang.Enum<Org.Apache.Kafka.Common.ClassicGroupState>
    {
        const string _bridgeClassName = "org.apache.kafka.common.ClassicGroupState";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public ClassicGroupState() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public ClassicGroupState(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class

    }
    #endregion

    #region ClassicGroupState implementation
    public partial class ClassicGroupState
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.0.0/org/apache/kafka/common/ClassicGroupState.html#COMPLETING_REBALANCE"/>
        /// </summary>
        public static Org.Apache.Kafka.Common.ClassicGroupState COMPLETING_REBALANCE { get { if (!_COMPLETING_REBALANCEReady) { _COMPLETING_REBALANCEContent = SGetField<Org.Apache.Kafka.Common.ClassicGroupState>(LocalBridgeClazz, "COMPLETING_REBALANCE"); _COMPLETING_REBALANCEReady = true; } return _COMPLETING_REBALANCEContent; } }
        private static Org.Apache.Kafka.Common.ClassicGroupState _COMPLETING_REBALANCEContent = default;
        private static bool _COMPLETING_REBALANCEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.0.0/org/apache/kafka/common/ClassicGroupState.html#DEAD"/>
        /// </summary>
        public static Org.Apache.Kafka.Common.ClassicGroupState DEAD { get { if (!_DEADReady) { _DEADContent = SGetField<Org.Apache.Kafka.Common.ClassicGroupState>(LocalBridgeClazz, "DEAD"); _DEADReady = true; } return _DEADContent; } }
        private static Org.Apache.Kafka.Common.ClassicGroupState _DEADContent = default;
        private static bool _DEADReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.0.0/org/apache/kafka/common/ClassicGroupState.html#EMPTY"/>
        /// </summary>
        public static Org.Apache.Kafka.Common.ClassicGroupState EMPTY { get { if (!_EMPTYReady) { _EMPTYContent = SGetField<Org.Apache.Kafka.Common.ClassicGroupState>(LocalBridgeClazz, "EMPTY"); _EMPTYReady = true; } return _EMPTYContent; } }
        private static Org.Apache.Kafka.Common.ClassicGroupState _EMPTYContent = default;
        private static bool _EMPTYReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.0.0/org/apache/kafka/common/ClassicGroupState.html#PREPARING_REBALANCE"/>
        /// </summary>
        public static Org.Apache.Kafka.Common.ClassicGroupState PREPARING_REBALANCE { get { if (!_PREPARING_REBALANCEReady) { _PREPARING_REBALANCEContent = SGetField<Org.Apache.Kafka.Common.ClassicGroupState>(LocalBridgeClazz, "PREPARING_REBALANCE"); _PREPARING_REBALANCEReady = true; } return _PREPARING_REBALANCEContent; } }
        private static Org.Apache.Kafka.Common.ClassicGroupState _PREPARING_REBALANCEContent = default;
        private static bool _PREPARING_REBALANCEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.0.0/org/apache/kafka/common/ClassicGroupState.html#STABLE"/>
        /// </summary>
        public static Org.Apache.Kafka.Common.ClassicGroupState STABLE { get { if (!_STABLEReady) { _STABLEContent = SGetField<Org.Apache.Kafka.Common.ClassicGroupState>(LocalBridgeClazz, "STABLE"); _STABLEReady = true; } return _STABLEContent; } }
        private static Org.Apache.Kafka.Common.ClassicGroupState _STABLEContent = default;
        private static bool _STABLEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.0.0/org/apache/kafka/common/ClassicGroupState.html#UNKNOWN"/>
        /// </summary>
        public static Org.Apache.Kafka.Common.ClassicGroupState UNKNOWN { get { if (!_UNKNOWNReady) { _UNKNOWNContent = SGetField<Org.Apache.Kafka.Common.ClassicGroupState>(LocalBridgeClazz, "UNKNOWN"); _UNKNOWNReady = true; } return _UNKNOWNContent; } }
        private static Org.Apache.Kafka.Common.ClassicGroupState _UNKNOWNContent = default;
        private static bool _UNKNOWNReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.0.0/org/apache/kafka/common/ClassicGroupState.html#parse-java.lang.String-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.ClassicGroupState"/></returns>
        public static Org.Apache.Kafka.Common.ClassicGroupState Parse(Java.Lang.String arg0)
        {
            return SExecuteWithSignature<Org.Apache.Kafka.Common.ClassicGroupState>(LocalBridgeClazz, "parse", "(Ljava/lang/String;)Lorg/apache/kafka/common/ClassicGroupState;", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.0.0/org/apache/kafka/common/ClassicGroupState.html#valueOf-java.lang.String-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.ClassicGroupState"/></returns>
        public static Org.Apache.Kafka.Common.ClassicGroupState ValueOf(Java.Lang.String arg0)
        {
            return SExecuteWithSignature<Org.Apache.Kafka.Common.ClassicGroupState>(LocalBridgeClazz, "valueOf", "(Ljava/lang/String;)Lorg/apache/kafka/common/ClassicGroupState;", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.0.0/org/apache/kafka/common/ClassicGroupState.html#values--"/>
        /// </summary>
        /// <returns><see cref="Org.Apache.Kafka.Common.ClassicGroupState"/></returns>
        public static Org.Apache.Kafka.Common.ClassicGroupState[] Values()
        {
            return SExecuteWithSignatureArray<Org.Apache.Kafka.Common.ClassicGroupState>(LocalBridgeClazz, "values", "()[Lorg/apache/kafka/common/ClassicGroupState;");
        }

        #endregion

        #region Instance methods

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}