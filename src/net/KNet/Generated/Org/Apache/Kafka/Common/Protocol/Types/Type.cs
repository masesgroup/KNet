/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka-clients-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Common.Protocol.Types
{
    #region Type
    public partial class Type
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/protocol/types/Type.html#BOOLEAN"/>
        /// </summary>
        public static Org.Apache.Kafka.Common.Protocol.Types.Type.DocumentedType BOOLEAN { get { return SGetField<Org.Apache.Kafka.Common.Protocol.Types.Type.DocumentedType>(LocalBridgeClazz, "BOOLEAN"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/protocol/types/Type.html#BYTES"/>
        /// </summary>
        public static Org.Apache.Kafka.Common.Protocol.Types.Type.DocumentedType BYTES { get { return SGetField<Org.Apache.Kafka.Common.Protocol.Types.Type.DocumentedType>(LocalBridgeClazz, "BYTES"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/protocol/types/Type.html#COMPACT_BYTES"/>
        /// </summary>
        public static Org.Apache.Kafka.Common.Protocol.Types.Type.DocumentedType COMPACT_BYTES { get { return SGetField<Org.Apache.Kafka.Common.Protocol.Types.Type.DocumentedType>(LocalBridgeClazz, "COMPACT_BYTES"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/protocol/types/Type.html#COMPACT_NULLABLE_BYTES"/>
        /// </summary>
        public static Org.Apache.Kafka.Common.Protocol.Types.Type.DocumentedType COMPACT_NULLABLE_BYTES { get { return SGetField<Org.Apache.Kafka.Common.Protocol.Types.Type.DocumentedType>(LocalBridgeClazz, "COMPACT_NULLABLE_BYTES"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/protocol/types/Type.html#COMPACT_NULLABLE_STRING"/>
        /// </summary>
        public static Org.Apache.Kafka.Common.Protocol.Types.Type.DocumentedType COMPACT_NULLABLE_STRING { get { return SGetField<Org.Apache.Kafka.Common.Protocol.Types.Type.DocumentedType>(LocalBridgeClazz, "COMPACT_NULLABLE_STRING"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/protocol/types/Type.html#COMPACT_RECORDS"/>
        /// </summary>
        public static Org.Apache.Kafka.Common.Protocol.Types.Type.DocumentedType COMPACT_RECORDS { get { return SGetField<Org.Apache.Kafka.Common.Protocol.Types.Type.DocumentedType>(LocalBridgeClazz, "COMPACT_RECORDS"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/protocol/types/Type.html#COMPACT_STRING"/>
        /// </summary>
        public static Org.Apache.Kafka.Common.Protocol.Types.Type.DocumentedType COMPACT_STRING { get { return SGetField<Org.Apache.Kafka.Common.Protocol.Types.Type.DocumentedType>(LocalBridgeClazz, "COMPACT_STRING"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/protocol/types/Type.html#FLOAT64"/>
        /// </summary>
        public static Org.Apache.Kafka.Common.Protocol.Types.Type.DocumentedType FLOAT64 { get { return SGetField<Org.Apache.Kafka.Common.Protocol.Types.Type.DocumentedType>(LocalBridgeClazz, "FLOAT64"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/protocol/types/Type.html#INT16"/>
        /// </summary>
        public static Org.Apache.Kafka.Common.Protocol.Types.Type.DocumentedType INT16 { get { return SGetField<Org.Apache.Kafka.Common.Protocol.Types.Type.DocumentedType>(LocalBridgeClazz, "INT16"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/protocol/types/Type.html#INT32"/>
        /// </summary>
        public static Org.Apache.Kafka.Common.Protocol.Types.Type.DocumentedType INT32 { get { return SGetField<Org.Apache.Kafka.Common.Protocol.Types.Type.DocumentedType>(LocalBridgeClazz, "INT32"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/protocol/types/Type.html#INT64"/>
        /// </summary>
        public static Org.Apache.Kafka.Common.Protocol.Types.Type.DocumentedType INT64 { get { return SGetField<Org.Apache.Kafka.Common.Protocol.Types.Type.DocumentedType>(LocalBridgeClazz, "INT64"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/protocol/types/Type.html#INT8"/>
        /// </summary>
        public static Org.Apache.Kafka.Common.Protocol.Types.Type.DocumentedType INT8 { get { return SGetField<Org.Apache.Kafka.Common.Protocol.Types.Type.DocumentedType>(LocalBridgeClazz, "INT8"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/protocol/types/Type.html#NULLABLE_BYTES"/>
        /// </summary>
        public static Org.Apache.Kafka.Common.Protocol.Types.Type.DocumentedType NULLABLE_BYTES { get { return SGetField<Org.Apache.Kafka.Common.Protocol.Types.Type.DocumentedType>(LocalBridgeClazz, "NULLABLE_BYTES"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/protocol/types/Type.html#NULLABLE_STRING"/>
        /// </summary>
        public static Org.Apache.Kafka.Common.Protocol.Types.Type.DocumentedType NULLABLE_STRING { get { return SGetField<Org.Apache.Kafka.Common.Protocol.Types.Type.DocumentedType>(LocalBridgeClazz, "NULLABLE_STRING"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/protocol/types/Type.html#RECORDS"/>
        /// </summary>
        public static Org.Apache.Kafka.Common.Protocol.Types.Type.DocumentedType RECORDS { get { return SGetField<Org.Apache.Kafka.Common.Protocol.Types.Type.DocumentedType>(LocalBridgeClazz, "RECORDS"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/protocol/types/Type.html#STRING"/>
        /// </summary>
        public static Org.Apache.Kafka.Common.Protocol.Types.Type.DocumentedType STRING { get { return SGetField<Org.Apache.Kafka.Common.Protocol.Types.Type.DocumentedType>(LocalBridgeClazz, "STRING"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/protocol/types/Type.html#UINT16"/>
        /// </summary>
        public static Org.Apache.Kafka.Common.Protocol.Types.Type.DocumentedType UINT16 { get { return SGetField<Org.Apache.Kafka.Common.Protocol.Types.Type.DocumentedType>(LocalBridgeClazz, "UINT16"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/protocol/types/Type.html#UNSIGNED_INT32"/>
        /// </summary>
        public static Org.Apache.Kafka.Common.Protocol.Types.Type.DocumentedType UNSIGNED_INT32 { get { return SGetField<Org.Apache.Kafka.Common.Protocol.Types.Type.DocumentedType>(LocalBridgeClazz, "UNSIGNED_INT32"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/protocol/types/Type.html#UUID"/>
        /// </summary>
        public static Org.Apache.Kafka.Common.Protocol.Types.Type.DocumentedType UUID { get { return SGetField<Org.Apache.Kafka.Common.Protocol.Types.Type.DocumentedType>(LocalBridgeClazz, "UUID"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/protocol/types/Type.html#VARINT"/>
        /// </summary>
        public static Org.Apache.Kafka.Common.Protocol.Types.Type.DocumentedType VARINT { get { return SGetField<Org.Apache.Kafka.Common.Protocol.Types.Type.DocumentedType>(LocalBridgeClazz, "VARINT"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/protocol/types/Type.html#VARLONG"/>
        /// </summary>
        public static Org.Apache.Kafka.Common.Protocol.Types.Type.DocumentedType VARLONG { get { return SGetField<Org.Apache.Kafka.Common.Protocol.Types.Type.DocumentedType>(LocalBridgeClazz, "VARLONG"); } }

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/protocol/types/Type.html#main(java.lang.String[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        public static void Main(string[] arg0)
        {
            SExecute(LocalBridgeClazz, "main", new object[] { arg0 });
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/protocol/types/Type.html#sizeOf(java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref="object"/></param>
        /// <returns><see cref="int"/></returns>
        public int SizeOf(object arg0)
        {
            return IExecute<int>("sizeOf", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/protocol/types/Type.html#read(java.nio.ByteBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Nio.ByteBuffer"/></param>
        /// <returns><see cref="object"/></returns>
        public object Read(Java.Nio.ByteBuffer arg0)
        {
            return IExecute("read", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/protocol/types/Type.html#validate(java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref="object"/></param>
        /// <returns><see cref="object"/></returns>
        public object Validate(object arg0)
        {
            return IExecute("validate", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/protocol/types/Type.html#write(java.nio.ByteBuffer,java.lang.Object)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Nio.ByteBuffer"/></param>
        /// <param name="arg1"><see cref="object"/></param>
        public void Write(Java.Nio.ByteBuffer arg0, object arg1)
        {
            IExecute("write", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/protocol/types/Type.html#isNullable()"/>
        /// </summary>

        /// <returns><see cref="bool"/></returns>
        public bool IsNullable()
        {
            return IExecute<bool>("isNullable");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/protocol/types/Type.html#isArray()"/>
        /// </summary>

        /// <returns><see cref="bool"/></returns>
        public bool IsArray()
        {
            return IExecute<bool>("isArray");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/protocol/types/Type.html#arrayElementType()"/>
        /// </summary>

        /// <returns><see cref="Java.Util.Optional"/></returns>
        public Java.Util.Optional<Org.Apache.Kafka.Common.Protocol.Types.Type> ArrayElementType()
        {
            return IExecute<Java.Util.Optional<Org.Apache.Kafka.Common.Protocol.Types.Type>>("arrayElementType");
        }

        #endregion

        #region Nested classes
        #region DocumentedType
        public partial class DocumentedType
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/protocol/types/Type.DocumentedType.html#documentation()"/>
            /// </summary>

            /// <returns><see cref="string"/></returns>
            public string Documentation()
            {
                return IExecute<string>("documentation");
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/protocol/types/Type.DocumentedType.html#typeName()"/>
            /// </summary>

            /// <returns><see cref="string"/></returns>
            public string TypeName()
            {
                return IExecute<string>("typeName");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}