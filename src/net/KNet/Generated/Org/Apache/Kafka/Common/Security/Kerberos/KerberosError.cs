/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka-clients-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Common.Security.Kerberos
{
    #region KerberosError
    public partial class KerberosError
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/security/kerberos/KerberosError.html#CLIENT_NOT_YET_VALID"/>
        /// </summary>
        public static Org.Apache.Kafka.Common.Security.Kerberos.KerberosError CLIENT_NOT_YET_VALID { get { return SGetField<Org.Apache.Kafka.Common.Security.Kerberos.KerberosError>(LocalBridgeClazz, "CLIENT_NOT_YET_VALID"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/security/kerberos/KerberosError.html#REPLAY"/>
        /// </summary>
        public static Org.Apache.Kafka.Common.Security.Kerberos.KerberosError REPLAY { get { return SGetField<Org.Apache.Kafka.Common.Security.Kerberos.KerberosError>(LocalBridgeClazz, "REPLAY"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/security/kerberos/KerberosError.html#SERVER_NOT_FOUND"/>
        /// </summary>
        public static Org.Apache.Kafka.Common.Security.Kerberos.KerberosError SERVER_NOT_FOUND { get { return SGetField<Org.Apache.Kafka.Common.Security.Kerberos.KerberosError>(LocalBridgeClazz, "SERVER_NOT_FOUND"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/security/kerberos/KerberosError.html#TICKET_NOT_YET_VALID"/>
        /// </summary>
        public static Org.Apache.Kafka.Common.Security.Kerberos.KerberosError TICKET_NOT_YET_VALID { get { return SGetField<Org.Apache.Kafka.Common.Security.Kerberos.KerberosError>(LocalBridgeClazz, "TICKET_NOT_YET_VALID"); } }

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/security/kerberos/KerberosError.html#values()"/> 
        /// </summary>
        public static Org.Apache.Kafka.Common.Security.Kerberos.KerberosError[] Values
        {
            get { return SExecuteArray<Org.Apache.Kafka.Common.Security.Kerberos.KerberosError>(LocalBridgeClazz, "values"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/security/kerberos/KerberosError.html#isRetriableClientGssException(java.lang.Exception)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.Exception"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool IsRetriableClientGssException(Java.Lang.Exception arg0)
        {
            return SExecute<bool>(LocalBridgeClazz, "isRetriableClientGssException", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/security/kerberos/KerberosError.html#fromException(java.lang.Exception)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.Exception"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Security.Kerberos.KerberosError"/></returns>
        public static Org.Apache.Kafka.Common.Security.Kerberos.KerberosError FromException(Java.Lang.Exception arg0)
        {
            return SExecute<Org.Apache.Kafka.Common.Security.Kerberos.KerberosError>(LocalBridgeClazz, "fromException", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/security/kerberos/KerberosError.html#valueOf(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Security.Kerberos.KerberosError"/></returns>
        public static Org.Apache.Kafka.Common.Security.Kerberos.KerberosError ValueOf(string arg0)
        {
            return SExecute<Org.Apache.Kafka.Common.Security.Kerberos.KerberosError>(LocalBridgeClazz, "valueOf", arg0);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/security/kerberos/KerberosError.html#retriable()"/> 
        /// </summary>
        public bool Retriable
        {
            get { return IExecute<bool>("retriable"); }
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}