/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka-clients-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Common.Security.Oauthbearer.Internals.Secured
{
    #region JwksFileVerificationKeyResolver
    public partial class JwksFileVerificationKeyResolver
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/security/oauthbearer/internals/secured/JwksFileVerificationKeyResolver.html#%3Cinit%3E(java.nio.file.Path)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Nio.File.Path"/></param>
        public JwksFileVerificationKeyResolver(Java.Nio.File.Path arg0)
            : base(arg0)
        {
        }

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Org.Apache.Kafka.Common.Security.Oauthbearer.Internals.Secured.JwksFileVerificationKeyResolver"/> to <see cref="Org.Apache.Kafka.Common.Security.Oauthbearer.Internals.Secured.CloseableVerificationKeyResolver"/>
        /// </summary>
        public static implicit operator Org.Apache.Kafka.Common.Security.Oauthbearer.Internals.Secured.CloseableVerificationKeyResolver(Org.Apache.Kafka.Common.Security.Oauthbearer.Internals.Secured.JwksFileVerificationKeyResolver t) => t.Cast<Org.Apache.Kafka.Common.Security.Oauthbearer.Internals.Secured.CloseableVerificationKeyResolver>();

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/security/oauthbearer/internals/secured/JwksFileVerificationKeyResolver.html#resolveKey(org.jose4j.jws.JsonWebSignature,java.util.List)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Jose4j.Jws.JsonWebSignature"/></param>
        /// <param name="arg1"><see cref="Java.Util.List"/></param>
        /// <returns><see cref="Java.Security.Key"/></returns>
        /// <exception cref="Org.Jose4j.Lang.UnresolvableKeyException"/>
        public Java.Security.Key ResolveKey(Org.Jose4j.Jws.JsonWebSignature arg0, Java.Util.List<Org.Jose4j.Jwx.JsonWebStructure> arg1)
        {
            return IExecute<Java.Security.Key>("resolveKey", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/security/oauthbearer/internals/secured/JwksFileVerificationKeyResolver.html#init()"/>
        /// </summary>

        /// <exception cref="Java.Io.IOException"/>
        public void Init()
        {
            IExecute("init");
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}