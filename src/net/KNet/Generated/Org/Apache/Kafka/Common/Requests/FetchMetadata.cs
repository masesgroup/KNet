/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka-clients-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Common.Requests
{
    #region FetchMetadata
    public partial class FetchMetadata
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/requests/FetchMetadata.html#%3Cinit%3E(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        public FetchMetadata(int arg0, int arg1)
            : base(arg0, arg1)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/requests/FetchMetadata.html#FINAL_EPOCH"/>
        /// </summary>
        public static int FINAL_EPOCH { get { return SGetField<int>(LocalBridgeClazz, "FINAL_EPOCH"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/requests/FetchMetadata.html#INITIAL_EPOCH"/>
        /// </summary>
        public static int INITIAL_EPOCH { get { return SGetField<int>(LocalBridgeClazz, "INITIAL_EPOCH"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/requests/FetchMetadata.html#INVALID_SESSION_ID"/>
        /// </summary>
        public static int INVALID_SESSION_ID { get { return SGetField<int>(LocalBridgeClazz, "INVALID_SESSION_ID"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/requests/FetchMetadata.html#INITIAL"/>
        /// </summary>
        public static Org.Apache.Kafka.Common.Requests.FetchMetadata INITIAL { get { return SGetField<Org.Apache.Kafka.Common.Requests.FetchMetadata>(LocalBridgeClazz, "INITIAL"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/requests/FetchMetadata.html#LEGACY"/>
        /// </summary>
        public static Org.Apache.Kafka.Common.Requests.FetchMetadata LEGACY { get { return SGetField<Org.Apache.Kafka.Common.Requests.FetchMetadata>(LocalBridgeClazz, "LEGACY"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/requests/FetchMetadata.html#log"/>
        /// </summary>
        public static Org.Slf4j.Logger log { get { return SGetField<Org.Slf4j.Logger>(LocalBridgeClazz, "log"); } }

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/requests/FetchMetadata.html#nextEpoch(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public static int NextEpoch(int arg0)
        {
            return SExecute<int>(LocalBridgeClazz, "nextEpoch", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/requests/FetchMetadata.html#newIncremental(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Requests.FetchMetadata"/></returns>
        public static Org.Apache.Kafka.Common.Requests.FetchMetadata NewIncremental(int arg0)
        {
            return SExecute<Org.Apache.Kafka.Common.Requests.FetchMetadata>(LocalBridgeClazz, "newIncremental", arg0);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/requests/FetchMetadata.html#epoch()"/> 
        /// </summary>
        public int Epoch
        {
            get { return IExecute<int>("epoch"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/requests/FetchMetadata.html#isFull()"/> 
        /// </summary>
        public bool IsFull
        {
            get { return IExecute<bool>("isFull"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/requests/FetchMetadata.html#nextCloseExisting()"/> 
        /// </summary>
        public Org.Apache.Kafka.Common.Requests.FetchMetadata NextCloseExisting
        {
            get { return IExecute<Org.Apache.Kafka.Common.Requests.FetchMetadata>("nextCloseExisting"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/requests/FetchMetadata.html#nextIncremental()"/> 
        /// </summary>
        public Org.Apache.Kafka.Common.Requests.FetchMetadata NextIncremental
        {
            get { return IExecute<Org.Apache.Kafka.Common.Requests.FetchMetadata>("nextIncremental"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/requests/FetchMetadata.html#sessionId()"/> 
        /// </summary>
        public int SessionId
        {
            get { return IExecute<int>("sessionId"); }
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}