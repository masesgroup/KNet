/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.6.0)
*  using kafka-clients-3.8.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Common.Compress
{
    #region ZstdCompression
    public partial class ZstdCompression
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.1/org/apache/kafka/common/compress/ZstdCompression.html#DEFAULT_LEVEL"/>
        /// </summary>
        public static int DEFAULT_LEVEL { get { if (!_DEFAULT_LEVELReady) { _DEFAULT_LEVELContent = SGetField<int>(LocalBridgeClazz, "DEFAULT_LEVEL"); _DEFAULT_LEVELReady = true; } return _DEFAULT_LEVELContent; } }
        private static int _DEFAULT_LEVELContent = default;
        private static bool _DEFAULT_LEVELReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.1/org/apache/kafka/common/compress/ZstdCompression.html#MAX_LEVEL"/>
        /// </summary>
        public static int MAX_LEVEL { get { if (!_MAX_LEVELReady) { _MAX_LEVELContent = SGetField<int>(LocalBridgeClazz, "MAX_LEVEL"); _MAX_LEVELReady = true; } return _MAX_LEVELContent; } }
        private static int _MAX_LEVELContent = default;
        private static bool _MAX_LEVELReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.1/org/apache/kafka/common/compress/ZstdCompression.html#MIN_LEVEL"/>
        /// </summary>
        public static int MIN_LEVEL { get { if (!_MIN_LEVELReady) { _MIN_LEVELContent = SGetField<int>(LocalBridgeClazz, "MIN_LEVEL"); _MIN_LEVELReady = true; } return _MIN_LEVELContent; } }
        private static int _MIN_LEVELContent = default;
        private static bool _MIN_LEVELReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.1/org/apache/kafka/common/compress/ZstdCompression.html#wrapForZstdInput-java.nio.ByteBuffer-org.apache.kafka.common.utils.BufferSupplier-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Nio.ByteBuffer"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Common.Utils.BufferSupplier"/></param>
        /// <returns><see cref="Com.Github.Luben.Zstd.ZstdInputStreamNoFinalizer"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        public static Com.Github.Luben.Zstd.ZstdInputStreamNoFinalizer WrapForZstdInput(Java.Nio.ByteBuffer arg0, Org.Apache.Kafka.Common.Utils.BufferSupplier arg1)
        {
            return SExecute<Com.Github.Luben.Zstd.ZstdInputStreamNoFinalizer>(LocalBridgeClazz, "wrapForZstdInput", arg0, arg1);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.1/org/apache/kafka/common/compress/ZstdCompression.html#decompressionOutputSize--"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int DecompressionOutputSize()
        {
            return IExecuteWithSignature<int>("decompressionOutputSize", "()I");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.1/org/apache/kafka/common/compress/ZstdCompression.html#wrapForInput-java.nio.ByteBuffer-byte-org.apache.kafka.common.utils.BufferSupplier-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Nio.ByteBuffer"/></param>
        /// <param name="arg1"><see cref="byte"/></param>
        /// <param name="arg2"><see cref="Org.Apache.Kafka.Common.Utils.BufferSupplier"/></param>
        /// <returns><see cref="Java.Io.InputStream"/></returns>
        public Java.Io.InputStream WrapForInput(Java.Nio.ByteBuffer arg0, byte arg1, Org.Apache.Kafka.Common.Utils.BufferSupplier arg2)
        {
            return IExecute<Java.Io.InputStream>("wrapForInput", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.1/org/apache/kafka/common/compress/ZstdCompression.html#wrapForOutput-org.apache.kafka.common.utils.ByteBufferOutputStream-byte-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Utils.ByteBufferOutputStream"/></param>
        /// <param name="arg1"><see cref="byte"/></param>
        /// <returns><see cref="Java.Io.OutputStream"/></returns>
        public Java.Io.OutputStream WrapForOutput(Org.Apache.Kafka.Common.Utils.ByteBufferOutputStream arg0, byte arg1)
        {
            return IExecute<Java.Io.OutputStream>("wrapForOutput", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.1/org/apache/kafka/common/compress/ZstdCompression.html#type--"/>
        /// </summary>
        /// <returns><see cref="Org.Apache.Kafka.Common.Record.CompressionType"/></returns>
        public Org.Apache.Kafka.Common.Record.CompressionType Type()
        {
            return IExecuteWithSignature<Org.Apache.Kafka.Common.Record.CompressionType>("type", "()Lorg/apache/kafka/common/record/CompressionType;");
        }

        #endregion

        #region Nested classes
        #region Builder
        public partial class Builder
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.1/org/apache/kafka/common/compress/ZstdCompression.Builder.html#build--"/>
            /// </summary>
            /// <returns><see cref="Org.Apache.Kafka.Common.Compress.Compression"/></returns>
            public Org.Apache.Kafka.Common.Compress.Compression Build()
            {
                return IExecuteWithSignature<Org.Apache.Kafka.Common.Compress.Compression>("build", "()Lorg/apache/kafka/common/compress/Compression;");
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.1/org/apache/kafka/common/compress/ZstdCompression.Builder.html#level-int-"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <returns><see cref="Org.Apache.Kafka.Common.Compress.ZstdCompression.Builder"/></returns>
            public Org.Apache.Kafka.Common.Compress.ZstdCompression.Builder Level(int arg0)
            {
                return IExecuteWithSignature<Org.Apache.Kafka.Common.Compress.ZstdCompression.Builder>("level", "(I)Lorg/apache/kafka/common/compress/ZstdCompression$Builder;", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}