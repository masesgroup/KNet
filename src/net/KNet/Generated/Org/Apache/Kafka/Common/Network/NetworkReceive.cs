/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka-clients-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Common.Network
{
    #region NetworkReceive
    public partial class NetworkReceive
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/network/NetworkReceive.html#%3Cinit%3E(int,java.lang.String,org.apache.kafka.common.memory.MemoryPool)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="string"/></param>
        /// <param name="arg2"><see cref="Org.Apache.Kafka.Common.Memory.MemoryPool"/></param>
        public NetworkReceive(int arg0, string arg1, Org.Apache.Kafka.Common.Memory.MemoryPool arg2)
            : base(arg0, arg1, arg2)
        {
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/network/NetworkReceive.html#%3Cinit%3E(int,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="string"/></param>
        public NetworkReceive(int arg0, string arg1)
            : base(arg0, arg1)
        {
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/network/NetworkReceive.html#%3Cinit%3E(java.lang.String,java.nio.ByteBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <param name="arg1"><see cref="Java.Nio.ByteBuffer"/></param>
        public NetworkReceive(string arg0, Java.Nio.ByteBuffer arg1)
            : base(arg0, arg1)
        {
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/network/NetworkReceive.html#%3Cinit%3E(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        public NetworkReceive(string arg0)
            : base(arg0)
        {
        }

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Org.Apache.Kafka.Common.Network.NetworkReceive"/> to <see cref="Org.Apache.Kafka.Common.Network.Receive"/>
        /// </summary>
        public static implicit operator Org.Apache.Kafka.Common.Network.Receive(Org.Apache.Kafka.Common.Network.NetworkReceive t) => t.Cast<Org.Apache.Kafka.Common.Network.Receive>();

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/network/NetworkReceive.html#UNLIMITED"/>
        /// </summary>
        public static int UNLIMITED { get { return SGetField<int>(LocalBridgeClazz, "UNLIMITED"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/network/NetworkReceive.html#UNKNOWN_SOURCE"/>
        /// </summary>
        public static string UNKNOWN_SOURCE { get { return SGetField<string>(LocalBridgeClazz, "UNKNOWN_SOURCE"); } }

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/network/NetworkReceive.html#bytesRead()"/> 
        /// </summary>
        public int BytesRead
        {
            get { return IExecute<int>("bytesRead"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/network/NetworkReceive.html#complete()"/> 
        /// </summary>
        public bool Complete
        {
            get { return IExecute<bool>("complete"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/network/NetworkReceive.html#memoryAllocated()"/> 
        /// </summary>
        public bool MemoryAllocated
        {
            get { return IExecute<bool>("memoryAllocated"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/network/NetworkReceive.html#payload()"/> 
        /// </summary>
        public Java.Nio.ByteBuffer Payload
        {
            get { return IExecute<Java.Nio.ByteBuffer>("payload"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/network/NetworkReceive.html#requiredMemoryAmountKnown()"/> 
        /// </summary>
        public bool RequiredMemoryAmountKnown
        {
            get { return IExecute<bool>("requiredMemoryAmountKnown"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/network/NetworkReceive.html#size()"/> 
        /// </summary>
        public int Size
        {
            get { return IExecute<int>("size"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/network/NetworkReceive.html#source()"/> 
        /// </summary>
        public string Source
        {
            get { return IExecute<string>("source"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/network/NetworkReceive.html#readFrom(java.nio.channels.ScatteringByteChannel)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Nio.Channels.ScatteringByteChannel"/></param>
        /// <returns><see cref="long"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        public long ReadFrom(Java.Nio.Channels.ScatteringByteChannel arg0)
        {
            return IExecute<long>("readFrom", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/network/NetworkReceive.html#close()"/>
        /// </summary>

        /// <exception cref="Java.Io.IOException"/>
        public void Close()
        {
            IExecute("close");
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}