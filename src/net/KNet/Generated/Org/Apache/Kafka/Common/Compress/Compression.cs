/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.6.0)
*  using kafka-clients-3.8.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Common.Compress
{
    #region ICompression
    /// <summary>
    /// .NET interface for TO BE DEFINED FROM USER
    /// </summary>
    public partial interface ICompression
    {
        #region Instance methods

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion

    #region Compression
    public partial class Compression : Org.Apache.Kafka.Common.Compress.ICompression
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.1/org/apache/kafka/common/compress/Compression.html#NONE"/>
        /// </summary>
        public static Org.Apache.Kafka.Common.Compress.NoCompression NONE { get { if (!_NONEReady) { _NONEContent = SGetField<Org.Apache.Kafka.Common.Compress.NoCompression>(LocalBridgeClazz, "NONE"); _NONEReady = true; } return _NONEContent; } }
        private static Org.Apache.Kafka.Common.Compress.NoCompression _NONEContent = default;
        private static bool _NONEReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.1/org/apache/kafka/common/compress/Compression.html#of-java.lang.String-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <typeparam name="ReturnExtendsOrg_Apache_Kafka_Common_Compress_Compression"><see cref="Org.Apache.Kafka.Common.Compress.Compression"/></typeparam>
        /// <returns><see cref="Org.Apache.Kafka.Common.Compress.Compression.Builder"/></returns>
        public static Org.Apache.Kafka.Common.Compress.Compression.Builder<ReturnExtendsOrg_Apache_Kafka_Common_Compress_Compression> Of<ReturnExtendsOrg_Apache_Kafka_Common_Compress_Compression>(Java.Lang.String arg0) where ReturnExtendsOrg_Apache_Kafka_Common_Compress_Compression : Org.Apache.Kafka.Common.Compress.Compression
        {
            return SExecuteWithSignature<Org.Apache.Kafka.Common.Compress.Compression.Builder<ReturnExtendsOrg_Apache_Kafka_Common_Compress_Compression>>(LocalBridgeClazz, "of", "(Ljava/lang/String;)Lorg/apache/kafka/common/compress/Compression$Builder;", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.1/org/apache/kafka/common/compress/Compression.html#of-org.apache.kafka.common.record.CompressionType-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Record.CompressionType"/></param>
        /// <typeparam name="ReturnExtendsOrg_Apache_Kafka_Common_Compress_Compression"><see cref="Org.Apache.Kafka.Common.Compress.Compression"/></typeparam>
        /// <returns><see cref="Org.Apache.Kafka.Common.Compress.Compression.Builder"/></returns>
        public static Org.Apache.Kafka.Common.Compress.Compression.Builder<ReturnExtendsOrg_Apache_Kafka_Common_Compress_Compression> Of<ReturnExtendsOrg_Apache_Kafka_Common_Compress_Compression>(Org.Apache.Kafka.Common.Record.CompressionType arg0) where ReturnExtendsOrg_Apache_Kafka_Common_Compress_Compression : Org.Apache.Kafka.Common.Compress.Compression
        {
            return SExecuteWithSignature<Org.Apache.Kafka.Common.Compress.Compression.Builder<ReturnExtendsOrg_Apache_Kafka_Common_Compress_Compression>>(LocalBridgeClazz, "of", "(Lorg/apache/kafka/common/record/CompressionType;)Lorg/apache/kafka/common/compress/Compression$Builder;", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.1/org/apache/kafka/common/compress/Compression.html#gzip--"/>
        /// </summary>
        /// <returns><see cref="Org.Apache.Kafka.Common.Compress.GzipCompression.Builder"/></returns>
        public static Org.Apache.Kafka.Common.Compress.GzipCompression.Builder Gzip()
        {
            return SExecuteWithSignature<Org.Apache.Kafka.Common.Compress.GzipCompression.Builder>(LocalBridgeClazz, "gzip", "()Lorg/apache/kafka/common/compress/GzipCompression$Builder;");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.1/org/apache/kafka/common/compress/Compression.html#lz4--"/>
        /// </summary>
        /// <returns><see cref="Org.Apache.Kafka.Common.Compress.Lz4Compression.Builder"/></returns>
        public static Org.Apache.Kafka.Common.Compress.Lz4Compression.Builder Lz4()
        {
            return SExecuteWithSignature<Org.Apache.Kafka.Common.Compress.Lz4Compression.Builder>(LocalBridgeClazz, "lz4", "()Lorg/apache/kafka/common/compress/Lz4Compression$Builder;");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.1/org/apache/kafka/common/compress/Compression.html#none--"/>
        /// </summary>
        /// <returns><see cref="Org.Apache.Kafka.Common.Compress.NoCompression.Builder"/></returns>
        public static Org.Apache.Kafka.Common.Compress.NoCompression.Builder None()
        {
            return SExecuteWithSignature<Org.Apache.Kafka.Common.Compress.NoCompression.Builder>(LocalBridgeClazz, "none", "()Lorg/apache/kafka/common/compress/NoCompression$Builder;");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.1/org/apache/kafka/common/compress/Compression.html#snappy--"/>
        /// </summary>
        /// <returns><see cref="Org.Apache.Kafka.Common.Compress.SnappyCompression.Builder"/></returns>
        public static Org.Apache.Kafka.Common.Compress.SnappyCompression.Builder Snappy()
        {
            return SExecuteWithSignature<Org.Apache.Kafka.Common.Compress.SnappyCompression.Builder>(LocalBridgeClazz, "snappy", "()Lorg/apache/kafka/common/compress/SnappyCompression$Builder;");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.1/org/apache/kafka/common/compress/Compression.html#zstd--"/>
        /// </summary>
        /// <returns><see cref="Org.Apache.Kafka.Common.Compress.ZstdCompression.Builder"/></returns>
        public static Org.Apache.Kafka.Common.Compress.ZstdCompression.Builder Zstd()
        {
            return SExecuteWithSignature<Org.Apache.Kafka.Common.Compress.ZstdCompression.Builder>(LocalBridgeClazz, "zstd", "()Lorg/apache/kafka/common/compress/ZstdCompression$Builder;");
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.1/org/apache/kafka/common/compress/Compression.html#wrapForInput-java.nio.ByteBuffer-byte-org.apache.kafka.common.utils.BufferSupplier-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Nio.ByteBuffer"/></param>
        /// <param name="arg1"><see cref="byte"/></param>
        /// <param name="arg2"><see cref="Org.Apache.Kafka.Common.Utils.BufferSupplier"/></param>
        /// <returns><see cref="Java.Io.InputStream"/></returns>
        public Java.Io.InputStream WrapForInput(Java.Nio.ByteBuffer arg0, byte arg1, Org.Apache.Kafka.Common.Utils.BufferSupplier arg2)
        {
            return IExecute<Java.Io.InputStream>("wrapForInput", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.1/org/apache/kafka/common/compress/Compression.html#wrapForOutput-org.apache.kafka.common.utils.ByteBufferOutputStream-byte-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Utils.ByteBufferOutputStream"/></param>
        /// <param name="arg1"><see cref="byte"/></param>
        /// <returns><see cref="Java.Io.OutputStream"/></returns>
        public Java.Io.OutputStream WrapForOutput(Org.Apache.Kafka.Common.Utils.ByteBufferOutputStream arg0, byte arg1)
        {
            return IExecute<Java.Io.OutputStream>("wrapForOutput", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.1/org/apache/kafka/common/compress/Compression.html#type--"/>
        /// </summary>
        /// <returns><see cref="Org.Apache.Kafka.Common.Record.CompressionType"/></returns>
        public Org.Apache.Kafka.Common.Record.CompressionType Type()
        {
            return IExecuteWithSignature<Org.Apache.Kafka.Common.Record.CompressionType>("type", "()Lorg/apache/kafka/common/record/CompressionType;");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.1/org/apache/kafka/common/compress/Compression.html#decompressionOutputSize--"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int DecompressionOutputSize()
        {
            return IExecuteWithSignature<int>("decompressionOutputSize", "()I");
        }

        #endregion

        #region Nested classes
        #region Builder
        public partial class Builder
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.1/org/apache/kafka/common/compress/Compression.Builder.html#build--"/>
            /// </summary>
            /// <returns><see cref="Org.Apache.Kafka.Common.Compress.Compression"/></returns>
            public Org.Apache.Kafka.Common.Compress.Compression Build()
            {
                return IExecuteWithSignature<Org.Apache.Kafka.Common.Compress.Compression>("build", "()Lorg/apache/kafka/common/compress/Compression;");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region Builder<T>
        public partial class Builder<T>
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators
            /// <summary>
            /// Converter from <see cref="Org.Apache.Kafka.Common.Compress.Compression.Builder{T}"/> to <see cref="Org.Apache.Kafka.Common.Compress.Compression.Builder"/>
            /// </summary>
            public static implicit operator Org.Apache.Kafka.Common.Compress.Compression.Builder(Org.Apache.Kafka.Common.Compress.Compression.Builder<T> t) => t.Cast<Org.Apache.Kafka.Common.Compress.Compression.Builder>();

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.1/org/apache/kafka/common/compress/Compression.Builder.html#build--"/>
            /// </summary>
            /// <returns><typeparamref name="T"/></returns>
            public T Build()
            {
                return IExecuteWithSignature<T>("build", "()Lorg/apache/kafka/common/compress/Compression;");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}