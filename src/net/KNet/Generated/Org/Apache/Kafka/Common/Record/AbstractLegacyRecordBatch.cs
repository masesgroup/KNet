/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka-clients-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Common.Record
{
    #region AbstractLegacyRecordBatch
    public partial class AbstractLegacyRecordBatch
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Org.Apache.Kafka.Common.Record.AbstractLegacyRecordBatch"/> to <see cref="Org.Apache.Kafka.Common.Record.Record"/>
        /// </summary>
        public static implicit operator Org.Apache.Kafka.Common.Record.Record(Org.Apache.Kafka.Common.Record.AbstractLegacyRecordBatch t) => t.Cast<Org.Apache.Kafka.Common.Record.Record>();

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/AbstractLegacyRecordBatch.html#hasKey()"/> 
        /// </summary>
        public bool HasKey
        {
            get { return IExecute<bool>("hasKey"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/AbstractLegacyRecordBatch.html#hasValue()"/> 
        /// </summary>
        public bool HasValue
        {
            get { return IExecute<bool>("hasValue"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/AbstractLegacyRecordBatch.html#headers()"/> 
        /// </summary>
        public Org.Apache.Kafka.Common.Header.Header[] Headers
        {
            get { return IExecuteArray<Org.Apache.Kafka.Common.Header.Header>("headers"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/AbstractLegacyRecordBatch.html#key()"/> 
        /// </summary>
        public Java.Nio.ByteBuffer Key
        {
            get { return IExecute<Java.Nio.ByteBuffer>("key"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/AbstractLegacyRecordBatch.html#keySize()"/> 
        /// </summary>
        public int KeySize
        {
            get { return IExecute<int>("keySize"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/AbstractLegacyRecordBatch.html#outerRecord()"/> 
        /// </summary>
        public Org.Apache.Kafka.Common.Record.LegacyRecord OuterRecord
        {
            get { return IExecute<Org.Apache.Kafka.Common.Record.LegacyRecord>("outerRecord"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/AbstractLegacyRecordBatch.html#sequence()"/> 
        /// </summary>
        public int Sequence
        {
            get { return IExecute<int>("sequence"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/AbstractLegacyRecordBatch.html#timestamp()"/> 
        /// </summary>
        public long Timestamp
        {
            get { return IExecute<long>("timestamp"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/AbstractLegacyRecordBatch.html#value()"/> 
        /// </summary>
        public Java.Nio.ByteBuffer Value
        {
            get { return IExecute<Java.Nio.ByteBuffer>("value"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/AbstractLegacyRecordBatch.html#valueSize()"/> 
        /// </summary>
        public int ValueSize
        {
            get { return IExecute<int>("valueSize"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/AbstractLegacyRecordBatch.html#hasMagic(byte)"/>
        /// </summary>
        /// <param name="arg0"><see cref="byte"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool HasMagic(byte arg0)
        {
            return IExecute<bool>("hasMagic", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/AbstractLegacyRecordBatch.html#hasTimestampType(org.apache.kafka.common.record.TimestampType)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Record.TimestampType"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool HasTimestampType(Org.Apache.Kafka.Common.Record.TimestampType arg0)
        {
            return IExecute<bool>("hasTimestampType", arg0);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}