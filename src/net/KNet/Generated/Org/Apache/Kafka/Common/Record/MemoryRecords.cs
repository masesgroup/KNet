/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka-clients-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Common.Record
{
    #region MemoryRecords
    public partial class MemoryRecords
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/MemoryRecords.html#EMPTY"/>
        /// </summary>
        public static Org.Apache.Kafka.Common.Record.MemoryRecords EMPTY { get { return SGetField<Org.Apache.Kafka.Common.Record.MemoryRecords>(LocalBridgeClazz, "EMPTY"); } }

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/MemoryRecords.html#readableRecords(java.nio.ByteBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Nio.ByteBuffer"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Record.MemoryRecords"/></returns>
        public static Org.Apache.Kafka.Common.Record.MemoryRecords ReadableRecords(Java.Nio.ByteBuffer arg0)
        {
            return SExecute<Org.Apache.Kafka.Common.Record.MemoryRecords>(LocalBridgeClazz, "readableRecords", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/MemoryRecords.html#withEndTransactionMarker(long,long,int,long,short,org.apache.kafka.common.record.EndTransactionMarker)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="long"/></param>
        /// <param name="arg4"><see cref="short"/></param>
        /// <param name="arg5"><see cref="Org.Apache.Kafka.Common.Record.EndTransactionMarker"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Record.MemoryRecords"/></returns>
        public static Org.Apache.Kafka.Common.Record.MemoryRecords WithEndTransactionMarker(long arg0, long arg1, int arg2, long arg3, short arg4, Org.Apache.Kafka.Common.Record.EndTransactionMarker arg5)
        {
            return SExecute<Org.Apache.Kafka.Common.Record.MemoryRecords>(LocalBridgeClazz, "withEndTransactionMarker", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/MemoryRecords.html#withEndTransactionMarker(long,long,short,org.apache.kafka.common.record.EndTransactionMarker)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        /// <param name="arg2"><see cref="short"/></param>
        /// <param name="arg3"><see cref="Org.Apache.Kafka.Common.Record.EndTransactionMarker"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Record.MemoryRecords"/></returns>
        public static Org.Apache.Kafka.Common.Record.MemoryRecords WithEndTransactionMarker(long arg0, long arg1, short arg2, Org.Apache.Kafka.Common.Record.EndTransactionMarker arg3)
        {
            return SExecute<Org.Apache.Kafka.Common.Record.MemoryRecords>(LocalBridgeClazz, "withEndTransactionMarker", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/MemoryRecords.html#withEndTransactionMarker(long,short,org.apache.kafka.common.record.EndTransactionMarker)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <param name="arg1"><see cref="short"/></param>
        /// <param name="arg2"><see cref="Org.Apache.Kafka.Common.Record.EndTransactionMarker"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Record.MemoryRecords"/></returns>
        public static Org.Apache.Kafka.Common.Record.MemoryRecords WithEndTransactionMarker(long arg0, short arg1, Org.Apache.Kafka.Common.Record.EndTransactionMarker arg2)
        {
            return SExecute<Org.Apache.Kafka.Common.Record.MemoryRecords>(LocalBridgeClazz, "withEndTransactionMarker", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/MemoryRecords.html#withIdempotentRecords(byte,long,org.apache.kafka.common.record.CompressionType,long,short,int,int,org.apache.kafka.common.record.SimpleRecord[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="byte"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        /// <param name="arg2"><see cref="Org.Apache.Kafka.Common.Record.CompressionType"/></param>
        /// <param name="arg3"><see cref="long"/></param>
        /// <param name="arg4"><see cref="short"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        /// <param name="arg6"><see cref="int"/></param>
        /// <param name="arg7"><see cref="Org.Apache.Kafka.Common.Record.SimpleRecord"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Record.MemoryRecords"/></returns>
        public static Org.Apache.Kafka.Common.Record.MemoryRecords WithIdempotentRecords(byte arg0, long arg1, Org.Apache.Kafka.Common.Record.CompressionType arg2, long arg3, short arg4, int arg5, int arg6, params Org.Apache.Kafka.Common.Record.SimpleRecord[] arg7)
        {
            if (arg7.Length == 0) return SExecute<Org.Apache.Kafka.Common.Record.MemoryRecords>(LocalBridgeClazz, "withIdempotentRecords", arg0, arg1, arg2, arg3, arg4, arg5, arg6); else return SExecute<Org.Apache.Kafka.Common.Record.MemoryRecords>(LocalBridgeClazz, "withIdempotentRecords", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/MemoryRecords.html#withIdempotentRecords(long,org.apache.kafka.common.record.CompressionType,long,short,int,int,org.apache.kafka.common.record.SimpleRecord[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Common.Record.CompressionType"/></param>
        /// <param name="arg2"><see cref="long"/></param>
        /// <param name="arg3"><see cref="short"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        /// <param name="arg6"><see cref="Org.Apache.Kafka.Common.Record.SimpleRecord"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Record.MemoryRecords"/></returns>
        public static Org.Apache.Kafka.Common.Record.MemoryRecords WithIdempotentRecords(long arg0, Org.Apache.Kafka.Common.Record.CompressionType arg1, long arg2, short arg3, int arg4, int arg5, params Org.Apache.Kafka.Common.Record.SimpleRecord[] arg6)
        {
            if (arg6.Length == 0) return SExecute<Org.Apache.Kafka.Common.Record.MemoryRecords>(LocalBridgeClazz, "withIdempotentRecords", arg0, arg1, arg2, arg3, arg4, arg5); else return SExecute<Org.Apache.Kafka.Common.Record.MemoryRecords>(LocalBridgeClazz, "withIdempotentRecords", arg0, arg1, arg2, arg3, arg4, arg5, arg6);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/MemoryRecords.html#withIdempotentRecords(org.apache.kafka.common.record.CompressionType,long,short,int,org.apache.kafka.common.record.SimpleRecord[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Record.CompressionType"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        /// <param name="arg2"><see cref="short"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="Org.Apache.Kafka.Common.Record.SimpleRecord"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Record.MemoryRecords"/></returns>
        public static Org.Apache.Kafka.Common.Record.MemoryRecords WithIdempotentRecords(Org.Apache.Kafka.Common.Record.CompressionType arg0, long arg1, short arg2, int arg3, params Org.Apache.Kafka.Common.Record.SimpleRecord[] arg4)
        {
            if (arg4.Length == 0) return SExecute<Org.Apache.Kafka.Common.Record.MemoryRecords>(LocalBridgeClazz, "withIdempotentRecords", arg0, arg1, arg2, arg3); else return SExecute<Org.Apache.Kafka.Common.Record.MemoryRecords>(LocalBridgeClazz, "withIdempotentRecords", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/MemoryRecords.html#withLeaderChangeMessage(long,long,int,java.nio.ByteBuffer,org.apache.kafka.common.message.LeaderChangeMessage)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="Java.Nio.ByteBuffer"/></param>
        /// <param name="arg4"><see cref="Org.Apache.Kafka.Common.Message.LeaderChangeMessage"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Record.MemoryRecords"/></returns>
        public static Org.Apache.Kafka.Common.Record.MemoryRecords WithLeaderChangeMessage(long arg0, long arg1, int arg2, Java.Nio.ByteBuffer arg3, Org.Apache.Kafka.Common.Message.LeaderChangeMessage arg4)
        {
            return SExecute<Org.Apache.Kafka.Common.Record.MemoryRecords>(LocalBridgeClazz, "withLeaderChangeMessage", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/MemoryRecords.html#withRecords(byte,long,org.apache.kafka.common.record.CompressionType,org.apache.kafka.common.record.SimpleRecord[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="byte"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        /// <param name="arg2"><see cref="Org.Apache.Kafka.Common.Record.CompressionType"/></param>
        /// <param name="arg3"><see cref="Org.Apache.Kafka.Common.Record.SimpleRecord"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Record.MemoryRecords"/></returns>
        public static Org.Apache.Kafka.Common.Record.MemoryRecords WithRecords(byte arg0, long arg1, Org.Apache.Kafka.Common.Record.CompressionType arg2, params Org.Apache.Kafka.Common.Record.SimpleRecord[] arg3)
        {
            if (arg3.Length == 0) return SExecute<Org.Apache.Kafka.Common.Record.MemoryRecords>(LocalBridgeClazz, "withRecords", arg0, arg1, arg2); else return SExecute<Org.Apache.Kafka.Common.Record.MemoryRecords>(LocalBridgeClazz, "withRecords", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/MemoryRecords.html#withRecords(byte,long,org.apache.kafka.common.record.CompressionType,org.apache.kafka.common.record.TimestampType,long,short,int,int,boolean,org.apache.kafka.common.record.SimpleRecord[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="byte"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        /// <param name="arg2"><see cref="Org.Apache.Kafka.Common.Record.CompressionType"/></param>
        /// <param name="arg3"><see cref="Org.Apache.Kafka.Common.Record.TimestampType"/></param>
        /// <param name="arg4"><see cref="long"/></param>
        /// <param name="arg5"><see cref="short"/></param>
        /// <param name="arg6"><see cref="int"/></param>
        /// <param name="arg7"><see cref="int"/></param>
        /// <param name="arg8"><see cref="bool"/></param>
        /// <param name="arg9"><see cref="Org.Apache.Kafka.Common.Record.SimpleRecord"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Record.MemoryRecords"/></returns>
        public static Org.Apache.Kafka.Common.Record.MemoryRecords WithRecords(byte arg0, long arg1, Org.Apache.Kafka.Common.Record.CompressionType arg2, Org.Apache.Kafka.Common.Record.TimestampType arg3, long arg4, short arg5, int arg6, int arg7, bool arg8, params Org.Apache.Kafka.Common.Record.SimpleRecord[] arg9)
        {
            if (arg9.Length == 0) return SExecute<Org.Apache.Kafka.Common.Record.MemoryRecords>(LocalBridgeClazz, "withRecords", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8); else return SExecute<Org.Apache.Kafka.Common.Record.MemoryRecords>(LocalBridgeClazz, "withRecords", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/MemoryRecords.html#withRecords(byte,long,org.apache.kafka.common.record.CompressionType,org.apache.kafka.common.record.TimestampType,org.apache.kafka.common.record.SimpleRecord[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="byte"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        /// <param name="arg2"><see cref="Org.Apache.Kafka.Common.Record.CompressionType"/></param>
        /// <param name="arg3"><see cref="Org.Apache.Kafka.Common.Record.TimestampType"/></param>
        /// <param name="arg4"><see cref="Org.Apache.Kafka.Common.Record.SimpleRecord"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Record.MemoryRecords"/></returns>
        public static Org.Apache.Kafka.Common.Record.MemoryRecords WithRecords(byte arg0, long arg1, Org.Apache.Kafka.Common.Record.CompressionType arg2, Org.Apache.Kafka.Common.Record.TimestampType arg3, params Org.Apache.Kafka.Common.Record.SimpleRecord[] arg4)
        {
            if (arg4.Length == 0) return SExecute<Org.Apache.Kafka.Common.Record.MemoryRecords>(LocalBridgeClazz, "withRecords", arg0, arg1, arg2, arg3); else return SExecute<Org.Apache.Kafka.Common.Record.MemoryRecords>(LocalBridgeClazz, "withRecords", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/MemoryRecords.html#withRecords(byte,org.apache.kafka.common.record.CompressionType,org.apache.kafka.common.record.SimpleRecord[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="byte"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Common.Record.CompressionType"/></param>
        /// <param name="arg2"><see cref="Org.Apache.Kafka.Common.Record.SimpleRecord"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Record.MemoryRecords"/></returns>
        public static Org.Apache.Kafka.Common.Record.MemoryRecords WithRecords(byte arg0, Org.Apache.Kafka.Common.Record.CompressionType arg1, params Org.Apache.Kafka.Common.Record.SimpleRecord[] arg2)
        {
            if (arg2.Length == 0) return SExecute<Org.Apache.Kafka.Common.Record.MemoryRecords>(LocalBridgeClazz, "withRecords", arg0, arg1); else return SExecute<Org.Apache.Kafka.Common.Record.MemoryRecords>(LocalBridgeClazz, "withRecords", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/MemoryRecords.html#withRecords(long,org.apache.kafka.common.record.CompressionType,java.lang.Integer,org.apache.kafka.common.record.SimpleRecord[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Common.Record.CompressionType"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="Org.Apache.Kafka.Common.Record.SimpleRecord"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Record.MemoryRecords"/></returns>
        public static Org.Apache.Kafka.Common.Record.MemoryRecords WithRecords(long arg0, Org.Apache.Kafka.Common.Record.CompressionType arg1, int? arg2, params Org.Apache.Kafka.Common.Record.SimpleRecord[] arg3)
        {
            if (arg3.Length == 0) return SExecute<Org.Apache.Kafka.Common.Record.MemoryRecords>(LocalBridgeClazz, "withRecords", arg0, arg1, arg2); else return SExecute<Org.Apache.Kafka.Common.Record.MemoryRecords>(LocalBridgeClazz, "withRecords", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/MemoryRecords.html#withRecords(long,org.apache.kafka.common.record.CompressionType,org.apache.kafka.common.record.SimpleRecord[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Common.Record.CompressionType"/></param>
        /// <param name="arg2"><see cref="Org.Apache.Kafka.Common.Record.SimpleRecord"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Record.MemoryRecords"/></returns>
        public static Org.Apache.Kafka.Common.Record.MemoryRecords WithRecords(long arg0, Org.Apache.Kafka.Common.Record.CompressionType arg1, params Org.Apache.Kafka.Common.Record.SimpleRecord[] arg2)
        {
            if (arg2.Length == 0) return SExecute<Org.Apache.Kafka.Common.Record.MemoryRecords>(LocalBridgeClazz, "withRecords", arg0, arg1); else return SExecute<Org.Apache.Kafka.Common.Record.MemoryRecords>(LocalBridgeClazz, "withRecords", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/MemoryRecords.html#withRecords(org.apache.kafka.common.record.CompressionType,int,org.apache.kafka.common.record.SimpleRecord[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Record.CompressionType"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="Org.Apache.Kafka.Common.Record.SimpleRecord"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Record.MemoryRecords"/></returns>
        public static Org.Apache.Kafka.Common.Record.MemoryRecords WithRecords(Org.Apache.Kafka.Common.Record.CompressionType arg0, int arg1, params Org.Apache.Kafka.Common.Record.SimpleRecord[] arg2)
        {
            if (arg2.Length == 0) return SExecute<Org.Apache.Kafka.Common.Record.MemoryRecords>(LocalBridgeClazz, "withRecords", arg0, arg1); else return SExecute<Org.Apache.Kafka.Common.Record.MemoryRecords>(LocalBridgeClazz, "withRecords", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/MemoryRecords.html#withRecords(org.apache.kafka.common.record.CompressionType,org.apache.kafka.common.record.SimpleRecord[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Record.CompressionType"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Common.Record.SimpleRecord"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Record.MemoryRecords"/></returns>
        public static Org.Apache.Kafka.Common.Record.MemoryRecords WithRecords(Org.Apache.Kafka.Common.Record.CompressionType arg0, params Org.Apache.Kafka.Common.Record.SimpleRecord[] arg1)
        {
            if (arg1.Length == 0) return SExecute<Org.Apache.Kafka.Common.Record.MemoryRecords>(LocalBridgeClazz, "withRecords", arg0); else return SExecute<Org.Apache.Kafka.Common.Record.MemoryRecords>(LocalBridgeClazz, "withRecords", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/MemoryRecords.html#withSnapshotFooterRecord(long,long,int,java.nio.ByteBuffer,org.apache.kafka.common.message.SnapshotFooterRecord)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="Java.Nio.ByteBuffer"/></param>
        /// <param name="arg4"><see cref="Org.Apache.Kafka.Common.Message.SnapshotFooterRecord"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Record.MemoryRecords"/></returns>
        public static Org.Apache.Kafka.Common.Record.MemoryRecords WithSnapshotFooterRecord(long arg0, long arg1, int arg2, Java.Nio.ByteBuffer arg3, Org.Apache.Kafka.Common.Message.SnapshotFooterRecord arg4)
        {
            return SExecute<Org.Apache.Kafka.Common.Record.MemoryRecords>(LocalBridgeClazz, "withSnapshotFooterRecord", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/MemoryRecords.html#withSnapshotHeaderRecord(long,long,int,java.nio.ByteBuffer,org.apache.kafka.common.message.SnapshotHeaderRecord)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="Java.Nio.ByteBuffer"/></param>
        /// <param name="arg4"><see cref="Org.Apache.Kafka.Common.Message.SnapshotHeaderRecord"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Record.MemoryRecords"/></returns>
        public static Org.Apache.Kafka.Common.Record.MemoryRecords WithSnapshotHeaderRecord(long arg0, long arg1, int arg2, Java.Nio.ByteBuffer arg3, Org.Apache.Kafka.Common.Message.SnapshotHeaderRecord arg4)
        {
            return SExecute<Org.Apache.Kafka.Common.Record.MemoryRecords>(LocalBridgeClazz, "withSnapshotHeaderRecord", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/MemoryRecords.html#withTransactionalRecords(byte,long,org.apache.kafka.common.record.CompressionType,long,short,int,int,org.apache.kafka.common.record.SimpleRecord[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="byte"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        /// <param name="arg2"><see cref="Org.Apache.Kafka.Common.Record.CompressionType"/></param>
        /// <param name="arg3"><see cref="long"/></param>
        /// <param name="arg4"><see cref="short"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        /// <param name="arg6"><see cref="int"/></param>
        /// <param name="arg7"><see cref="Org.Apache.Kafka.Common.Record.SimpleRecord"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Record.MemoryRecords"/></returns>
        public static Org.Apache.Kafka.Common.Record.MemoryRecords WithTransactionalRecords(byte arg0, long arg1, Org.Apache.Kafka.Common.Record.CompressionType arg2, long arg3, short arg4, int arg5, int arg6, params Org.Apache.Kafka.Common.Record.SimpleRecord[] arg7)
        {
            if (arg7.Length == 0) return SExecute<Org.Apache.Kafka.Common.Record.MemoryRecords>(LocalBridgeClazz, "withTransactionalRecords", arg0, arg1, arg2, arg3, arg4, arg5, arg6); else return SExecute<Org.Apache.Kafka.Common.Record.MemoryRecords>(LocalBridgeClazz, "withTransactionalRecords", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/MemoryRecords.html#withTransactionalRecords(long,org.apache.kafka.common.record.CompressionType,long,short,int,int,org.apache.kafka.common.record.SimpleRecord[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Common.Record.CompressionType"/></param>
        /// <param name="arg2"><see cref="long"/></param>
        /// <param name="arg3"><see cref="short"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        /// <param name="arg6"><see cref="Org.Apache.Kafka.Common.Record.SimpleRecord"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Record.MemoryRecords"/></returns>
        public static Org.Apache.Kafka.Common.Record.MemoryRecords WithTransactionalRecords(long arg0, Org.Apache.Kafka.Common.Record.CompressionType arg1, long arg2, short arg3, int arg4, int arg5, params Org.Apache.Kafka.Common.Record.SimpleRecord[] arg6)
        {
            if (arg6.Length == 0) return SExecute<Org.Apache.Kafka.Common.Record.MemoryRecords>(LocalBridgeClazz, "withTransactionalRecords", arg0, arg1, arg2, arg3, arg4, arg5); else return SExecute<Org.Apache.Kafka.Common.Record.MemoryRecords>(LocalBridgeClazz, "withTransactionalRecords", arg0, arg1, arg2, arg3, arg4, arg5, arg6);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/MemoryRecords.html#withTransactionalRecords(org.apache.kafka.common.record.CompressionType,long,short,int,org.apache.kafka.common.record.SimpleRecord[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Record.CompressionType"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        /// <param name="arg2"><see cref="short"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="Org.Apache.Kafka.Common.Record.SimpleRecord"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Record.MemoryRecords"/></returns>
        public static Org.Apache.Kafka.Common.Record.MemoryRecords WithTransactionalRecords(Org.Apache.Kafka.Common.Record.CompressionType arg0, long arg1, short arg2, int arg3, params Org.Apache.Kafka.Common.Record.SimpleRecord[] arg4)
        {
            if (arg4.Length == 0) return SExecute<Org.Apache.Kafka.Common.Record.MemoryRecords>(LocalBridgeClazz, "withTransactionalRecords", arg0, arg1, arg2, arg3); else return SExecute<Org.Apache.Kafka.Common.Record.MemoryRecords>(LocalBridgeClazz, "withTransactionalRecords", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/MemoryRecords.html#builder(java.nio.ByteBuffer,byte,org.apache.kafka.common.record.CompressionType,org.apache.kafka.common.record.TimestampType,long,long,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Nio.ByteBuffer"/></param>
        /// <param name="arg1"><see cref="byte"/></param>
        /// <param name="arg2"><see cref="Org.Apache.Kafka.Common.Record.CompressionType"/></param>
        /// <param name="arg3"><see cref="Org.Apache.Kafka.Common.Record.TimestampType"/></param>
        /// <param name="arg4"><see cref="long"/></param>
        /// <param name="arg5"><see cref="long"/></param>
        /// <param name="arg6"><see cref="int"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Record.MemoryRecordsBuilder"/></returns>
        public static Org.Apache.Kafka.Common.Record.MemoryRecordsBuilder Builder(Java.Nio.ByteBuffer arg0, byte arg1, Org.Apache.Kafka.Common.Record.CompressionType arg2, Org.Apache.Kafka.Common.Record.TimestampType arg3, long arg4, long arg5, int arg6)
        {
            return SExecute<Org.Apache.Kafka.Common.Record.MemoryRecordsBuilder>(LocalBridgeClazz, "builder", arg0, arg1, arg2, arg3, arg4, arg5, arg6);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/MemoryRecords.html#builder(java.nio.ByteBuffer,byte,org.apache.kafka.common.record.CompressionType,org.apache.kafka.common.record.TimestampType,long,long,long,short,int,boolean,boolean,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Nio.ByteBuffer"/></param>
        /// <param name="arg1"><see cref="byte"/></param>
        /// <param name="arg2"><see cref="Org.Apache.Kafka.Common.Record.CompressionType"/></param>
        /// <param name="arg3"><see cref="Org.Apache.Kafka.Common.Record.TimestampType"/></param>
        /// <param name="arg4"><see cref="long"/></param>
        /// <param name="arg5"><see cref="long"/></param>
        /// <param name="arg6"><see cref="long"/></param>
        /// <param name="arg7"><see cref="short"/></param>
        /// <param name="arg8"><see cref="int"/></param>
        /// <param name="arg9"><see cref="bool"/></param>
        /// <param name="arg10"><see cref="bool"/></param>
        /// <param name="arg11"><see cref="int"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Record.MemoryRecordsBuilder"/></returns>
        public static Org.Apache.Kafka.Common.Record.MemoryRecordsBuilder Builder(Java.Nio.ByteBuffer arg0, byte arg1, Org.Apache.Kafka.Common.Record.CompressionType arg2, Org.Apache.Kafka.Common.Record.TimestampType arg3, long arg4, long arg5, long arg6, short arg7, int arg8, bool arg9, bool arg10, int arg11)
        {
            return SExecute<Org.Apache.Kafka.Common.Record.MemoryRecordsBuilder>(LocalBridgeClazz, "builder", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/MemoryRecords.html#builder(java.nio.ByteBuffer,byte,org.apache.kafka.common.record.CompressionType,org.apache.kafka.common.record.TimestampType,long,long,long,short,int,boolean,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Nio.ByteBuffer"/></param>
        /// <param name="arg1"><see cref="byte"/></param>
        /// <param name="arg2"><see cref="Org.Apache.Kafka.Common.Record.CompressionType"/></param>
        /// <param name="arg3"><see cref="Org.Apache.Kafka.Common.Record.TimestampType"/></param>
        /// <param name="arg4"><see cref="long"/></param>
        /// <param name="arg5"><see cref="long"/></param>
        /// <param name="arg6"><see cref="long"/></param>
        /// <param name="arg7"><see cref="short"/></param>
        /// <param name="arg8"><see cref="int"/></param>
        /// <param name="arg9"><see cref="bool"/></param>
        /// <param name="arg10"><see cref="int"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Record.MemoryRecordsBuilder"/></returns>
        public static Org.Apache.Kafka.Common.Record.MemoryRecordsBuilder Builder(Java.Nio.ByteBuffer arg0, byte arg1, Org.Apache.Kafka.Common.Record.CompressionType arg2, Org.Apache.Kafka.Common.Record.TimestampType arg3, long arg4, long arg5, long arg6, short arg7, int arg8, bool arg9, int arg10)
        {
            return SExecute<Org.Apache.Kafka.Common.Record.MemoryRecordsBuilder>(LocalBridgeClazz, "builder", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/MemoryRecords.html#builder(java.nio.ByteBuffer,byte,org.apache.kafka.common.record.CompressionType,org.apache.kafka.common.record.TimestampType,long,long,long,short,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Nio.ByteBuffer"/></param>
        /// <param name="arg1"><see cref="byte"/></param>
        /// <param name="arg2"><see cref="Org.Apache.Kafka.Common.Record.CompressionType"/></param>
        /// <param name="arg3"><see cref="Org.Apache.Kafka.Common.Record.TimestampType"/></param>
        /// <param name="arg4"><see cref="long"/></param>
        /// <param name="arg5"><see cref="long"/></param>
        /// <param name="arg6"><see cref="long"/></param>
        /// <param name="arg7"><see cref="short"/></param>
        /// <param name="arg8"><see cref="int"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Record.MemoryRecordsBuilder"/></returns>
        public static Org.Apache.Kafka.Common.Record.MemoryRecordsBuilder Builder(Java.Nio.ByteBuffer arg0, byte arg1, Org.Apache.Kafka.Common.Record.CompressionType arg2, Org.Apache.Kafka.Common.Record.TimestampType arg3, long arg4, long arg5, long arg6, short arg7, int arg8)
        {
            return SExecute<Org.Apache.Kafka.Common.Record.MemoryRecordsBuilder>(LocalBridgeClazz, "builder", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/MemoryRecords.html#builder(java.nio.ByteBuffer,byte,org.apache.kafka.common.record.CompressionType,org.apache.kafka.common.record.TimestampType,long,long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Nio.ByteBuffer"/></param>
        /// <param name="arg1"><see cref="byte"/></param>
        /// <param name="arg2"><see cref="Org.Apache.Kafka.Common.Record.CompressionType"/></param>
        /// <param name="arg3"><see cref="Org.Apache.Kafka.Common.Record.TimestampType"/></param>
        /// <param name="arg4"><see cref="long"/></param>
        /// <param name="arg5"><see cref="long"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Record.MemoryRecordsBuilder"/></returns>
        public static Org.Apache.Kafka.Common.Record.MemoryRecordsBuilder Builder(Java.Nio.ByteBuffer arg0, byte arg1, Org.Apache.Kafka.Common.Record.CompressionType arg2, Org.Apache.Kafka.Common.Record.TimestampType arg3, long arg4, long arg5)
        {
            return SExecute<Org.Apache.Kafka.Common.Record.MemoryRecordsBuilder>(LocalBridgeClazz, "builder", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/MemoryRecords.html#builder(java.nio.ByteBuffer,byte,org.apache.kafka.common.record.CompressionType,org.apache.kafka.common.record.TimestampType,long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Nio.ByteBuffer"/></param>
        /// <param name="arg1"><see cref="byte"/></param>
        /// <param name="arg2"><see cref="Org.Apache.Kafka.Common.Record.CompressionType"/></param>
        /// <param name="arg3"><see cref="Org.Apache.Kafka.Common.Record.TimestampType"/></param>
        /// <param name="arg4"><see cref="long"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Record.MemoryRecordsBuilder"/></returns>
        public static Org.Apache.Kafka.Common.Record.MemoryRecordsBuilder Builder(Java.Nio.ByteBuffer arg0, byte arg1, Org.Apache.Kafka.Common.Record.CompressionType arg2, Org.Apache.Kafka.Common.Record.TimestampType arg3, long arg4)
        {
            return SExecute<Org.Apache.Kafka.Common.Record.MemoryRecordsBuilder>(LocalBridgeClazz, "builder", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/MemoryRecords.html#builder(java.nio.ByteBuffer,org.apache.kafka.common.record.CompressionType,long,long,short,int,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Nio.ByteBuffer"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Common.Record.CompressionType"/></param>
        /// <param name="arg2"><see cref="long"/></param>
        /// <param name="arg3"><see cref="long"/></param>
        /// <param name="arg4"><see cref="short"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        /// <param name="arg6"><see cref="bool"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Record.MemoryRecordsBuilder"/></returns>
        public static Org.Apache.Kafka.Common.Record.MemoryRecordsBuilder Builder(Java.Nio.ByteBuffer arg0, Org.Apache.Kafka.Common.Record.CompressionType arg1, long arg2, long arg3, short arg4, int arg5, bool arg6)
        {
            return SExecute<Org.Apache.Kafka.Common.Record.MemoryRecordsBuilder>(LocalBridgeClazz, "builder", arg0, arg1, arg2, arg3, arg4, arg5, arg6);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/MemoryRecords.html#builder(java.nio.ByteBuffer,org.apache.kafka.common.record.CompressionType,org.apache.kafka.common.record.TimestampType,long,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Nio.ByteBuffer"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Common.Record.CompressionType"/></param>
        /// <param name="arg2"><see cref="Org.Apache.Kafka.Common.Record.TimestampType"/></param>
        /// <param name="arg3"><see cref="long"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Record.MemoryRecordsBuilder"/></returns>
        public static Org.Apache.Kafka.Common.Record.MemoryRecordsBuilder Builder(Java.Nio.ByteBuffer arg0, Org.Apache.Kafka.Common.Record.CompressionType arg1, Org.Apache.Kafka.Common.Record.TimestampType arg2, long arg3, int arg4)
        {
            return SExecute<Org.Apache.Kafka.Common.Record.MemoryRecordsBuilder>(LocalBridgeClazz, "builder", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/MemoryRecords.html#builder(java.nio.ByteBuffer,org.apache.kafka.common.record.CompressionType,org.apache.kafka.common.record.TimestampType,long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Nio.ByteBuffer"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Common.Record.CompressionType"/></param>
        /// <param name="arg2"><see cref="Org.Apache.Kafka.Common.Record.TimestampType"/></param>
        /// <param name="arg3"><see cref="long"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Record.MemoryRecordsBuilder"/></returns>
        public static Org.Apache.Kafka.Common.Record.MemoryRecordsBuilder Builder(Java.Nio.ByteBuffer arg0, Org.Apache.Kafka.Common.Record.CompressionType arg1, Org.Apache.Kafka.Common.Record.TimestampType arg2, long arg3)
        {
            return SExecute<Org.Apache.Kafka.Common.Record.MemoryRecordsBuilder>(LocalBridgeClazz, "builder", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/MemoryRecords.html#idempotentBuilder(java.nio.ByteBuffer,org.apache.kafka.common.record.CompressionType,long,long,short,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Nio.ByteBuffer"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Common.Record.CompressionType"/></param>
        /// <param name="arg2"><see cref="long"/></param>
        /// <param name="arg3"><see cref="long"/></param>
        /// <param name="arg4"><see cref="short"/></param>
        /// <param name="arg5"><see cref="int"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Record.MemoryRecordsBuilder"/></returns>
        public static Org.Apache.Kafka.Common.Record.MemoryRecordsBuilder IdempotentBuilder(Java.Nio.ByteBuffer arg0, Org.Apache.Kafka.Common.Record.CompressionType arg1, long arg2, long arg3, short arg4, int arg5)
        {
            return SExecute<Org.Apache.Kafka.Common.Record.MemoryRecordsBuilder>(LocalBridgeClazz, "idempotentBuilder", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/MemoryRecords.html#writeEndTransactionalMarker(java.nio.ByteBuffer,long,long,int,long,short,org.apache.kafka.common.record.EndTransactionMarker)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Nio.ByteBuffer"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        /// <param name="arg2"><see cref="long"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="long"/></param>
        /// <param name="arg5"><see cref="short"/></param>
        /// <param name="arg6"><see cref="Org.Apache.Kafka.Common.Record.EndTransactionMarker"/></param>
        public static void WriteEndTransactionalMarker(Java.Nio.ByteBuffer arg0, long arg1, long arg2, int arg3, long arg4, short arg5, Org.Apache.Kafka.Common.Record.EndTransactionMarker arg6)
        {
            SExecute(LocalBridgeClazz, "writeEndTransactionalMarker", arg0, arg1, arg2, arg3, arg4, arg5, arg6);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/MemoryRecords.html#validBytes()"/>
        /// </summary>

        /// <returns><see cref="int"/></returns>
        public int ValidBytes()
        {
            return IExecute<int>("validBytes");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/MemoryRecords.html#writeFullyTo(java.nio.channels.GatheringByteChannel)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Nio.Channels.GatheringByteChannel"/></param>
        /// <returns><see cref="int"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        public int WriteFullyTo(Java.Nio.Channels.GatheringByteChannel arg0)
        {
            return IExecute<int>("writeFullyTo", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/MemoryRecords.html#firstBatchSize()"/>
        /// </summary>

        /// <returns><see cref="int"/></returns>
        public int? FirstBatchSize()
        {
            return IExecute<int?>("firstBatchSize");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/MemoryRecords.html#buffer()"/>
        /// </summary>

        /// <returns><see cref="Java.Nio.ByteBuffer"/></returns>
        public Java.Nio.ByteBuffer Buffer()
        {
            return IExecute<Java.Nio.ByteBuffer>("buffer");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/MemoryRecords.html#filterTo(org.apache.kafka.common.TopicPartition,org.apache.kafka.common.record.MemoryRecords.RecordFilter,java.nio.ByteBuffer,int,org.apache.kafka.common.utils.BufferSupplier)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.TopicPartition"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Common.Record.MemoryRecords.RecordFilter"/></param>
        /// <param name="arg2"><see cref="Java.Nio.ByteBuffer"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="Org.Apache.Kafka.Common.Utils.BufferSupplier"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Record.MemoryRecords.FilterResult"/></returns>
        public Org.Apache.Kafka.Common.Record.MemoryRecords.FilterResult FilterTo(Org.Apache.Kafka.Common.TopicPartition arg0, Org.Apache.Kafka.Common.Record.MemoryRecords.RecordFilter arg1, Java.Nio.ByteBuffer arg2, int arg3, Org.Apache.Kafka.Common.Utils.BufferSupplier arg4)
        {
            return IExecute<Org.Apache.Kafka.Common.Record.MemoryRecords.FilterResult>("filterTo", arg0, arg1, arg2, arg3, arg4);
        }

        #endregion

        #region Nested classes
        #region FilterResult
        public partial class FilterResult
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/MemoryRecords.FilterResult.html#bytesRead()"/>
            /// </summary>

            /// <returns><see cref="int"/></returns>
            public int BytesRead()
            {
                return IExecute<int>("bytesRead");
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/MemoryRecords.FilterResult.html#bytesRetained()"/>
            /// </summary>

            /// <returns><see cref="int"/></returns>
            public int BytesRetained()
            {
                return IExecute<int>("bytesRetained");
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/MemoryRecords.FilterResult.html#messagesRead()"/>
            /// </summary>

            /// <returns><see cref="int"/></returns>
            public int MessagesRead()
            {
                return IExecute<int>("messagesRead");
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/MemoryRecords.FilterResult.html#messagesRetained()"/>
            /// </summary>

            /// <returns><see cref="int"/></returns>
            public int MessagesRetained()
            {
                return IExecute<int>("messagesRetained");
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/MemoryRecords.FilterResult.html#outputBuffer()"/>
            /// </summary>

            /// <returns><see cref="Java.Nio.ByteBuffer"/></returns>
            public Java.Nio.ByteBuffer OutputBuffer()
            {
                return IExecute<Java.Nio.ByteBuffer>("outputBuffer");
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/MemoryRecords.FilterResult.html#maxOffset()"/>
            /// </summary>

            /// <returns><see cref="long"/></returns>
            public long MaxOffset()
            {
                return IExecute<long>("maxOffset");
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/MemoryRecords.FilterResult.html#maxTimestamp()"/>
            /// </summary>

            /// <returns><see cref="long"/></returns>
            public long MaxTimestamp()
            {
                return IExecute<long>("maxTimestamp");
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/MemoryRecords.FilterResult.html#shallowOffsetOfMaxTimestamp()"/>
            /// </summary>

            /// <returns><see cref="long"/></returns>
            public long ShallowOffsetOfMaxTimestamp()
            {
                return IExecute<long>("shallowOffsetOfMaxTimestamp");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region RecordFilter
        public partial class RecordFilter
        {
            #region Constructors
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/MemoryRecords.RecordFilter.html#%3Cinit%3E(long,long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="long"/></param>
            /// <param name="arg1"><see cref="long"/></param>
            public RecordFilter(long arg0, long arg1)
                : base(arg0, arg1)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/MemoryRecords.RecordFilter.html#currentTime"/>
            /// </summary>
            public long currentTime { get { return IGetField<long>("currentTime"); } }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/MemoryRecords.RecordFilter.html#deleteRetentionMs"/>
            /// </summary>
            public long deleteRetentionMs { get { return IGetField<long>("deleteRetentionMs"); } }

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes
            #region BatchRetention
            public partial class BatchRetention
            {
                #region Constructors

                #endregion

                #region Class/Interface conversion operators

                #endregion

                #region Fields
                /// <summary>
                /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/MemoryRecords.RecordFilter.BatchRetention.html#DELETE"/>
                /// </summary>
                public static Org.Apache.Kafka.Common.Record.MemoryRecords.RecordFilter.BatchRetention DELETE { get { return SGetField<Org.Apache.Kafka.Common.Record.MemoryRecords.RecordFilter.BatchRetention>(LocalBridgeClazz, "DELETE"); } }
                /// <summary>
                /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/MemoryRecords.RecordFilter.BatchRetention.html#DELETE_EMPTY"/>
                /// </summary>
                public static Org.Apache.Kafka.Common.Record.MemoryRecords.RecordFilter.BatchRetention DELETE_EMPTY { get { return SGetField<Org.Apache.Kafka.Common.Record.MemoryRecords.RecordFilter.BatchRetention>(LocalBridgeClazz, "DELETE_EMPTY"); } }
                /// <summary>
                /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/MemoryRecords.RecordFilter.BatchRetention.html#RETAIN_EMPTY"/>
                /// </summary>
                public static Org.Apache.Kafka.Common.Record.MemoryRecords.RecordFilter.BatchRetention RETAIN_EMPTY { get { return SGetField<Org.Apache.Kafka.Common.Record.MemoryRecords.RecordFilter.BatchRetention>(LocalBridgeClazz, "RETAIN_EMPTY"); } }

                #endregion

                #region Static methods
                /// <summary>
                /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/MemoryRecords.RecordFilter.BatchRetention.html#valueOf(java.lang.String)"/>
                /// </summary>
                /// <param name="arg0"><see cref="string"/></param>
                /// <returns><see cref="Org.Apache.Kafka.Common.Record.MemoryRecords.RecordFilter.BatchRetention"/></returns>
                public static Org.Apache.Kafka.Common.Record.MemoryRecords.RecordFilter.BatchRetention ValueOf(string arg0)
                {
                    return SExecute<Org.Apache.Kafka.Common.Record.MemoryRecords.RecordFilter.BatchRetention>(LocalBridgeClazz, "valueOf", arg0);
                }
                /// <summary>
                /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/MemoryRecords.RecordFilter.BatchRetention.html#values()"/>
                /// </summary>

                /// <returns><see cref="Org.Apache.Kafka.Common.Record.MemoryRecords.RecordFilter.BatchRetention"/></returns>
                public static Org.Apache.Kafka.Common.Record.MemoryRecords.RecordFilter.BatchRetention[] Values()
                {
                    return SExecuteArray<Org.Apache.Kafka.Common.Record.MemoryRecords.RecordFilter.BatchRetention>(LocalBridgeClazz, "values");
                }

                #endregion

                #region Instance methods

                #endregion

                #region Nested classes

                #endregion

                // TODO: complete the class
            }
            #endregion

            #region BatchRetentionResult
            public partial class BatchRetentionResult
            {
                #region Constructors
                /// <summary>
                /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/MemoryRecords.RecordFilter.BatchRetentionResult.html#%3Cinit%3E(org.apache.kafka.common.record.MemoryRecords.RecordFilter.BatchRetention,boolean)"/>
                /// </summary>
                /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Record.MemoryRecords.RecordFilter.BatchRetention"/></param>
                /// <param name="arg1"><see cref="bool"/></param>
                public BatchRetentionResult(Org.Apache.Kafka.Common.Record.MemoryRecords.RecordFilter.BatchRetention arg0, bool arg1)
                    : base(arg0, arg1)
                {
                }

                #endregion

                #region Class/Interface conversion operators

                #endregion

                #region Fields
                /// <summary>
                /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/MemoryRecords.RecordFilter.BatchRetentionResult.html#containsMarkerForEmptyTxn"/>
                /// </summary>
                public bool containsMarkerForEmptyTxn { get { return IGetField<bool>("containsMarkerForEmptyTxn"); } }
                /// <summary>
                /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/MemoryRecords.RecordFilter.BatchRetentionResult.html#batchRetention"/>
                /// </summary>
                public Org.Apache.Kafka.Common.Record.MemoryRecords.RecordFilter.BatchRetention batchRetention { get { return IGetField<Org.Apache.Kafka.Common.Record.MemoryRecords.RecordFilter.BatchRetention>("batchRetention"); } }

                #endregion

                #region Static methods

                #endregion

                #region Instance methods

                #endregion

                #region Nested classes

                #endregion

                // TODO: complete the class
            }
            #endregion

        
            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}