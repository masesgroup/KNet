/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka-clients-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Common.Record
{
    #region DefaultRecord
    public partial class DefaultRecord
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/DefaultRecord.html#MAX_RECORD_OVERHEAD"/>
        /// </summary>
        public static int MAX_RECORD_OVERHEAD { get { return SGetField<int>(LocalBridgeClazz, "MAX_RECORD_OVERHEAD"); } }

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/DefaultRecord.html#sizeInBytes(int,long,int,int,org.apache.kafka.common.header.Header[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="Org.Apache.Kafka.Common.Header.Header"/></param>
        /// <returns><see cref="int"/></returns>
        public static int SizeInBytes(int arg0, long arg1, int arg2, int arg3, Org.Apache.Kafka.Common.Header.Header[] arg4)
        {
            return SExecute<int>(LocalBridgeClazz, "sizeInBytes", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/DefaultRecord.html#sizeInBytes(int,long,java.nio.ByteBuffer,java.nio.ByteBuffer,org.apache.kafka.common.header.Header[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        /// <param name="arg2"><see cref="Java.Nio.ByteBuffer"/></param>
        /// <param name="arg3"><see cref="Java.Nio.ByteBuffer"/></param>
        /// <param name="arg4"><see cref="Org.Apache.Kafka.Common.Header.Header"/></param>
        /// <returns><see cref="int"/></returns>
        public static int SizeInBytes(int arg0, long arg1, Java.Nio.ByteBuffer arg2, Java.Nio.ByteBuffer arg3, Org.Apache.Kafka.Common.Header.Header[] arg4)
        {
            return SExecute<int>(LocalBridgeClazz, "sizeInBytes", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/DefaultRecord.html#sizeOfBodyInBytes(int,long,int,int,org.apache.kafka.common.header.Header[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="Org.Apache.Kafka.Common.Header.Header"/></param>
        /// <returns><see cref="int"/></returns>
        public static int SizeOfBodyInBytes(int arg0, long arg1, int arg2, int arg3, Org.Apache.Kafka.Common.Header.Header[] arg4)
        {
            return SExecute<int>(LocalBridgeClazz, "sizeOfBodyInBytes", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/DefaultRecord.html#writeTo(java.io.DataOutputStream,int,long,java.nio.ByteBuffer,java.nio.ByteBuffer,org.apache.kafka.common.header.Header[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Io.DataOutputStream"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="long"/></param>
        /// <param name="arg3"><see cref="Java.Nio.ByteBuffer"/></param>
        /// <param name="arg4"><see cref="Java.Nio.ByteBuffer"/></param>
        /// <param name="arg5"><see cref="Org.Apache.Kafka.Common.Header.Header"/></param>
        /// <returns><see cref="int"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        public static int WriteTo(Java.Io.DataOutputStream arg0, int arg1, long arg2, Java.Nio.ByteBuffer arg3, Java.Nio.ByteBuffer arg4, Org.Apache.Kafka.Common.Header.Header[] arg5)
        {
            return SExecute<int>(LocalBridgeClazz, "writeTo", arg0, arg1, arg2, arg3, arg4, arg5);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/DefaultRecord.html#readFrom(java.io.DataInput,long,long,int,java.lang.Long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Io.DataInput"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        /// <param name="arg2"><see cref="long"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="long"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Record.DefaultRecord"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        public static Org.Apache.Kafka.Common.Record.DefaultRecord ReadFrom(Java.Io.DataInput arg0, long arg1, long arg2, int arg3, long? arg4)
        {
            return SExecute<Org.Apache.Kafka.Common.Record.DefaultRecord>(LocalBridgeClazz, "readFrom", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/DefaultRecord.html#readFrom(java.nio.ByteBuffer,long,long,int,java.lang.Long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Nio.ByteBuffer"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        /// <param name="arg2"><see cref="long"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="long"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Record.DefaultRecord"/></returns>
        public static Org.Apache.Kafka.Common.Record.DefaultRecord ReadFrom(Java.Nio.ByteBuffer arg0, long arg1, long arg2, int arg3, long? arg4)
        {
            return SExecute<Org.Apache.Kafka.Common.Record.DefaultRecord>(LocalBridgeClazz, "readFrom", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/DefaultRecord.html#readPartiallyFrom(java.io.DataInput,byte[],long,long,int,java.lang.Long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Io.DataInput"/></param>
        /// <param name="arg1"><see cref="byte"/></param>
        /// <param name="arg2"><see cref="long"/></param>
        /// <param name="arg3"><see cref="long"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <param name="arg5"><see cref="long"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Record.PartialDefaultRecord"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        public static Org.Apache.Kafka.Common.Record.PartialDefaultRecord ReadPartiallyFrom(Java.Io.DataInput arg0, byte[] arg1, long arg2, long arg3, int arg4, long? arg5)
        {
            return SExecute<Org.Apache.Kafka.Common.Record.PartialDefaultRecord>(LocalBridgeClazz, "readPartiallyFrom", arg0, arg1, arg2, arg3, arg4, arg5);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/DefaultRecord.html#hasKey()"/>
        /// </summary>

        /// <returns><see cref="bool"/></returns>
        public bool HasKey()
        {
            return IExecute<bool>("hasKey");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/DefaultRecord.html#hasMagic(byte)"/>
        /// </summary>
        /// <param name="arg0"><see cref="byte"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool HasMagic(byte arg0)
        {
            return IExecute<bool>("hasMagic", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/DefaultRecord.html#hasTimestampType(org.apache.kafka.common.record.TimestampType)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Record.TimestampType"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool HasTimestampType(Org.Apache.Kafka.Common.Record.TimestampType arg0)
        {
            return IExecute<bool>("hasTimestampType", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/DefaultRecord.html#hasValue()"/>
        /// </summary>

        /// <returns><see cref="bool"/></returns>
        public bool HasValue()
        {
            return IExecute<bool>("hasValue");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/DefaultRecord.html#isCompressed()"/>
        /// </summary>

        /// <returns><see cref="bool"/></returns>
        public bool IsCompressed()
        {
            return IExecute<bool>("isCompressed");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/DefaultRecord.html#attributes()"/>
        /// </summary>

        /// <returns><see cref="byte"/></returns>
        public byte Attributes()
        {
            return IExecute<byte>("attributes");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/DefaultRecord.html#keySize()"/>
        /// </summary>

        /// <returns><see cref="int"/></returns>
        public int KeySize()
        {
            return IExecute<int>("keySize");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/DefaultRecord.html#sequence()"/>
        /// </summary>

        /// <returns><see cref="int"/></returns>
        public int Sequence()
        {
            return IExecute<int>("sequence");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/DefaultRecord.html#sizeInBytes()"/>
        /// </summary>

        /// <returns><see cref="int"/></returns>
        public int SizeInBytes()
        {
            return IExecute<int>("sizeInBytes");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/DefaultRecord.html#valueSize()"/>
        /// </summary>

        /// <returns><see cref="int"/></returns>
        public int ValueSize()
        {
            return IExecute<int>("valueSize");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/DefaultRecord.html#key()"/>
        /// </summary>

        /// <returns><see cref="Java.Nio.ByteBuffer"/></returns>
        public Java.Nio.ByteBuffer Key()
        {
            return IExecute<Java.Nio.ByteBuffer>("key");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/DefaultRecord.html#value()"/>
        /// </summary>

        /// <returns><see cref="Java.Nio.ByteBuffer"/></returns>
        public Java.Nio.ByteBuffer Value()
        {
            return IExecute<Java.Nio.ByteBuffer>("value");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/DefaultRecord.html#offset()"/>
        /// </summary>

        /// <returns><see cref="long"/></returns>
        public long Offset()
        {
            return IExecute<long>("offset");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/DefaultRecord.html#timestamp()"/>
        /// </summary>

        /// <returns><see cref="long"/></returns>
        public long Timestamp()
        {
            return IExecute<long>("timestamp");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/DefaultRecord.html#headers()"/>
        /// </summary>

        /// <returns><see cref="Org.Apache.Kafka.Common.Header.Header"/></returns>
        public Org.Apache.Kafka.Common.Header.Header[] Headers()
        {
            return IExecuteArray<Org.Apache.Kafka.Common.Header.Header>("headers");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/DefaultRecord.html#ensureValid()"/>
        /// </summary>
        public void EnsureValid()
        {
            IExecute("ensureValid");
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}