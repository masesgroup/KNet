/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.0.0.0)
*  using kafka-clients-3.5.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Common.Record
{
    #region IRecordBatch
    /// <summary>
    /// .NET interface for TO BE DEFINED FROM USER
    /// </summary>
    public partial interface IRecordBatch
    {
        #region Instance methods

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion

    #region RecordBatch
    public partial class RecordBatch : Org.Apache.Kafka.Common.Record.IRecordBatch
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.5.0/org/apache/kafka/common/record/RecordBatch.html#CURRENT_MAGIC_VALUE"/>
        /// </summary>
        public static byte CURRENT_MAGIC_VALUE { get { return SGetField<byte>(LocalBridgeClazz, "CURRENT_MAGIC_VALUE"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.5.0/org/apache/kafka/common/record/RecordBatch.html#MAGIC_VALUE_V0"/>
        /// </summary>
        public static byte MAGIC_VALUE_V0 { get { return SGetField<byte>(LocalBridgeClazz, "MAGIC_VALUE_V0"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.5.0/org/apache/kafka/common/record/RecordBatch.html#MAGIC_VALUE_V1"/>
        /// </summary>
        public static byte MAGIC_VALUE_V1 { get { return SGetField<byte>(LocalBridgeClazz, "MAGIC_VALUE_V1"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.5.0/org/apache/kafka/common/record/RecordBatch.html#MAGIC_VALUE_V2"/>
        /// </summary>
        public static byte MAGIC_VALUE_V2 { get { return SGetField<byte>(LocalBridgeClazz, "MAGIC_VALUE_V2"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.5.0/org/apache/kafka/common/record/RecordBatch.html#NO_PARTITION_LEADER_EPOCH"/>
        /// </summary>
        public static int NO_PARTITION_LEADER_EPOCH { get { return SGetField<int>(LocalBridgeClazz, "NO_PARTITION_LEADER_EPOCH"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.5.0/org/apache/kafka/common/record/RecordBatch.html#NO_SEQUENCE"/>
        /// </summary>
        public static int NO_SEQUENCE { get { return SGetField<int>(LocalBridgeClazz, "NO_SEQUENCE"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.5.0/org/apache/kafka/common/record/RecordBatch.html#NO_PRODUCER_ID"/>
        /// </summary>
        public static long NO_PRODUCER_ID { get { return SGetField<long>(LocalBridgeClazz, "NO_PRODUCER_ID"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.5.0/org/apache/kafka/common/record/RecordBatch.html#NO_TIMESTAMP"/>
        /// </summary>
        public static long NO_TIMESTAMP { get { return SGetField<long>(LocalBridgeClazz, "NO_TIMESTAMP"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.5.0/org/apache/kafka/common/record/RecordBatch.html#NO_PRODUCER_EPOCH"/>
        /// </summary>
        public static short NO_PRODUCER_EPOCH { get { return SGetField<short>(LocalBridgeClazz, "NO_PRODUCER_EPOCH"); } }

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.5.0/org/apache/kafka/common/record/RecordBatch.html#hasProducerId--"/>
        /// </summary>

        /// <returns><see cref="bool"/></returns>
        public bool HasProducerId()
        {
            return IExecute<bool>("hasProducerId");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.5.0/org/apache/kafka/common/record/RecordBatch.html#isCompressed--"/>
        /// </summary>

        /// <returns><see cref="bool"/></returns>
        public bool IsCompressed()
        {
            return IExecute<bool>("isCompressed");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.5.0/org/apache/kafka/common/record/RecordBatch.html#isControlBatch--"/>
        /// </summary>

        /// <returns><see cref="bool"/></returns>
        public bool IsControlBatch()
        {
            return IExecute<bool>("isControlBatch");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.5.0/org/apache/kafka/common/record/RecordBatch.html#isTransactional--"/>
        /// </summary>

        /// <returns><see cref="bool"/></returns>
        public bool IsTransactional()
        {
            return IExecute<bool>("isTransactional");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.5.0/org/apache/kafka/common/record/RecordBatch.html#isValid--"/>
        /// </summary>

        /// <returns><see cref="bool"/></returns>
        public bool IsValid()
        {
            return IExecute<bool>("isValid");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.5.0/org/apache/kafka/common/record/RecordBatch.html#magic--"/>
        /// </summary>

        /// <returns><see cref="byte"/></returns>
        public byte Magic()
        {
            return IExecute<byte>("magic");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.5.0/org/apache/kafka/common/record/RecordBatch.html#baseSequence--"/>
        /// </summary>

        /// <returns><see cref="int"/></returns>
        public int BaseSequence()
        {
            return IExecute<int>("baseSequence");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.5.0/org/apache/kafka/common/record/RecordBatch.html#lastSequence--"/>
        /// </summary>

        /// <returns><see cref="int"/></returns>
        public int LastSequence()
        {
            return IExecute<int>("lastSequence");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.5.0/org/apache/kafka/common/record/RecordBatch.html#partitionLeaderEpoch--"/>
        /// </summary>

        /// <returns><see cref="int"/></returns>
        public int PartitionLeaderEpoch()
        {
            return IExecute<int>("partitionLeaderEpoch");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.5.0/org/apache/kafka/common/record/RecordBatch.html#sizeInBytes--"/>
        /// </summary>

        /// <returns><see cref="int"/></returns>
        public int SizeInBytes()
        {
            return IExecute<int>("sizeInBytes");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.5.0/org/apache/kafka/common/record/RecordBatch.html#countOrNull--"/>
        /// </summary>

        /// <returns><see cref="Java.Lang.Integer"/></returns>
        public Java.Lang.Integer CountOrNull()
        {
            return IExecute<Java.Lang.Integer>("countOrNull");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.5.0/org/apache/kafka/common/record/RecordBatch.html#deleteHorizonMs--"/>
        /// </summary>

        /// <returns><see cref="Java.Util.OptionalLong"/></returns>
        public Java.Util.OptionalLong DeleteHorizonMs()
        {
            return IExecute<Java.Util.OptionalLong>("deleteHorizonMs");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.5.0/org/apache/kafka/common/record/RecordBatch.html#baseOffset--"/>
        /// </summary>

        /// <returns><see cref="long"/></returns>
        public long BaseOffset()
        {
            return IExecute<long>("baseOffset");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.5.0/org/apache/kafka/common/record/RecordBatch.html#checksum--"/>
        /// </summary>

        /// <returns><see cref="long"/></returns>
        public long Checksum()
        {
            return IExecute<long>("checksum");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.5.0/org/apache/kafka/common/record/RecordBatch.html#lastOffset--"/>
        /// </summary>

        /// <returns><see cref="long"/></returns>
        public long LastOffset()
        {
            return IExecute<long>("lastOffset");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.5.0/org/apache/kafka/common/record/RecordBatch.html#maxTimestamp--"/>
        /// </summary>

        /// <returns><see cref="long"/></returns>
        public long MaxTimestamp()
        {
            return IExecute<long>("maxTimestamp");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.5.0/org/apache/kafka/common/record/RecordBatch.html#nextOffset--"/>
        /// </summary>

        /// <returns><see cref="long"/></returns>
        public long NextOffset()
        {
            return IExecute<long>("nextOffset");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.5.0/org/apache/kafka/common/record/RecordBatch.html#producerId--"/>
        /// </summary>

        /// <returns><see cref="long"/></returns>
        public long ProducerId()
        {
            return IExecute<long>("producerId");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.5.0/org/apache/kafka/common/record/RecordBatch.html#compressionType--"/>
        /// </summary>

        /// <returns><see cref="Org.Apache.Kafka.Common.Record.CompressionType"/></returns>
        public Org.Apache.Kafka.Common.Record.CompressionType CompressionType()
        {
            return IExecute<Org.Apache.Kafka.Common.Record.CompressionType>("compressionType");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.5.0/org/apache/kafka/common/record/RecordBatch.html#timestampType--"/>
        /// </summary>

        /// <returns><see cref="Org.Apache.Kafka.Common.Record.TimestampType"/></returns>
        public Org.Apache.Kafka.Common.Record.TimestampType TimestampType()
        {
            return IExecute<Org.Apache.Kafka.Common.Record.TimestampType>("timestampType");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.5.0/org/apache/kafka/common/record/RecordBatch.html#streamingIterator-org.apache.kafka.common.utils.BufferSupplier-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Utils.BufferSupplier"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Utils.CloseableIterator"/></returns>
        public Org.Apache.Kafka.Common.Utils.CloseableIterator<Org.Apache.Kafka.Common.Record.Record> StreamingIterator(Org.Apache.Kafka.Common.Utils.BufferSupplier arg0)
        {
            return IExecute<Org.Apache.Kafka.Common.Utils.CloseableIterator<Org.Apache.Kafka.Common.Record.Record>>("streamingIterator", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.5.0/org/apache/kafka/common/record/RecordBatch.html#producerEpoch--"/>
        /// </summary>

        /// <returns><see cref="short"/></returns>
        public short ProducerEpoch()
        {
            return IExecute<short>("producerEpoch");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.5.0/org/apache/kafka/common/record/RecordBatch.html#ensureValid--"/>
        /// </summary>
        public void EnsureValid()
        {
            IExecute("ensureValid");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.5.0/org/apache/kafka/common/record/RecordBatch.html#writeTo-java.nio.ByteBuffer-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Nio.ByteBuffer"/></param>
        public void WriteTo(Java.Nio.ByteBuffer arg0)
        {
            IExecute("writeTo", arg0);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}