/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka-clients-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Common.Record
{
    #region RecordBatch
    public partial class RecordBatch
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/RecordBatch.html#CURRENT_MAGIC_VALUE"/>
        /// </summary>
        public static byte CURRENT_MAGIC_VALUE { get { return SGetField<byte>(LocalBridgeClazz, "CURRENT_MAGIC_VALUE"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/RecordBatch.html#MAGIC_VALUE_V0"/>
        /// </summary>
        public static byte MAGIC_VALUE_V0 { get { return SGetField<byte>(LocalBridgeClazz, "MAGIC_VALUE_V0"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/RecordBatch.html#MAGIC_VALUE_V1"/>
        /// </summary>
        public static byte MAGIC_VALUE_V1 { get { return SGetField<byte>(LocalBridgeClazz, "MAGIC_VALUE_V1"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/RecordBatch.html#MAGIC_VALUE_V2"/>
        /// </summary>
        public static byte MAGIC_VALUE_V2 { get { return SGetField<byte>(LocalBridgeClazz, "MAGIC_VALUE_V2"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/RecordBatch.html#NO_PARTITION_LEADER_EPOCH"/>
        /// </summary>
        public static int NO_PARTITION_LEADER_EPOCH { get { return SGetField<int>(LocalBridgeClazz, "NO_PARTITION_LEADER_EPOCH"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/RecordBatch.html#NO_SEQUENCE"/>
        /// </summary>
        public static int NO_SEQUENCE { get { return SGetField<int>(LocalBridgeClazz, "NO_SEQUENCE"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/RecordBatch.html#NO_PRODUCER_ID"/>
        /// </summary>
        public static long NO_PRODUCER_ID { get { return SGetField<long>(LocalBridgeClazz, "NO_PRODUCER_ID"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/RecordBatch.html#NO_TIMESTAMP"/>
        /// </summary>
        public static long NO_TIMESTAMP { get { return SGetField<long>(LocalBridgeClazz, "NO_TIMESTAMP"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/RecordBatch.html#NO_PRODUCER_EPOCH"/>
        /// </summary>
        public static short NO_PRODUCER_EPOCH { get { return SGetField<short>(LocalBridgeClazz, "NO_PRODUCER_EPOCH"); } }

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/RecordBatch.html#baseOffset()"/> 
        /// </summary>
        public long BaseOffset
        {
            get { return IExecute<long>("baseOffset"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/RecordBatch.html#baseSequence()"/> 
        /// </summary>
        public int BaseSequence
        {
            get { return IExecute<int>("baseSequence"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/RecordBatch.html#checksum()"/> 
        /// </summary>
        public long Checksum
        {
            get { return IExecute<long>("checksum"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/RecordBatch.html#compressionType()"/> 
        /// </summary>
        public Org.Apache.Kafka.Common.Record.CompressionType CompressionType
        {
            get { return IExecute<Org.Apache.Kafka.Common.Record.CompressionType>("compressionType"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/RecordBatch.html#countOrNull()"/> 
        /// </summary>
        public int? CountOrNull
        {
            get { return IExecute<int?>("countOrNull"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/RecordBatch.html#deleteHorizonMs()"/> 
        /// </summary>
        public Java.Util.OptionalLong DeleteHorizonMs
        {
            get { return IExecute<Java.Util.OptionalLong>("deleteHorizonMs"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/RecordBatch.html#hasProducerId()"/> 
        /// </summary>
        public bool HasProducerId
        {
            get { return IExecute<bool>("hasProducerId"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/RecordBatch.html#isCompressed()"/> 
        /// </summary>
        public bool IsCompressed
        {
            get { return IExecute<bool>("isCompressed"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/RecordBatch.html#isControlBatch()"/> 
        /// </summary>
        public bool IsControlBatch
        {
            get { return IExecute<bool>("isControlBatch"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/RecordBatch.html#isTransactional()"/> 
        /// </summary>
        public bool IsTransactional
        {
            get { return IExecute<bool>("isTransactional"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/RecordBatch.html#isValid()"/> 
        /// </summary>
        public bool IsValid
        {
            get { return IExecute<bool>("isValid"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/RecordBatch.html#lastOffset()"/> 
        /// </summary>
        public long LastOffset
        {
            get { return IExecute<long>("lastOffset"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/RecordBatch.html#lastSequence()"/> 
        /// </summary>
        public int LastSequence
        {
            get { return IExecute<int>("lastSequence"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/RecordBatch.html#magic()"/> 
        /// </summary>
        public byte Magic
        {
            get { return IExecute<byte>("magic"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/RecordBatch.html#maxTimestamp()"/> 
        /// </summary>
        public long MaxTimestamp
        {
            get { return IExecute<long>("maxTimestamp"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/RecordBatch.html#nextOffset()"/> 
        /// </summary>
        public long NextOffset
        {
            get { return IExecute<long>("nextOffset"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/RecordBatch.html#partitionLeaderEpoch()"/> 
        /// </summary>
        public int PartitionLeaderEpoch
        {
            get { return IExecute<int>("partitionLeaderEpoch"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/RecordBatch.html#producerEpoch()"/> 
        /// </summary>
        public short ProducerEpoch
        {
            get { return IExecute<short>("producerEpoch"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/RecordBatch.html#producerId()"/> 
        /// </summary>
        public long ProducerId
        {
            get { return IExecute<long>("producerId"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/RecordBatch.html#sizeInBytes()"/> 
        /// </summary>
        public int SizeInBytes
        {
            get { return IExecute<int>("sizeInBytes"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/RecordBatch.html#timestampType()"/> 
        /// </summary>
        public Org.Apache.Kafka.Common.Record.TimestampType TimestampType
        {
            get { return IExecute<Org.Apache.Kafka.Common.Record.TimestampType>("timestampType"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/RecordBatch.html#streamingIterator(org.apache.kafka.common.utils.BufferSupplier)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Utils.BufferSupplier"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Utils.CloseableIterator"/></returns>
        public Org.Apache.Kafka.Common.Utils.CloseableIterator<Org.Apache.Kafka.Common.Record.Record> StreamingIterator(Org.Apache.Kafka.Common.Utils.BufferSupplier arg0)
        {
            return IExecute<Org.Apache.Kafka.Common.Utils.CloseableIterator<Org.Apache.Kafka.Common.Record.Record>>("streamingIterator", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/RecordBatch.html#ensureValid()"/>
        /// </summary>
        public void EnsureValid()
        {
            IExecute("ensureValid");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/RecordBatch.html#writeTo(java.nio.ByteBuffer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Nio.ByteBuffer"/></param>
        public void WriteTo(Java.Nio.ByteBuffer arg0)
        {
            IExecute("writeTo", arg0);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}