/*
*  Copyright (c) 2021-2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.6.4.0)
*  using kafka-clients-4.1.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Common.Config
{
    #region SaslConfigs declaration
    /// <summary>
    /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html"/>
    /// </summary>
    public partial class SaslConfigs : MASES.JCOBridge.C2JBridge.JVMBridgeBase<SaslConfigs>
    {
        const string _bridgeClassName = "org.apache.kafka.common.config.SaslConfigs";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public SaslConfigs() { }
        /// <summary>
        /// Internal constructor: used internally from JCOBridge
        /// </summary>
        [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public SaslConfigs(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public SaslConfigs(params object[] args) : base(args) { }

        private static readonly global::System.Exception _LocalBridgeClazzException = null;
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <inheritdoc/>
        public override string BridgeClassName => _bridgeClassName;
        /// <inheritdoc/>
        public override bool IsBridgeAbstract => false;
        /// <inheritdoc/>
        public override bool IsBridgeCloseable => false;
        /// <inheritdoc/>
        public override bool IsBridgeInterface => false;
        /// <inheritdoc/>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class

    }
    #endregion

    #region SaslConfigs implementation
    public partial class SaslConfigs
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#DEFAULT_SASL_OAUTHBEARER_ASSERTION_CLAIM_JTI_INCLUDE"/>
        /// </summary>
        public static bool DEFAULT_SASL_OAUTHBEARER_ASSERTION_CLAIM_JTI_INCLUDE { get { if (!_DEFAULT_SASL_OAUTHBEARER_ASSERTION_CLAIM_JTI_INCLUDEReady) { _DEFAULT_SASL_OAUTHBEARER_ASSERTION_CLAIM_JTI_INCLUDEContent = SGetField<bool>(LocalBridgeClazz, "DEFAULT_SASL_OAUTHBEARER_ASSERTION_CLAIM_JTI_INCLUDE"); _DEFAULT_SASL_OAUTHBEARER_ASSERTION_CLAIM_JTI_INCLUDEReady = true; } return _DEFAULT_SASL_OAUTHBEARER_ASSERTION_CLAIM_JTI_INCLUDEContent; } }
        private static bool _DEFAULT_SASL_OAUTHBEARER_ASSERTION_CLAIM_JTI_INCLUDEContent = default;
        private static bool _DEFAULT_SASL_OAUTHBEARER_ASSERTION_CLAIM_JTI_INCLUDEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#DEFAULT_SASL_OAUTHBEARER_HEADER_URLENCODE"/>
        /// </summary>
        public static bool DEFAULT_SASL_OAUTHBEARER_HEADER_URLENCODE { get { if (!_DEFAULT_SASL_OAUTHBEARER_HEADER_URLENCODEReady) { _DEFAULT_SASL_OAUTHBEARER_HEADER_URLENCODEContent = SGetField<bool>(LocalBridgeClazz, "DEFAULT_SASL_OAUTHBEARER_HEADER_URLENCODE"); _DEFAULT_SASL_OAUTHBEARER_HEADER_URLENCODEReady = true; } return _DEFAULT_SASL_OAUTHBEARER_HEADER_URLENCODEContent; } }
        private static bool _DEFAULT_SASL_OAUTHBEARER_HEADER_URLENCODEContent = default;
        private static bool _DEFAULT_SASL_OAUTHBEARER_HEADER_URLENCODEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#DEFAULT_KERBEROS_TICKET_RENEW_JITTER"/>
        /// </summary>
        public static double DEFAULT_KERBEROS_TICKET_RENEW_JITTER { get { if (!_DEFAULT_KERBEROS_TICKET_RENEW_JITTERReady) { _DEFAULT_KERBEROS_TICKET_RENEW_JITTERContent = SGetField<double>(LocalBridgeClazz, "DEFAULT_KERBEROS_TICKET_RENEW_JITTER"); _DEFAULT_KERBEROS_TICKET_RENEW_JITTERReady = true; } return _DEFAULT_KERBEROS_TICKET_RENEW_JITTERContent; } }
        private static double _DEFAULT_KERBEROS_TICKET_RENEW_JITTERContent = default;
        private static bool _DEFAULT_KERBEROS_TICKET_RENEW_JITTERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#DEFAULT_KERBEROS_TICKET_RENEW_WINDOW_FACTOR"/>
        /// </summary>
        public static double DEFAULT_KERBEROS_TICKET_RENEW_WINDOW_FACTOR { get { if (!_DEFAULT_KERBEROS_TICKET_RENEW_WINDOW_FACTORReady) { _DEFAULT_KERBEROS_TICKET_RENEW_WINDOW_FACTORContent = SGetField<double>(LocalBridgeClazz, "DEFAULT_KERBEROS_TICKET_RENEW_WINDOW_FACTOR"); _DEFAULT_KERBEROS_TICKET_RENEW_WINDOW_FACTORReady = true; } return _DEFAULT_KERBEROS_TICKET_RENEW_WINDOW_FACTORContent; } }
        private static double _DEFAULT_KERBEROS_TICKET_RENEW_WINDOW_FACTORContent = default;
        private static bool _DEFAULT_KERBEROS_TICKET_RENEW_WINDOW_FACTORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#DEFAULT_LOGIN_REFRESH_WINDOW_FACTOR"/>
        /// </summary>
        public static double DEFAULT_LOGIN_REFRESH_WINDOW_FACTOR { get { if (!_DEFAULT_LOGIN_REFRESH_WINDOW_FACTORReady) { _DEFAULT_LOGIN_REFRESH_WINDOW_FACTORContent = SGetField<double>(LocalBridgeClazz, "DEFAULT_LOGIN_REFRESH_WINDOW_FACTOR"); _DEFAULT_LOGIN_REFRESH_WINDOW_FACTORReady = true; } return _DEFAULT_LOGIN_REFRESH_WINDOW_FACTORContent; } }
        private static double _DEFAULT_LOGIN_REFRESH_WINDOW_FACTORContent = default;
        private static bool _DEFAULT_LOGIN_REFRESH_WINDOW_FACTORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#DEFAULT_LOGIN_REFRESH_WINDOW_JITTER"/>
        /// </summary>
        public static double DEFAULT_LOGIN_REFRESH_WINDOW_JITTER { get { if (!_DEFAULT_LOGIN_REFRESH_WINDOW_JITTERReady) { _DEFAULT_LOGIN_REFRESH_WINDOW_JITTERContent = SGetField<double>(LocalBridgeClazz, "DEFAULT_LOGIN_REFRESH_WINDOW_JITTER"); _DEFAULT_LOGIN_REFRESH_WINDOW_JITTERReady = true; } return _DEFAULT_LOGIN_REFRESH_WINDOW_JITTERContent; } }
        private static double _DEFAULT_LOGIN_REFRESH_WINDOW_JITTERContent = default;
        private static bool _DEFAULT_LOGIN_REFRESH_WINDOW_JITTERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#DEFAULT_SASL_OAUTHBEARER_ASSERTION_CLAIM_EXP_SECONDS"/>
        /// </summary>
        public static int DEFAULT_SASL_OAUTHBEARER_ASSERTION_CLAIM_EXP_SECONDS { get { if (!_DEFAULT_SASL_OAUTHBEARER_ASSERTION_CLAIM_EXP_SECONDSReady) { _DEFAULT_SASL_OAUTHBEARER_ASSERTION_CLAIM_EXP_SECONDSContent = SGetField<int>(LocalBridgeClazz, "DEFAULT_SASL_OAUTHBEARER_ASSERTION_CLAIM_EXP_SECONDS"); _DEFAULT_SASL_OAUTHBEARER_ASSERTION_CLAIM_EXP_SECONDSReady = true; } return _DEFAULT_SASL_OAUTHBEARER_ASSERTION_CLAIM_EXP_SECONDSContent; } }
        private static int _DEFAULT_SASL_OAUTHBEARER_ASSERTION_CLAIM_EXP_SECONDSContent = default;
        private static bool _DEFAULT_SASL_OAUTHBEARER_ASSERTION_CLAIM_EXP_SECONDSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#DEFAULT_SASL_OAUTHBEARER_ASSERTION_CLAIM_NBF_SECONDS"/>
        /// </summary>
        public static int DEFAULT_SASL_OAUTHBEARER_ASSERTION_CLAIM_NBF_SECONDS { get { if (!_DEFAULT_SASL_OAUTHBEARER_ASSERTION_CLAIM_NBF_SECONDSReady) { _DEFAULT_SASL_OAUTHBEARER_ASSERTION_CLAIM_NBF_SECONDSContent = SGetField<int>(LocalBridgeClazz, "DEFAULT_SASL_OAUTHBEARER_ASSERTION_CLAIM_NBF_SECONDS"); _DEFAULT_SASL_OAUTHBEARER_ASSERTION_CLAIM_NBF_SECONDSReady = true; } return _DEFAULT_SASL_OAUTHBEARER_ASSERTION_CLAIM_NBF_SECONDSContent; } }
        private static int _DEFAULT_SASL_OAUTHBEARER_ASSERTION_CLAIM_NBF_SECONDSContent = default;
        private static bool _DEFAULT_SASL_OAUTHBEARER_ASSERTION_CLAIM_NBF_SECONDSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#DEFAULT_SASL_OAUTHBEARER_CLOCK_SKEW_SECONDS"/>
        /// </summary>
        public static int DEFAULT_SASL_OAUTHBEARER_CLOCK_SKEW_SECONDS { get { if (!_DEFAULT_SASL_OAUTHBEARER_CLOCK_SKEW_SECONDSReady) { _DEFAULT_SASL_OAUTHBEARER_CLOCK_SKEW_SECONDSContent = SGetField<int>(LocalBridgeClazz, "DEFAULT_SASL_OAUTHBEARER_CLOCK_SKEW_SECONDS"); _DEFAULT_SASL_OAUTHBEARER_CLOCK_SKEW_SECONDSReady = true; } return _DEFAULT_SASL_OAUTHBEARER_CLOCK_SKEW_SECONDSContent; } }
        private static int _DEFAULT_SASL_OAUTHBEARER_CLOCK_SKEW_SECONDSContent = default;
        private static bool _DEFAULT_SASL_OAUTHBEARER_CLOCK_SKEW_SECONDSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#DEFAULT_KERBEROS_KINIT_CMD"/>
        /// </summary>
        public static Java.Lang.String DEFAULT_KERBEROS_KINIT_CMD { get { if (!_DEFAULT_KERBEROS_KINIT_CMDReady) { _DEFAULT_KERBEROS_KINIT_CMDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DEFAULT_KERBEROS_KINIT_CMD"); _DEFAULT_KERBEROS_KINIT_CMDReady = true; } return _DEFAULT_KERBEROS_KINIT_CMDContent; } }
        private static Java.Lang.String _DEFAULT_KERBEROS_KINIT_CMDContent = default;
        private static bool _DEFAULT_KERBEROS_KINIT_CMDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#DEFAULT_SASL_MECHANISM"/>
        /// </summary>
        public static Java.Lang.String DEFAULT_SASL_MECHANISM { get { if (!_DEFAULT_SASL_MECHANISMReady) { _DEFAULT_SASL_MECHANISMContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DEFAULT_SASL_MECHANISM"); _DEFAULT_SASL_MECHANISMReady = true; } return _DEFAULT_SASL_MECHANISMContent; } }
        private static Java.Lang.String _DEFAULT_SASL_MECHANISMContent = default;
        private static bool _DEFAULT_SASL_MECHANISMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#DEFAULT_SASL_OAUTHBEARER_ASSERTION_ALGORITHM"/>
        /// </summary>
        public static Java.Lang.String DEFAULT_SASL_OAUTHBEARER_ASSERTION_ALGORITHM { get { if (!_DEFAULT_SASL_OAUTHBEARER_ASSERTION_ALGORITHMReady) { _DEFAULT_SASL_OAUTHBEARER_ASSERTION_ALGORITHMContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DEFAULT_SASL_OAUTHBEARER_ASSERTION_ALGORITHM"); _DEFAULT_SASL_OAUTHBEARER_ASSERTION_ALGORITHMReady = true; } return _DEFAULT_SASL_OAUTHBEARER_ASSERTION_ALGORITHMContent; } }
        private static Java.Lang.String _DEFAULT_SASL_OAUTHBEARER_ASSERTION_ALGORITHMContent = default;
        private static bool _DEFAULT_SASL_OAUTHBEARER_ASSERTION_ALGORITHMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#DEFAULT_SASL_OAUTHBEARER_JWT_RETRIEVER_CLASS"/>
        /// </summary>
        public static Java.Lang.String DEFAULT_SASL_OAUTHBEARER_JWT_RETRIEVER_CLASS { get { if (!_DEFAULT_SASL_OAUTHBEARER_JWT_RETRIEVER_CLASSReady) { _DEFAULT_SASL_OAUTHBEARER_JWT_RETRIEVER_CLASSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DEFAULT_SASL_OAUTHBEARER_JWT_RETRIEVER_CLASS"); _DEFAULT_SASL_OAUTHBEARER_JWT_RETRIEVER_CLASSReady = true; } return _DEFAULT_SASL_OAUTHBEARER_JWT_RETRIEVER_CLASSContent; } }
        private static Java.Lang.String _DEFAULT_SASL_OAUTHBEARER_JWT_RETRIEVER_CLASSContent = default;
        private static bool _DEFAULT_SASL_OAUTHBEARER_JWT_RETRIEVER_CLASSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#DEFAULT_SASL_OAUTHBEARER_JWT_VALIDATOR_CLASS"/>
        /// </summary>
        public static Java.Lang.String DEFAULT_SASL_OAUTHBEARER_JWT_VALIDATOR_CLASS { get { if (!_DEFAULT_SASL_OAUTHBEARER_JWT_VALIDATOR_CLASSReady) { _DEFAULT_SASL_OAUTHBEARER_JWT_VALIDATOR_CLASSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DEFAULT_SASL_OAUTHBEARER_JWT_VALIDATOR_CLASS"); _DEFAULT_SASL_OAUTHBEARER_JWT_VALIDATOR_CLASSReady = true; } return _DEFAULT_SASL_OAUTHBEARER_JWT_VALIDATOR_CLASSContent; } }
        private static Java.Lang.String _DEFAULT_SASL_OAUTHBEARER_JWT_VALIDATOR_CLASSContent = default;
        private static bool _DEFAULT_SASL_OAUTHBEARER_JWT_VALIDATOR_CLASSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#DEFAULT_SASL_OAUTHBEARER_SCOPE_CLAIM_NAME"/>
        /// </summary>
        public static Java.Lang.String DEFAULT_SASL_OAUTHBEARER_SCOPE_CLAIM_NAME { get { if (!_DEFAULT_SASL_OAUTHBEARER_SCOPE_CLAIM_NAMEReady) { _DEFAULT_SASL_OAUTHBEARER_SCOPE_CLAIM_NAMEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DEFAULT_SASL_OAUTHBEARER_SCOPE_CLAIM_NAME"); _DEFAULT_SASL_OAUTHBEARER_SCOPE_CLAIM_NAMEReady = true; } return _DEFAULT_SASL_OAUTHBEARER_SCOPE_CLAIM_NAMEContent; } }
        private static Java.Lang.String _DEFAULT_SASL_OAUTHBEARER_SCOPE_CLAIM_NAMEContent = default;
        private static bool _DEFAULT_SASL_OAUTHBEARER_SCOPE_CLAIM_NAMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#DEFAULT_SASL_OAUTHBEARER_SUB_CLAIM_NAME"/>
        /// </summary>
        public static Java.Lang.String DEFAULT_SASL_OAUTHBEARER_SUB_CLAIM_NAME { get { if (!_DEFAULT_SASL_OAUTHBEARER_SUB_CLAIM_NAMEReady) { _DEFAULT_SASL_OAUTHBEARER_SUB_CLAIM_NAMEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DEFAULT_SASL_OAUTHBEARER_SUB_CLAIM_NAME"); _DEFAULT_SASL_OAUTHBEARER_SUB_CLAIM_NAMEReady = true; } return _DEFAULT_SASL_OAUTHBEARER_SUB_CLAIM_NAMEContent; } }
        private static Java.Lang.String _DEFAULT_SASL_OAUTHBEARER_SUB_CLAIM_NAMEContent = default;
        private static bool _DEFAULT_SASL_OAUTHBEARER_SUB_CLAIM_NAMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#GSSAPI_MECHANISM"/>
        /// </summary>
        public static Java.Lang.String GSSAPI_MECHANISM { get { if (!_GSSAPI_MECHANISMReady) { _GSSAPI_MECHANISMContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "GSSAPI_MECHANISM"); _GSSAPI_MECHANISMReady = true; } return _GSSAPI_MECHANISMContent; } }
        private static Java.Lang.String _GSSAPI_MECHANISMContent = default;
        private static bool _GSSAPI_MECHANISMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#SASL_CLIENT_CALLBACK_HANDLER_CLASS"/>
        /// </summary>
        public static Java.Lang.String SASL_CLIENT_CALLBACK_HANDLER_CLASS { get { if (!_SASL_CLIENT_CALLBACK_HANDLER_CLASSReady) { _SASL_CLIENT_CALLBACK_HANDLER_CLASSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SASL_CLIENT_CALLBACK_HANDLER_CLASS"); _SASL_CLIENT_CALLBACK_HANDLER_CLASSReady = true; } return _SASL_CLIENT_CALLBACK_HANDLER_CLASSContent; } }
        private static Java.Lang.String _SASL_CLIENT_CALLBACK_HANDLER_CLASSContent = default;
        private static bool _SASL_CLIENT_CALLBACK_HANDLER_CLASSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#SASL_CLIENT_CALLBACK_HANDLER_CLASS_DOC"/>
        /// </summary>
        public static Java.Lang.String SASL_CLIENT_CALLBACK_HANDLER_CLASS_DOC { get { if (!_SASL_CLIENT_CALLBACK_HANDLER_CLASS_DOCReady) { _SASL_CLIENT_CALLBACK_HANDLER_CLASS_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SASL_CLIENT_CALLBACK_HANDLER_CLASS_DOC"); _SASL_CLIENT_CALLBACK_HANDLER_CLASS_DOCReady = true; } return _SASL_CLIENT_CALLBACK_HANDLER_CLASS_DOCContent; } }
        private static Java.Lang.String _SASL_CLIENT_CALLBACK_HANDLER_CLASS_DOCContent = default;
        private static bool _SASL_CLIENT_CALLBACK_HANDLER_CLASS_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#SASL_JAAS_CONFIG"/>
        /// </summary>
        public static Java.Lang.String SASL_JAAS_CONFIG { get { if (!_SASL_JAAS_CONFIGReady) { _SASL_JAAS_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SASL_JAAS_CONFIG"); _SASL_JAAS_CONFIGReady = true; } return _SASL_JAAS_CONFIGContent; } }
        private static Java.Lang.String _SASL_JAAS_CONFIGContent = default;
        private static bool _SASL_JAAS_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#SASL_JAAS_CONFIG_DOC"/>
        /// </summary>
        public static Java.Lang.String SASL_JAAS_CONFIG_DOC { get { if (!_SASL_JAAS_CONFIG_DOCReady) { _SASL_JAAS_CONFIG_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SASL_JAAS_CONFIG_DOC"); _SASL_JAAS_CONFIG_DOCReady = true; } return _SASL_JAAS_CONFIG_DOCContent; } }
        private static Java.Lang.String _SASL_JAAS_CONFIG_DOCContent = default;
        private static bool _SASL_JAAS_CONFIG_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#SASL_KERBEROS_KINIT_CMD"/>
        /// </summary>
        public static Java.Lang.String SASL_KERBEROS_KINIT_CMD { get { if (!_SASL_KERBEROS_KINIT_CMDReady) { _SASL_KERBEROS_KINIT_CMDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SASL_KERBEROS_KINIT_CMD"); _SASL_KERBEROS_KINIT_CMDReady = true; } return _SASL_KERBEROS_KINIT_CMDContent; } }
        private static Java.Lang.String _SASL_KERBEROS_KINIT_CMDContent = default;
        private static bool _SASL_KERBEROS_KINIT_CMDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#SASL_KERBEROS_KINIT_CMD_DOC"/>
        /// </summary>
        public static Java.Lang.String SASL_KERBEROS_KINIT_CMD_DOC { get { if (!_SASL_KERBEROS_KINIT_CMD_DOCReady) { _SASL_KERBEROS_KINIT_CMD_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SASL_KERBEROS_KINIT_CMD_DOC"); _SASL_KERBEROS_KINIT_CMD_DOCReady = true; } return _SASL_KERBEROS_KINIT_CMD_DOCContent; } }
        private static Java.Lang.String _SASL_KERBEROS_KINIT_CMD_DOCContent = default;
        private static bool _SASL_KERBEROS_KINIT_CMD_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#SASL_KERBEROS_MIN_TIME_BEFORE_RELOGIN"/>
        /// </summary>
        public static Java.Lang.String SASL_KERBEROS_MIN_TIME_BEFORE_RELOGIN { get { if (!_SASL_KERBEROS_MIN_TIME_BEFORE_RELOGINReady) { _SASL_KERBEROS_MIN_TIME_BEFORE_RELOGINContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SASL_KERBEROS_MIN_TIME_BEFORE_RELOGIN"); _SASL_KERBEROS_MIN_TIME_BEFORE_RELOGINReady = true; } return _SASL_KERBEROS_MIN_TIME_BEFORE_RELOGINContent; } }
        private static Java.Lang.String _SASL_KERBEROS_MIN_TIME_BEFORE_RELOGINContent = default;
        private static bool _SASL_KERBEROS_MIN_TIME_BEFORE_RELOGINReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#SASL_KERBEROS_MIN_TIME_BEFORE_RELOGIN_DOC"/>
        /// </summary>
        public static Java.Lang.String SASL_KERBEROS_MIN_TIME_BEFORE_RELOGIN_DOC { get { if (!_SASL_KERBEROS_MIN_TIME_BEFORE_RELOGIN_DOCReady) { _SASL_KERBEROS_MIN_TIME_BEFORE_RELOGIN_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SASL_KERBEROS_MIN_TIME_BEFORE_RELOGIN_DOC"); _SASL_KERBEROS_MIN_TIME_BEFORE_RELOGIN_DOCReady = true; } return _SASL_KERBEROS_MIN_TIME_BEFORE_RELOGIN_DOCContent; } }
        private static Java.Lang.String _SASL_KERBEROS_MIN_TIME_BEFORE_RELOGIN_DOCContent = default;
        private static bool _SASL_KERBEROS_MIN_TIME_BEFORE_RELOGIN_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#SASL_KERBEROS_SERVICE_NAME"/>
        /// </summary>
        public static Java.Lang.String SASL_KERBEROS_SERVICE_NAME { get { if (!_SASL_KERBEROS_SERVICE_NAMEReady) { _SASL_KERBEROS_SERVICE_NAMEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SASL_KERBEROS_SERVICE_NAME"); _SASL_KERBEROS_SERVICE_NAMEReady = true; } return _SASL_KERBEROS_SERVICE_NAMEContent; } }
        private static Java.Lang.String _SASL_KERBEROS_SERVICE_NAMEContent = default;
        private static bool _SASL_KERBEROS_SERVICE_NAMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#SASL_KERBEROS_SERVICE_NAME_DOC"/>
        /// </summary>
        public static Java.Lang.String SASL_KERBEROS_SERVICE_NAME_DOC { get { if (!_SASL_KERBEROS_SERVICE_NAME_DOCReady) { _SASL_KERBEROS_SERVICE_NAME_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SASL_KERBEROS_SERVICE_NAME_DOC"); _SASL_KERBEROS_SERVICE_NAME_DOCReady = true; } return _SASL_KERBEROS_SERVICE_NAME_DOCContent; } }
        private static Java.Lang.String _SASL_KERBEROS_SERVICE_NAME_DOCContent = default;
        private static bool _SASL_KERBEROS_SERVICE_NAME_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#SASL_KERBEROS_TICKET_RENEW_JITTER"/>
        /// </summary>
        public static Java.Lang.String SASL_KERBEROS_TICKET_RENEW_JITTER { get { if (!_SASL_KERBEROS_TICKET_RENEW_JITTERReady) { _SASL_KERBEROS_TICKET_RENEW_JITTERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SASL_KERBEROS_TICKET_RENEW_JITTER"); _SASL_KERBEROS_TICKET_RENEW_JITTERReady = true; } return _SASL_KERBEROS_TICKET_RENEW_JITTERContent; } }
        private static Java.Lang.String _SASL_KERBEROS_TICKET_RENEW_JITTERContent = default;
        private static bool _SASL_KERBEROS_TICKET_RENEW_JITTERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#SASL_KERBEROS_TICKET_RENEW_JITTER_DOC"/>
        /// </summary>
        public static Java.Lang.String SASL_KERBEROS_TICKET_RENEW_JITTER_DOC { get { if (!_SASL_KERBEROS_TICKET_RENEW_JITTER_DOCReady) { _SASL_KERBEROS_TICKET_RENEW_JITTER_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SASL_KERBEROS_TICKET_RENEW_JITTER_DOC"); _SASL_KERBEROS_TICKET_RENEW_JITTER_DOCReady = true; } return _SASL_KERBEROS_TICKET_RENEW_JITTER_DOCContent; } }
        private static Java.Lang.String _SASL_KERBEROS_TICKET_RENEW_JITTER_DOCContent = default;
        private static bool _SASL_KERBEROS_TICKET_RENEW_JITTER_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#SASL_KERBEROS_TICKET_RENEW_WINDOW_FACTOR"/>
        /// </summary>
        public static Java.Lang.String SASL_KERBEROS_TICKET_RENEW_WINDOW_FACTOR { get { if (!_SASL_KERBEROS_TICKET_RENEW_WINDOW_FACTORReady) { _SASL_KERBEROS_TICKET_RENEW_WINDOW_FACTORContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SASL_KERBEROS_TICKET_RENEW_WINDOW_FACTOR"); _SASL_KERBEROS_TICKET_RENEW_WINDOW_FACTORReady = true; } return _SASL_KERBEROS_TICKET_RENEW_WINDOW_FACTORContent; } }
        private static Java.Lang.String _SASL_KERBEROS_TICKET_RENEW_WINDOW_FACTORContent = default;
        private static bool _SASL_KERBEROS_TICKET_RENEW_WINDOW_FACTORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#SASL_KERBEROS_TICKET_RENEW_WINDOW_FACTOR_DOC"/>
        /// </summary>
        public static Java.Lang.String SASL_KERBEROS_TICKET_RENEW_WINDOW_FACTOR_DOC { get { if (!_SASL_KERBEROS_TICKET_RENEW_WINDOW_FACTOR_DOCReady) { _SASL_KERBEROS_TICKET_RENEW_WINDOW_FACTOR_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SASL_KERBEROS_TICKET_RENEW_WINDOW_FACTOR_DOC"); _SASL_KERBEROS_TICKET_RENEW_WINDOW_FACTOR_DOCReady = true; } return _SASL_KERBEROS_TICKET_RENEW_WINDOW_FACTOR_DOCContent; } }
        private static Java.Lang.String _SASL_KERBEROS_TICKET_RENEW_WINDOW_FACTOR_DOCContent = default;
        private static bool _SASL_KERBEROS_TICKET_RENEW_WINDOW_FACTOR_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#SASL_LOGIN_CALLBACK_HANDLER_CLASS"/>
        /// </summary>
        public static Java.Lang.String SASL_LOGIN_CALLBACK_HANDLER_CLASS { get { if (!_SASL_LOGIN_CALLBACK_HANDLER_CLASSReady) { _SASL_LOGIN_CALLBACK_HANDLER_CLASSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SASL_LOGIN_CALLBACK_HANDLER_CLASS"); _SASL_LOGIN_CALLBACK_HANDLER_CLASSReady = true; } return _SASL_LOGIN_CALLBACK_HANDLER_CLASSContent; } }
        private static Java.Lang.String _SASL_LOGIN_CALLBACK_HANDLER_CLASSContent = default;
        private static bool _SASL_LOGIN_CALLBACK_HANDLER_CLASSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#SASL_LOGIN_CALLBACK_HANDLER_CLASS_DOC"/>
        /// </summary>
        public static Java.Lang.String SASL_LOGIN_CALLBACK_HANDLER_CLASS_DOC { get { if (!_SASL_LOGIN_CALLBACK_HANDLER_CLASS_DOCReady) { _SASL_LOGIN_CALLBACK_HANDLER_CLASS_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SASL_LOGIN_CALLBACK_HANDLER_CLASS_DOC"); _SASL_LOGIN_CALLBACK_HANDLER_CLASS_DOCReady = true; } return _SASL_LOGIN_CALLBACK_HANDLER_CLASS_DOCContent; } }
        private static Java.Lang.String _SASL_LOGIN_CALLBACK_HANDLER_CLASS_DOCContent = default;
        private static bool _SASL_LOGIN_CALLBACK_HANDLER_CLASS_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#SASL_LOGIN_CLASS"/>
        /// </summary>
        public static Java.Lang.String SASL_LOGIN_CLASS { get { if (!_SASL_LOGIN_CLASSReady) { _SASL_LOGIN_CLASSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SASL_LOGIN_CLASS"); _SASL_LOGIN_CLASSReady = true; } return _SASL_LOGIN_CLASSContent; } }
        private static Java.Lang.String _SASL_LOGIN_CLASSContent = default;
        private static bool _SASL_LOGIN_CLASSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#SASL_LOGIN_CLASS_DOC"/>
        /// </summary>
        public static Java.Lang.String SASL_LOGIN_CLASS_DOC { get { if (!_SASL_LOGIN_CLASS_DOCReady) { _SASL_LOGIN_CLASS_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SASL_LOGIN_CLASS_DOC"); _SASL_LOGIN_CLASS_DOCReady = true; } return _SASL_LOGIN_CLASS_DOCContent; } }
        private static Java.Lang.String _SASL_LOGIN_CLASS_DOCContent = default;
        private static bool _SASL_LOGIN_CLASS_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#SASL_LOGIN_CONNECT_TIMEOUT_MS"/>
        /// </summary>
        public static Java.Lang.String SASL_LOGIN_CONNECT_TIMEOUT_MS { get { if (!_SASL_LOGIN_CONNECT_TIMEOUT_MSReady) { _SASL_LOGIN_CONNECT_TIMEOUT_MSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SASL_LOGIN_CONNECT_TIMEOUT_MS"); _SASL_LOGIN_CONNECT_TIMEOUT_MSReady = true; } return _SASL_LOGIN_CONNECT_TIMEOUT_MSContent; } }
        private static Java.Lang.String _SASL_LOGIN_CONNECT_TIMEOUT_MSContent = default;
        private static bool _SASL_LOGIN_CONNECT_TIMEOUT_MSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#SASL_LOGIN_CONNECT_TIMEOUT_MS_DOC"/>
        /// </summary>
        public static Java.Lang.String SASL_LOGIN_CONNECT_TIMEOUT_MS_DOC { get { if (!_SASL_LOGIN_CONNECT_TIMEOUT_MS_DOCReady) { _SASL_LOGIN_CONNECT_TIMEOUT_MS_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SASL_LOGIN_CONNECT_TIMEOUT_MS_DOC"); _SASL_LOGIN_CONNECT_TIMEOUT_MS_DOCReady = true; } return _SASL_LOGIN_CONNECT_TIMEOUT_MS_DOCContent; } }
        private static Java.Lang.String _SASL_LOGIN_CONNECT_TIMEOUT_MS_DOCContent = default;
        private static bool _SASL_LOGIN_CONNECT_TIMEOUT_MS_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#SASL_LOGIN_READ_TIMEOUT_MS"/>
        /// </summary>
        public static Java.Lang.String SASL_LOGIN_READ_TIMEOUT_MS { get { if (!_SASL_LOGIN_READ_TIMEOUT_MSReady) { _SASL_LOGIN_READ_TIMEOUT_MSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SASL_LOGIN_READ_TIMEOUT_MS"); _SASL_LOGIN_READ_TIMEOUT_MSReady = true; } return _SASL_LOGIN_READ_TIMEOUT_MSContent; } }
        private static Java.Lang.String _SASL_LOGIN_READ_TIMEOUT_MSContent = default;
        private static bool _SASL_LOGIN_READ_TIMEOUT_MSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#SASL_LOGIN_READ_TIMEOUT_MS_DOC"/>
        /// </summary>
        public static Java.Lang.String SASL_LOGIN_READ_TIMEOUT_MS_DOC { get { if (!_SASL_LOGIN_READ_TIMEOUT_MS_DOCReady) { _SASL_LOGIN_READ_TIMEOUT_MS_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SASL_LOGIN_READ_TIMEOUT_MS_DOC"); _SASL_LOGIN_READ_TIMEOUT_MS_DOCReady = true; } return _SASL_LOGIN_READ_TIMEOUT_MS_DOCContent; } }
        private static Java.Lang.String _SASL_LOGIN_READ_TIMEOUT_MS_DOCContent = default;
        private static bool _SASL_LOGIN_READ_TIMEOUT_MS_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#SASL_LOGIN_REFRESH_BUFFER_SECONDS"/>
        /// </summary>
        public static Java.Lang.String SASL_LOGIN_REFRESH_BUFFER_SECONDS { get { if (!_SASL_LOGIN_REFRESH_BUFFER_SECONDSReady) { _SASL_LOGIN_REFRESH_BUFFER_SECONDSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SASL_LOGIN_REFRESH_BUFFER_SECONDS"); _SASL_LOGIN_REFRESH_BUFFER_SECONDSReady = true; } return _SASL_LOGIN_REFRESH_BUFFER_SECONDSContent; } }
        private static Java.Lang.String _SASL_LOGIN_REFRESH_BUFFER_SECONDSContent = default;
        private static bool _SASL_LOGIN_REFRESH_BUFFER_SECONDSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#SASL_LOGIN_REFRESH_BUFFER_SECONDS_DOC"/>
        /// </summary>
        public static Java.Lang.String SASL_LOGIN_REFRESH_BUFFER_SECONDS_DOC { get { if (!_SASL_LOGIN_REFRESH_BUFFER_SECONDS_DOCReady) { _SASL_LOGIN_REFRESH_BUFFER_SECONDS_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SASL_LOGIN_REFRESH_BUFFER_SECONDS_DOC"); _SASL_LOGIN_REFRESH_BUFFER_SECONDS_DOCReady = true; } return _SASL_LOGIN_REFRESH_BUFFER_SECONDS_DOCContent; } }
        private static Java.Lang.String _SASL_LOGIN_REFRESH_BUFFER_SECONDS_DOCContent = default;
        private static bool _SASL_LOGIN_REFRESH_BUFFER_SECONDS_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#SASL_LOGIN_REFRESH_MIN_PERIOD_SECONDS"/>
        /// </summary>
        public static Java.Lang.String SASL_LOGIN_REFRESH_MIN_PERIOD_SECONDS { get { if (!_SASL_LOGIN_REFRESH_MIN_PERIOD_SECONDSReady) { _SASL_LOGIN_REFRESH_MIN_PERIOD_SECONDSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SASL_LOGIN_REFRESH_MIN_PERIOD_SECONDS"); _SASL_LOGIN_REFRESH_MIN_PERIOD_SECONDSReady = true; } return _SASL_LOGIN_REFRESH_MIN_PERIOD_SECONDSContent; } }
        private static Java.Lang.String _SASL_LOGIN_REFRESH_MIN_PERIOD_SECONDSContent = default;
        private static bool _SASL_LOGIN_REFRESH_MIN_PERIOD_SECONDSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#SASL_LOGIN_REFRESH_MIN_PERIOD_SECONDS_DOC"/>
        /// </summary>
        public static Java.Lang.String SASL_LOGIN_REFRESH_MIN_PERIOD_SECONDS_DOC { get { if (!_SASL_LOGIN_REFRESH_MIN_PERIOD_SECONDS_DOCReady) { _SASL_LOGIN_REFRESH_MIN_PERIOD_SECONDS_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SASL_LOGIN_REFRESH_MIN_PERIOD_SECONDS_DOC"); _SASL_LOGIN_REFRESH_MIN_PERIOD_SECONDS_DOCReady = true; } return _SASL_LOGIN_REFRESH_MIN_PERIOD_SECONDS_DOCContent; } }
        private static Java.Lang.String _SASL_LOGIN_REFRESH_MIN_PERIOD_SECONDS_DOCContent = default;
        private static bool _SASL_LOGIN_REFRESH_MIN_PERIOD_SECONDS_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#SASL_LOGIN_REFRESH_WINDOW_FACTOR"/>
        /// </summary>
        public static Java.Lang.String SASL_LOGIN_REFRESH_WINDOW_FACTOR { get { if (!_SASL_LOGIN_REFRESH_WINDOW_FACTORReady) { _SASL_LOGIN_REFRESH_WINDOW_FACTORContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SASL_LOGIN_REFRESH_WINDOW_FACTOR"); _SASL_LOGIN_REFRESH_WINDOW_FACTORReady = true; } return _SASL_LOGIN_REFRESH_WINDOW_FACTORContent; } }
        private static Java.Lang.String _SASL_LOGIN_REFRESH_WINDOW_FACTORContent = default;
        private static bool _SASL_LOGIN_REFRESH_WINDOW_FACTORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#SASL_LOGIN_REFRESH_WINDOW_FACTOR_DOC"/>
        /// </summary>
        public static Java.Lang.String SASL_LOGIN_REFRESH_WINDOW_FACTOR_DOC { get { if (!_SASL_LOGIN_REFRESH_WINDOW_FACTOR_DOCReady) { _SASL_LOGIN_REFRESH_WINDOW_FACTOR_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SASL_LOGIN_REFRESH_WINDOW_FACTOR_DOC"); _SASL_LOGIN_REFRESH_WINDOW_FACTOR_DOCReady = true; } return _SASL_LOGIN_REFRESH_WINDOW_FACTOR_DOCContent; } }
        private static Java.Lang.String _SASL_LOGIN_REFRESH_WINDOW_FACTOR_DOCContent = default;
        private static bool _SASL_LOGIN_REFRESH_WINDOW_FACTOR_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#SASL_LOGIN_REFRESH_WINDOW_JITTER"/>
        /// </summary>
        public static Java.Lang.String SASL_LOGIN_REFRESH_WINDOW_JITTER { get { if (!_SASL_LOGIN_REFRESH_WINDOW_JITTERReady) { _SASL_LOGIN_REFRESH_WINDOW_JITTERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SASL_LOGIN_REFRESH_WINDOW_JITTER"); _SASL_LOGIN_REFRESH_WINDOW_JITTERReady = true; } return _SASL_LOGIN_REFRESH_WINDOW_JITTERContent; } }
        private static Java.Lang.String _SASL_LOGIN_REFRESH_WINDOW_JITTERContent = default;
        private static bool _SASL_LOGIN_REFRESH_WINDOW_JITTERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#SASL_LOGIN_REFRESH_WINDOW_JITTER_DOC"/>
        /// </summary>
        public static Java.Lang.String SASL_LOGIN_REFRESH_WINDOW_JITTER_DOC { get { if (!_SASL_LOGIN_REFRESH_WINDOW_JITTER_DOCReady) { _SASL_LOGIN_REFRESH_WINDOW_JITTER_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SASL_LOGIN_REFRESH_WINDOW_JITTER_DOC"); _SASL_LOGIN_REFRESH_WINDOW_JITTER_DOCReady = true; } return _SASL_LOGIN_REFRESH_WINDOW_JITTER_DOCContent; } }
        private static Java.Lang.String _SASL_LOGIN_REFRESH_WINDOW_JITTER_DOCContent = default;
        private static bool _SASL_LOGIN_REFRESH_WINDOW_JITTER_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#SASL_LOGIN_RETRY_BACKOFF_MAX_MS"/>
        /// </summary>
        public static Java.Lang.String SASL_LOGIN_RETRY_BACKOFF_MAX_MS { get { if (!_SASL_LOGIN_RETRY_BACKOFF_MAX_MSReady) { _SASL_LOGIN_RETRY_BACKOFF_MAX_MSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SASL_LOGIN_RETRY_BACKOFF_MAX_MS"); _SASL_LOGIN_RETRY_BACKOFF_MAX_MSReady = true; } return _SASL_LOGIN_RETRY_BACKOFF_MAX_MSContent; } }
        private static Java.Lang.String _SASL_LOGIN_RETRY_BACKOFF_MAX_MSContent = default;
        private static bool _SASL_LOGIN_RETRY_BACKOFF_MAX_MSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#SASL_LOGIN_RETRY_BACKOFF_MAX_MS_DOC"/>
        /// </summary>
        public static Java.Lang.String SASL_LOGIN_RETRY_BACKOFF_MAX_MS_DOC { get { if (!_SASL_LOGIN_RETRY_BACKOFF_MAX_MS_DOCReady) { _SASL_LOGIN_RETRY_BACKOFF_MAX_MS_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SASL_LOGIN_RETRY_BACKOFF_MAX_MS_DOC"); _SASL_LOGIN_RETRY_BACKOFF_MAX_MS_DOCReady = true; } return _SASL_LOGIN_RETRY_BACKOFF_MAX_MS_DOCContent; } }
        private static Java.Lang.String _SASL_LOGIN_RETRY_BACKOFF_MAX_MS_DOCContent = default;
        private static bool _SASL_LOGIN_RETRY_BACKOFF_MAX_MS_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#SASL_LOGIN_RETRY_BACKOFF_MS"/>
        /// </summary>
        public static Java.Lang.String SASL_LOGIN_RETRY_BACKOFF_MS { get { if (!_SASL_LOGIN_RETRY_BACKOFF_MSReady) { _SASL_LOGIN_RETRY_BACKOFF_MSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SASL_LOGIN_RETRY_BACKOFF_MS"); _SASL_LOGIN_RETRY_BACKOFF_MSReady = true; } return _SASL_LOGIN_RETRY_BACKOFF_MSContent; } }
        private static Java.Lang.String _SASL_LOGIN_RETRY_BACKOFF_MSContent = default;
        private static bool _SASL_LOGIN_RETRY_BACKOFF_MSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#SASL_LOGIN_RETRY_BACKOFF_MS_DOC"/>
        /// </summary>
        public static Java.Lang.String SASL_LOGIN_RETRY_BACKOFF_MS_DOC { get { if (!_SASL_LOGIN_RETRY_BACKOFF_MS_DOCReady) { _SASL_LOGIN_RETRY_BACKOFF_MS_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SASL_LOGIN_RETRY_BACKOFF_MS_DOC"); _SASL_LOGIN_RETRY_BACKOFF_MS_DOCReady = true; } return _SASL_LOGIN_RETRY_BACKOFF_MS_DOCContent; } }
        private static Java.Lang.String _SASL_LOGIN_RETRY_BACKOFF_MS_DOCContent = default;
        private static bool _SASL_LOGIN_RETRY_BACKOFF_MS_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#SASL_MECHANISM"/>
        /// </summary>
        public static Java.Lang.String SASL_MECHANISM { get { if (!_SASL_MECHANISMReady) { _SASL_MECHANISMContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SASL_MECHANISM"); _SASL_MECHANISMReady = true; } return _SASL_MECHANISMContent; } }
        private static Java.Lang.String _SASL_MECHANISMContent = default;
        private static bool _SASL_MECHANISMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#SASL_MECHANISM_DOC"/>
        /// </summary>
        public static Java.Lang.String SASL_MECHANISM_DOC { get { if (!_SASL_MECHANISM_DOCReady) { _SASL_MECHANISM_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SASL_MECHANISM_DOC"); _SASL_MECHANISM_DOCReady = true; } return _SASL_MECHANISM_DOCContent; } }
        private static Java.Lang.String _SASL_MECHANISM_DOCContent = default;
        private static bool _SASL_MECHANISM_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#SASL_OAUTHBEARER_ASSERTION_ALGORITHM"/>
        /// </summary>
        public static Java.Lang.String SASL_OAUTHBEARER_ASSERTION_ALGORITHM { get { if (!_SASL_OAUTHBEARER_ASSERTION_ALGORITHMReady) { _SASL_OAUTHBEARER_ASSERTION_ALGORITHMContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SASL_OAUTHBEARER_ASSERTION_ALGORITHM"); _SASL_OAUTHBEARER_ASSERTION_ALGORITHMReady = true; } return _SASL_OAUTHBEARER_ASSERTION_ALGORITHMContent; } }
        private static Java.Lang.String _SASL_OAUTHBEARER_ASSERTION_ALGORITHMContent = default;
        private static bool _SASL_OAUTHBEARER_ASSERTION_ALGORITHMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#SASL_OAUTHBEARER_ASSERTION_ALGORITHM_DOC"/>
        /// </summary>
        public static Java.Lang.String SASL_OAUTHBEARER_ASSERTION_ALGORITHM_DOC { get { if (!_SASL_OAUTHBEARER_ASSERTION_ALGORITHM_DOCReady) { _SASL_OAUTHBEARER_ASSERTION_ALGORITHM_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SASL_OAUTHBEARER_ASSERTION_ALGORITHM_DOC"); _SASL_OAUTHBEARER_ASSERTION_ALGORITHM_DOCReady = true; } return _SASL_OAUTHBEARER_ASSERTION_ALGORITHM_DOCContent; } }
        private static Java.Lang.String _SASL_OAUTHBEARER_ASSERTION_ALGORITHM_DOCContent = default;
        private static bool _SASL_OAUTHBEARER_ASSERTION_ALGORITHM_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#SASL_OAUTHBEARER_ASSERTION_CLAIM_AUD"/>
        /// </summary>
        public static Java.Lang.String SASL_OAUTHBEARER_ASSERTION_CLAIM_AUD { get { if (!_SASL_OAUTHBEARER_ASSERTION_CLAIM_AUDReady) { _SASL_OAUTHBEARER_ASSERTION_CLAIM_AUDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SASL_OAUTHBEARER_ASSERTION_CLAIM_AUD"); _SASL_OAUTHBEARER_ASSERTION_CLAIM_AUDReady = true; } return _SASL_OAUTHBEARER_ASSERTION_CLAIM_AUDContent; } }
        private static Java.Lang.String _SASL_OAUTHBEARER_ASSERTION_CLAIM_AUDContent = default;
        private static bool _SASL_OAUTHBEARER_ASSERTION_CLAIM_AUDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#SASL_OAUTHBEARER_ASSERTION_CLAIM_AUD_DOC"/>
        /// </summary>
        public static Java.Lang.String SASL_OAUTHBEARER_ASSERTION_CLAIM_AUD_DOC { get { if (!_SASL_OAUTHBEARER_ASSERTION_CLAIM_AUD_DOCReady) { _SASL_OAUTHBEARER_ASSERTION_CLAIM_AUD_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SASL_OAUTHBEARER_ASSERTION_CLAIM_AUD_DOC"); _SASL_OAUTHBEARER_ASSERTION_CLAIM_AUD_DOCReady = true; } return _SASL_OAUTHBEARER_ASSERTION_CLAIM_AUD_DOCContent; } }
        private static Java.Lang.String _SASL_OAUTHBEARER_ASSERTION_CLAIM_AUD_DOCContent = default;
        private static bool _SASL_OAUTHBEARER_ASSERTION_CLAIM_AUD_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#SASL_OAUTHBEARER_ASSERTION_CLAIM_EXP_SECONDS"/>
        /// </summary>
        public static Java.Lang.String SASL_OAUTHBEARER_ASSERTION_CLAIM_EXP_SECONDS { get { if (!_SASL_OAUTHBEARER_ASSERTION_CLAIM_EXP_SECONDSReady) { _SASL_OAUTHBEARER_ASSERTION_CLAIM_EXP_SECONDSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SASL_OAUTHBEARER_ASSERTION_CLAIM_EXP_SECONDS"); _SASL_OAUTHBEARER_ASSERTION_CLAIM_EXP_SECONDSReady = true; } return _SASL_OAUTHBEARER_ASSERTION_CLAIM_EXP_SECONDSContent; } }
        private static Java.Lang.String _SASL_OAUTHBEARER_ASSERTION_CLAIM_EXP_SECONDSContent = default;
        private static bool _SASL_OAUTHBEARER_ASSERTION_CLAIM_EXP_SECONDSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#SASL_OAUTHBEARER_ASSERTION_CLAIM_EXP_SECONDS_DOC"/>
        /// </summary>
        public static Java.Lang.String SASL_OAUTHBEARER_ASSERTION_CLAIM_EXP_SECONDS_DOC { get { if (!_SASL_OAUTHBEARER_ASSERTION_CLAIM_EXP_SECONDS_DOCReady) { _SASL_OAUTHBEARER_ASSERTION_CLAIM_EXP_SECONDS_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SASL_OAUTHBEARER_ASSERTION_CLAIM_EXP_SECONDS_DOC"); _SASL_OAUTHBEARER_ASSERTION_CLAIM_EXP_SECONDS_DOCReady = true; } return _SASL_OAUTHBEARER_ASSERTION_CLAIM_EXP_SECONDS_DOCContent; } }
        private static Java.Lang.String _SASL_OAUTHBEARER_ASSERTION_CLAIM_EXP_SECONDS_DOCContent = default;
        private static bool _SASL_OAUTHBEARER_ASSERTION_CLAIM_EXP_SECONDS_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#SASL_OAUTHBEARER_ASSERTION_CLAIM_ISS"/>
        /// </summary>
        public static Java.Lang.String SASL_OAUTHBEARER_ASSERTION_CLAIM_ISS { get { if (!_SASL_OAUTHBEARER_ASSERTION_CLAIM_ISSReady) { _SASL_OAUTHBEARER_ASSERTION_CLAIM_ISSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SASL_OAUTHBEARER_ASSERTION_CLAIM_ISS"); _SASL_OAUTHBEARER_ASSERTION_CLAIM_ISSReady = true; } return _SASL_OAUTHBEARER_ASSERTION_CLAIM_ISSContent; } }
        private static Java.Lang.String _SASL_OAUTHBEARER_ASSERTION_CLAIM_ISSContent = default;
        private static bool _SASL_OAUTHBEARER_ASSERTION_CLAIM_ISSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#SASL_OAUTHBEARER_ASSERTION_CLAIM_ISS_DOC"/>
        /// </summary>
        public static Java.Lang.String SASL_OAUTHBEARER_ASSERTION_CLAIM_ISS_DOC { get { if (!_SASL_OAUTHBEARER_ASSERTION_CLAIM_ISS_DOCReady) { _SASL_OAUTHBEARER_ASSERTION_CLAIM_ISS_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SASL_OAUTHBEARER_ASSERTION_CLAIM_ISS_DOC"); _SASL_OAUTHBEARER_ASSERTION_CLAIM_ISS_DOCReady = true; } return _SASL_OAUTHBEARER_ASSERTION_CLAIM_ISS_DOCContent; } }
        private static Java.Lang.String _SASL_OAUTHBEARER_ASSERTION_CLAIM_ISS_DOCContent = default;
        private static bool _SASL_OAUTHBEARER_ASSERTION_CLAIM_ISS_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#SASL_OAUTHBEARER_ASSERTION_CLAIM_JTI_INCLUDE"/>
        /// </summary>
        public static Java.Lang.String SASL_OAUTHBEARER_ASSERTION_CLAIM_JTI_INCLUDE { get { if (!_SASL_OAUTHBEARER_ASSERTION_CLAIM_JTI_INCLUDEReady) { _SASL_OAUTHBEARER_ASSERTION_CLAIM_JTI_INCLUDEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SASL_OAUTHBEARER_ASSERTION_CLAIM_JTI_INCLUDE"); _SASL_OAUTHBEARER_ASSERTION_CLAIM_JTI_INCLUDEReady = true; } return _SASL_OAUTHBEARER_ASSERTION_CLAIM_JTI_INCLUDEContent; } }
        private static Java.Lang.String _SASL_OAUTHBEARER_ASSERTION_CLAIM_JTI_INCLUDEContent = default;
        private static bool _SASL_OAUTHBEARER_ASSERTION_CLAIM_JTI_INCLUDEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#SASL_OAUTHBEARER_ASSERTION_CLAIM_JTI_INCLUDE_DOC"/>
        /// </summary>
        public static Java.Lang.String SASL_OAUTHBEARER_ASSERTION_CLAIM_JTI_INCLUDE_DOC { get { if (!_SASL_OAUTHBEARER_ASSERTION_CLAIM_JTI_INCLUDE_DOCReady) { _SASL_OAUTHBEARER_ASSERTION_CLAIM_JTI_INCLUDE_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SASL_OAUTHBEARER_ASSERTION_CLAIM_JTI_INCLUDE_DOC"); _SASL_OAUTHBEARER_ASSERTION_CLAIM_JTI_INCLUDE_DOCReady = true; } return _SASL_OAUTHBEARER_ASSERTION_CLAIM_JTI_INCLUDE_DOCContent; } }
        private static Java.Lang.String _SASL_OAUTHBEARER_ASSERTION_CLAIM_JTI_INCLUDE_DOCContent = default;
        private static bool _SASL_OAUTHBEARER_ASSERTION_CLAIM_JTI_INCLUDE_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#SASL_OAUTHBEARER_ASSERTION_CLAIM_NBF_SECONDS"/>
        /// </summary>
        public static Java.Lang.String SASL_OAUTHBEARER_ASSERTION_CLAIM_NBF_SECONDS { get { if (!_SASL_OAUTHBEARER_ASSERTION_CLAIM_NBF_SECONDSReady) { _SASL_OAUTHBEARER_ASSERTION_CLAIM_NBF_SECONDSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SASL_OAUTHBEARER_ASSERTION_CLAIM_NBF_SECONDS"); _SASL_OAUTHBEARER_ASSERTION_CLAIM_NBF_SECONDSReady = true; } return _SASL_OAUTHBEARER_ASSERTION_CLAIM_NBF_SECONDSContent; } }
        private static Java.Lang.String _SASL_OAUTHBEARER_ASSERTION_CLAIM_NBF_SECONDSContent = default;
        private static bool _SASL_OAUTHBEARER_ASSERTION_CLAIM_NBF_SECONDSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#SASL_OAUTHBEARER_ASSERTION_CLAIM_NBF_SECONDS_DOC"/>
        /// </summary>
        public static Java.Lang.String SASL_OAUTHBEARER_ASSERTION_CLAIM_NBF_SECONDS_DOC { get { if (!_SASL_OAUTHBEARER_ASSERTION_CLAIM_NBF_SECONDS_DOCReady) { _SASL_OAUTHBEARER_ASSERTION_CLAIM_NBF_SECONDS_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SASL_OAUTHBEARER_ASSERTION_CLAIM_NBF_SECONDS_DOC"); _SASL_OAUTHBEARER_ASSERTION_CLAIM_NBF_SECONDS_DOCReady = true; } return _SASL_OAUTHBEARER_ASSERTION_CLAIM_NBF_SECONDS_DOCContent; } }
        private static Java.Lang.String _SASL_OAUTHBEARER_ASSERTION_CLAIM_NBF_SECONDS_DOCContent = default;
        private static bool _SASL_OAUTHBEARER_ASSERTION_CLAIM_NBF_SECONDS_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#SASL_OAUTHBEARER_ASSERTION_CLAIM_SUB"/>
        /// </summary>
        public static Java.Lang.String SASL_OAUTHBEARER_ASSERTION_CLAIM_SUB { get { if (!_SASL_OAUTHBEARER_ASSERTION_CLAIM_SUBReady) { _SASL_OAUTHBEARER_ASSERTION_CLAIM_SUBContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SASL_OAUTHBEARER_ASSERTION_CLAIM_SUB"); _SASL_OAUTHBEARER_ASSERTION_CLAIM_SUBReady = true; } return _SASL_OAUTHBEARER_ASSERTION_CLAIM_SUBContent; } }
        private static Java.Lang.String _SASL_OAUTHBEARER_ASSERTION_CLAIM_SUBContent = default;
        private static bool _SASL_OAUTHBEARER_ASSERTION_CLAIM_SUBReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#SASL_OAUTHBEARER_ASSERTION_CLAIM_SUB_DOC"/>
        /// </summary>
        public static Java.Lang.String SASL_OAUTHBEARER_ASSERTION_CLAIM_SUB_DOC { get { if (!_SASL_OAUTHBEARER_ASSERTION_CLAIM_SUB_DOCReady) { _SASL_OAUTHBEARER_ASSERTION_CLAIM_SUB_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SASL_OAUTHBEARER_ASSERTION_CLAIM_SUB_DOC"); _SASL_OAUTHBEARER_ASSERTION_CLAIM_SUB_DOCReady = true; } return _SASL_OAUTHBEARER_ASSERTION_CLAIM_SUB_DOCContent; } }
        private static Java.Lang.String _SASL_OAUTHBEARER_ASSERTION_CLAIM_SUB_DOCContent = default;
        private static bool _SASL_OAUTHBEARER_ASSERTION_CLAIM_SUB_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#SASL_OAUTHBEARER_ASSERTION_FILE"/>
        /// </summary>
        public static Java.Lang.String SASL_OAUTHBEARER_ASSERTION_FILE { get { if (!_SASL_OAUTHBEARER_ASSERTION_FILEReady) { _SASL_OAUTHBEARER_ASSERTION_FILEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SASL_OAUTHBEARER_ASSERTION_FILE"); _SASL_OAUTHBEARER_ASSERTION_FILEReady = true; } return _SASL_OAUTHBEARER_ASSERTION_FILEContent; } }
        private static Java.Lang.String _SASL_OAUTHBEARER_ASSERTION_FILEContent = default;
        private static bool _SASL_OAUTHBEARER_ASSERTION_FILEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#SASL_OAUTHBEARER_ASSERTION_FILE_DOC"/>
        /// </summary>
        public static Java.Lang.String SASL_OAUTHBEARER_ASSERTION_FILE_DOC { get { if (!_SASL_OAUTHBEARER_ASSERTION_FILE_DOCReady) { _SASL_OAUTHBEARER_ASSERTION_FILE_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SASL_OAUTHBEARER_ASSERTION_FILE_DOC"); _SASL_OAUTHBEARER_ASSERTION_FILE_DOCReady = true; } return _SASL_OAUTHBEARER_ASSERTION_FILE_DOCContent; } }
        private static Java.Lang.String _SASL_OAUTHBEARER_ASSERTION_FILE_DOCContent = default;
        private static bool _SASL_OAUTHBEARER_ASSERTION_FILE_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#SASL_OAUTHBEARER_ASSERTION_PRIVATE_KEY_FILE"/>
        /// </summary>
        public static Java.Lang.String SASL_OAUTHBEARER_ASSERTION_PRIVATE_KEY_FILE { get { if (!_SASL_OAUTHBEARER_ASSERTION_PRIVATE_KEY_FILEReady) { _SASL_OAUTHBEARER_ASSERTION_PRIVATE_KEY_FILEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SASL_OAUTHBEARER_ASSERTION_PRIVATE_KEY_FILE"); _SASL_OAUTHBEARER_ASSERTION_PRIVATE_KEY_FILEReady = true; } return _SASL_OAUTHBEARER_ASSERTION_PRIVATE_KEY_FILEContent; } }
        private static Java.Lang.String _SASL_OAUTHBEARER_ASSERTION_PRIVATE_KEY_FILEContent = default;
        private static bool _SASL_OAUTHBEARER_ASSERTION_PRIVATE_KEY_FILEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#SASL_OAUTHBEARER_ASSERTION_PRIVATE_KEY_FILE_DOC"/>
        /// </summary>
        public static Java.Lang.String SASL_OAUTHBEARER_ASSERTION_PRIVATE_KEY_FILE_DOC { get { if (!_SASL_OAUTHBEARER_ASSERTION_PRIVATE_KEY_FILE_DOCReady) { _SASL_OAUTHBEARER_ASSERTION_PRIVATE_KEY_FILE_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SASL_OAUTHBEARER_ASSERTION_PRIVATE_KEY_FILE_DOC"); _SASL_OAUTHBEARER_ASSERTION_PRIVATE_KEY_FILE_DOCReady = true; } return _SASL_OAUTHBEARER_ASSERTION_PRIVATE_KEY_FILE_DOCContent; } }
        private static Java.Lang.String _SASL_OAUTHBEARER_ASSERTION_PRIVATE_KEY_FILE_DOCContent = default;
        private static bool _SASL_OAUTHBEARER_ASSERTION_PRIVATE_KEY_FILE_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#SASL_OAUTHBEARER_ASSERTION_PRIVATE_KEY_PASSPHRASE"/>
        /// </summary>
        public static Java.Lang.String SASL_OAUTHBEARER_ASSERTION_PRIVATE_KEY_PASSPHRASE { get { if (!_SASL_OAUTHBEARER_ASSERTION_PRIVATE_KEY_PASSPHRASEReady) { _SASL_OAUTHBEARER_ASSERTION_PRIVATE_KEY_PASSPHRASEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SASL_OAUTHBEARER_ASSERTION_PRIVATE_KEY_PASSPHRASE"); _SASL_OAUTHBEARER_ASSERTION_PRIVATE_KEY_PASSPHRASEReady = true; } return _SASL_OAUTHBEARER_ASSERTION_PRIVATE_KEY_PASSPHRASEContent; } }
        private static Java.Lang.String _SASL_OAUTHBEARER_ASSERTION_PRIVATE_KEY_PASSPHRASEContent = default;
        private static bool _SASL_OAUTHBEARER_ASSERTION_PRIVATE_KEY_PASSPHRASEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#SASL_OAUTHBEARER_ASSERTION_PRIVATE_KEY_PASSPHRASE_DOC"/>
        /// </summary>
        public static Java.Lang.String SASL_OAUTHBEARER_ASSERTION_PRIVATE_KEY_PASSPHRASE_DOC { get { if (!_SASL_OAUTHBEARER_ASSERTION_PRIVATE_KEY_PASSPHRASE_DOCReady) { _SASL_OAUTHBEARER_ASSERTION_PRIVATE_KEY_PASSPHRASE_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SASL_OAUTHBEARER_ASSERTION_PRIVATE_KEY_PASSPHRASE_DOC"); _SASL_OAUTHBEARER_ASSERTION_PRIVATE_KEY_PASSPHRASE_DOCReady = true; } return _SASL_OAUTHBEARER_ASSERTION_PRIVATE_KEY_PASSPHRASE_DOCContent; } }
        private static Java.Lang.String _SASL_OAUTHBEARER_ASSERTION_PRIVATE_KEY_PASSPHRASE_DOCContent = default;
        private static bool _SASL_OAUTHBEARER_ASSERTION_PRIVATE_KEY_PASSPHRASE_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#SASL_OAUTHBEARER_ASSERTION_TEMPLATE_FILE"/>
        /// </summary>
        public static Java.Lang.String SASL_OAUTHBEARER_ASSERTION_TEMPLATE_FILE { get { if (!_SASL_OAUTHBEARER_ASSERTION_TEMPLATE_FILEReady) { _SASL_OAUTHBEARER_ASSERTION_TEMPLATE_FILEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SASL_OAUTHBEARER_ASSERTION_TEMPLATE_FILE"); _SASL_OAUTHBEARER_ASSERTION_TEMPLATE_FILEReady = true; } return _SASL_OAUTHBEARER_ASSERTION_TEMPLATE_FILEContent; } }
        private static Java.Lang.String _SASL_OAUTHBEARER_ASSERTION_TEMPLATE_FILEContent = default;
        private static bool _SASL_OAUTHBEARER_ASSERTION_TEMPLATE_FILEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#SASL_OAUTHBEARER_ASSERTION_TEMPLATE_FILE_DOC"/>
        /// </summary>
        public static Java.Lang.String SASL_OAUTHBEARER_ASSERTION_TEMPLATE_FILE_DOC { get { if (!_SASL_OAUTHBEARER_ASSERTION_TEMPLATE_FILE_DOCReady) { _SASL_OAUTHBEARER_ASSERTION_TEMPLATE_FILE_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SASL_OAUTHBEARER_ASSERTION_TEMPLATE_FILE_DOC"); _SASL_OAUTHBEARER_ASSERTION_TEMPLATE_FILE_DOCReady = true; } return _SASL_OAUTHBEARER_ASSERTION_TEMPLATE_FILE_DOCContent; } }
        private static Java.Lang.String _SASL_OAUTHBEARER_ASSERTION_TEMPLATE_FILE_DOCContent = default;
        private static bool _SASL_OAUTHBEARER_ASSERTION_TEMPLATE_FILE_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#SASL_OAUTHBEARER_CLIENT_CREDENTIALS_CLIENT_ID"/>
        /// </summary>
        public static Java.Lang.String SASL_OAUTHBEARER_CLIENT_CREDENTIALS_CLIENT_ID { get { if (!_SASL_OAUTHBEARER_CLIENT_CREDENTIALS_CLIENT_IDReady) { _SASL_OAUTHBEARER_CLIENT_CREDENTIALS_CLIENT_IDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SASL_OAUTHBEARER_CLIENT_CREDENTIALS_CLIENT_ID"); _SASL_OAUTHBEARER_CLIENT_CREDENTIALS_CLIENT_IDReady = true; } return _SASL_OAUTHBEARER_CLIENT_CREDENTIALS_CLIENT_IDContent; } }
        private static Java.Lang.String _SASL_OAUTHBEARER_CLIENT_CREDENTIALS_CLIENT_IDContent = default;
        private static bool _SASL_OAUTHBEARER_CLIENT_CREDENTIALS_CLIENT_IDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#SASL_OAUTHBEARER_CLIENT_CREDENTIALS_CLIENT_ID_DOC"/>
        /// </summary>
        public static Java.Lang.String SASL_OAUTHBEARER_CLIENT_CREDENTIALS_CLIENT_ID_DOC { get { if (!_SASL_OAUTHBEARER_CLIENT_CREDENTIALS_CLIENT_ID_DOCReady) { _SASL_OAUTHBEARER_CLIENT_CREDENTIALS_CLIENT_ID_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SASL_OAUTHBEARER_CLIENT_CREDENTIALS_CLIENT_ID_DOC"); _SASL_OAUTHBEARER_CLIENT_CREDENTIALS_CLIENT_ID_DOCReady = true; } return _SASL_OAUTHBEARER_CLIENT_CREDENTIALS_CLIENT_ID_DOCContent; } }
        private static Java.Lang.String _SASL_OAUTHBEARER_CLIENT_CREDENTIALS_CLIENT_ID_DOCContent = default;
        private static bool _SASL_OAUTHBEARER_CLIENT_CREDENTIALS_CLIENT_ID_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#SASL_OAUTHBEARER_CLIENT_CREDENTIALS_CLIENT_SECRET"/>
        /// </summary>
        public static Java.Lang.String SASL_OAUTHBEARER_CLIENT_CREDENTIALS_CLIENT_SECRET { get { if (!_SASL_OAUTHBEARER_CLIENT_CREDENTIALS_CLIENT_SECRETReady) { _SASL_OAUTHBEARER_CLIENT_CREDENTIALS_CLIENT_SECRETContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SASL_OAUTHBEARER_CLIENT_CREDENTIALS_CLIENT_SECRET"); _SASL_OAUTHBEARER_CLIENT_CREDENTIALS_CLIENT_SECRETReady = true; } return _SASL_OAUTHBEARER_CLIENT_CREDENTIALS_CLIENT_SECRETContent; } }
        private static Java.Lang.String _SASL_OAUTHBEARER_CLIENT_CREDENTIALS_CLIENT_SECRETContent = default;
        private static bool _SASL_OAUTHBEARER_CLIENT_CREDENTIALS_CLIENT_SECRETReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#SASL_OAUTHBEARER_CLIENT_CREDENTIALS_CLIENT_SECRET_DOC"/>
        /// </summary>
        public static Java.Lang.String SASL_OAUTHBEARER_CLIENT_CREDENTIALS_CLIENT_SECRET_DOC { get { if (!_SASL_OAUTHBEARER_CLIENT_CREDENTIALS_CLIENT_SECRET_DOCReady) { _SASL_OAUTHBEARER_CLIENT_CREDENTIALS_CLIENT_SECRET_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SASL_OAUTHBEARER_CLIENT_CREDENTIALS_CLIENT_SECRET_DOC"); _SASL_OAUTHBEARER_CLIENT_CREDENTIALS_CLIENT_SECRET_DOCReady = true; } return _SASL_OAUTHBEARER_CLIENT_CREDENTIALS_CLIENT_SECRET_DOCContent; } }
        private static Java.Lang.String _SASL_OAUTHBEARER_CLIENT_CREDENTIALS_CLIENT_SECRET_DOCContent = default;
        private static bool _SASL_OAUTHBEARER_CLIENT_CREDENTIALS_CLIENT_SECRET_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#SASL_OAUTHBEARER_CLOCK_SKEW_SECONDS"/>
        /// </summary>
        public static Java.Lang.String SASL_OAUTHBEARER_CLOCK_SKEW_SECONDS { get { if (!_SASL_OAUTHBEARER_CLOCK_SKEW_SECONDSReady) { _SASL_OAUTHBEARER_CLOCK_SKEW_SECONDSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SASL_OAUTHBEARER_CLOCK_SKEW_SECONDS"); _SASL_OAUTHBEARER_CLOCK_SKEW_SECONDSReady = true; } return _SASL_OAUTHBEARER_CLOCK_SKEW_SECONDSContent; } }
        private static Java.Lang.String _SASL_OAUTHBEARER_CLOCK_SKEW_SECONDSContent = default;
        private static bool _SASL_OAUTHBEARER_CLOCK_SKEW_SECONDSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#SASL_OAUTHBEARER_CLOCK_SKEW_SECONDS_DOC"/>
        /// </summary>
        public static Java.Lang.String SASL_OAUTHBEARER_CLOCK_SKEW_SECONDS_DOC { get { if (!_SASL_OAUTHBEARER_CLOCK_SKEW_SECONDS_DOCReady) { _SASL_OAUTHBEARER_CLOCK_SKEW_SECONDS_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SASL_OAUTHBEARER_CLOCK_SKEW_SECONDS_DOC"); _SASL_OAUTHBEARER_CLOCK_SKEW_SECONDS_DOCReady = true; } return _SASL_OAUTHBEARER_CLOCK_SKEW_SECONDS_DOCContent; } }
        private static Java.Lang.String _SASL_OAUTHBEARER_CLOCK_SKEW_SECONDS_DOCContent = default;
        private static bool _SASL_OAUTHBEARER_CLOCK_SKEW_SECONDS_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#SASL_OAUTHBEARER_EXPECTED_AUDIENCE"/>
        /// </summary>
        public static Java.Lang.String SASL_OAUTHBEARER_EXPECTED_AUDIENCE { get { if (!_SASL_OAUTHBEARER_EXPECTED_AUDIENCEReady) { _SASL_OAUTHBEARER_EXPECTED_AUDIENCEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SASL_OAUTHBEARER_EXPECTED_AUDIENCE"); _SASL_OAUTHBEARER_EXPECTED_AUDIENCEReady = true; } return _SASL_OAUTHBEARER_EXPECTED_AUDIENCEContent; } }
        private static Java.Lang.String _SASL_OAUTHBEARER_EXPECTED_AUDIENCEContent = default;
        private static bool _SASL_OAUTHBEARER_EXPECTED_AUDIENCEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#SASL_OAUTHBEARER_EXPECTED_AUDIENCE_DOC"/>
        /// </summary>
        public static Java.Lang.String SASL_OAUTHBEARER_EXPECTED_AUDIENCE_DOC { get { if (!_SASL_OAUTHBEARER_EXPECTED_AUDIENCE_DOCReady) { _SASL_OAUTHBEARER_EXPECTED_AUDIENCE_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SASL_OAUTHBEARER_EXPECTED_AUDIENCE_DOC"); _SASL_OAUTHBEARER_EXPECTED_AUDIENCE_DOCReady = true; } return _SASL_OAUTHBEARER_EXPECTED_AUDIENCE_DOCContent; } }
        private static Java.Lang.String _SASL_OAUTHBEARER_EXPECTED_AUDIENCE_DOCContent = default;
        private static bool _SASL_OAUTHBEARER_EXPECTED_AUDIENCE_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#SASL_OAUTHBEARER_EXPECTED_ISSUER"/>
        /// </summary>
        public static Java.Lang.String SASL_OAUTHBEARER_EXPECTED_ISSUER { get { if (!_SASL_OAUTHBEARER_EXPECTED_ISSUERReady) { _SASL_OAUTHBEARER_EXPECTED_ISSUERContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SASL_OAUTHBEARER_EXPECTED_ISSUER"); _SASL_OAUTHBEARER_EXPECTED_ISSUERReady = true; } return _SASL_OAUTHBEARER_EXPECTED_ISSUERContent; } }
        private static Java.Lang.String _SASL_OAUTHBEARER_EXPECTED_ISSUERContent = default;
        private static bool _SASL_OAUTHBEARER_EXPECTED_ISSUERReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#SASL_OAUTHBEARER_EXPECTED_ISSUER_DOC"/>
        /// </summary>
        public static Java.Lang.String SASL_OAUTHBEARER_EXPECTED_ISSUER_DOC { get { if (!_SASL_OAUTHBEARER_EXPECTED_ISSUER_DOCReady) { _SASL_OAUTHBEARER_EXPECTED_ISSUER_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SASL_OAUTHBEARER_EXPECTED_ISSUER_DOC"); _SASL_OAUTHBEARER_EXPECTED_ISSUER_DOCReady = true; } return _SASL_OAUTHBEARER_EXPECTED_ISSUER_DOCContent; } }
        private static Java.Lang.String _SASL_OAUTHBEARER_EXPECTED_ISSUER_DOCContent = default;
        private static bool _SASL_OAUTHBEARER_EXPECTED_ISSUER_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#SASL_OAUTHBEARER_HEADER_URLENCODE"/>
        /// </summary>
        public static Java.Lang.String SASL_OAUTHBEARER_HEADER_URLENCODE { get { if (!_SASL_OAUTHBEARER_HEADER_URLENCODEReady) { _SASL_OAUTHBEARER_HEADER_URLENCODEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SASL_OAUTHBEARER_HEADER_URLENCODE"); _SASL_OAUTHBEARER_HEADER_URLENCODEReady = true; } return _SASL_OAUTHBEARER_HEADER_URLENCODEContent; } }
        private static Java.Lang.String _SASL_OAUTHBEARER_HEADER_URLENCODEContent = default;
        private static bool _SASL_OAUTHBEARER_HEADER_URLENCODEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#SASL_OAUTHBEARER_HEADER_URLENCODE_DOC"/>
        /// </summary>
        public static Java.Lang.String SASL_OAUTHBEARER_HEADER_URLENCODE_DOC { get { if (!_SASL_OAUTHBEARER_HEADER_URLENCODE_DOCReady) { _SASL_OAUTHBEARER_HEADER_URLENCODE_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SASL_OAUTHBEARER_HEADER_URLENCODE_DOC"); _SASL_OAUTHBEARER_HEADER_URLENCODE_DOCReady = true; } return _SASL_OAUTHBEARER_HEADER_URLENCODE_DOCContent; } }
        private static Java.Lang.String _SASL_OAUTHBEARER_HEADER_URLENCODE_DOCContent = default;
        private static bool _SASL_OAUTHBEARER_HEADER_URLENCODE_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#SASL_OAUTHBEARER_JWKS_ENDPOINT_REFRESH_MS"/>
        /// </summary>
        public static Java.Lang.String SASL_OAUTHBEARER_JWKS_ENDPOINT_REFRESH_MS { get { if (!_SASL_OAUTHBEARER_JWKS_ENDPOINT_REFRESH_MSReady) { _SASL_OAUTHBEARER_JWKS_ENDPOINT_REFRESH_MSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SASL_OAUTHBEARER_JWKS_ENDPOINT_REFRESH_MS"); _SASL_OAUTHBEARER_JWKS_ENDPOINT_REFRESH_MSReady = true; } return _SASL_OAUTHBEARER_JWKS_ENDPOINT_REFRESH_MSContent; } }
        private static Java.Lang.String _SASL_OAUTHBEARER_JWKS_ENDPOINT_REFRESH_MSContent = default;
        private static bool _SASL_OAUTHBEARER_JWKS_ENDPOINT_REFRESH_MSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#SASL_OAUTHBEARER_JWKS_ENDPOINT_REFRESH_MS_DOC"/>
        /// </summary>
        public static Java.Lang.String SASL_OAUTHBEARER_JWKS_ENDPOINT_REFRESH_MS_DOC { get { if (!_SASL_OAUTHBEARER_JWKS_ENDPOINT_REFRESH_MS_DOCReady) { _SASL_OAUTHBEARER_JWKS_ENDPOINT_REFRESH_MS_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SASL_OAUTHBEARER_JWKS_ENDPOINT_REFRESH_MS_DOC"); _SASL_OAUTHBEARER_JWKS_ENDPOINT_REFRESH_MS_DOCReady = true; } return _SASL_OAUTHBEARER_JWKS_ENDPOINT_REFRESH_MS_DOCContent; } }
        private static Java.Lang.String _SASL_OAUTHBEARER_JWKS_ENDPOINT_REFRESH_MS_DOCContent = default;
        private static bool _SASL_OAUTHBEARER_JWKS_ENDPOINT_REFRESH_MS_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#SASL_OAUTHBEARER_JWKS_ENDPOINT_RETRY_BACKOFF_MAX_MS"/>
        /// </summary>
        public static Java.Lang.String SASL_OAUTHBEARER_JWKS_ENDPOINT_RETRY_BACKOFF_MAX_MS { get { if (!_SASL_OAUTHBEARER_JWKS_ENDPOINT_RETRY_BACKOFF_MAX_MSReady) { _SASL_OAUTHBEARER_JWKS_ENDPOINT_RETRY_BACKOFF_MAX_MSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SASL_OAUTHBEARER_JWKS_ENDPOINT_RETRY_BACKOFF_MAX_MS"); _SASL_OAUTHBEARER_JWKS_ENDPOINT_RETRY_BACKOFF_MAX_MSReady = true; } return _SASL_OAUTHBEARER_JWKS_ENDPOINT_RETRY_BACKOFF_MAX_MSContent; } }
        private static Java.Lang.String _SASL_OAUTHBEARER_JWKS_ENDPOINT_RETRY_BACKOFF_MAX_MSContent = default;
        private static bool _SASL_OAUTHBEARER_JWKS_ENDPOINT_RETRY_BACKOFF_MAX_MSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#SASL_OAUTHBEARER_JWKS_ENDPOINT_RETRY_BACKOFF_MAX_MS_DOC"/>
        /// </summary>
        public static Java.Lang.String SASL_OAUTHBEARER_JWKS_ENDPOINT_RETRY_BACKOFF_MAX_MS_DOC { get { if (!_SASL_OAUTHBEARER_JWKS_ENDPOINT_RETRY_BACKOFF_MAX_MS_DOCReady) { _SASL_OAUTHBEARER_JWKS_ENDPOINT_RETRY_BACKOFF_MAX_MS_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SASL_OAUTHBEARER_JWKS_ENDPOINT_RETRY_BACKOFF_MAX_MS_DOC"); _SASL_OAUTHBEARER_JWKS_ENDPOINT_RETRY_BACKOFF_MAX_MS_DOCReady = true; } return _SASL_OAUTHBEARER_JWKS_ENDPOINT_RETRY_BACKOFF_MAX_MS_DOCContent; } }
        private static Java.Lang.String _SASL_OAUTHBEARER_JWKS_ENDPOINT_RETRY_BACKOFF_MAX_MS_DOCContent = default;
        private static bool _SASL_OAUTHBEARER_JWKS_ENDPOINT_RETRY_BACKOFF_MAX_MS_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#SASL_OAUTHBEARER_JWKS_ENDPOINT_RETRY_BACKOFF_MS"/>
        /// </summary>
        public static Java.Lang.String SASL_OAUTHBEARER_JWKS_ENDPOINT_RETRY_BACKOFF_MS { get { if (!_SASL_OAUTHBEARER_JWKS_ENDPOINT_RETRY_BACKOFF_MSReady) { _SASL_OAUTHBEARER_JWKS_ENDPOINT_RETRY_BACKOFF_MSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SASL_OAUTHBEARER_JWKS_ENDPOINT_RETRY_BACKOFF_MS"); _SASL_OAUTHBEARER_JWKS_ENDPOINT_RETRY_BACKOFF_MSReady = true; } return _SASL_OAUTHBEARER_JWKS_ENDPOINT_RETRY_BACKOFF_MSContent; } }
        private static Java.Lang.String _SASL_OAUTHBEARER_JWKS_ENDPOINT_RETRY_BACKOFF_MSContent = default;
        private static bool _SASL_OAUTHBEARER_JWKS_ENDPOINT_RETRY_BACKOFF_MSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#SASL_OAUTHBEARER_JWKS_ENDPOINT_RETRY_BACKOFF_MS_DOC"/>
        /// </summary>
        public static Java.Lang.String SASL_OAUTHBEARER_JWKS_ENDPOINT_RETRY_BACKOFF_MS_DOC { get { if (!_SASL_OAUTHBEARER_JWKS_ENDPOINT_RETRY_BACKOFF_MS_DOCReady) { _SASL_OAUTHBEARER_JWKS_ENDPOINT_RETRY_BACKOFF_MS_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SASL_OAUTHBEARER_JWKS_ENDPOINT_RETRY_BACKOFF_MS_DOC"); _SASL_OAUTHBEARER_JWKS_ENDPOINT_RETRY_BACKOFF_MS_DOCReady = true; } return _SASL_OAUTHBEARER_JWKS_ENDPOINT_RETRY_BACKOFF_MS_DOCContent; } }
        private static Java.Lang.String _SASL_OAUTHBEARER_JWKS_ENDPOINT_RETRY_BACKOFF_MS_DOCContent = default;
        private static bool _SASL_OAUTHBEARER_JWKS_ENDPOINT_RETRY_BACKOFF_MS_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#SASL_OAUTHBEARER_JWKS_ENDPOINT_URL"/>
        /// </summary>
        public static Java.Lang.String SASL_OAUTHBEARER_JWKS_ENDPOINT_URL { get { if (!_SASL_OAUTHBEARER_JWKS_ENDPOINT_URLReady) { _SASL_OAUTHBEARER_JWKS_ENDPOINT_URLContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SASL_OAUTHBEARER_JWKS_ENDPOINT_URL"); _SASL_OAUTHBEARER_JWKS_ENDPOINT_URLReady = true; } return _SASL_OAUTHBEARER_JWKS_ENDPOINT_URLContent; } }
        private static Java.Lang.String _SASL_OAUTHBEARER_JWKS_ENDPOINT_URLContent = default;
        private static bool _SASL_OAUTHBEARER_JWKS_ENDPOINT_URLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#SASL_OAUTHBEARER_JWKS_ENDPOINT_URL_DOC"/>
        /// </summary>
        public static Java.Lang.String SASL_OAUTHBEARER_JWKS_ENDPOINT_URL_DOC { get { if (!_SASL_OAUTHBEARER_JWKS_ENDPOINT_URL_DOCReady) { _SASL_OAUTHBEARER_JWKS_ENDPOINT_URL_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SASL_OAUTHBEARER_JWKS_ENDPOINT_URL_DOC"); _SASL_OAUTHBEARER_JWKS_ENDPOINT_URL_DOCReady = true; } return _SASL_OAUTHBEARER_JWKS_ENDPOINT_URL_DOCContent; } }
        private static Java.Lang.String _SASL_OAUTHBEARER_JWKS_ENDPOINT_URL_DOCContent = default;
        private static bool _SASL_OAUTHBEARER_JWKS_ENDPOINT_URL_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#SASL_OAUTHBEARER_JWT_RETRIEVER_CLASS"/>
        /// </summary>
        public static Java.Lang.String SASL_OAUTHBEARER_JWT_RETRIEVER_CLASS { get { if (!_SASL_OAUTHBEARER_JWT_RETRIEVER_CLASSReady) { _SASL_OAUTHBEARER_JWT_RETRIEVER_CLASSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SASL_OAUTHBEARER_JWT_RETRIEVER_CLASS"); _SASL_OAUTHBEARER_JWT_RETRIEVER_CLASSReady = true; } return _SASL_OAUTHBEARER_JWT_RETRIEVER_CLASSContent; } }
        private static Java.Lang.String _SASL_OAUTHBEARER_JWT_RETRIEVER_CLASSContent = default;
        private static bool _SASL_OAUTHBEARER_JWT_RETRIEVER_CLASSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#SASL_OAUTHBEARER_JWT_RETRIEVER_CLASS_DOC"/>
        /// </summary>
        public static Java.Lang.String SASL_OAUTHBEARER_JWT_RETRIEVER_CLASS_DOC { get { if (!_SASL_OAUTHBEARER_JWT_RETRIEVER_CLASS_DOCReady) { _SASL_OAUTHBEARER_JWT_RETRIEVER_CLASS_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SASL_OAUTHBEARER_JWT_RETRIEVER_CLASS_DOC"); _SASL_OAUTHBEARER_JWT_RETRIEVER_CLASS_DOCReady = true; } return _SASL_OAUTHBEARER_JWT_RETRIEVER_CLASS_DOCContent; } }
        private static Java.Lang.String _SASL_OAUTHBEARER_JWT_RETRIEVER_CLASS_DOCContent = default;
        private static bool _SASL_OAUTHBEARER_JWT_RETRIEVER_CLASS_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#SASL_OAUTHBEARER_JWT_VALIDATOR_CLASS"/>
        /// </summary>
        public static Java.Lang.String SASL_OAUTHBEARER_JWT_VALIDATOR_CLASS { get { if (!_SASL_OAUTHBEARER_JWT_VALIDATOR_CLASSReady) { _SASL_OAUTHBEARER_JWT_VALIDATOR_CLASSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SASL_OAUTHBEARER_JWT_VALIDATOR_CLASS"); _SASL_OAUTHBEARER_JWT_VALIDATOR_CLASSReady = true; } return _SASL_OAUTHBEARER_JWT_VALIDATOR_CLASSContent; } }
        private static Java.Lang.String _SASL_OAUTHBEARER_JWT_VALIDATOR_CLASSContent = default;
        private static bool _SASL_OAUTHBEARER_JWT_VALIDATOR_CLASSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#SASL_OAUTHBEARER_JWT_VALIDATOR_CLASS_DOC"/>
        /// </summary>
        public static Java.Lang.String SASL_OAUTHBEARER_JWT_VALIDATOR_CLASS_DOC { get { if (!_SASL_OAUTHBEARER_JWT_VALIDATOR_CLASS_DOCReady) { _SASL_OAUTHBEARER_JWT_VALIDATOR_CLASS_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SASL_OAUTHBEARER_JWT_VALIDATOR_CLASS_DOC"); _SASL_OAUTHBEARER_JWT_VALIDATOR_CLASS_DOCReady = true; } return _SASL_OAUTHBEARER_JWT_VALIDATOR_CLASS_DOCContent; } }
        private static Java.Lang.String _SASL_OAUTHBEARER_JWT_VALIDATOR_CLASS_DOCContent = default;
        private static bool _SASL_OAUTHBEARER_JWT_VALIDATOR_CLASS_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#SASL_OAUTHBEARER_SCOPE"/>
        /// </summary>
        public static Java.Lang.String SASL_OAUTHBEARER_SCOPE { get { if (!_SASL_OAUTHBEARER_SCOPEReady) { _SASL_OAUTHBEARER_SCOPEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SASL_OAUTHBEARER_SCOPE"); _SASL_OAUTHBEARER_SCOPEReady = true; } return _SASL_OAUTHBEARER_SCOPEContent; } }
        private static Java.Lang.String _SASL_OAUTHBEARER_SCOPEContent = default;
        private static bool _SASL_OAUTHBEARER_SCOPEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#SASL_OAUTHBEARER_SCOPE_CLAIM_NAME"/>
        /// </summary>
        public static Java.Lang.String SASL_OAUTHBEARER_SCOPE_CLAIM_NAME { get { if (!_SASL_OAUTHBEARER_SCOPE_CLAIM_NAMEReady) { _SASL_OAUTHBEARER_SCOPE_CLAIM_NAMEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SASL_OAUTHBEARER_SCOPE_CLAIM_NAME"); _SASL_OAUTHBEARER_SCOPE_CLAIM_NAMEReady = true; } return _SASL_OAUTHBEARER_SCOPE_CLAIM_NAMEContent; } }
        private static Java.Lang.String _SASL_OAUTHBEARER_SCOPE_CLAIM_NAMEContent = default;
        private static bool _SASL_OAUTHBEARER_SCOPE_CLAIM_NAMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#SASL_OAUTHBEARER_SCOPE_CLAIM_NAME_DOC"/>
        /// </summary>
        public static Java.Lang.String SASL_OAUTHBEARER_SCOPE_CLAIM_NAME_DOC { get { if (!_SASL_OAUTHBEARER_SCOPE_CLAIM_NAME_DOCReady) { _SASL_OAUTHBEARER_SCOPE_CLAIM_NAME_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SASL_OAUTHBEARER_SCOPE_CLAIM_NAME_DOC"); _SASL_OAUTHBEARER_SCOPE_CLAIM_NAME_DOCReady = true; } return _SASL_OAUTHBEARER_SCOPE_CLAIM_NAME_DOCContent; } }
        private static Java.Lang.String _SASL_OAUTHBEARER_SCOPE_CLAIM_NAME_DOCContent = default;
        private static bool _SASL_OAUTHBEARER_SCOPE_CLAIM_NAME_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#SASL_OAUTHBEARER_SCOPE_DOC"/>
        /// </summary>
        public static Java.Lang.String SASL_OAUTHBEARER_SCOPE_DOC { get { if (!_SASL_OAUTHBEARER_SCOPE_DOCReady) { _SASL_OAUTHBEARER_SCOPE_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SASL_OAUTHBEARER_SCOPE_DOC"); _SASL_OAUTHBEARER_SCOPE_DOCReady = true; } return _SASL_OAUTHBEARER_SCOPE_DOCContent; } }
        private static Java.Lang.String _SASL_OAUTHBEARER_SCOPE_DOCContent = default;
        private static bool _SASL_OAUTHBEARER_SCOPE_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#SASL_OAUTHBEARER_SUB_CLAIM_NAME"/>
        /// </summary>
        public static Java.Lang.String SASL_OAUTHBEARER_SUB_CLAIM_NAME { get { if (!_SASL_OAUTHBEARER_SUB_CLAIM_NAMEReady) { _SASL_OAUTHBEARER_SUB_CLAIM_NAMEContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SASL_OAUTHBEARER_SUB_CLAIM_NAME"); _SASL_OAUTHBEARER_SUB_CLAIM_NAMEReady = true; } return _SASL_OAUTHBEARER_SUB_CLAIM_NAMEContent; } }
        private static Java.Lang.String _SASL_OAUTHBEARER_SUB_CLAIM_NAMEContent = default;
        private static bool _SASL_OAUTHBEARER_SUB_CLAIM_NAMEReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#SASL_OAUTHBEARER_SUB_CLAIM_NAME_DOC"/>
        /// </summary>
        public static Java.Lang.String SASL_OAUTHBEARER_SUB_CLAIM_NAME_DOC { get { if (!_SASL_OAUTHBEARER_SUB_CLAIM_NAME_DOCReady) { _SASL_OAUTHBEARER_SUB_CLAIM_NAME_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SASL_OAUTHBEARER_SUB_CLAIM_NAME_DOC"); _SASL_OAUTHBEARER_SUB_CLAIM_NAME_DOCReady = true; } return _SASL_OAUTHBEARER_SUB_CLAIM_NAME_DOCContent; } }
        private static Java.Lang.String _SASL_OAUTHBEARER_SUB_CLAIM_NAME_DOCContent = default;
        private static bool _SASL_OAUTHBEARER_SUB_CLAIM_NAME_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#SASL_OAUTHBEARER_TOKEN_ENDPOINT_URL"/>
        /// </summary>
        public static Java.Lang.String SASL_OAUTHBEARER_TOKEN_ENDPOINT_URL { get { if (!_SASL_OAUTHBEARER_TOKEN_ENDPOINT_URLReady) { _SASL_OAUTHBEARER_TOKEN_ENDPOINT_URLContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SASL_OAUTHBEARER_TOKEN_ENDPOINT_URL"); _SASL_OAUTHBEARER_TOKEN_ENDPOINT_URLReady = true; } return _SASL_OAUTHBEARER_TOKEN_ENDPOINT_URLContent; } }
        private static Java.Lang.String _SASL_OAUTHBEARER_TOKEN_ENDPOINT_URLContent = default;
        private static bool _SASL_OAUTHBEARER_TOKEN_ENDPOINT_URLReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#SASL_OAUTHBEARER_TOKEN_ENDPOINT_URL_DOC"/>
        /// </summary>
        public static Java.Lang.String SASL_OAUTHBEARER_TOKEN_ENDPOINT_URL_DOC { get { if (!_SASL_OAUTHBEARER_TOKEN_ENDPOINT_URL_DOCReady) { _SASL_OAUTHBEARER_TOKEN_ENDPOINT_URL_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SASL_OAUTHBEARER_TOKEN_ENDPOINT_URL_DOC"); _SASL_OAUTHBEARER_TOKEN_ENDPOINT_URL_DOCReady = true; } return _SASL_OAUTHBEARER_TOKEN_ENDPOINT_URL_DOCContent; } }
        private static Java.Lang.String _SASL_OAUTHBEARER_TOKEN_ENDPOINT_URL_DOCContent = default;
        private static bool _SASL_OAUTHBEARER_TOKEN_ENDPOINT_URL_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#DEFAULT_KERBEROS_MIN_TIME_BEFORE_RELOGIN"/>
        /// </summary>
        public static long DEFAULT_KERBEROS_MIN_TIME_BEFORE_RELOGIN { get { if (!_DEFAULT_KERBEROS_MIN_TIME_BEFORE_RELOGINReady) { _DEFAULT_KERBEROS_MIN_TIME_BEFORE_RELOGINContent = SGetField<long>(LocalBridgeClazz, "DEFAULT_KERBEROS_MIN_TIME_BEFORE_RELOGIN"); _DEFAULT_KERBEROS_MIN_TIME_BEFORE_RELOGINReady = true; } return _DEFAULT_KERBEROS_MIN_TIME_BEFORE_RELOGINContent; } }
        private static long _DEFAULT_KERBEROS_MIN_TIME_BEFORE_RELOGINContent = default;
        private static bool _DEFAULT_KERBEROS_MIN_TIME_BEFORE_RELOGINReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#DEFAULT_SASL_LOGIN_RETRY_BACKOFF_MAX_MS"/>
        /// </summary>
        public static long DEFAULT_SASL_LOGIN_RETRY_BACKOFF_MAX_MS { get { if (!_DEFAULT_SASL_LOGIN_RETRY_BACKOFF_MAX_MSReady) { _DEFAULT_SASL_LOGIN_RETRY_BACKOFF_MAX_MSContent = SGetField<long>(LocalBridgeClazz, "DEFAULT_SASL_LOGIN_RETRY_BACKOFF_MAX_MS"); _DEFAULT_SASL_LOGIN_RETRY_BACKOFF_MAX_MSReady = true; } return _DEFAULT_SASL_LOGIN_RETRY_BACKOFF_MAX_MSContent; } }
        private static long _DEFAULT_SASL_LOGIN_RETRY_BACKOFF_MAX_MSContent = default;
        private static bool _DEFAULT_SASL_LOGIN_RETRY_BACKOFF_MAX_MSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#DEFAULT_SASL_LOGIN_RETRY_BACKOFF_MS"/>
        /// </summary>
        public static long DEFAULT_SASL_LOGIN_RETRY_BACKOFF_MS { get { if (!_DEFAULT_SASL_LOGIN_RETRY_BACKOFF_MSReady) { _DEFAULT_SASL_LOGIN_RETRY_BACKOFF_MSContent = SGetField<long>(LocalBridgeClazz, "DEFAULT_SASL_LOGIN_RETRY_BACKOFF_MS"); _DEFAULT_SASL_LOGIN_RETRY_BACKOFF_MSReady = true; } return _DEFAULT_SASL_LOGIN_RETRY_BACKOFF_MSContent; } }
        private static long _DEFAULT_SASL_LOGIN_RETRY_BACKOFF_MSContent = default;
        private static bool _DEFAULT_SASL_LOGIN_RETRY_BACKOFF_MSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#DEFAULT_SASL_OAUTHBEARER_JWKS_ENDPOINT_REFRESH_MS"/>
        /// </summary>
        public static long DEFAULT_SASL_OAUTHBEARER_JWKS_ENDPOINT_REFRESH_MS { get { if (!_DEFAULT_SASL_OAUTHBEARER_JWKS_ENDPOINT_REFRESH_MSReady) { _DEFAULT_SASL_OAUTHBEARER_JWKS_ENDPOINT_REFRESH_MSContent = SGetField<long>(LocalBridgeClazz, "DEFAULT_SASL_OAUTHBEARER_JWKS_ENDPOINT_REFRESH_MS"); _DEFAULT_SASL_OAUTHBEARER_JWKS_ENDPOINT_REFRESH_MSReady = true; } return _DEFAULT_SASL_OAUTHBEARER_JWKS_ENDPOINT_REFRESH_MSContent; } }
        private static long _DEFAULT_SASL_OAUTHBEARER_JWKS_ENDPOINT_REFRESH_MSContent = default;
        private static bool _DEFAULT_SASL_OAUTHBEARER_JWKS_ENDPOINT_REFRESH_MSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#DEFAULT_SASL_OAUTHBEARER_JWKS_ENDPOINT_RETRY_BACKOFF_MAX_MS"/>
        /// </summary>
        public static long DEFAULT_SASL_OAUTHBEARER_JWKS_ENDPOINT_RETRY_BACKOFF_MAX_MS { get { if (!_DEFAULT_SASL_OAUTHBEARER_JWKS_ENDPOINT_RETRY_BACKOFF_MAX_MSReady) { _DEFAULT_SASL_OAUTHBEARER_JWKS_ENDPOINT_RETRY_BACKOFF_MAX_MSContent = SGetField<long>(LocalBridgeClazz, "DEFAULT_SASL_OAUTHBEARER_JWKS_ENDPOINT_RETRY_BACKOFF_MAX_MS"); _DEFAULT_SASL_OAUTHBEARER_JWKS_ENDPOINT_RETRY_BACKOFF_MAX_MSReady = true; } return _DEFAULT_SASL_OAUTHBEARER_JWKS_ENDPOINT_RETRY_BACKOFF_MAX_MSContent; } }
        private static long _DEFAULT_SASL_OAUTHBEARER_JWKS_ENDPOINT_RETRY_BACKOFF_MAX_MSContent = default;
        private static bool _DEFAULT_SASL_OAUTHBEARER_JWKS_ENDPOINT_RETRY_BACKOFF_MAX_MSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#DEFAULT_SASL_OAUTHBEARER_JWKS_ENDPOINT_RETRY_BACKOFF_MS"/>
        /// </summary>
        public static long DEFAULT_SASL_OAUTHBEARER_JWKS_ENDPOINT_RETRY_BACKOFF_MS { get { if (!_DEFAULT_SASL_OAUTHBEARER_JWKS_ENDPOINT_RETRY_BACKOFF_MSReady) { _DEFAULT_SASL_OAUTHBEARER_JWKS_ENDPOINT_RETRY_BACKOFF_MSContent = SGetField<long>(LocalBridgeClazz, "DEFAULT_SASL_OAUTHBEARER_JWKS_ENDPOINT_RETRY_BACKOFF_MS"); _DEFAULT_SASL_OAUTHBEARER_JWKS_ENDPOINT_RETRY_BACKOFF_MSReady = true; } return _DEFAULT_SASL_OAUTHBEARER_JWKS_ENDPOINT_RETRY_BACKOFF_MSContent; } }
        private static long _DEFAULT_SASL_OAUTHBEARER_JWKS_ENDPOINT_RETRY_BACKOFF_MSContent = default;
        private static bool _DEFAULT_SASL_OAUTHBEARER_JWKS_ENDPOINT_RETRY_BACKOFF_MSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#DEFAULT_LOGIN_REFRESH_BUFFER_SECONDS"/>
        /// </summary>
        public static short DEFAULT_LOGIN_REFRESH_BUFFER_SECONDS { get { if (!_DEFAULT_LOGIN_REFRESH_BUFFER_SECONDSReady) { _DEFAULT_LOGIN_REFRESH_BUFFER_SECONDSContent = SGetField<short>(LocalBridgeClazz, "DEFAULT_LOGIN_REFRESH_BUFFER_SECONDS"); _DEFAULT_LOGIN_REFRESH_BUFFER_SECONDSReady = true; } return _DEFAULT_LOGIN_REFRESH_BUFFER_SECONDSContent; } }
        private static short _DEFAULT_LOGIN_REFRESH_BUFFER_SECONDSContent = default;
        private static bool _DEFAULT_LOGIN_REFRESH_BUFFER_SECONDSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#DEFAULT_LOGIN_REFRESH_MIN_PERIOD_SECONDS"/>
        /// </summary>
        public static short DEFAULT_LOGIN_REFRESH_MIN_PERIOD_SECONDS { get { if (!_DEFAULT_LOGIN_REFRESH_MIN_PERIOD_SECONDSReady) { _DEFAULT_LOGIN_REFRESH_MIN_PERIOD_SECONDSContent = SGetField<short>(LocalBridgeClazz, "DEFAULT_LOGIN_REFRESH_MIN_PERIOD_SECONDS"); _DEFAULT_LOGIN_REFRESH_MIN_PERIOD_SECONDSReady = true; } return _DEFAULT_LOGIN_REFRESH_MIN_PERIOD_SECONDSContent; } }
        private static short _DEFAULT_LOGIN_REFRESH_MIN_PERIOD_SECONDSContent = default;
        private static bool _DEFAULT_LOGIN_REFRESH_MIN_PERIOD_SECONDSReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.1.0/org/apache/kafka/common/config/SaslConfigs.html#addClientSaslSupport(org.apache.kafka.common.config.ConfigDef)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Config.ConfigDef"/></param>
        public static void AddClientSaslSupport(Org.Apache.Kafka.Common.Config.ConfigDef arg0)
        {
            SExecuteWithSignature(LocalBridgeClazz, "addClientSaslSupport", "(Lorg/apache/kafka/common/config/ConfigDef;)V", arg0);
        }

        #endregion

        #region Instance methods

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}