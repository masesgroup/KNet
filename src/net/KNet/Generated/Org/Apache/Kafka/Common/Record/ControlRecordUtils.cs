/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.0.0.0)
*  using kafka-clients-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Common.Record
{
    #region ControlRecordUtils
    public partial class ControlRecordUtils
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/ControlRecordUtils.html#LEADER_CHANGE_CURRENT_VERSION"/>
        /// </summary>
        public static short LEADER_CHANGE_CURRENT_VERSION { get { return SGetField<short>(LocalBridgeClazz, "LEADER_CHANGE_CURRENT_VERSION"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/ControlRecordUtils.html#SNAPSHOT_FOOTER_CURRENT_VERSION"/>
        /// </summary>
        public static short SNAPSHOT_FOOTER_CURRENT_VERSION { get { return SGetField<short>(LocalBridgeClazz, "SNAPSHOT_FOOTER_CURRENT_VERSION"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/ControlRecordUtils.html#SNAPSHOT_HEADER_CURRENT_VERSION"/>
        /// </summary>
        public static short SNAPSHOT_HEADER_CURRENT_VERSION { get { return SGetField<short>(LocalBridgeClazz, "SNAPSHOT_HEADER_CURRENT_VERSION"); } }

        #endregion

        #region Static methods

        #endregion

        #region Instance methods

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}