/*
*  Copyright (c) 2021-2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.6.4.0)
*  using kafka-clients-3.9.1.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Common.Record
{
    #region ControlRecordUtils declaration
    /// <summary>
    /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.9.1/org/apache/kafka/common/record/ControlRecordUtils.html"/>
    /// </summary>
    public partial class ControlRecordUtils : MASES.JCOBridge.C2JBridge.JVMBridgeBase<ControlRecordUtils>
    {
        const string _bridgeClassName = "org.apache.kafka.common.record.ControlRecordUtils";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public ControlRecordUtils() { }
        /// <summary>
        /// Internal constructor: used internally from JCOBridge
        /// </summary>
        [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public ControlRecordUtils(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public ControlRecordUtils(params object[] args) : base(args) { }

        private static readonly global::System.Exception _LocalBridgeClazzException = null;
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <inheritdoc/>
        public override string BridgeClassName => _bridgeClassName;
        /// <inheritdoc/>
        public override bool IsBridgeAbstract => false;
        /// <inheritdoc/>
        public override bool IsBridgeCloseable => false;
        /// <inheritdoc/>
        public override bool IsBridgeInterface => false;
        /// <inheritdoc/>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class

    }
    #endregion

    #region ControlRecordUtils implementation
    public partial class ControlRecordUtils
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.9.1/org/apache/kafka/common/record/ControlRecordUtils.html#KRAFT_VERSION_CURRENT_VERSION"/>
        /// </summary>
        public static short KRAFT_VERSION_CURRENT_VERSION { get { if (!_KRAFT_VERSION_CURRENT_VERSIONReady) { _KRAFT_VERSION_CURRENT_VERSIONContent = SGetField<short>(LocalBridgeClazz, "KRAFT_VERSION_CURRENT_VERSION"); _KRAFT_VERSION_CURRENT_VERSIONReady = true; } return _KRAFT_VERSION_CURRENT_VERSIONContent; } }
        private static short _KRAFT_VERSION_CURRENT_VERSIONContent = default;
        private static bool _KRAFT_VERSION_CURRENT_VERSIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.9.1/org/apache/kafka/common/record/ControlRecordUtils.html#KRAFT_VOTERS_CURRENT_VERSION"/>
        /// </summary>
        public static short KRAFT_VOTERS_CURRENT_VERSION { get { if (!_KRAFT_VOTERS_CURRENT_VERSIONReady) { _KRAFT_VOTERS_CURRENT_VERSIONContent = SGetField<short>(LocalBridgeClazz, "KRAFT_VOTERS_CURRENT_VERSION"); _KRAFT_VOTERS_CURRENT_VERSIONReady = true; } return _KRAFT_VOTERS_CURRENT_VERSIONContent; } }
        private static short _KRAFT_VOTERS_CURRENT_VERSIONContent = default;
        private static bool _KRAFT_VOTERS_CURRENT_VERSIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.9.1/org/apache/kafka/common/record/ControlRecordUtils.html#LEADER_CHANGE_CURRENT_VERSION"/>
        /// </summary>
        public static short LEADER_CHANGE_CURRENT_VERSION { get { if (!_LEADER_CHANGE_CURRENT_VERSIONReady) { _LEADER_CHANGE_CURRENT_VERSIONContent = SGetField<short>(LocalBridgeClazz, "LEADER_CHANGE_CURRENT_VERSION"); _LEADER_CHANGE_CURRENT_VERSIONReady = true; } return _LEADER_CHANGE_CURRENT_VERSIONContent; } }
        private static short _LEADER_CHANGE_CURRENT_VERSIONContent = default;
        private static bool _LEADER_CHANGE_CURRENT_VERSIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.9.1/org/apache/kafka/common/record/ControlRecordUtils.html#SNAPSHOT_FOOTER_CURRENT_VERSION"/>
        /// </summary>
        public static short SNAPSHOT_FOOTER_CURRENT_VERSION { get { if (!_SNAPSHOT_FOOTER_CURRENT_VERSIONReady) { _SNAPSHOT_FOOTER_CURRENT_VERSIONContent = SGetField<short>(LocalBridgeClazz, "SNAPSHOT_FOOTER_CURRENT_VERSION"); _SNAPSHOT_FOOTER_CURRENT_VERSIONReady = true; } return _SNAPSHOT_FOOTER_CURRENT_VERSIONContent; } }
        private static short _SNAPSHOT_FOOTER_CURRENT_VERSIONContent = default;
        private static bool _SNAPSHOT_FOOTER_CURRENT_VERSIONReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.9.1/org/apache/kafka/common/record/ControlRecordUtils.html#SNAPSHOT_HEADER_CURRENT_VERSION"/>
        /// </summary>
        public static short SNAPSHOT_HEADER_CURRENT_VERSION { get { if (!_SNAPSHOT_HEADER_CURRENT_VERSIONReady) { _SNAPSHOT_HEADER_CURRENT_VERSIONContent = SGetField<short>(LocalBridgeClazz, "SNAPSHOT_HEADER_CURRENT_VERSION"); _SNAPSHOT_HEADER_CURRENT_VERSIONReady = true; } return _SNAPSHOT_HEADER_CURRENT_VERSIONContent; } }
        private static short _SNAPSHOT_HEADER_CURRENT_VERSIONContent = default;
        private static bool _SNAPSHOT_HEADER_CURRENT_VERSIONReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}