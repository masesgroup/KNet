/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka-clients-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Common.Network
{
    #region KafkaChannel
    public partial class KafkaChannel
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/network/KafkaChannel.html#%3Cinit%3E(java.lang.String,org.apache.kafka.common.network.TransportLayer,java.util.function.Supplier,int,org.apache.kafka.common.memory.MemoryPool,org.apache.kafka.common.network.ChannelMetadataRegistry)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Common.Network.TransportLayer"/></param>
        /// <param name="arg2"><see cref="Java.Util.Function.Supplier"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="Org.Apache.Kafka.Common.Memory.MemoryPool"/></param>
        /// <param name="arg5"><see cref="Org.Apache.Kafka.Common.Network.ChannelMetadataRegistry"/></param>
        public KafkaChannel(string arg0, Org.Apache.Kafka.Common.Network.TransportLayer arg1, Java.Util.Function.Supplier arg2, int arg3, Org.Apache.Kafka.Common.Memory.MemoryPool arg4, Org.Apache.Kafka.Common.Network.ChannelMetadataRegistry arg5)
            : base(arg0, arg1, arg2, arg3, arg4, arg5)
        {
        }

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Org.Apache.Kafka.Common.Network.KafkaChannel"/> to <see cref="Java.Lang.AutoCloseable"/>
        /// </summary>
        public static implicit operator Java.Lang.AutoCloseable(Org.Apache.Kafka.Common.Network.KafkaChannel t) => t.Cast<Java.Lang.AutoCloseable>();

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/network/KafkaChannel.html#getAndResetNetworkThreadTimeNanos()"/> 
        /// </summary>
        public long AndResetNetworkThreadTimeNanos
        {
            get { return IExecute<long>("getAndResetNetworkThreadTimeNanos"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/network/KafkaChannel.html#channelMetadataRegistry()"/> 
        /// </summary>
        public Org.Apache.Kafka.Common.Network.ChannelMetadataRegistry ChannelMetadataRegistry
        {
            get { return IExecute<Org.Apache.Kafka.Common.Network.ChannelMetadataRegistry>("channelMetadataRegistry"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/network/KafkaChannel.html#currentReceive()"/> 
        /// </summary>
        public Org.Apache.Kafka.Common.Network.NetworkReceive CurrentReceive
        {
            get { return IExecute<Org.Apache.Kafka.Common.Network.NetworkReceive>("currentReceive"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/network/KafkaChannel.html#finishConnect()"/> 
        /// </summary>
        public bool FinishConnect
        {
            get { return IExecute<bool>("finishConnect"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/network/KafkaChannel.html#hasBytesBuffered()"/> 
        /// </summary>
        public bool HasBytesBuffered
        {
            get { return IExecute<bool>("hasBytesBuffered"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/network/KafkaChannel.html#hasSend()"/> 
        /// </summary>
        public bool HasSend
        {
            get { return IExecute<bool>("hasSend"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/network/KafkaChannel.html#id()"/> 
        /// </summary>
        public string Id
        {
            get { return IExecute<string>("id"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/network/KafkaChannel.html#isConnected()"/> 
        /// </summary>
        public bool IsConnected
        {
            get { return IExecute<bool>("isConnected"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/network/KafkaChannel.html#isInMutableState()"/> 
        /// </summary>
        public bool IsInMutableState
        {
            get { return IExecute<bool>("isInMutableState"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/network/KafkaChannel.html#isMuted()"/> 
        /// </summary>
        public bool IsMuted
        {
            get { return IExecute<bool>("isMuted"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/network/KafkaChannel.html#maybeCompleteReceive()"/> 
        /// </summary>
        public Org.Apache.Kafka.Common.Network.NetworkReceive MaybeCompleteReceive
        {
            get { return IExecute<Org.Apache.Kafka.Common.Network.NetworkReceive>("maybeCompleteReceive"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/network/KafkaChannel.html#maybeCompleteSend()"/> 
        /// </summary>
        public Org.Apache.Kafka.Common.Network.NetworkSend MaybeCompleteSend
        {
            get { return IExecute<Org.Apache.Kafka.Common.Network.NetworkSend>("maybeCompleteSend"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/network/KafkaChannel.html#muteState()"/> 
        /// </summary>
        public Org.Apache.Kafka.Common.Network.KafkaChannel.ChannelMuteState MuteState
        {
            get { return IExecute<Org.Apache.Kafka.Common.Network.KafkaChannel.ChannelMuteState>("muteState"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/network/KafkaChannel.html#pollResponseReceivedDuringReauthentication()"/> 
        /// </summary>
        public Java.Util.Optional<Org.Apache.Kafka.Common.Network.NetworkReceive> PollResponseReceivedDuringReauthentication
        {
            get { return IExecute<Java.Util.Optional<Org.Apache.Kafka.Common.Network.NetworkReceive>>("pollResponseReceivedDuringReauthentication"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/network/KafkaChannel.html#principal()"/> 
        /// </summary>
        public Org.Apache.Kafka.Common.Security.Auth.KafkaPrincipal Principal
        {
            get { return IExecute<Org.Apache.Kafka.Common.Security.Auth.KafkaPrincipal>("principal"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/network/KafkaChannel.html#principalSerde()"/> 
        /// </summary>
        public Java.Util.Optional<Org.Apache.Kafka.Common.Security.Auth.KafkaPrincipalSerde> PrincipalSerde
        {
            get { return IExecute<Java.Util.Optional<Org.Apache.Kafka.Common.Security.Auth.KafkaPrincipalSerde>>("principalSerde"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/network/KafkaChannel.html#read()"/> 
        /// </summary>
        public long Read
        {
            get { return IExecute<long>("read"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/network/KafkaChannel.html#ready()"/> 
        /// </summary>
        public bool Ready
        {
            get { return IExecute<bool>("ready"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/network/KafkaChannel.html#reauthenticationLatencyMs()"/> 
        /// </summary>
        public long? ReauthenticationLatencyMs
        {
            get { return IExecute<long?>("reauthenticationLatencyMs"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/network/KafkaChannel.html#selectionKey()"/> 
        /// </summary>
        public Java.Nio.Channels.SelectionKey SelectionKey
        {
            get { return IExecute<Java.Nio.Channels.SelectionKey>("selectionKey"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/network/KafkaChannel.html#socketAddress()"/> 
        /// </summary>
        public Java.Net.InetAddress SocketAddress
        {
            get { return IExecute<Java.Net.InetAddress>("socketAddress"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/network/KafkaChannel.html#socketDescription()"/> 
        /// </summary>
        public string SocketDescription
        {
            get { return IExecute<string>("socketDescription"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/network/KafkaChannel.html#successfulAuthentications()"/> 
        /// </summary>
        public int SuccessfulAuthentications
        {
            get { return IExecute<int>("successfulAuthentications"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/network/KafkaChannel.html#write()"/> 
        /// </summary>
        public long Write
        {
            get { return IExecute<long>("write"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/network/KafkaChannel.html#maybeBeginClientReauthentication(java.util.function.Supplier)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Function.Supplier"/></param>
        /// <returns><see cref="bool"/></returns>
        /// <exception cref="Org.Apache.Kafka.Common.Errors.AuthenticationException"/>
        /// <exception cref="Java.Io.IOException"/>
        public bool MaybeBeginClientReauthentication(Java.Util.Function.Supplier<long?> arg0)
        {
            return IExecute<bool>("maybeBeginClientReauthentication", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/network/KafkaChannel.html#maybeBeginServerReauthentication(org.apache.kafka.common.network.NetworkReceive,java.util.function.Supplier)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Network.NetworkReceive"/></param>
        /// <param name="arg1"><see cref="Java.Util.Function.Supplier"/></param>
        /// <returns><see cref="bool"/></returns>
        /// <exception cref="Org.Apache.Kafka.Common.Errors.AuthenticationException"/>
        /// <exception cref="Java.Io.IOException"/>
        public bool MaybeBeginServerReauthentication(Org.Apache.Kafka.Common.Network.NetworkReceive arg0, Java.Util.Function.Supplier<long?> arg1)
        {
            return IExecute<bool>("maybeBeginServerReauthentication", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/network/KafkaChannel.html#serverAuthenticationSessionExpired(long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool ServerAuthenticationSessionExpired(long arg0)
        {
            return IExecute<bool>("serverAuthenticationSessionExpired", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/network/KafkaChannel.html#state()"/>
        /// </summary>

        /// <returns><see cref="Org.Apache.Kafka.Common.Network.ChannelState"/></returns>
        public Org.Apache.Kafka.Common.Network.ChannelState State()
        {
            return IExecute<Org.Apache.Kafka.Common.Network.ChannelState>("state");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/network/KafkaChannel.html#addNetworkThreadTimeNanos(long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        public void AddNetworkThreadTimeNanos(long arg0)
        {
            IExecute("addNetworkThreadTimeNanos", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/network/KafkaChannel.html#close()"/>
        /// </summary>

        /// <exception cref="Java.Io.IOException"/>
        public void Close()
        {
            IExecute("close");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/network/KafkaChannel.html#disconnect()"/>
        /// </summary>
        public void Disconnect()
        {
            IExecute("disconnect");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/network/KafkaChannel.html#handleChannelMuteEvent(org.apache.kafka.common.network.KafkaChannel.ChannelMuteEvent)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Network.KafkaChannel.ChannelMuteEvent"/></param>
        public void HandleChannelMuteEvent(Org.Apache.Kafka.Common.Network.KafkaChannel.ChannelMuteEvent arg0)
        {
            IExecute("handleChannelMuteEvent", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/network/KafkaChannel.html#prepare()"/>
        /// </summary>

        /// <exception cref="Org.Apache.Kafka.Common.Errors.AuthenticationException"/>
        /// <exception cref="Java.Io.IOException"/>
        public void Prepare()
        {
            IExecute("prepare");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/network/KafkaChannel.html#setSend(org.apache.kafka.common.network.NetworkSend)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Network.NetworkSend"/></param>
        public void SetSend(Org.Apache.Kafka.Common.Network.NetworkSend arg0)
        {
            IExecute("setSend", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/network/KafkaChannel.html#state(org.apache.kafka.common.network.ChannelState)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Network.ChannelState"/></param>
        public void State(Org.Apache.Kafka.Common.Network.ChannelState arg0)
        {
            IExecute("state", arg0);
        }

        #endregion

        #region Nested classes
        #region ChannelMuteEvent
        public partial class ChannelMuteEvent
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/network/KafkaChannel.ChannelMuteEvent.html#REQUEST_RECEIVED"/>
            /// </summary>
            public static Org.Apache.Kafka.Common.Network.KafkaChannel.ChannelMuteEvent REQUEST_RECEIVED { get { return SGetField<Org.Apache.Kafka.Common.Network.KafkaChannel.ChannelMuteEvent>(LocalBridgeClazz, "REQUEST_RECEIVED"); } }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/network/KafkaChannel.ChannelMuteEvent.html#RESPONSE_SENT"/>
            /// </summary>
            public static Org.Apache.Kafka.Common.Network.KafkaChannel.ChannelMuteEvent RESPONSE_SENT { get { return SGetField<Org.Apache.Kafka.Common.Network.KafkaChannel.ChannelMuteEvent>(LocalBridgeClazz, "RESPONSE_SENT"); } }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/network/KafkaChannel.ChannelMuteEvent.html#THROTTLE_ENDED"/>
            /// </summary>
            public static Org.Apache.Kafka.Common.Network.KafkaChannel.ChannelMuteEvent THROTTLE_ENDED { get { return SGetField<Org.Apache.Kafka.Common.Network.KafkaChannel.ChannelMuteEvent>(LocalBridgeClazz, "THROTTLE_ENDED"); } }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/network/KafkaChannel.ChannelMuteEvent.html#THROTTLE_STARTED"/>
            /// </summary>
            public static Org.Apache.Kafka.Common.Network.KafkaChannel.ChannelMuteEvent THROTTLE_STARTED { get { return SGetField<Org.Apache.Kafka.Common.Network.KafkaChannel.ChannelMuteEvent>(LocalBridgeClazz, "THROTTLE_STARTED"); } }

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/network/KafkaChannel.ChannelMuteEvent.html#values()"/> 
            /// </summary>
            public static Org.Apache.Kafka.Common.Network.KafkaChannel.ChannelMuteEvent[] Values
            {
                get { return SExecuteArray<Org.Apache.Kafka.Common.Network.KafkaChannel.ChannelMuteEvent>(LocalBridgeClazz, "values"); }
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/network/KafkaChannel.ChannelMuteEvent.html#valueOf(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="string"/></param>
            /// <returns><see cref="Org.Apache.Kafka.Common.Network.KafkaChannel.ChannelMuteEvent"/></returns>
            public static Org.Apache.Kafka.Common.Network.KafkaChannel.ChannelMuteEvent ValueOf(string arg0)
            {
                return SExecute<Org.Apache.Kafka.Common.Network.KafkaChannel.ChannelMuteEvent>(LocalBridgeClazz, "valueOf", arg0);
            }

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region ChannelMuteState
        public partial class ChannelMuteState
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/network/KafkaChannel.ChannelMuteState.html#MUTED"/>
            /// </summary>
            public static Org.Apache.Kafka.Common.Network.KafkaChannel.ChannelMuteState MUTED { get { return SGetField<Org.Apache.Kafka.Common.Network.KafkaChannel.ChannelMuteState>(LocalBridgeClazz, "MUTED"); } }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/network/KafkaChannel.ChannelMuteState.html#MUTED_AND_RESPONSE_PENDING"/>
            /// </summary>
            public static Org.Apache.Kafka.Common.Network.KafkaChannel.ChannelMuteState MUTED_AND_RESPONSE_PENDING { get { return SGetField<Org.Apache.Kafka.Common.Network.KafkaChannel.ChannelMuteState>(LocalBridgeClazz, "MUTED_AND_RESPONSE_PENDING"); } }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/network/KafkaChannel.ChannelMuteState.html#MUTED_AND_THROTTLED"/>
            /// </summary>
            public static Org.Apache.Kafka.Common.Network.KafkaChannel.ChannelMuteState MUTED_AND_THROTTLED { get { return SGetField<Org.Apache.Kafka.Common.Network.KafkaChannel.ChannelMuteState>(LocalBridgeClazz, "MUTED_AND_THROTTLED"); } }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/network/KafkaChannel.ChannelMuteState.html#MUTED_AND_THROTTLED_AND_RESPONSE_PENDING"/>
            /// </summary>
            public static Org.Apache.Kafka.Common.Network.KafkaChannel.ChannelMuteState MUTED_AND_THROTTLED_AND_RESPONSE_PENDING { get { return SGetField<Org.Apache.Kafka.Common.Network.KafkaChannel.ChannelMuteState>(LocalBridgeClazz, "MUTED_AND_THROTTLED_AND_RESPONSE_PENDING"); } }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/network/KafkaChannel.ChannelMuteState.html#NOT_MUTED"/>
            /// </summary>
            public static Org.Apache.Kafka.Common.Network.KafkaChannel.ChannelMuteState NOT_MUTED { get { return SGetField<Org.Apache.Kafka.Common.Network.KafkaChannel.ChannelMuteState>(LocalBridgeClazz, "NOT_MUTED"); } }

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/network/KafkaChannel.ChannelMuteState.html#values()"/> 
            /// </summary>
            public static Org.Apache.Kafka.Common.Network.KafkaChannel.ChannelMuteState[] Values
            {
                get { return SExecuteArray<Org.Apache.Kafka.Common.Network.KafkaChannel.ChannelMuteState>(LocalBridgeClazz, "values"); }
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/network/KafkaChannel.ChannelMuteState.html#valueOf(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="string"/></param>
            /// <returns><see cref="Org.Apache.Kafka.Common.Network.KafkaChannel.ChannelMuteState"/></returns>
            public static Org.Apache.Kafka.Common.Network.KafkaChannel.ChannelMuteState ValueOf(string arg0)
            {
                return SExecute<Org.Apache.Kafka.Common.Network.KafkaChannel.ChannelMuteState>(LocalBridgeClazz, "valueOf", arg0);
            }

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}