/*
*  Copyright (c) 2021-2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.6.4.0)
*  using kafka-clients-4.0.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Common.Errors
{
    #region NotControllerException declaration
    /// <summary>
    /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/4.0.0/org/apache/kafka/common/errors/NotControllerException.html"/>
    /// </summary>
    public partial class NotControllerException : Org.Apache.Kafka.Common.Errors.RetriableException
    {
        /// <inheritdoc cref="global::System.Exception()"/>
        public NotControllerException() { }
        /// <inheritdoc cref="global::System.Exception(string)"/>
        public NotControllerException(string message) : base(message) { }
        /// <inheritdoc cref="global::System.Exception(string, global::System.Exception)"/>
        public NotControllerException(string message, global::System.Exception innerException) : base(message, innerException) { }

        const string _bridgeClassName = "org.apache.kafka.common.errors.NotControllerException";
        /// <inheritdoc/>
        public override string BridgeClassName => _bridgeClassName;

        // TODO: complete the class

    }
    #endregion

    #region NotControllerException implementation
    public partial class NotControllerException
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}