/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.3.0)
*  using kafka-clients-3.7.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Common.Compress
{
    #region KafkaLZ4BlockOutputStream
    public partial class KafkaLZ4BlockOutputStream
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/common/compress/KafkaLZ4BlockOutputStream.html#org.apache.kafka.common.compress.KafkaLZ4BlockOutputStream(java.io.OutputStream,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Io.OutputStream"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        /// <exception cref="Java.Io.IOException"/>
        public KafkaLZ4BlockOutputStream(Java.Io.OutputStream arg0, bool arg1)
            : base(arg0, arg1)
        {
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/common/compress/KafkaLZ4BlockOutputStream.html#org.apache.kafka.common.compress.KafkaLZ4BlockOutputStream(java.io.OutputStream,int,boolean,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Io.OutputStream"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="bool"/></param>
        /// <param name="arg3"><see cref="bool"/></param>
        /// <exception cref="Java.Io.IOException"/>
        public KafkaLZ4BlockOutputStream(Java.Io.OutputStream arg0, int arg1, bool arg2, bool arg3)
            : base(arg0, arg1, arg2, arg3)
        {
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/common/compress/KafkaLZ4BlockOutputStream.html#org.apache.kafka.common.compress.KafkaLZ4BlockOutputStream(java.io.OutputStream,int,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Io.OutputStream"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="bool"/></param>
        /// <exception cref="Java.Io.IOException"/>
        public KafkaLZ4BlockOutputStream(Java.Io.OutputStream arg0, int arg1, bool arg2)
            : base(arg0, arg1, arg2)
        {
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/common/compress/KafkaLZ4BlockOutputStream.html#org.apache.kafka.common.compress.KafkaLZ4BlockOutputStream(java.io.OutputStream,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Io.OutputStream"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <exception cref="Java.Io.IOException"/>
        public KafkaLZ4BlockOutputStream(Java.Io.OutputStream arg0, int arg1)
            : base(arg0, arg1)
        {
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/common/compress/KafkaLZ4BlockOutputStream.html#org.apache.kafka.common.compress.KafkaLZ4BlockOutputStream(java.io.OutputStream)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Io.OutputStream"/></param>
        /// <exception cref="Java.Io.IOException"/>
        public KafkaLZ4BlockOutputStream(Java.Io.OutputStream arg0)
            : base(arg0)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/common/compress/KafkaLZ4BlockOutputStream.html#BLOCKSIZE_1MB"/>
        /// </summary>
        public static int BLOCKSIZE_1MB { get { if (!_BLOCKSIZE_1MBReady) { _BLOCKSIZE_1MBContent = SGetField<int>(LocalBridgeClazz, "BLOCKSIZE_1MB"); _BLOCKSIZE_1MBReady = true; } return _BLOCKSIZE_1MBContent; } }
        private static int _BLOCKSIZE_1MBContent = default;
        private static bool _BLOCKSIZE_1MBReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/common/compress/KafkaLZ4BlockOutputStream.html#BLOCKSIZE_256KB"/>
        /// </summary>
        public static int BLOCKSIZE_256KB { get { if (!_BLOCKSIZE_256KBReady) { _BLOCKSIZE_256KBContent = SGetField<int>(LocalBridgeClazz, "BLOCKSIZE_256KB"); _BLOCKSIZE_256KBReady = true; } return _BLOCKSIZE_256KBContent; } }
        private static int _BLOCKSIZE_256KBContent = default;
        private static bool _BLOCKSIZE_256KBReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/common/compress/KafkaLZ4BlockOutputStream.html#BLOCKSIZE_4MB"/>
        /// </summary>
        public static int BLOCKSIZE_4MB { get { if (!_BLOCKSIZE_4MBReady) { _BLOCKSIZE_4MBContent = SGetField<int>(LocalBridgeClazz, "BLOCKSIZE_4MB"); _BLOCKSIZE_4MBReady = true; } return _BLOCKSIZE_4MBContent; } }
        private static int _BLOCKSIZE_4MBContent = default;
        private static bool _BLOCKSIZE_4MBReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/common/compress/KafkaLZ4BlockOutputStream.html#BLOCKSIZE_64KB"/>
        /// </summary>
        public static int BLOCKSIZE_64KB { get { if (!_BLOCKSIZE_64KBReady) { _BLOCKSIZE_64KBContent = SGetField<int>(LocalBridgeClazz, "BLOCKSIZE_64KB"); _BLOCKSIZE_64KBReady = true; } return _BLOCKSIZE_64KBContent; } }
        private static int _BLOCKSIZE_64KBContent = default;
        private static bool _BLOCKSIZE_64KBReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/common/compress/KafkaLZ4BlockOutputStream.html#LZ4_FRAME_INCOMPRESSIBLE_MASK"/>
        /// </summary>
        public static int LZ4_FRAME_INCOMPRESSIBLE_MASK { get { if (!_LZ4_FRAME_INCOMPRESSIBLE_MASKReady) { _LZ4_FRAME_INCOMPRESSIBLE_MASKContent = SGetField<int>(LocalBridgeClazz, "LZ4_FRAME_INCOMPRESSIBLE_MASK"); _LZ4_FRAME_INCOMPRESSIBLE_MASKReady = true; } return _LZ4_FRAME_INCOMPRESSIBLE_MASKContent; } }
        private static int _LZ4_FRAME_INCOMPRESSIBLE_MASKContent = default;
        private static bool _LZ4_FRAME_INCOMPRESSIBLE_MASKReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/common/compress/KafkaLZ4BlockOutputStream.html#LZ4_MAX_HEADER_LENGTH"/>
        /// </summary>
        public static int LZ4_MAX_HEADER_LENGTH { get { if (!_LZ4_MAX_HEADER_LENGTHReady) { _LZ4_MAX_HEADER_LENGTHContent = SGetField<int>(LocalBridgeClazz, "LZ4_MAX_HEADER_LENGTH"); _LZ4_MAX_HEADER_LENGTHReady = true; } return _LZ4_MAX_HEADER_LENGTHContent; } }
        private static int _LZ4_MAX_HEADER_LENGTHContent = default;
        private static bool _LZ4_MAX_HEADER_LENGTHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/common/compress/KafkaLZ4BlockOutputStream.html#MAGIC"/>
        /// </summary>
        public static int MAGIC { get { if (!_MAGICReady) { _MAGICContent = SGetField<int>(LocalBridgeClazz, "MAGIC"); _MAGICReady = true; } return _MAGICContent; } }
        private static int _MAGICContent = default;
        private static bool _MAGICReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/common/compress/KafkaLZ4BlockOutputStream.html#CLOSED_STREAM"/>
        /// </summary>
        public static Java.Lang.String CLOSED_STREAM { get { if (!_CLOSED_STREAMReady) { _CLOSED_STREAMContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CLOSED_STREAM"); _CLOSED_STREAMReady = true; } return _CLOSED_STREAMContent; } }
        private static Java.Lang.String _CLOSED_STREAMContent = default;
        private static bool _CLOSED_STREAMReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/common/compress/KafkaLZ4BlockOutputStream.html#useBrokenFlagDescriptorChecksum--"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool UseBrokenFlagDescriptorChecksum()
        {
            return IExecuteWithSignature<bool>("useBrokenFlagDescriptorChecksum", "()Z");
        }

        #endregion

        #region Nested classes
        #region BD
        public partial class BD
        {
            #region Constructors
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/common/compress/KafkaLZ4BlockOutputStream.BD.html#org.apache.kafka.common.compress.KafkaLZ4BlockOutputStream$BD(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            public BD(int arg0)
                : base(arg0)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/common/compress/KafkaLZ4BlockOutputStream.BD.html#fromByte-byte-"/>
            /// </summary>
            /// <param name="arg0"><see cref="byte"/></param>
            /// <returns><see cref="Org.Apache.Kafka.Common.Compress.KafkaLZ4BlockOutputStream.BD"/></returns>
            public static Org.Apache.Kafka.Common.Compress.KafkaLZ4BlockOutputStream.BD FromByte(byte arg0)
            {
                return SExecuteWithSignature<Org.Apache.Kafka.Common.Compress.KafkaLZ4BlockOutputStream.BD>(LocalBridgeClazz, "fromByte", "(B)Lorg/apache/kafka/common/compress/KafkaLZ4BlockOutputStream$BD;", arg0);
            }

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/common/compress/KafkaLZ4BlockOutputStream.BD.html#getBlockMaximumSize--"/> 
            /// </summary>
            public int BlockMaximumSize
            {
                get { return IExecuteWithSignature<int>("getBlockMaximumSize", "()I"); }
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/common/compress/KafkaLZ4BlockOutputStream.BD.html#toByte--"/>
            /// </summary>
            /// <returns><see cref="byte"/></returns>
            public byte ToByte()
            {
                return IExecuteWithSignature<byte>("toByte", "()B");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region FLG
        public partial class FLG
        {
            #region Constructors
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/common/compress/KafkaLZ4BlockOutputStream.FLG.html#org.apache.kafka.common.compress.KafkaLZ4BlockOutputStream$FLG(boolean)"/>
            /// </summary>
            /// <param name="arg0"><see cref="bool"/></param>
            public FLG(bool arg0)
                : base(arg0)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/common/compress/KafkaLZ4BlockOutputStream.FLG.html#fromByte-byte-"/>
            /// </summary>
            /// <param name="arg0"><see cref="byte"/></param>
            /// <returns><see cref="Org.Apache.Kafka.Common.Compress.KafkaLZ4BlockOutputStream.FLG"/></returns>
            public static Org.Apache.Kafka.Common.Compress.KafkaLZ4BlockOutputStream.FLG FromByte(byte arg0)
            {
                return SExecuteWithSignature<Org.Apache.Kafka.Common.Compress.KafkaLZ4BlockOutputStream.FLG>(LocalBridgeClazz, "fromByte", "(B)Lorg/apache/kafka/common/compress/KafkaLZ4BlockOutputStream$FLG;", arg0);
            }

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/common/compress/KafkaLZ4BlockOutputStream.FLG.html#getVersion--"/> 
            /// </summary>
            public int Version
            {
                get { return IExecuteWithSignature<int>("getVersion", "()I"); }
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/common/compress/KafkaLZ4BlockOutputStream.FLG.html#isBlockChecksumSet--"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            public bool IsBlockChecksumSet()
            {
                return IExecuteWithSignature<bool>("isBlockChecksumSet", "()Z");
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/common/compress/KafkaLZ4BlockOutputStream.FLG.html#isBlockIndependenceSet--"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            public bool IsBlockIndependenceSet()
            {
                return IExecuteWithSignature<bool>("isBlockIndependenceSet", "()Z");
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/common/compress/KafkaLZ4BlockOutputStream.FLG.html#isContentChecksumSet--"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            public bool IsContentChecksumSet()
            {
                return IExecuteWithSignature<bool>("isContentChecksumSet", "()Z");
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/common/compress/KafkaLZ4BlockOutputStream.FLG.html#isContentSizeSet--"/>
            /// </summary>
            /// <returns><see cref="bool"/></returns>
            public bool IsContentSizeSet()
            {
                return IExecuteWithSignature<bool>("isContentSizeSet", "()Z");
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/common/compress/KafkaLZ4BlockOutputStream.FLG.html#toByte--"/>
            /// </summary>
            /// <returns><see cref="byte"/></returns>
            public byte ToByte()
            {
                return IExecuteWithSignature<byte>("toByte", "()B");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}