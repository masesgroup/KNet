/*
*  Copyright (c) 2021-2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.6.3.0)
*  using kafka-server-common-4.1.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Common
{
    #region ClientIdAndBroker declaration
    /// <summary>
    /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-server-common/4.0.0/org/apache/kafka/common/ClientIdAndBroker.html"/>
    /// </summary>
    public partial class ClientIdAndBroker : MASES.JCOBridge.C2JBridge.JVMBridgeBase<ClientIdAndBroker>
    {
        const string _bridgeClassName = "org.apache.kafka.common.ClientIdAndBroker";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public ClientIdAndBroker() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public ClientIdAndBroker(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, false);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <inheritdoc/>
        public override string BridgeClassName => _bridgeClassName;
        /// <inheritdoc/>
        public override bool IsBridgeAbstract => false;
        /// <inheritdoc/>
        public override bool IsBridgeCloseable => false;
        /// <inheritdoc/>
        public override bool IsBridgeInterface => false;
        /// <inheritdoc/>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class

    }
    #endregion

    #region ClientIdAndBroker implementation
    public partial class ClientIdAndBroker
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-server-common/4.0.0/org/apache/kafka/common/ClientIdAndBroker.html#%3Cinit%3E(java.lang.String,java.lang.String,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        public ClientIdAndBroker(Java.Lang.String arg0, Java.Lang.String arg1, int arg2)
            : base(arg0, arg1, arg2)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-server-common/4.0.0/org/apache/kafka/common/ClientIdAndBroker.html#brokerPort"/>
        /// </summary>
        public int brokerPort { get { if (!_brokerPortReady) { _brokerPortContent = IGetField<int>("brokerPort"); _brokerPortReady = true; } return _brokerPortContent; } }
        private int _brokerPortContent = default;
        private bool _brokerPortReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-server-common/4.0.0/org/apache/kafka/common/ClientIdAndBroker.html#brokerHost"/>
        /// </summary>
        public Java.Lang.String brokerHost { get { if (!_brokerHostReady) { _brokerHostContent = IGetField<Java.Lang.String>("brokerHost"); _brokerHostReady = true; } return _brokerHostContent; } }
        private Java.Lang.String _brokerHostContent = default;
        private bool _brokerHostReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-server-common/4.0.0/org/apache/kafka/common/ClientIdAndBroker.html#clientId"/>
        /// </summary>
        public Java.Lang.String clientId { get { if (!_clientIdReady) { _clientIdContent = IGetField<Java.Lang.String>("clientId"); _clientIdReady = true; } return _clientIdContent; } }
        private Java.Lang.String _clientIdContent = default;
        private bool _clientIdReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}