/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.4.0)
*  using kafka-clients-3.7.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Common.Config
{
    #region LogLevelConfig
    public partial class LogLevelConfig
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/common/config/LogLevelConfig.html#DEBUG_LOG_LEVEL"/>
        /// </summary>
        public static Java.Lang.String DEBUG_LOG_LEVEL { get { if (!_DEBUG_LOG_LEVELReady) { _DEBUG_LOG_LEVELContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "DEBUG_LOG_LEVEL"); _DEBUG_LOG_LEVELReady = true; } return _DEBUG_LOG_LEVELContent; } }
        private static Java.Lang.String _DEBUG_LOG_LEVELContent = default;
        private static bool _DEBUG_LOG_LEVELReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/common/config/LogLevelConfig.html#ERROR_LOG_LEVEL"/>
        /// </summary>
        public static Java.Lang.String ERROR_LOG_LEVEL { get { if (!_ERROR_LOG_LEVELReady) { _ERROR_LOG_LEVELContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ERROR_LOG_LEVEL"); _ERROR_LOG_LEVELReady = true; } return _ERROR_LOG_LEVELContent; } }
        private static Java.Lang.String _ERROR_LOG_LEVELContent = default;
        private static bool _ERROR_LOG_LEVELReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/common/config/LogLevelConfig.html#FATAL_LOG_LEVEL"/>
        /// </summary>
        public static Java.Lang.String FATAL_LOG_LEVEL { get { if (!_FATAL_LOG_LEVELReady) { _FATAL_LOG_LEVELContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "FATAL_LOG_LEVEL"); _FATAL_LOG_LEVELReady = true; } return _FATAL_LOG_LEVELContent; } }
        private static Java.Lang.String _FATAL_LOG_LEVELContent = default;
        private static bool _FATAL_LOG_LEVELReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/common/config/LogLevelConfig.html#INFO_LOG_LEVEL"/>
        /// </summary>
        public static Java.Lang.String INFO_LOG_LEVEL { get { if (!_INFO_LOG_LEVELReady) { _INFO_LOG_LEVELContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "INFO_LOG_LEVEL"); _INFO_LOG_LEVELReady = true; } return _INFO_LOG_LEVELContent; } }
        private static Java.Lang.String _INFO_LOG_LEVELContent = default;
        private static bool _INFO_LOG_LEVELReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/common/config/LogLevelConfig.html#TRACE_LOG_LEVEL"/>
        /// </summary>
        public static Java.Lang.String TRACE_LOG_LEVEL { get { if (!_TRACE_LOG_LEVELReady) { _TRACE_LOG_LEVELContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "TRACE_LOG_LEVEL"); _TRACE_LOG_LEVELReady = true; } return _TRACE_LOG_LEVELContent; } }
        private static Java.Lang.String _TRACE_LOG_LEVELContent = default;
        private static bool _TRACE_LOG_LEVELReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/common/config/LogLevelConfig.html#WARN_LOG_LEVEL"/>
        /// </summary>
        public static Java.Lang.String WARN_LOG_LEVEL { get { if (!_WARN_LOG_LEVELReady) { _WARN_LOG_LEVELContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "WARN_LOG_LEVEL"); _WARN_LOG_LEVELReady = true; } return _WARN_LOG_LEVELContent; } }
        private static Java.Lang.String _WARN_LOG_LEVELContent = default;
        private static bool _WARN_LOG_LEVELReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.7.0/org/apache/kafka/common/config/LogLevelConfig.html#VALID_LOG_LEVELS"/>
        /// </summary>
        public static Java.Util.Set VALID_LOG_LEVELS { get { if (!_VALID_LOG_LEVELSReady) { _VALID_LOG_LEVELSContent = SGetField<Java.Util.Set>(LocalBridgeClazz, "VALID_LOG_LEVELS"); _VALID_LOG_LEVELSReady = true; } return _VALID_LOG_LEVELSContent; } }
        private static Java.Util.Set _VALID_LOG_LEVELSContent = default;
        private static bool _VALID_LOG_LEVELSReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}