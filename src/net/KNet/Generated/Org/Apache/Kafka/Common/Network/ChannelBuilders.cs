/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka-clients-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Common.Network
{
    #region ChannelBuilders
    public partial class ChannelBuilders
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/network/ChannelBuilders.html#clientChannelBuilder(org.apache.kafka.common.security.auth.SecurityProtocol,org.apache.kafka.common.security.JaasContext.Type,org.apache.kafka.common.config.AbstractConfig,org.apache.kafka.common.network.ListenerName,java.lang.String,org.apache.kafka.common.utils.Time,boolean,org.apache.kafka.common.utils.LogContext)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Security.Auth.SecurityProtocol"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Common.Security.JaasContext.Type"/></param>
        /// <param name="arg2"><see cref="Org.Apache.Kafka.Common.Config.AbstractConfig"/></param>
        /// <param name="arg3"><see cref="Org.Apache.Kafka.Common.Network.ListenerName"/></param>
        /// <param name="arg4"><see cref="string"/></param>
        /// <param name="arg5"><see cref="Org.Apache.Kafka.Common.Utils.Time"/></param>
        /// <param name="arg6"><see cref="bool"/></param>
        /// <param name="arg7"><see cref="Org.Apache.Kafka.Common.Utils.LogContext"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Network.ChannelBuilder"/></returns>
        public static Org.Apache.Kafka.Common.Network.ChannelBuilder ClientChannelBuilder(Org.Apache.Kafka.Common.Security.Auth.SecurityProtocol arg0, Org.Apache.Kafka.Common.Security.JaasContext.Type arg1, Org.Apache.Kafka.Common.Config.AbstractConfig arg2, Org.Apache.Kafka.Common.Network.ListenerName arg3, string arg4, Org.Apache.Kafka.Common.Utils.Time arg5, bool arg6, Org.Apache.Kafka.Common.Utils.LogContext arg7)
        {
            return SExecute<Org.Apache.Kafka.Common.Network.ChannelBuilder>(LocalBridgeClazz, "clientChannelBuilder", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/network/ChannelBuilders.html#createPrincipalBuilder(java.util.Map,org.apache.kafka.common.security.kerberos.KerberosShortNamer,org.apache.kafka.common.security.ssl.SslPrincipalMapper)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Util.Map"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Common.Security.Kerberos.KerberosShortNamer"/></param>
        /// <param name="arg2"><see cref="Org.Apache.Kafka.Common.Security.Ssl.SslPrincipalMapper"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Security.Auth.KafkaPrincipalBuilder"/></returns>
        public static Org.Apache.Kafka.Common.Security.Auth.KafkaPrincipalBuilder CreatePrincipalBuilder(Java.Util.Map<string, object> arg0, Org.Apache.Kafka.Common.Security.Kerberos.KerberosShortNamer arg1, Org.Apache.Kafka.Common.Security.Ssl.SslPrincipalMapper arg2)
        {
            return SExecute<Org.Apache.Kafka.Common.Security.Auth.KafkaPrincipalBuilder>(LocalBridgeClazz, "createPrincipalBuilder", arg0, arg1, arg2);
        }

        #endregion

        #region Instance methods

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}