/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka-clients-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Common.Record
{
    #region Record
    public partial class Record
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/Record.html#EMPTY_HEADERS"/>
        /// </summary>
        public static Org.Apache.Kafka.Common.Header.Header[] EMPTY_HEADERS { get { return SGetFieldArray<Org.Apache.Kafka.Common.Header.Header>(LocalBridgeClazz, "EMPTY_HEADERS"); } }

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/Record.html#hasKey()"/> 
        /// </summary>
        public bool HasKey
        {
            get { return IExecute<bool>("hasKey"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/Record.html#hasValue()"/> 
        /// </summary>
        public bool HasValue
        {
            get { return IExecute<bool>("hasValue"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/Record.html#headers()"/> 
        /// </summary>
        public Org.Apache.Kafka.Common.Header.Header[] Headers
        {
            get { return IExecuteArray<Org.Apache.Kafka.Common.Header.Header>("headers"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/Record.html#isCompressed()"/> 
        /// </summary>
        public bool IsCompressed
        {
            get { return IExecute<bool>("isCompressed"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/Record.html#key()"/> 
        /// </summary>
        public Java.Nio.ByteBuffer Key
        {
            get { return IExecute<Java.Nio.ByteBuffer>("key"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/Record.html#keySize()"/> 
        /// </summary>
        public int KeySize
        {
            get { return IExecute<int>("keySize"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/Record.html#offset()"/> 
        /// </summary>
        public long Offset
        {
            get { return IExecute<long>("offset"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/Record.html#sequence()"/> 
        /// </summary>
        public int Sequence
        {
            get { return IExecute<int>("sequence"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/Record.html#sizeInBytes()"/> 
        /// </summary>
        public int SizeInBytes
        {
            get { return IExecute<int>("sizeInBytes"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/Record.html#timestamp()"/> 
        /// </summary>
        public long Timestamp
        {
            get { return IExecute<long>("timestamp"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/Record.html#value()"/> 
        /// </summary>
        public Java.Nio.ByteBuffer Value
        {
            get { return IExecute<Java.Nio.ByteBuffer>("value"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/Record.html#valueSize()"/> 
        /// </summary>
        public int ValueSize
        {
            get { return IExecute<int>("valueSize"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/Record.html#hasMagic(byte)"/>
        /// </summary>
        /// <param name="arg0"><see cref="byte"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool HasMagic(byte arg0)
        {
            return IExecute<bool>("hasMagic", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/Record.html#hasTimestampType(org.apache.kafka.common.record.TimestampType)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Record.TimestampType"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool HasTimestampType(Org.Apache.Kafka.Common.Record.TimestampType arg0)
        {
            return IExecute<bool>("hasTimestampType", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/Record.html#ensureValid()"/>
        /// </summary>
        public void EnsureValid()
        {
            IExecute("ensureValid");
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}