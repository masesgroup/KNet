/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.0.1.0)
*  using kafka-clients-3.6.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Common.Metrics.Stats
{
    #region Frequencies
    public partial class Frequencies
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.6.0/org/apache/kafka/common/metrics/stats/Frequencies.html#org.apache.kafka.common.metrics.stats.Frequencies(int,double,double,org.apache.kafka.common.metrics.stats.Frequency[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="double"/></param>
        /// <param name="arg2"><see cref="double"/></param>
        /// <param name="arg3"><see cref="Org.Apache.Kafka.Common.Metrics.Stats.Frequency"/></param>
        public Frequencies(int arg0, double arg1, double arg2, params Org.Apache.Kafka.Common.Metrics.Stats.Frequency[] arg3)
            : base(arg0, arg1, arg2, arg3)
        {
        }

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Org.Apache.Kafka.Common.Metrics.Stats.Frequencies"/> to <see cref="Org.Apache.Kafka.Common.Metrics.CompoundStat"/>
        /// </summary>
        public static implicit operator Org.Apache.Kafka.Common.Metrics.CompoundStat(Org.Apache.Kafka.Common.Metrics.Stats.Frequencies t) => t.Cast<Org.Apache.Kafka.Common.Metrics.CompoundStat>();

        #endregion

        #region Fields

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.6.0/org/apache/kafka/common/metrics/stats/Frequencies.html#forBooleanValues-org.apache.kafka.common.MetricName-org.apache.kafka.common.MetricName-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.MetricName"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Common.MetricName"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Metrics.Stats.Frequencies"/></returns>
        public static Org.Apache.Kafka.Common.Metrics.Stats.Frequencies ForBooleanValues(Org.Apache.Kafka.Common.MetricName arg0, Org.Apache.Kafka.Common.MetricName arg1)
        {
            return SExecute<Org.Apache.Kafka.Common.Metrics.Stats.Frequencies>(LocalBridgeClazz, "forBooleanValues", arg0, arg1);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.6.0/org/apache/kafka/common/metrics/stats/Frequencies.html#frequency-org.apache.kafka.common.metrics.MetricConfig-long-double-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Metrics.MetricConfig"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        /// <param name="arg2"><see cref="double"/></param>
        /// <returns><see cref="double"/></returns>
        public double Frequency(Org.Apache.Kafka.Common.Metrics.MetricConfig arg0, long arg1, double arg2)
        {
            return IExecute<double>("frequency", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.6.0/org/apache/kafka/common/metrics/stats/Frequencies.html#stats--"/>
        /// </summary>

        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Org.Apache.Kafka.Common.Metrics.CompoundStat.NamedMeasurable> Stats()
        {
            return IExecute<Java.Util.List<Org.Apache.Kafka.Common.Metrics.CompoundStat.NamedMeasurable>>("stats");
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}