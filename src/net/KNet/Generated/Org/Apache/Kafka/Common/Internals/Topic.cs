/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka-clients-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Common.Internals
{
    #region Topic
    public partial class Topic
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/internals/Topic.html#CLUSTER_METADATA_TOPIC_NAME"/>
        /// </summary>
        public static string CLUSTER_METADATA_TOPIC_NAME { get { return SGetField<string>(LocalBridgeClazz, "CLUSTER_METADATA_TOPIC_NAME"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/internals/Topic.html#GROUP_METADATA_TOPIC_NAME"/>
        /// </summary>
        public static string GROUP_METADATA_TOPIC_NAME { get { return SGetField<string>(LocalBridgeClazz, "GROUP_METADATA_TOPIC_NAME"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/internals/Topic.html#LEGAL_CHARS"/>
        /// </summary>
        public static string LEGAL_CHARS { get { return SGetField<string>(LocalBridgeClazz, "LEGAL_CHARS"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/internals/Topic.html#TRANSACTION_STATE_TOPIC_NAME"/>
        /// </summary>
        public static string TRANSACTION_STATE_TOPIC_NAME { get { return SGetField<string>(LocalBridgeClazz, "TRANSACTION_STATE_TOPIC_NAME"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/internals/Topic.html#CLUSTER_METADATA_TOPIC_PARTITION"/>
        /// </summary>
        public static Org.Apache.Kafka.Common.TopicPartition CLUSTER_METADATA_TOPIC_PARTITION { get { return SGetField<Org.Apache.Kafka.Common.TopicPartition>(LocalBridgeClazz, "CLUSTER_METADATA_TOPIC_PARTITION"); } }

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/internals/Topic.html#hasCollision(java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <param name="arg1"><see cref="string"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool HasCollision(string arg0, string arg1)
        {
            return SExecute<bool>(LocalBridgeClazz, "hasCollision", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/internals/Topic.html#hasCollisionChars(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool HasCollisionChars(string arg0)
        {
            return SExecute<bool>(LocalBridgeClazz, "hasCollisionChars", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/internals/Topic.html#isInternal(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool IsInternal(string arg0)
        {
            return SExecute<bool>(LocalBridgeClazz, "isInternal", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/internals/Topic.html#isValid(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool IsValid(string arg0)
        {
            return SExecute<bool>(LocalBridgeClazz, "isValid", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/internals/Topic.html#unifyCollisionChars(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <returns><see cref="string"/></returns>
        public static string UnifyCollisionChars(string arg0)
        {
            return SExecute<string>(LocalBridgeClazz, "unifyCollisionChars", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/internals/Topic.html#validate(java.lang.String,java.lang.String,java.util.function.Consumer)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        /// <param name="arg1"><see cref="string"/></param>
        /// <param name="arg2"><see cref="Java.Util.Function.Consumer"/></param>
        public static void Validate(string arg0, string arg1, Java.Util.Function.Consumer<string> arg2)
        {
            SExecute(LocalBridgeClazz, "validate", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/internals/Topic.html#validate(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="string"/></param>
        public static void Validate(string arg0)
        {
            SExecute(LocalBridgeClazz, "validate", arg0);
        }

        #endregion

        #region Instance methods

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}