/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka-clients-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Common.Record
{
    #region Records
    public partial class Records
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/Records.html#HEADER_SIZE_UP_TO_MAGIC"/>
        /// </summary>
        public static int HEADER_SIZE_UP_TO_MAGIC { get { return SGetField<int>(LocalBridgeClazz, "HEADER_SIZE_UP_TO_MAGIC"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/Records.html#LOG_OVERHEAD"/>
        /// </summary>
        public static int LOG_OVERHEAD { get { return SGetField<int>(LocalBridgeClazz, "LOG_OVERHEAD"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/Records.html#MAGIC_LENGTH"/>
        /// </summary>
        public static int MAGIC_LENGTH { get { return SGetField<int>(LocalBridgeClazz, "MAGIC_LENGTH"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/Records.html#MAGIC_OFFSET"/>
        /// </summary>
        public static int MAGIC_OFFSET { get { return SGetField<int>(LocalBridgeClazz, "MAGIC_OFFSET"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/Records.html#OFFSET_LENGTH"/>
        /// </summary>
        public static int OFFSET_LENGTH { get { return SGetField<int>(LocalBridgeClazz, "OFFSET_LENGTH"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/Records.html#OFFSET_OFFSET"/>
        /// </summary>
        public static int OFFSET_OFFSET { get { return SGetField<int>(LocalBridgeClazz, "OFFSET_OFFSET"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/Records.html#SIZE_LENGTH"/>
        /// </summary>
        public static int SIZE_LENGTH { get { return SGetField<int>(LocalBridgeClazz, "SIZE_LENGTH"); } }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/Records.html#SIZE_OFFSET"/>
        /// </summary>
        public static int SIZE_OFFSET { get { return SGetField<int>(LocalBridgeClazz, "SIZE_OFFSET"); } }

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/Records.html#hasMatchingMagic(byte)"/>
        /// </summary>
        /// <param name="arg0"><see cref="byte"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool HasMatchingMagic(byte arg0)
        {
            return IExecute<bool>("hasMatchingMagic", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/Records.html#batches()"/>
        /// </summary>

        /// <typeparam name="ReturnExtendsOrg_Apache_Kafka_Common_Record_RecordBatch"><see cref="Org.Apache.Kafka.Common.Record.RecordBatch"/></typeparam>
        /// <returns><see cref="Java.Lang.Iterable"/></returns>
        public Java.Lang.Iterable<ReturnExtendsOrg_Apache_Kafka_Common_Record_RecordBatch> Batches<ReturnExtendsOrg_Apache_Kafka_Common_Record_RecordBatch>() where ReturnExtendsOrg_Apache_Kafka_Common_Record_RecordBatch: Org.Apache.Kafka.Common.Record.RecordBatch
        {
            return IExecute<Java.Lang.Iterable<ReturnExtendsOrg_Apache_Kafka_Common_Record_RecordBatch>>("batches");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/Records.html#records()"/>
        /// </summary>

        /// <returns><see cref="Java.Lang.Iterable"/></returns>
        public Java.Lang.Iterable<Org.Apache.Kafka.Common.Record.Record> RecordsMethod()
        {
            return IExecute<Java.Lang.Iterable<Org.Apache.Kafka.Common.Record.Record>>("records");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/Records.html#downConvert(byte,long,org.apache.kafka.common.utils.Time)"/>
        /// </summary>
        /// <param name="arg0"><see cref="byte"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        /// <param name="arg2"><see cref="Org.Apache.Kafka.Common.Utils.Time"/></param>
        /// <typeparam name="ReturnExtendsOrg_Apache_Kafka_Common_Record_Records"><see cref="Org.Apache.Kafka.Common.Record.Records"/></typeparam>
        /// <returns><see cref="Org.Apache.Kafka.Common.Record.ConvertedRecords"/></returns>
        public Org.Apache.Kafka.Common.Record.ConvertedRecords<ReturnExtendsOrg_Apache_Kafka_Common_Record_Records> DownConvert<ReturnExtendsOrg_Apache_Kafka_Common_Record_Records>(byte arg0, long arg1, Org.Apache.Kafka.Common.Utils.Time arg2) where ReturnExtendsOrg_Apache_Kafka_Common_Record_Records: Org.Apache.Kafka.Common.Record.Records
        {
            return IExecute<Org.Apache.Kafka.Common.Record.ConvertedRecords<ReturnExtendsOrg_Apache_Kafka_Common_Record_Records>>("downConvert", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/Records.html#batchIterator()"/>
        /// </summary>

        /// <typeparam name="ReturnExtendsOrg_Apache_Kafka_Common_Record_RecordBatch"><see cref="Org.Apache.Kafka.Common.Record.RecordBatch"/></typeparam>
        /// <returns><see cref="Org.Apache.Kafka.Common.Utils.AbstractIterator"/></returns>
        public Org.Apache.Kafka.Common.Utils.AbstractIterator<ReturnExtendsOrg_Apache_Kafka_Common_Record_RecordBatch> BatchIterator<ReturnExtendsOrg_Apache_Kafka_Common_Record_RecordBatch>() where ReturnExtendsOrg_Apache_Kafka_Common_Record_RecordBatch: Org.Apache.Kafka.Common.Record.RecordBatch
        {
            return IExecute<Org.Apache.Kafka.Common.Utils.AbstractIterator<ReturnExtendsOrg_Apache_Kafka_Common_Record_RecordBatch>>("batchIterator");
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}