/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka-clients-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Common.Record
{
    #region AbstractRecords
    public partial class AbstractRecords
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/AbstractRecords.html#estimateSizeInBytes(byte,long,org.apache.kafka.common.record.CompressionType,java.lang.Iterable)"/>
        /// </summary>
        /// <param name="arg0"><see cref="byte"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        /// <param name="arg2"><see cref="Org.Apache.Kafka.Common.Record.CompressionType"/></param>
        /// <param name="arg3"><see cref="Java.Lang.Iterable"/></param>
        /// <returns><see cref="int"/></returns>
        public static int EstimateSizeInBytes(byte arg0, long arg1, Org.Apache.Kafka.Common.Record.CompressionType arg2, Java.Lang.Iterable<Org.Apache.Kafka.Common.Record.Record> arg3)
        {
            return SExecute<int>(LocalBridgeClazz, "estimateSizeInBytes", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/AbstractRecords.html#estimateSizeInBytes(byte,org.apache.kafka.common.record.CompressionType,java.lang.Iterable)"/>
        /// </summary>
        /// <param name="arg0"><see cref="byte"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Common.Record.CompressionType"/></param>
        /// <param name="arg2"><see cref="Java.Lang.Iterable"/></param>
        /// <returns><see cref="int"/></returns>
        public static int EstimateSizeInBytes(byte arg0, Org.Apache.Kafka.Common.Record.CompressionType arg1, Java.Lang.Iterable<Org.Apache.Kafka.Common.Record.SimpleRecord> arg2)
        {
            return SExecute<int>(LocalBridgeClazz, "estimateSizeInBytes", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/AbstractRecords.html#estimateSizeInBytesUpperBound(byte,org.apache.kafka.common.record.CompressionType,byte[],byte[],org.apache.kafka.common.header.Header[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="byte"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Common.Record.CompressionType"/></param>
        /// <param name="arg2"><see cref="byte"/></param>
        /// <param name="arg3"><see cref="byte"/></param>
        /// <param name="arg4"><see cref="Org.Apache.Kafka.Common.Header.Header"/></param>
        /// <returns><see cref="int"/></returns>
        public static int EstimateSizeInBytesUpperBound(byte arg0, Org.Apache.Kafka.Common.Record.CompressionType arg1, byte[] arg2, byte[] arg3, Org.Apache.Kafka.Common.Header.Header[] arg4)
        {
            return SExecute<int>(LocalBridgeClazz, "estimateSizeInBytesUpperBound", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/AbstractRecords.html#estimateSizeInBytesUpperBound(byte,org.apache.kafka.common.record.CompressionType,java.nio.ByteBuffer,java.nio.ByteBuffer,org.apache.kafka.common.header.Header[])"/>
        /// </summary>
        /// <param name="arg0"><see cref="byte"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Common.Record.CompressionType"/></param>
        /// <param name="arg2"><see cref="Java.Nio.ByteBuffer"/></param>
        /// <param name="arg3"><see cref="Java.Nio.ByteBuffer"/></param>
        /// <param name="arg4"><see cref="Org.Apache.Kafka.Common.Header.Header"/></param>
        /// <returns><see cref="int"/></returns>
        public static int EstimateSizeInBytesUpperBound(byte arg0, Org.Apache.Kafka.Common.Record.CompressionType arg1, Java.Nio.ByteBuffer arg2, Java.Nio.ByteBuffer arg3, Org.Apache.Kafka.Common.Header.Header[] arg4)
        {
            return SExecute<int>(LocalBridgeClazz, "estimateSizeInBytesUpperBound", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/AbstractRecords.html#recordBatchHeaderSizeInBytes(byte,org.apache.kafka.common.record.CompressionType)"/>
        /// </summary>
        /// <param name="arg0"><see cref="byte"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Common.Record.CompressionType"/></param>
        /// <returns><see cref="int"/></returns>
        public static int RecordBatchHeaderSizeInBytes(byte arg0, Org.Apache.Kafka.Common.Record.CompressionType arg1)
        {
            return SExecute<int>(LocalBridgeClazz, "recordBatchHeaderSizeInBytes", arg0, arg1);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/AbstractRecords.html#hasMatchingMagic(byte)"/>
        /// </summary>
        /// <param name="arg0"><see cref="byte"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool HasMatchingMagic(byte arg0)
        {
            return IExecute<bool>("hasMatchingMagic", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/AbstractRecords.html#records()"/>
        /// </summary>

        /// <returns><see cref="Java.Lang.Iterable"/></returns>
        public Java.Lang.Iterable<Org.Apache.Kafka.Common.Record.Record> Records()
        {
            return IExecute<Java.Lang.Iterable<Org.Apache.Kafka.Common.Record.Record>>("records");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/AbstractRecords.html#firstBatch()"/>
        /// </summary>

        /// <returns><see cref="Org.Apache.Kafka.Common.Record.RecordBatch"/></returns>
        public Org.Apache.Kafka.Common.Record.RecordBatch FirstBatch()
        {
            return IExecute<Org.Apache.Kafka.Common.Record.RecordBatch>("firstBatch");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/AbstractRecords.html#toSend()"/>
        /// </summary>

        /// <returns><see cref="Org.Apache.Kafka.Common.Record.RecordsSend"/></returns>
        public Org.Apache.Kafka.Common.Record.RecordsSend ToSend()
        {
            return IExecute<Org.Apache.Kafka.Common.Record.RecordsSend>("toSend");
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}