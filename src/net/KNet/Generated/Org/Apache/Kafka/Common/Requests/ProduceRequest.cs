/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka-clients-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Common.Requests
{
    #region ProduceRequest
    public partial class ProduceRequest
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/requests/ProduceRequest.html#%3Cinit%3E(org.apache.kafka.common.message.ProduceRequestData,short)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Message.ProduceRequestData"/></param>
        /// <param name="arg1"><see cref="short"/></param>
        public ProduceRequest(Org.Apache.Kafka.Common.Message.ProduceRequestData arg0, short arg1)
            : base(arg0, arg1)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/requests/ProduceRequest.html#requiredMagicForVersion(short)"/>
        /// </summary>
        /// <param name="arg0"><see cref="short"/></param>
        /// <returns><see cref="byte"/></returns>
        public static byte RequiredMagicForVersion(short arg0)
        {
            return SExecute<byte>(LocalBridgeClazz, "requiredMagicForVersion", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/requests/ProduceRequest.html#parse(java.nio.ByteBuffer,short)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Nio.ByteBuffer"/></param>
        /// <param name="arg1"><see cref="short"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Requests.ProduceRequest"/></returns>
        public static Org.Apache.Kafka.Common.Requests.ProduceRequest Parse(Java.Nio.ByteBuffer arg0, short arg1)
        {
            return SExecute<Org.Apache.Kafka.Common.Requests.ProduceRequest>(LocalBridgeClazz, "parse", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/requests/ProduceRequest.html#forCurrentMagic(org.apache.kafka.common.message.ProduceRequestData)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Message.ProduceRequestData"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Requests.ProduceRequest.Builder"/></returns>
        public static Org.Apache.Kafka.Common.Requests.ProduceRequest.Builder ForCurrentMagic(Org.Apache.Kafka.Common.Message.ProduceRequestData arg0)
        {
            return SExecute<Org.Apache.Kafka.Common.Requests.ProduceRequest.Builder>(LocalBridgeClazz, "forCurrentMagic", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/requests/ProduceRequest.html#forMagic(byte,org.apache.kafka.common.message.ProduceRequestData)"/>
        /// </summary>
        /// <param name="arg0"><see cref="byte"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Common.Message.ProduceRequestData"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Requests.ProduceRequest.Builder"/></returns>
        public static Org.Apache.Kafka.Common.Requests.ProduceRequest.Builder ForMagic(byte arg0, Org.Apache.Kafka.Common.Message.ProduceRequestData arg1)
        {
            return SExecute<Org.Apache.Kafka.Common.Requests.ProduceRequest.Builder>(LocalBridgeClazz, "forMagic", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/requests/ProduceRequest.html#validateRecords(short,org.apache.kafka.common.record.BaseRecords)"/>
        /// </summary>
        /// <param name="arg0"><see cref="short"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Common.Record.BaseRecords"/></param>
        public static void ValidateRecords(short arg0, Org.Apache.Kafka.Common.Record.BaseRecords arg1)
        {
            SExecute(LocalBridgeClazz, "validateRecords", arg0, arg1);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/requests/ProduceRequest.html#acks()"/> 
        /// </summary>
        public short Acks
        {
            get { return IExecute<short>("acks"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/requests/ProduceRequest.html#timeout()"/> 
        /// </summary>
        public int Timeout
        {
            get { return IExecute<int>("timeout"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/requests/ProduceRequest.html#transactionalId()"/> 
        /// </summary>
        public string TransactionalId
        {
            get { return IExecute<string>("transactionalId"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/requests/ProduceRequest.html#clearPartitionRecords()"/>
        /// </summary>
        public void ClearPartitionRecords()
        {
            IExecute("clearPartitionRecords");
        }

        #endregion

        #region Nested classes
        #region Builder
        public partial class Builder
        {
            #region Constructors
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/requests/ProduceRequest.Builder.html#%3Cinit%3E(short,short,org.apache.kafka.common.message.ProduceRequestData)"/>
            /// </summary>
            /// <param name="arg0"><see cref="short"/></param>
            /// <param name="arg1"><see cref="short"/></param>
            /// <param name="arg2"><see cref="Org.Apache.Kafka.Common.Message.ProduceRequestData"/></param>
            public Builder(short arg0, short arg1, Org.Apache.Kafka.Common.Message.ProduceRequestData arg2)
                : base(arg0, arg1, arg2)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/requests/ProduceRequest.Builder.html#buildUnsafe(short)"/>
            /// </summary>
            /// <param name="arg0"><see cref="short"/></param>
            /// <returns><see cref="Org.Apache.Kafka.Common.Requests.ProduceRequest"/></returns>
            public Org.Apache.Kafka.Common.Requests.ProduceRequest BuildUnsafe(short arg0)
            {
                return IExecute<Org.Apache.Kafka.Common.Requests.ProduceRequest>("buildUnsafe", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}