/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka-clients-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Common.Requests
{
    #region ProduceResponse
    public partial class ProduceResponse
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/requests/ProduceResponse.html#%3Cinit%3E(org.apache.kafka.common.message.ProduceResponseData)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Message.ProduceResponseData"/></param>
        public ProduceResponse(Org.Apache.Kafka.Common.Message.ProduceResponseData arg0)
            : base(arg0)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/requests/ProduceResponse.html#INVALID_OFFSET"/>
        /// </summary>
        public static long INVALID_OFFSET { get { return SGetField<long>(LocalBridgeClazz, "INVALID_OFFSET"); } }

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/requests/ProduceResponse.html#parse(java.nio.ByteBuffer,short)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Nio.ByteBuffer"/></param>
        /// <param name="arg1"><see cref="short"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Requests.ProduceResponse"/></returns>
        public static Org.Apache.Kafka.Common.Requests.ProduceResponse Parse(Java.Nio.ByteBuffer arg0, short arg1)
        {
            return SExecute<Org.Apache.Kafka.Common.Requests.ProduceResponse>(LocalBridgeClazz, "parse", arg0, arg1);
        }

        #endregion

        #region Instance methods

        #endregion

        #region Nested classes
        #region PartitionResponse
        public partial class PartitionResponse
        {
            #region Constructors
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/requests/ProduceResponse.PartitionResponse.html#%3Cinit%3E(org.apache.kafka.common.protocol.Errors,java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Protocol.Errors"/></param>
            /// <param name="arg1"><see cref="string"/></param>
            public PartitionResponse(Org.Apache.Kafka.Common.Protocol.Errors arg0, string arg1)
                : base(arg0, arg1)
            {
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/requests/ProduceResponse.PartitionResponse.html#%3Cinit%3E(org.apache.kafka.common.protocol.Errors,long,long,long,java.util.List,java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Protocol.Errors"/></param>
            /// <param name="arg1"><see cref="long"/></param>
            /// <param name="arg2"><see cref="long"/></param>
            /// <param name="arg3"><see cref="long"/></param>
            /// <param name="arg4"><see cref="Java.Util.List"/></param>
            /// <param name="arg5"><see cref="string"/></param>
            public PartitionResponse(Org.Apache.Kafka.Common.Protocol.Errors arg0, long arg1, long arg2, long arg3, Java.Util.List<Org.Apache.Kafka.Common.Requests.ProduceResponse.RecordError> arg4, string arg5)
                : base(arg0, arg1, arg2, arg3, arg4, arg5)
            {
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/requests/ProduceResponse.PartitionResponse.html#%3Cinit%3E(org.apache.kafka.common.protocol.Errors,long,long,long,java.util.List)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Protocol.Errors"/></param>
            /// <param name="arg1"><see cref="long"/></param>
            /// <param name="arg2"><see cref="long"/></param>
            /// <param name="arg3"><see cref="long"/></param>
            /// <param name="arg4"><see cref="Java.Util.List"/></param>
            public PartitionResponse(Org.Apache.Kafka.Common.Protocol.Errors arg0, long arg1, long arg2, long arg3, Java.Util.List<Org.Apache.Kafka.Common.Requests.ProduceResponse.RecordError> arg4)
                : base(arg0, arg1, arg2, arg3, arg4)
            {
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/requests/ProduceResponse.PartitionResponse.html#%3Cinit%3E(org.apache.kafka.common.protocol.Errors,long,long,long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Protocol.Errors"/></param>
            /// <param name="arg1"><see cref="long"/></param>
            /// <param name="arg2"><see cref="long"/></param>
            /// <param name="arg3"><see cref="long"/></param>
            public PartitionResponse(Org.Apache.Kafka.Common.Protocol.Errors arg0, long arg1, long arg2, long arg3)
                : base(arg0, arg1, arg2, arg3)
            {
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/requests/ProduceResponse.PartitionResponse.html#%3Cinit%3E(org.apache.kafka.common.protocol.Errors)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Protocol.Errors"/></param>
            public PartitionResponse(Org.Apache.Kafka.Common.Protocol.Errors arg0)
                : base(arg0)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/requests/ProduceResponse.PartitionResponse.html#errorMessage"/>
            /// </summary>
            public string errorMessage { get { return IGetField<string>("errorMessage"); } set { ISetField("errorMessage", value); } }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/requests/ProduceResponse.PartitionResponse.html#recordErrors"/>
            /// </summary>
            public Java.Util.List recordErrors { get { return IGetField<Java.Util.List>("recordErrors"); } set { ISetField("recordErrors", value); } }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/requests/ProduceResponse.PartitionResponse.html#baseOffset"/>
            /// </summary>
            public long baseOffset { get { return IGetField<long>("baseOffset"); } set { ISetField("baseOffset", value); } }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/requests/ProduceResponse.PartitionResponse.html#logAppendTime"/>
            /// </summary>
            public long logAppendTime { get { return IGetField<long>("logAppendTime"); } set { ISetField("logAppendTime", value); } }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/requests/ProduceResponse.PartitionResponse.html#logStartOffset"/>
            /// </summary>
            public long logStartOffset { get { return IGetField<long>("logStartOffset"); } set { ISetField("logStartOffset", value); } }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/requests/ProduceResponse.PartitionResponse.html#error"/>
            /// </summary>
            public Org.Apache.Kafka.Common.Protocol.Errors error { get { return IGetField<Org.Apache.Kafka.Common.Protocol.Errors>("error"); } set { ISetField("error", value); } }

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region RecordError
        public partial class RecordError
        {
            #region Constructors
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/requests/ProduceResponse.RecordError.html#%3Cinit%3E(int,java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            /// <param name="arg1"><see cref="string"/></param>
            public RecordError(int arg0, string arg1)
                : base(arg0, arg1)
            {
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/requests/ProduceResponse.RecordError.html#%3Cinit%3E(int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="int"/></param>
            public RecordError(int arg0)
                : base(arg0)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/requests/ProduceResponse.RecordError.html#batchIndex"/>
            /// </summary>
            public int batchIndex { get { return IGetField<int>("batchIndex"); } }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/requests/ProduceResponse.RecordError.html#message"/>
            /// </summary>
            public string message { get { return IGetField<string>("message"); } }

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}