/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka-clients-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Common.Record
{
    #region FileRecords
    public partial class FileRecords
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Org.Apache.Kafka.Common.Record.FileRecords"/> to <see cref="Java.Io.Closeable"/>
        /// </summary>
        public static implicit operator Java.Io.Closeable(Org.Apache.Kafka.Common.Record.FileRecords t) => t.Cast<Java.Io.Closeable>();

        #endregion

        #region Fields

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/FileRecords.html#open(java.io.File,boolean,boolean,int,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Io.File"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        /// <param name="arg2"><see cref="bool"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="bool"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Record.FileRecords"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        public static Org.Apache.Kafka.Common.Record.FileRecords Open(Java.Io.File arg0, bool arg1, bool arg2, int arg3, bool arg4)
        {
            return SExecute<Org.Apache.Kafka.Common.Record.FileRecords>(LocalBridgeClazz, "open", arg0, arg1, arg2, arg3, arg4);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/FileRecords.html#open(java.io.File,boolean,int,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Io.File"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        /// <param name="arg2"><see cref="int"/></param>
        /// <param name="arg3"><see cref="bool"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Record.FileRecords"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        public static Org.Apache.Kafka.Common.Record.FileRecords Open(Java.Io.File arg0, bool arg1, int arg2, bool arg3)
        {
            return SExecute<Org.Apache.Kafka.Common.Record.FileRecords>(LocalBridgeClazz, "open", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/FileRecords.html#open(java.io.File,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Io.File"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Record.FileRecords"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        public static Org.Apache.Kafka.Common.Record.FileRecords Open(Java.Io.File arg0, bool arg1)
        {
            return SExecute<Org.Apache.Kafka.Common.Record.FileRecords>(LocalBridgeClazz, "open", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/FileRecords.html#open(java.io.File)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Io.File"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Record.FileRecords"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        public static Org.Apache.Kafka.Common.Record.FileRecords Open(Java.Io.File arg0)
        {
            return SExecute<Org.Apache.Kafka.Common.Record.FileRecords>(LocalBridgeClazz, "open", arg0);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/FileRecords.html#deleteIfExists()"/>
        /// </summary>

        /// <returns><see cref="bool"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        public bool DeleteIfExists()
        {
            return IExecute<bool>("deleteIfExists");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/FileRecords.html#append(org.apache.kafka.common.record.MemoryRecords)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Record.MemoryRecords"/></param>
        /// <returns><see cref="int"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        public int Append(Org.Apache.Kafka.Common.Record.MemoryRecords arg0)
        {
            return IExecute<int>("append", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/FileRecords.html#truncateTo(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        public int TruncateTo(int arg0)
        {
            return IExecute<int>("truncateTo", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/FileRecords.html#file()"/>
        /// </summary>

        /// <returns><see cref="Java.Io.File"/></returns>
        public Java.Io.File File()
        {
            return IExecute<Java.Io.File>("file");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/FileRecords.html#batchesFrom(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Java.Lang.Iterable"/></returns>
        public Java.Lang.Iterable<Org.Apache.Kafka.Common.Record.FileLogInputStream.FileChannelRecordBatch> BatchesFrom(int arg0)
        {
            return IExecute<Java.Lang.Iterable<Org.Apache.Kafka.Common.Record.FileLogInputStream.FileChannelRecordBatch>>("batchesFrom", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/FileRecords.html#channel()"/>
        /// </summary>

        /// <returns><see cref="Java.Nio.Channels.FileChannel"/></returns>
        public Java.Nio.Channels.FileChannel Channel()
        {
            return IExecute<Java.Nio.Channels.FileChannel>("channel");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/FileRecords.html#slice(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Record.FileRecords"/></returns>
        /// <exception cref="Java.Io.IOException"/>
        public Org.Apache.Kafka.Common.Record.FileRecords Slice(int arg0, int arg1)
        {
            return IExecute<Org.Apache.Kafka.Common.Record.FileRecords>("slice", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/FileRecords.html#searchForOffsetWithSize(long,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Record.FileRecords.LogOffsetPosition"/></returns>
        public Org.Apache.Kafka.Common.Record.FileRecords.LogOffsetPosition SearchForOffsetWithSize(long arg0, int arg1)
        {
            return IExecute<Org.Apache.Kafka.Common.Record.FileRecords.LogOffsetPosition>("searchForOffsetWithSize", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/FileRecords.html#largestTimestampAfter(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Record.FileRecords.TimestampAndOffset"/></returns>
        public Org.Apache.Kafka.Common.Record.FileRecords.TimestampAndOffset LargestTimestampAfter(int arg0)
        {
            return IExecute<Org.Apache.Kafka.Common.Record.FileRecords.TimestampAndOffset>("largestTimestampAfter", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/FileRecords.html#searchForTimestamp(long,int,long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <param name="arg2"><see cref="long"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Record.FileRecords.TimestampAndOffset"/></returns>
        public Org.Apache.Kafka.Common.Record.FileRecords.TimestampAndOffset SearchForTimestamp(long arg0, int arg1, long arg2)
        {
            return IExecute<Org.Apache.Kafka.Common.Record.FileRecords.TimestampAndOffset>("searchForTimestamp", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/FileRecords.html#sliceUnaligned(int,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Record.UnalignedFileRecords"/></returns>
        public Org.Apache.Kafka.Common.Record.UnalignedFileRecords SliceUnaligned(int arg0, int arg1)
        {
            return IExecute<Org.Apache.Kafka.Common.Record.UnalignedFileRecords>("sliceUnaligned", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/FileRecords.html#close()"/>
        /// </summary>

        /// <exception cref="Java.Io.IOException"/>
        public void Close()
        {
            IExecute("close");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/FileRecords.html#closeHandlers()"/>
        /// </summary>

        /// <exception cref="Java.Io.IOException"/>
        public void CloseHandlers()
        {
            IExecute("closeHandlers");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/FileRecords.html#flush()"/>
        /// </summary>

        /// <exception cref="Java.Io.IOException"/>
        public void Flush()
        {
            IExecute("flush");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/FileRecords.html#readInto(java.nio.ByteBuffer,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Nio.ByteBuffer"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <exception cref="Java.Io.IOException"/>
        public void ReadInto(Java.Nio.ByteBuffer arg0, int arg1)
        {
            IExecute("readInto", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/FileRecords.html#renameTo(java.io.File)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Io.File"/></param>
        /// <exception cref="Java.Io.IOException"/>
        public void RenameTo(Java.Io.File arg0)
        {
            IExecute("renameTo", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/FileRecords.html#trim()"/>
        /// </summary>

        /// <exception cref="Java.Io.IOException"/>
        public void Trim()
        {
            IExecute("trim");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/FileRecords.html#updateParentDir(java.io.File)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Io.File"/></param>
        public void UpdateParentDir(Java.Io.File arg0)
        {
            IExecute("updateParentDir", arg0);
        }

        #endregion

        #region Nested classes
        #region LogOffsetPosition
        public partial class LogOffsetPosition
        {
            #region Constructors
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/FileRecords.LogOffsetPosition.html#%3Cinit%3E(long,int,int)"/>
            /// </summary>
            /// <param name="arg0"><see cref="long"/></param>
            /// <param name="arg1"><see cref="int"/></param>
            /// <param name="arg2"><see cref="int"/></param>
            public LogOffsetPosition(long arg0, int arg1, int arg2)
                : base(arg0, arg1, arg2)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/FileRecords.LogOffsetPosition.html#position"/>
            /// </summary>
            public int position { get { return IGetField<int>("position"); } }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/FileRecords.LogOffsetPosition.html#size"/>
            /// </summary>
            public int size { get { return IGetField<int>("size"); } }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/FileRecords.LogOffsetPosition.html#offset"/>
            /// </summary>
            public long offset { get { return IGetField<long>("offset"); } }

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region TimestampAndOffset
        public partial class TimestampAndOffset
        {
            #region Constructors
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/FileRecords.TimestampAndOffset.html#%3Cinit%3E(long,long,java.util.Optional)"/>
            /// </summary>
            /// <param name="arg0"><see cref="long"/></param>
            /// <param name="arg1"><see cref="long"/></param>
            /// <param name="arg2"><see cref="Java.Util.Optional"/></param>
            public TimestampAndOffset(long arg0, long arg1, Java.Util.Optional<int?> arg2)
                : base(arg0, arg1, arg2)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/FileRecords.TimestampAndOffset.html#leaderEpoch"/>
            /// </summary>
            public Java.Util.Optional leaderEpoch { get { return IGetField<Java.Util.Optional>("leaderEpoch"); } }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/FileRecords.TimestampAndOffset.html#offset"/>
            /// </summary>
            public long offset { get { return IGetField<long>("offset"); } }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-clients/3.4.0/org/apache/kafka/common/record/FileRecords.TimestampAndOffset.html#timestamp"/>
            /// </summary>
            public long timestamp { get { return IGetField<long>("timestamp"); } }

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}