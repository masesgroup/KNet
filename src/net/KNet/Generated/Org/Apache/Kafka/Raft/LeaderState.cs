/*
*  Copyright 2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.12.0)
*  using kafka-raft-4.0.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Raft
{
    #region LeaderState declaration
    /// <summary>
    /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/LeaderState.html"/>
    /// </summary>
    public partial class LeaderState : Org.Apache.Kafka.Raft.EpochState
    {
        const string _bridgeClassName = "org.apache.kafka.raft.LeaderState";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public LeaderState() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public LeaderState(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => true;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class
        #region ReplicaState declaration
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/LeaderState.ReplicaState.html"/>
        /// </summary>
        public partial class ReplicaState : Java.Lang.Comparable<Org.Apache.Kafka.Raft.LeaderState.ReplicaState>
        {
            const string _bridgeClassName = "org.apache.kafka.raft.LeaderState$ReplicaState";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public ReplicaState() { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public ReplicaState(params object[] args) : base(args) { }

            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

    
    }
    #endregion

    #region LeaderState<T> declaration
    /// <summary>
    /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/LeaderState.html"/>
    /// </summary>
    /// <typeparam name="T"></typeparam>
    public partial class LeaderState<T> : Org.Apache.Kafka.Raft.EpochState
    {
        const string _bridgeClassName = "org.apache.kafka.raft.LeaderState";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public LeaderState() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public LeaderState(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => true;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class
    
    }
    #endregion

    #region LeaderState implementation
    public partial class LeaderState
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/LeaderState.html#canGrantVote(org.apache.kafka.raft.ReplicaKey,boolean,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Raft.ReplicaKey"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        /// <param name="arg2"><see cref="bool"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool CanGrantVote(Org.Apache.Kafka.Raft.ReplicaKey arg0, bool arg1, bool arg2)
        {
            return IExecuteWithSignature<bool>("canGrantVote", "(Lorg/apache/kafka/raft/ReplicaKey;ZZ)Z", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/LeaderState.html#isOperationPending(long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsOperationPending(long arg0)
        {
            return IExecuteWithSignature<bool>("isOperationPending", "(J)Z", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/LeaderState.html#isReplicaCaughtUp(org.apache.kafka.raft.ReplicaKey,long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Raft.ReplicaKey"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsReplicaCaughtUp(Org.Apache.Kafka.Raft.ReplicaKey arg0, long arg1)
        {
            return IExecuteWithSignature<bool>("isReplicaCaughtUp", "(Lorg/apache/kafka/raft/ReplicaKey;J)Z", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/LeaderState.html#isResignRequested()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsResignRequested()
        {
            return IExecuteWithSignature<bool>("isResignRequested", "()Z");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/LeaderState.html#updateLocalState(org.apache.kafka.raft.LogOffsetMetadata,org.apache.kafka.raft.VoterSet)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Raft.LogOffsetMetadata"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Raft.VoterSet"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool UpdateLocalState(Org.Apache.Kafka.Raft.LogOffsetMetadata arg0, Org.Apache.Kafka.Raft.VoterSet arg1)
        {
            return IExecuteWithSignature<bool>("updateLocalState", "(Lorg/apache/kafka/raft/LogOffsetMetadata;Lorg/apache/kafka/raft/VoterSet;)Z", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/LeaderState.html#updateReplicaState(org.apache.kafka.raft.ReplicaKey,long,org.apache.kafka.raft.LogOffsetMetadata)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Raft.ReplicaKey"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        /// <param name="arg2"><see cref="Org.Apache.Kafka.Raft.LogOffsetMetadata"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool UpdateReplicaState(Org.Apache.Kafka.Raft.ReplicaKey arg0, long arg1, Org.Apache.Kafka.Raft.LogOffsetMetadata arg2)
        {
            return IExecuteWithSignature<bool>("updateReplicaState", "(Lorg/apache/kafka/raft/ReplicaKey;JLorg/apache/kafka/raft/LogOffsetMetadata;)Z", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/LeaderState.html#epoch()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int Epoch()
        {
            return IExecuteWithSignature<int>("epoch", "()I");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/LeaderState.html#name()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String Name()
        {
            return IExecuteWithSignature<Java.Lang.String>("name", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/LeaderState.html#nonLeaderVotersByDescendingFetchOffset()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List NonLeaderVotersByDescendingFetchOffset()
        {
            return IExecuteWithSignature<Java.Util.List>("nonLeaderVotersByDescendingFetchOffset", "()Ljava/util/List;");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/LeaderState.html#getReplicaState(org.apache.kafka.raft.ReplicaKey)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Raft.ReplicaKey"/></param>
        /// <returns><see cref="Java.Util.Optional"/></returns>
        public Java.Util.Optional GetReplicaState(Org.Apache.Kafka.Raft.ReplicaKey arg0)
        {
            return IExecuteWithSignature<Java.Util.Optional>("getReplicaState", "(Lorg/apache/kafka/raft/ReplicaKey;)Ljava/util/Optional;", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/LeaderState.html#highWatermark()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.Optional"/></returns>
        public Java.Util.Optional HighWatermark()
        {
            return IExecuteWithSignature<Java.Util.Optional>("highWatermark", "()Ljava/util/Optional;");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/LeaderState.html#grantingVoters()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.Set"/></returns>
        public Java.Util.Set GrantingVoters()
        {
            return IExecuteWithSignature<Java.Util.Set>("grantingVoters", "()Ljava/util/Set;");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/LeaderState.html#appendVotersRecord(org.apache.kafka.raft.VoterSet,long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Raft.VoterSet"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        /// <returns><see cref="long"/></returns>
        public long AppendVotersRecord(Org.Apache.Kafka.Raft.VoterSet arg0, long arg1)
        {
            return IExecuteWithSignature<long>("appendVotersRecord", "(Lorg/apache/kafka/raft/VoterSet;J)J", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/LeaderState.html#epochStartOffset()"/>
        /// </summary>
        /// <returns><see cref="long"/></returns>
        public long EpochStartOffset()
        {
            return IExecuteWithSignature<long>("epochStartOffset", "()J");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/LeaderState.html#maybeExpirePendingOperation(long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <returns><see cref="long"/></returns>
        public long MaybeExpirePendingOperation(long arg0)
        {
            return IExecuteWithSignature<long>("maybeExpirePendingOperation", "(J)J", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/LeaderState.html#timeUntilBeginQuorumEpochTimerExpires(long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <returns><see cref="long"/></returns>
        public long TimeUntilBeginQuorumEpochTimerExpires(long arg0)
        {
            return IExecuteWithSignature<long>("timeUntilBeginQuorumEpochTimerExpires", "(J)J", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/LeaderState.html#timeUntilCheckQuorumExpires(long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <returns><see cref="long"/></returns>
        public long TimeUntilCheckQuorumExpires(long arg0)
        {
            return IExecuteWithSignature<long>("timeUntilCheckQuorumExpires", "(J)J", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/LeaderState.html#election()"/>
        /// </summary>
        /// <returns><see cref="Org.Apache.Kafka.Raft.ElectionState"/></returns>
        public Org.Apache.Kafka.Raft.ElectionState Election()
        {
            return IExecuteWithSignature<Org.Apache.Kafka.Raft.ElectionState>("election", "()Lorg/apache/kafka/raft/ElectionState;");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/LeaderState.html#leaderEndpoints()"/>
        /// </summary>
        /// <returns><see cref="Org.Apache.Kafka.Raft.Endpoints"/></returns>
        public Org.Apache.Kafka.Raft.Endpoints LeaderEndpoints()
        {
            return IExecuteWithSignature<Org.Apache.Kafka.Raft.Endpoints>("leaderEndpoints", "()Lorg/apache/kafka/raft/Endpoints;");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/LeaderState.html#addAcknowledgementFrom(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void AddAcknowledgementFrom(int arg0)
        {
            IExecuteWithSignature("addAcknowledgementFrom", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/LeaderState.html#appendStartOfEpochControlRecords(org.apache.kafka.raft.VoterSet.VoterNode,long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Raft.VoterSet.VoterNode"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        public void AppendStartOfEpochControlRecords(Org.Apache.Kafka.Raft.VoterSet.VoterNode arg0, long arg1)
        {
            IExecuteWithSignature("appendStartOfEpochControlRecords", "(Lorg/apache/kafka/raft/VoterSet$VoterNode;J)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/LeaderState.html#close()"/>
        /// </summary>
        public void Close()
        {
            IExecuteWithSignature("close", "()V");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/LeaderState.html#requestResign()"/>
        /// </summary>
        public void RequestResign()
        {
            IExecuteWithSignature("requestResign", "()V");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/LeaderState.html#resetBeginQuorumEpochTimer(long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        public void ResetBeginQuorumEpochTimer(long arg0)
        {
            IExecuteWithSignature("resetBeginQuorumEpochTimer", "(J)V", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/LeaderState.html#updateCheckQuorumForFollowingVoter(org.apache.kafka.raft.ReplicaKey,long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Raft.ReplicaKey"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        public void UpdateCheckQuorumForFollowingVoter(Org.Apache.Kafka.Raft.ReplicaKey arg0, long arg1)
        {
            IExecuteWithSignature("updateCheckQuorumForFollowingVoter", "(Lorg/apache/kafka/raft/ReplicaKey;J)V", arg0, arg1);
        }

        #endregion

        #region Nested classes
        #region ReplicaState implementation
        public partial class ReplicaState
        {
            #region Constructors
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/LeaderState.ReplicaState.html#%3Cinit%3E(org.apache.kafka.raft.ReplicaKey,boolean,org.apache.kafka.raft.Endpoints)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Org.Apache.Kafka.Raft.ReplicaKey"/></param>
            /// <param name="arg1"><see cref="bool"/></param>
            /// <param name="arg2"><see cref="Org.Apache.Kafka.Raft.Endpoints"/></param>
            public ReplicaState(Org.Apache.Kafka.Raft.ReplicaKey arg0, bool arg1, Org.Apache.Kafka.Raft.Endpoints arg2)
                : base(arg0, arg1, arg2)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/LeaderState.ReplicaState.html#compareTo(java.lang.Object)"/>
            /// </summary>
            /// <param name="arg0"><see cref="object"/></param>
            /// <returns><see cref="int"/></returns>
            public int CompareTo(object arg0)
            {
                return IExecuteWithSignature<int>("compareTo", "(Ljava/lang/Object;)I", arg0);
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/LeaderState.ReplicaState.html#compareTo(org.apache.kafka.raft.LeaderState.ReplicaState)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Org.Apache.Kafka.Raft.LeaderState.ReplicaState"/></param>
            /// <returns><see cref="int"/></returns>
            public int CompareTo(Org.Apache.Kafka.Raft.LeaderState.ReplicaState arg0)
            {
                return IExecuteWithSignature<int>("compareTo", "(Lorg/apache/kafka/raft/LeaderState$ReplicaState;)I", arg0);
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/LeaderState.ReplicaState.html#endOffset()"/>
            /// </summary>
            /// <returns><see cref="Java.Util.Optional"/></returns>
            public Java.Util.Optional<Org.Apache.Kafka.Raft.LogOffsetMetadata> EndOffset()
            {
                return IExecuteWithSignature<Java.Util.Optional<Org.Apache.Kafka.Raft.LogOffsetMetadata>>("endOffset", "()Ljava/util/Optional;");
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/LeaderState.ReplicaState.html#lastCaughtUpTimestamp()"/>
            /// </summary>
            /// <returns><see cref="long"/></returns>
            public long LastCaughtUpTimestamp()
            {
                return IExecuteWithSignature<long>("lastCaughtUpTimestamp", "()J");
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/LeaderState.ReplicaState.html#lastFetchTimestamp()"/>
            /// </summary>
            /// <returns><see cref="long"/></returns>
            public long LastFetchTimestamp()
            {
                return IExecuteWithSignature<long>("lastFetchTimestamp", "()J");
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/LeaderState.ReplicaState.html#listeners()"/>
            /// </summary>
            /// <returns><see cref="Org.Apache.Kafka.Raft.Endpoints"/></returns>
            public Org.Apache.Kafka.Raft.Endpoints Listeners()
            {
                return IExecuteWithSignature<Org.Apache.Kafka.Raft.Endpoints>("listeners", "()Lorg/apache/kafka/raft/Endpoints;");
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/LeaderState.ReplicaState.html#replicaKey()"/>
            /// </summary>
            /// <returns><see cref="Org.Apache.Kafka.Raft.ReplicaKey"/></returns>
            public Org.Apache.Kafka.Raft.ReplicaKey ReplicaKey()
            {
                return IExecuteWithSignature<Org.Apache.Kafka.Raft.ReplicaKey>("replicaKey", "()Lorg/apache/kafka/raft/ReplicaKey;");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion

    #region LeaderState<T> implementation
    public partial class LeaderState<T>
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Org.Apache.Kafka.Raft.LeaderState{T}"/> to <see cref="Org.Apache.Kafka.Raft.LeaderState"/>
        /// </summary>
        public static implicit operator Org.Apache.Kafka.Raft.LeaderState(Org.Apache.Kafka.Raft.LeaderState<T> t) => t.Cast<Org.Apache.Kafka.Raft.LeaderState>();

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/LeaderState.html#canGrantVote(org.apache.kafka.raft.ReplicaKey,boolean,boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Raft.ReplicaKey"/></param>
        /// <param name="arg1"><see cref="bool"/></param>
        /// <param name="arg2"><see cref="bool"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool CanGrantVote(Org.Apache.Kafka.Raft.ReplicaKey arg0, bool arg1, bool arg2)
        {
            return IExecuteWithSignature<bool>("canGrantVote", "(Lorg/apache/kafka/raft/ReplicaKey;ZZ)Z", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/LeaderState.html#isOperationPending(long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsOperationPending(long arg0)
        {
            return IExecuteWithSignature<bool>("isOperationPending", "(J)Z", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/LeaderState.html#isReplicaCaughtUp(org.apache.kafka.raft.ReplicaKey,long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Raft.ReplicaKey"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsReplicaCaughtUp(Org.Apache.Kafka.Raft.ReplicaKey arg0, long arg1)
        {
            return IExecuteWithSignature<bool>("isReplicaCaughtUp", "(Lorg/apache/kafka/raft/ReplicaKey;J)Z", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/LeaderState.html#isResignRequested()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsResignRequested()
        {
            return IExecuteWithSignature<bool>("isResignRequested", "()Z");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/LeaderState.html#updateLocalState(org.apache.kafka.raft.LogOffsetMetadata,org.apache.kafka.raft.VoterSet)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Raft.LogOffsetMetadata"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Raft.VoterSet"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool UpdateLocalState(Org.Apache.Kafka.Raft.LogOffsetMetadata arg0, Org.Apache.Kafka.Raft.VoterSet arg1)
        {
            return IExecuteWithSignature<bool>("updateLocalState", "(Lorg/apache/kafka/raft/LogOffsetMetadata;Lorg/apache/kafka/raft/VoterSet;)Z", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/LeaderState.html#updateReplicaState(org.apache.kafka.raft.ReplicaKey,long,org.apache.kafka.raft.LogOffsetMetadata)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Raft.ReplicaKey"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        /// <param name="arg2"><see cref="Org.Apache.Kafka.Raft.LogOffsetMetadata"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool UpdateReplicaState(Org.Apache.Kafka.Raft.ReplicaKey arg0, long arg1, Org.Apache.Kafka.Raft.LogOffsetMetadata arg2)
        {
            return IExecuteWithSignature<bool>("updateReplicaState", "(Lorg/apache/kafka/raft/ReplicaKey;JLorg/apache/kafka/raft/LogOffsetMetadata;)Z", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/LeaderState.html#epoch()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int Epoch()
        {
            return IExecuteWithSignature<int>("epoch", "()I");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/LeaderState.html#name()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public Java.Lang.String Name()
        {
            return IExecuteWithSignature<Java.Lang.String>("name", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/LeaderState.html#nonLeaderVotersByDescendingFetchOffset()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.List"/></returns>
        public Java.Util.List<Org.Apache.Kafka.Raft.ReplicaKey> NonLeaderVotersByDescendingFetchOffset()
        {
            return IExecuteWithSignature<Java.Util.List<Org.Apache.Kafka.Raft.ReplicaKey>>("nonLeaderVotersByDescendingFetchOffset", "()Ljava/util/List;");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/LeaderState.html#getReplicaState(org.apache.kafka.raft.ReplicaKey)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Raft.ReplicaKey"/></param>
        /// <returns><see cref="Java.Util.Optional"/></returns>
        public Java.Util.Optional<Org.Apache.Kafka.Raft.LeaderState.ReplicaState> GetReplicaState(Org.Apache.Kafka.Raft.ReplicaKey arg0)
        {
            return IExecuteWithSignature<Java.Util.Optional<Org.Apache.Kafka.Raft.LeaderState.ReplicaState>>("getReplicaState", "(Lorg/apache/kafka/raft/ReplicaKey;)Ljava/util/Optional;", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/LeaderState.html#highWatermark()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.Optional"/></returns>
        public Java.Util.Optional<Org.Apache.Kafka.Raft.LogOffsetMetadata> HighWatermark()
        {
            return IExecuteWithSignature<Java.Util.Optional<Org.Apache.Kafka.Raft.LogOffsetMetadata>>("highWatermark", "()Ljava/util/Optional;");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/LeaderState.html#grantingVoters()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.Set"/></returns>
        public Java.Util.Set<Java.Lang.Integer> GrantingVoters()
        {
            return IExecuteWithSignature<Java.Util.Set<Java.Lang.Integer>>("grantingVoters", "()Ljava/util/Set;");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/LeaderState.html#appendVotersRecord(org.apache.kafka.raft.VoterSet,long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Raft.VoterSet"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        /// <returns><see cref="long"/></returns>
        public long AppendVotersRecord(Org.Apache.Kafka.Raft.VoterSet arg0, long arg1)
        {
            return IExecuteWithSignature<long>("appendVotersRecord", "(Lorg/apache/kafka/raft/VoterSet;J)J", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/LeaderState.html#epochStartOffset()"/>
        /// </summary>
        /// <returns><see cref="long"/></returns>
        public long EpochStartOffset()
        {
            return IExecuteWithSignature<long>("epochStartOffset", "()J");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/LeaderState.html#maybeExpirePendingOperation(long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <returns><see cref="long"/></returns>
        public long MaybeExpirePendingOperation(long arg0)
        {
            return IExecuteWithSignature<long>("maybeExpirePendingOperation", "(J)J", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/LeaderState.html#timeUntilBeginQuorumEpochTimerExpires(long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <returns><see cref="long"/></returns>
        public long TimeUntilBeginQuorumEpochTimerExpires(long arg0)
        {
            return IExecuteWithSignature<long>("timeUntilBeginQuorumEpochTimerExpires", "(J)J", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/LeaderState.html#timeUntilCheckQuorumExpires(long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <returns><see cref="long"/></returns>
        public long TimeUntilCheckQuorumExpires(long arg0)
        {
            return IExecuteWithSignature<long>("timeUntilCheckQuorumExpires", "(J)J", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/LeaderState.html#election()"/>
        /// </summary>
        /// <returns><see cref="Org.Apache.Kafka.Raft.ElectionState"/></returns>
        public Org.Apache.Kafka.Raft.ElectionState Election()
        {
            return IExecuteWithSignature<Org.Apache.Kafka.Raft.ElectionState>("election", "()Lorg/apache/kafka/raft/ElectionState;");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/LeaderState.html#leaderEndpoints()"/>
        /// </summary>
        /// <returns><see cref="Org.Apache.Kafka.Raft.Endpoints"/></returns>
        public Org.Apache.Kafka.Raft.Endpoints LeaderEndpoints()
        {
            return IExecuteWithSignature<Org.Apache.Kafka.Raft.Endpoints>("leaderEndpoints", "()Lorg/apache/kafka/raft/Endpoints;");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/LeaderState.html#addAcknowledgementFrom(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void AddAcknowledgementFrom(int arg0)
        {
            IExecuteWithSignature("addAcknowledgementFrom", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/LeaderState.html#appendStartOfEpochControlRecords(org.apache.kafka.raft.VoterSet.VoterNode,long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Raft.VoterSet.VoterNode"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        public void AppendStartOfEpochControlRecords(Org.Apache.Kafka.Raft.VoterSet.VoterNode arg0, long arg1)
        {
            IExecuteWithSignature("appendStartOfEpochControlRecords", "(Lorg/apache/kafka/raft/VoterSet$VoterNode;J)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/LeaderState.html#close()"/>
        /// </summary>
        public void Close()
        {
            IExecuteWithSignature("close", "()V");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/LeaderState.html#requestResign()"/>
        /// </summary>
        public void RequestResign()
        {
            IExecuteWithSignature("requestResign", "()V");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/LeaderState.html#resetBeginQuorumEpochTimer(long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        public void ResetBeginQuorumEpochTimer(long arg0)
        {
            IExecuteWithSignature("resetBeginQuorumEpochTimer", "(J)V", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/LeaderState.html#updateCheckQuorumForFollowingVoter(org.apache.kafka.raft.ReplicaKey,long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Raft.ReplicaKey"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        public void UpdateCheckQuorumForFollowingVoter(Org.Apache.Kafka.Raft.ReplicaKey arg0, long arg1)
        {
            IExecuteWithSignature("updateCheckQuorumForFollowingVoter", "(Lorg/apache/kafka/raft/ReplicaKey;J)V", arg0, arg1);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}