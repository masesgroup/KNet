/*
*  Copyright (c) 2021-2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.6.4.0)
*  using kafka-raft-4.1.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Raft
{
    #region MetadataLogConfig declaration
    /// <summary>
    /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/MetadataLogConfig.html"/>
    /// </summary>
    public partial class MetadataLogConfig : MASES.JCOBridge.C2JBridge.JVMBridgeBase<MetadataLogConfig>
    {
        const string _bridgeClassName = "org.apache.kafka.raft.MetadataLogConfig";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public MetadataLogConfig() { }
        /// <summary>
        /// Internal constructor: used internally from JCOBridge
        /// </summary>
        [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public MetadataLogConfig(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public MetadataLogConfig(params object[] args) : base(args) { }

        private static readonly global::System.Exception _LocalBridgeClazzException = null;
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <inheritdoc/>
        public override string BridgeClassName => _bridgeClassName;
        /// <inheritdoc/>
        public override bool IsBridgeAbstract => false;
        /// <inheritdoc/>
        public override bool IsBridgeCloseable => false;
        /// <inheritdoc/>
        public override bool IsBridgeInterface => false;
        /// <inheritdoc/>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class

    }
    #endregion

    #region MetadataLogConfig implementation
    public partial class MetadataLogConfig
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/MetadataLogConfig.html#%3Cinit%3E(org.apache.kafka.common.config.AbstractConfig)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Config.AbstractConfig"/></param>
        public MetadataLogConfig(Org.Apache.Kafka.Common.Config.AbstractConfig arg0)
            : base(arg0)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/MetadataLogConfig.html#METADATA_LOG_SEGMENT_BYTES_DEFAULT"/>
        /// </summary>
        public static int METADATA_LOG_SEGMENT_BYTES_DEFAULT { get { if (!_METADATA_LOG_SEGMENT_BYTES_DEFAULTReady) { _METADATA_LOG_SEGMENT_BYTES_DEFAULTContent = SGetField<int>(LocalBridgeClazz, "METADATA_LOG_SEGMENT_BYTES_DEFAULT"); _METADATA_LOG_SEGMENT_BYTES_DEFAULTReady = true; } return _METADATA_LOG_SEGMENT_BYTES_DEFAULTContent; } }
        private static int _METADATA_LOG_SEGMENT_BYTES_DEFAULTContent = default;
        private static bool _METADATA_LOG_SEGMENT_BYTES_DEFAULTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/MetadataLogConfig.html#METADATA_MAX_IDLE_INTERVAL_MS_DEFAULT"/>
        /// </summary>
        public static int METADATA_MAX_IDLE_INTERVAL_MS_DEFAULT { get { if (!_METADATA_MAX_IDLE_INTERVAL_MS_DEFAULTReady) { _METADATA_MAX_IDLE_INTERVAL_MS_DEFAULTContent = SGetField<int>(LocalBridgeClazz, "METADATA_MAX_IDLE_INTERVAL_MS_DEFAULT"); _METADATA_MAX_IDLE_INTERVAL_MS_DEFAULTReady = true; } return _METADATA_MAX_IDLE_INTERVAL_MS_DEFAULTContent; } }
        private static int _METADATA_MAX_IDLE_INTERVAL_MS_DEFAULTContent = default;
        private static bool _METADATA_MAX_IDLE_INTERVAL_MS_DEFAULTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/MetadataLogConfig.html#METADATA_MAX_RETENTION_BYTES_DEFAULT"/>
        /// </summary>
        public static int METADATA_MAX_RETENTION_BYTES_DEFAULT { get { if (!_METADATA_MAX_RETENTION_BYTES_DEFAULTReady) { _METADATA_MAX_RETENTION_BYTES_DEFAULTContent = SGetField<int>(LocalBridgeClazz, "METADATA_MAX_RETENTION_BYTES_DEFAULT"); _METADATA_MAX_RETENTION_BYTES_DEFAULTReady = true; } return _METADATA_MAX_RETENTION_BYTES_DEFAULTContent; } }
        private static int _METADATA_MAX_RETENTION_BYTES_DEFAULTContent = default;
        private static bool _METADATA_MAX_RETENTION_BYTES_DEFAULTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/MetadataLogConfig.html#METADATA_SNAPSHOT_MAX_NEW_RECORD_BYTES"/>
        /// </summary>
        public static int METADATA_SNAPSHOT_MAX_NEW_RECORD_BYTES { get { if (!_METADATA_SNAPSHOT_MAX_NEW_RECORD_BYTESReady) { _METADATA_SNAPSHOT_MAX_NEW_RECORD_BYTESContent = SGetField<int>(LocalBridgeClazz, "METADATA_SNAPSHOT_MAX_NEW_RECORD_BYTES"); _METADATA_SNAPSHOT_MAX_NEW_RECORD_BYTESReady = true; } return _METADATA_SNAPSHOT_MAX_NEW_RECORD_BYTESContent; } }
        private static int _METADATA_SNAPSHOT_MAX_NEW_RECORD_BYTESContent = default;
        private static bool _METADATA_SNAPSHOT_MAX_NEW_RECORD_BYTESReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/MetadataLogConfig.html#INTERNAL_METADATA_DELETE_DELAY_MILLIS_CONFIG"/>
        /// </summary>
        public static Java.Lang.String INTERNAL_METADATA_DELETE_DELAY_MILLIS_CONFIG { get { if (!_INTERNAL_METADATA_DELETE_DELAY_MILLIS_CONFIGReady) { _INTERNAL_METADATA_DELETE_DELAY_MILLIS_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "INTERNAL_METADATA_DELETE_DELAY_MILLIS_CONFIG"); _INTERNAL_METADATA_DELETE_DELAY_MILLIS_CONFIGReady = true; } return _INTERNAL_METADATA_DELETE_DELAY_MILLIS_CONFIGContent; } }
        private static Java.Lang.String _INTERNAL_METADATA_DELETE_DELAY_MILLIS_CONFIGContent = default;
        private static bool _INTERNAL_METADATA_DELETE_DELAY_MILLIS_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/MetadataLogConfig.html#INTERNAL_METADATA_DELETE_DELAY_MILLIS_DOC"/>
        /// </summary>
        public static Java.Lang.String INTERNAL_METADATA_DELETE_DELAY_MILLIS_DOC { get { if (!_INTERNAL_METADATA_DELETE_DELAY_MILLIS_DOCReady) { _INTERNAL_METADATA_DELETE_DELAY_MILLIS_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "INTERNAL_METADATA_DELETE_DELAY_MILLIS_DOC"); _INTERNAL_METADATA_DELETE_DELAY_MILLIS_DOCReady = true; } return _INTERNAL_METADATA_DELETE_DELAY_MILLIS_DOCContent; } }
        private static Java.Lang.String _INTERNAL_METADATA_DELETE_DELAY_MILLIS_DOCContent = default;
        private static bool _INTERNAL_METADATA_DELETE_DELAY_MILLIS_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/MetadataLogConfig.html#INTERNAL_METADATA_LOG_SEGMENT_BYTES_CONFIG"/>
        /// </summary>
        public static Java.Lang.String INTERNAL_METADATA_LOG_SEGMENT_BYTES_CONFIG { get { if (!_INTERNAL_METADATA_LOG_SEGMENT_BYTES_CONFIGReady) { _INTERNAL_METADATA_LOG_SEGMENT_BYTES_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "INTERNAL_METADATA_LOG_SEGMENT_BYTES_CONFIG"); _INTERNAL_METADATA_LOG_SEGMENT_BYTES_CONFIGReady = true; } return _INTERNAL_METADATA_LOG_SEGMENT_BYTES_CONFIGContent; } }
        private static Java.Lang.String _INTERNAL_METADATA_LOG_SEGMENT_BYTES_CONFIGContent = default;
        private static bool _INTERNAL_METADATA_LOG_SEGMENT_BYTES_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/MetadataLogConfig.html#INTERNAL_METADATA_LOG_SEGMENT_BYTES_DOC"/>
        /// </summary>
        public static Java.Lang.String INTERNAL_METADATA_LOG_SEGMENT_BYTES_DOC { get { if (!_INTERNAL_METADATA_LOG_SEGMENT_BYTES_DOCReady) { _INTERNAL_METADATA_LOG_SEGMENT_BYTES_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "INTERNAL_METADATA_LOG_SEGMENT_BYTES_DOC"); _INTERNAL_METADATA_LOG_SEGMENT_BYTES_DOCReady = true; } return _INTERNAL_METADATA_LOG_SEGMENT_BYTES_DOCContent; } }
        private static Java.Lang.String _INTERNAL_METADATA_LOG_SEGMENT_BYTES_DOCContent = default;
        private static bool _INTERNAL_METADATA_LOG_SEGMENT_BYTES_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/MetadataLogConfig.html#INTERNAL_METADATA_MAX_BATCH_SIZE_IN_BYTES_CONFIG"/>
        /// </summary>
        public static Java.Lang.String INTERNAL_METADATA_MAX_BATCH_SIZE_IN_BYTES_CONFIG { get { if (!_INTERNAL_METADATA_MAX_BATCH_SIZE_IN_BYTES_CONFIGReady) { _INTERNAL_METADATA_MAX_BATCH_SIZE_IN_BYTES_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "INTERNAL_METADATA_MAX_BATCH_SIZE_IN_BYTES_CONFIG"); _INTERNAL_METADATA_MAX_BATCH_SIZE_IN_BYTES_CONFIGReady = true; } return _INTERNAL_METADATA_MAX_BATCH_SIZE_IN_BYTES_CONFIGContent; } }
        private static Java.Lang.String _INTERNAL_METADATA_MAX_BATCH_SIZE_IN_BYTES_CONFIGContent = default;
        private static bool _INTERNAL_METADATA_MAX_BATCH_SIZE_IN_BYTES_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/MetadataLogConfig.html#INTERNAL_METADATA_MAX_BATCH_SIZE_IN_BYTES_DOC"/>
        /// </summary>
        public static Java.Lang.String INTERNAL_METADATA_MAX_BATCH_SIZE_IN_BYTES_DOC { get { if (!_INTERNAL_METADATA_MAX_BATCH_SIZE_IN_BYTES_DOCReady) { _INTERNAL_METADATA_MAX_BATCH_SIZE_IN_BYTES_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "INTERNAL_METADATA_MAX_BATCH_SIZE_IN_BYTES_DOC"); _INTERNAL_METADATA_MAX_BATCH_SIZE_IN_BYTES_DOCReady = true; } return _INTERNAL_METADATA_MAX_BATCH_SIZE_IN_BYTES_DOCContent; } }
        private static Java.Lang.String _INTERNAL_METADATA_MAX_BATCH_SIZE_IN_BYTES_DOCContent = default;
        private static bool _INTERNAL_METADATA_MAX_BATCH_SIZE_IN_BYTES_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/MetadataLogConfig.html#INTERNAL_METADATA_MAX_FETCH_SIZE_IN_BYTES_CONFIG"/>
        /// </summary>
        public static Java.Lang.String INTERNAL_METADATA_MAX_FETCH_SIZE_IN_BYTES_CONFIG { get { if (!_INTERNAL_METADATA_MAX_FETCH_SIZE_IN_BYTES_CONFIGReady) { _INTERNAL_METADATA_MAX_FETCH_SIZE_IN_BYTES_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "INTERNAL_METADATA_MAX_FETCH_SIZE_IN_BYTES_CONFIG"); _INTERNAL_METADATA_MAX_FETCH_SIZE_IN_BYTES_CONFIGReady = true; } return _INTERNAL_METADATA_MAX_FETCH_SIZE_IN_BYTES_CONFIGContent; } }
        private static Java.Lang.String _INTERNAL_METADATA_MAX_FETCH_SIZE_IN_BYTES_CONFIGContent = default;
        private static bool _INTERNAL_METADATA_MAX_FETCH_SIZE_IN_BYTES_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/MetadataLogConfig.html#INTERNAL_METADATA_MAX_FETCH_SIZE_IN_BYTES_DOC"/>
        /// </summary>
        public static Java.Lang.String INTERNAL_METADATA_MAX_FETCH_SIZE_IN_BYTES_DOC { get { if (!_INTERNAL_METADATA_MAX_FETCH_SIZE_IN_BYTES_DOCReady) { _INTERNAL_METADATA_MAX_FETCH_SIZE_IN_BYTES_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "INTERNAL_METADATA_MAX_FETCH_SIZE_IN_BYTES_DOC"); _INTERNAL_METADATA_MAX_FETCH_SIZE_IN_BYTES_DOCReady = true; } return _INTERNAL_METADATA_MAX_FETCH_SIZE_IN_BYTES_DOCContent; } }
        private static Java.Lang.String _INTERNAL_METADATA_MAX_FETCH_SIZE_IN_BYTES_DOCContent = default;
        private static bool _INTERNAL_METADATA_MAX_FETCH_SIZE_IN_BYTES_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/MetadataLogConfig.html#METADATA_LOG_DIR_CONFIG"/>
        /// </summary>
        public static Java.Lang.String METADATA_LOG_DIR_CONFIG { get { if (!_METADATA_LOG_DIR_CONFIGReady) { _METADATA_LOG_DIR_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "METADATA_LOG_DIR_CONFIG"); _METADATA_LOG_DIR_CONFIGReady = true; } return _METADATA_LOG_DIR_CONFIGContent; } }
        private static Java.Lang.String _METADATA_LOG_DIR_CONFIGContent = default;
        private static bool _METADATA_LOG_DIR_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/MetadataLogConfig.html#METADATA_LOG_DIR_DOC"/>
        /// </summary>
        public static Java.Lang.String METADATA_LOG_DIR_DOC { get { if (!_METADATA_LOG_DIR_DOCReady) { _METADATA_LOG_DIR_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "METADATA_LOG_DIR_DOC"); _METADATA_LOG_DIR_DOCReady = true; } return _METADATA_LOG_DIR_DOCContent; } }
        private static Java.Lang.String _METADATA_LOG_DIR_DOCContent = default;
        private static bool _METADATA_LOG_DIR_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/MetadataLogConfig.html#METADATA_LOG_SEGMENT_BYTES_CONFIG"/>
        /// </summary>
        public static Java.Lang.String METADATA_LOG_SEGMENT_BYTES_CONFIG { get { if (!_METADATA_LOG_SEGMENT_BYTES_CONFIGReady) { _METADATA_LOG_SEGMENT_BYTES_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "METADATA_LOG_SEGMENT_BYTES_CONFIG"); _METADATA_LOG_SEGMENT_BYTES_CONFIGReady = true; } return _METADATA_LOG_SEGMENT_BYTES_CONFIGContent; } }
        private static Java.Lang.String _METADATA_LOG_SEGMENT_BYTES_CONFIGContent = default;
        private static bool _METADATA_LOG_SEGMENT_BYTES_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/MetadataLogConfig.html#METADATA_LOG_SEGMENT_BYTES_DOC"/>
        /// </summary>
        public static Java.Lang.String METADATA_LOG_SEGMENT_BYTES_DOC { get { if (!_METADATA_LOG_SEGMENT_BYTES_DOCReady) { _METADATA_LOG_SEGMENT_BYTES_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "METADATA_LOG_SEGMENT_BYTES_DOC"); _METADATA_LOG_SEGMENT_BYTES_DOCReady = true; } return _METADATA_LOG_SEGMENT_BYTES_DOCContent; } }
        private static Java.Lang.String _METADATA_LOG_SEGMENT_BYTES_DOCContent = default;
        private static bool _METADATA_LOG_SEGMENT_BYTES_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/MetadataLogConfig.html#METADATA_LOG_SEGMENT_MILLIS_CONFIG"/>
        /// </summary>
        public static Java.Lang.String METADATA_LOG_SEGMENT_MILLIS_CONFIG { get { if (!_METADATA_LOG_SEGMENT_MILLIS_CONFIGReady) { _METADATA_LOG_SEGMENT_MILLIS_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "METADATA_LOG_SEGMENT_MILLIS_CONFIG"); _METADATA_LOG_SEGMENT_MILLIS_CONFIGReady = true; } return _METADATA_LOG_SEGMENT_MILLIS_CONFIGContent; } }
        private static Java.Lang.String _METADATA_LOG_SEGMENT_MILLIS_CONFIGContent = default;
        private static bool _METADATA_LOG_SEGMENT_MILLIS_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/MetadataLogConfig.html#METADATA_LOG_SEGMENT_MILLIS_DOC"/>
        /// </summary>
        public static Java.Lang.String METADATA_LOG_SEGMENT_MILLIS_DOC { get { if (!_METADATA_LOG_SEGMENT_MILLIS_DOCReady) { _METADATA_LOG_SEGMENT_MILLIS_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "METADATA_LOG_SEGMENT_MILLIS_DOC"); _METADATA_LOG_SEGMENT_MILLIS_DOCReady = true; } return _METADATA_LOG_SEGMENT_MILLIS_DOCContent; } }
        private static Java.Lang.String _METADATA_LOG_SEGMENT_MILLIS_DOCContent = default;
        private static bool _METADATA_LOG_SEGMENT_MILLIS_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/MetadataLogConfig.html#METADATA_MAX_IDLE_INTERVAL_MS_CONFIG"/>
        /// </summary>
        public static Java.Lang.String METADATA_MAX_IDLE_INTERVAL_MS_CONFIG { get { if (!_METADATA_MAX_IDLE_INTERVAL_MS_CONFIGReady) { _METADATA_MAX_IDLE_INTERVAL_MS_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "METADATA_MAX_IDLE_INTERVAL_MS_CONFIG"); _METADATA_MAX_IDLE_INTERVAL_MS_CONFIGReady = true; } return _METADATA_MAX_IDLE_INTERVAL_MS_CONFIGContent; } }
        private static Java.Lang.String _METADATA_MAX_IDLE_INTERVAL_MS_CONFIGContent = default;
        private static bool _METADATA_MAX_IDLE_INTERVAL_MS_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/MetadataLogConfig.html#METADATA_MAX_IDLE_INTERVAL_MS_DOC"/>
        /// </summary>
        public static Java.Lang.String METADATA_MAX_IDLE_INTERVAL_MS_DOC { get { if (!_METADATA_MAX_IDLE_INTERVAL_MS_DOCReady) { _METADATA_MAX_IDLE_INTERVAL_MS_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "METADATA_MAX_IDLE_INTERVAL_MS_DOC"); _METADATA_MAX_IDLE_INTERVAL_MS_DOCReady = true; } return _METADATA_MAX_IDLE_INTERVAL_MS_DOCContent; } }
        private static Java.Lang.String _METADATA_MAX_IDLE_INTERVAL_MS_DOCContent = default;
        private static bool _METADATA_MAX_IDLE_INTERVAL_MS_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/MetadataLogConfig.html#METADATA_MAX_RETENTION_BYTES_CONFIG"/>
        /// </summary>
        public static Java.Lang.String METADATA_MAX_RETENTION_BYTES_CONFIG { get { if (!_METADATA_MAX_RETENTION_BYTES_CONFIGReady) { _METADATA_MAX_RETENTION_BYTES_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "METADATA_MAX_RETENTION_BYTES_CONFIG"); _METADATA_MAX_RETENTION_BYTES_CONFIGReady = true; } return _METADATA_MAX_RETENTION_BYTES_CONFIGContent; } }
        private static Java.Lang.String _METADATA_MAX_RETENTION_BYTES_CONFIGContent = default;
        private static bool _METADATA_MAX_RETENTION_BYTES_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/MetadataLogConfig.html#METADATA_MAX_RETENTION_BYTES_DOC"/>
        /// </summary>
        public static Java.Lang.String METADATA_MAX_RETENTION_BYTES_DOC { get { if (!_METADATA_MAX_RETENTION_BYTES_DOCReady) { _METADATA_MAX_RETENTION_BYTES_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "METADATA_MAX_RETENTION_BYTES_DOC"); _METADATA_MAX_RETENTION_BYTES_DOCReady = true; } return _METADATA_MAX_RETENTION_BYTES_DOCContent; } }
        private static Java.Lang.String _METADATA_MAX_RETENTION_BYTES_DOCContent = default;
        private static bool _METADATA_MAX_RETENTION_BYTES_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/MetadataLogConfig.html#METADATA_MAX_RETENTION_MILLIS_CONFIG"/>
        /// </summary>
        public static Java.Lang.String METADATA_MAX_RETENTION_MILLIS_CONFIG { get { if (!_METADATA_MAX_RETENTION_MILLIS_CONFIGReady) { _METADATA_MAX_RETENTION_MILLIS_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "METADATA_MAX_RETENTION_MILLIS_CONFIG"); _METADATA_MAX_RETENTION_MILLIS_CONFIGReady = true; } return _METADATA_MAX_RETENTION_MILLIS_CONFIGContent; } }
        private static Java.Lang.String _METADATA_MAX_RETENTION_MILLIS_CONFIGContent = default;
        private static bool _METADATA_MAX_RETENTION_MILLIS_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/MetadataLogConfig.html#METADATA_MAX_RETENTION_MILLIS_DOC"/>
        /// </summary>
        public static Java.Lang.String METADATA_MAX_RETENTION_MILLIS_DOC { get { if (!_METADATA_MAX_RETENTION_MILLIS_DOCReady) { _METADATA_MAX_RETENTION_MILLIS_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "METADATA_MAX_RETENTION_MILLIS_DOC"); _METADATA_MAX_RETENTION_MILLIS_DOCReady = true; } return _METADATA_MAX_RETENTION_MILLIS_DOCContent; } }
        private static Java.Lang.String _METADATA_MAX_RETENTION_MILLIS_DOCContent = default;
        private static bool _METADATA_MAX_RETENTION_MILLIS_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/MetadataLogConfig.html#METADATA_SNAPSHOT_MAX_INTERVAL_MS_CONFIG"/>
        /// </summary>
        public static Java.Lang.String METADATA_SNAPSHOT_MAX_INTERVAL_MS_CONFIG { get { if (!_METADATA_SNAPSHOT_MAX_INTERVAL_MS_CONFIGReady) { _METADATA_SNAPSHOT_MAX_INTERVAL_MS_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "METADATA_SNAPSHOT_MAX_INTERVAL_MS_CONFIG"); _METADATA_SNAPSHOT_MAX_INTERVAL_MS_CONFIGReady = true; } return _METADATA_SNAPSHOT_MAX_INTERVAL_MS_CONFIGContent; } }
        private static Java.Lang.String _METADATA_SNAPSHOT_MAX_INTERVAL_MS_CONFIGContent = default;
        private static bool _METADATA_SNAPSHOT_MAX_INTERVAL_MS_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/MetadataLogConfig.html#METADATA_SNAPSHOT_MAX_INTERVAL_MS_DOC"/>
        /// </summary>
        public static Java.Lang.String METADATA_SNAPSHOT_MAX_INTERVAL_MS_DOC { get { if (!_METADATA_SNAPSHOT_MAX_INTERVAL_MS_DOCReady) { _METADATA_SNAPSHOT_MAX_INTERVAL_MS_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "METADATA_SNAPSHOT_MAX_INTERVAL_MS_DOC"); _METADATA_SNAPSHOT_MAX_INTERVAL_MS_DOCReady = true; } return _METADATA_SNAPSHOT_MAX_INTERVAL_MS_DOCContent; } }
        private static Java.Lang.String _METADATA_SNAPSHOT_MAX_INTERVAL_MS_DOCContent = default;
        private static bool _METADATA_SNAPSHOT_MAX_INTERVAL_MS_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/MetadataLogConfig.html#METADATA_SNAPSHOT_MAX_NEW_RECORD_BYTES_CONFIG"/>
        /// </summary>
        public static Java.Lang.String METADATA_SNAPSHOT_MAX_NEW_RECORD_BYTES_CONFIG { get { if (!_METADATA_SNAPSHOT_MAX_NEW_RECORD_BYTES_CONFIGReady) { _METADATA_SNAPSHOT_MAX_NEW_RECORD_BYTES_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "METADATA_SNAPSHOT_MAX_NEW_RECORD_BYTES_CONFIG"); _METADATA_SNAPSHOT_MAX_NEW_RECORD_BYTES_CONFIGReady = true; } return _METADATA_SNAPSHOT_MAX_NEW_RECORD_BYTES_CONFIGContent; } }
        private static Java.Lang.String _METADATA_SNAPSHOT_MAX_NEW_RECORD_BYTES_CONFIGContent = default;
        private static bool _METADATA_SNAPSHOT_MAX_NEW_RECORD_BYTES_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/MetadataLogConfig.html#METADATA_SNAPSHOT_MAX_NEW_RECORD_BYTES_DOC"/>
        /// </summary>
        public static Java.Lang.String METADATA_SNAPSHOT_MAX_NEW_RECORD_BYTES_DOC { get { if (!_METADATA_SNAPSHOT_MAX_NEW_RECORD_BYTES_DOCReady) { _METADATA_SNAPSHOT_MAX_NEW_RECORD_BYTES_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "METADATA_SNAPSHOT_MAX_NEW_RECORD_BYTES_DOC"); _METADATA_SNAPSHOT_MAX_NEW_RECORD_BYTES_DOCReady = true; } return _METADATA_SNAPSHOT_MAX_NEW_RECORD_BYTES_DOCContent; } }
        private static Java.Lang.String _METADATA_SNAPSHOT_MAX_NEW_RECORD_BYTES_DOCContent = default;
        private static bool _METADATA_SNAPSHOT_MAX_NEW_RECORD_BYTES_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/MetadataLogConfig.html#METADATA_LOG_SEGMENT_MILLIS_DEFAULT"/>
        /// </summary>
        public static long METADATA_LOG_SEGMENT_MILLIS_DEFAULT { get { if (!_METADATA_LOG_SEGMENT_MILLIS_DEFAULTReady) { _METADATA_LOG_SEGMENT_MILLIS_DEFAULTContent = SGetField<long>(LocalBridgeClazz, "METADATA_LOG_SEGMENT_MILLIS_DEFAULT"); _METADATA_LOG_SEGMENT_MILLIS_DEFAULTReady = true; } return _METADATA_LOG_SEGMENT_MILLIS_DEFAULTContent; } }
        private static long _METADATA_LOG_SEGMENT_MILLIS_DEFAULTContent = default;
        private static bool _METADATA_LOG_SEGMENT_MILLIS_DEFAULTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/MetadataLogConfig.html#METADATA_MAX_RETENTION_MILLIS_DEFAULT"/>
        /// </summary>
        public static long METADATA_MAX_RETENTION_MILLIS_DEFAULT { get { if (!_METADATA_MAX_RETENTION_MILLIS_DEFAULTReady) { _METADATA_MAX_RETENTION_MILLIS_DEFAULTContent = SGetField<long>(LocalBridgeClazz, "METADATA_MAX_RETENTION_MILLIS_DEFAULT"); _METADATA_MAX_RETENTION_MILLIS_DEFAULTReady = true; } return _METADATA_MAX_RETENTION_MILLIS_DEFAULTContent; } }
        private static long _METADATA_MAX_RETENTION_MILLIS_DEFAULTContent = default;
        private static bool _METADATA_MAX_RETENTION_MILLIS_DEFAULTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/MetadataLogConfig.html#METADATA_SNAPSHOT_MAX_INTERVAL_MS_DEFAULT"/>
        /// </summary>
        public static long METADATA_SNAPSHOT_MAX_INTERVAL_MS_DEFAULT { get { if (!_METADATA_SNAPSHOT_MAX_INTERVAL_MS_DEFAULTReady) { _METADATA_SNAPSHOT_MAX_INTERVAL_MS_DEFAULTContent = SGetField<long>(LocalBridgeClazz, "METADATA_SNAPSHOT_MAX_INTERVAL_MS_DEFAULT"); _METADATA_SNAPSHOT_MAX_INTERVAL_MS_DEFAULTReady = true; } return _METADATA_SNAPSHOT_MAX_INTERVAL_MS_DEFAULTContent; } }
        private static long _METADATA_SNAPSHOT_MAX_INTERVAL_MS_DEFAULTContent = default;
        private static bool _METADATA_SNAPSHOT_MAX_INTERVAL_MS_DEFAULTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/MetadataLogConfig.html#CONFIG_DEF"/>
        /// </summary>
        public static Org.Apache.Kafka.Common.Config.ConfigDef CONFIG_DEF { get { if (!_CONFIG_DEFReady) { _CONFIG_DEFContent = SGetField<Org.Apache.Kafka.Common.Config.ConfigDef>(LocalBridgeClazz, "CONFIG_DEF"); _CONFIG_DEFReady = true; } return _CONFIG_DEFContent; } }
        private static Org.Apache.Kafka.Common.Config.ConfigDef _CONFIG_DEFContent = default;
        private static bool _CONFIG_DEFReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/MetadataLogConfig.html#internalMaxBatchSizeInBytes()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int InternalMaxBatchSizeInBytes()
        {
            return IExecuteWithSignature<int>("internalMaxBatchSizeInBytes", "()I");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/MetadataLogConfig.html#internalMaxFetchSizeInBytes()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int InternalMaxFetchSizeInBytes()
        {
            return IExecuteWithSignature<int>("internalMaxFetchSizeInBytes", "()I");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/MetadataLogConfig.html#logSegmentBytes()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int LogSegmentBytes()
        {
            return IExecuteWithSignature<int>("logSegmentBytes", "()I");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/MetadataLogConfig.html#internalSegmentBytes()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.Integer"/></returns>
        public Java.Lang.Integer InternalSegmentBytes()
        {
            return IExecuteWithSignature<Java.Lang.Integer>("internalSegmentBytes", "()Ljava/lang/Integer;");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/MetadataLogConfig.html#internalDeleteDelayMillis()"/>
        /// </summary>
        /// <returns><see cref="long"/></returns>
        public long InternalDeleteDelayMillis()
        {
            return IExecuteWithSignature<long>("internalDeleteDelayMillis", "()J");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/MetadataLogConfig.html#logSegmentMillis()"/>
        /// </summary>
        /// <returns><see cref="long"/></returns>
        public long LogSegmentMillis()
        {
            return IExecuteWithSignature<long>("logSegmentMillis", "()J");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/MetadataLogConfig.html#retentionMaxBytes()"/>
        /// </summary>
        /// <returns><see cref="long"/></returns>
        public long RetentionMaxBytes()
        {
            return IExecuteWithSignature<long>("retentionMaxBytes", "()J");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/MetadataLogConfig.html#retentionMillis()"/>
        /// </summary>
        /// <returns><see cref="long"/></returns>
        public long RetentionMillis()
        {
            return IExecuteWithSignature<long>("retentionMillis", "()J");
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}