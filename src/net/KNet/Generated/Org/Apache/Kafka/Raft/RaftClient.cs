/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.2.4.0)
*  using kafka-raft-3.6.1.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Raft
{
    #region RaftClient
    public partial class RaftClient
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.6.1/org/apache/kafka/raft/RaftClient.html#shutdown-int-"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Java.Util.Concurrent.CompletableFuture"/></returns>
        public Java.Util.Concurrent.CompletableFuture Shutdown(int arg0)
        {
            return IExecute<Java.Util.Concurrent.CompletableFuture>("shutdown", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.6.1/org/apache/kafka/raft/RaftClient.html#latestSnapshotId--"/>
        /// </summary>

        /// <returns><see cref="Java.Util.Optional"/></returns>
        public Java.Util.Optional LatestSnapshotId()
        {
            return IExecute<Java.Util.Optional>("latestSnapshotId");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.6.1/org/apache/kafka/raft/RaftClient.html#createSnapshot-org.apache.kafka.raft.OffsetAndEpoch-long-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Raft.OffsetAndEpoch"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        /// <returns><see cref="Java.Util.Optional"/></returns>
        public Java.Util.Optional CreateSnapshot(Org.Apache.Kafka.Raft.OffsetAndEpoch arg0, long arg1)
        {
            return IExecute<Java.Util.Optional>("createSnapshot", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.6.1/org/apache/kafka/raft/RaftClient.html#nodeId--"/>
        /// </summary>

        /// <returns><see cref="Java.Util.OptionalInt"/></returns>
        public Java.Util.OptionalInt NodeId()
        {
            return IExecute<Java.Util.OptionalInt>("nodeId");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.6.1/org/apache/kafka/raft/RaftClient.html#highWatermark--"/>
        /// </summary>

        /// <returns><see cref="Java.Util.OptionalLong"/></returns>
        public Java.Util.OptionalLong HighWatermark()
        {
            return IExecute<Java.Util.OptionalLong>("highWatermark");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.6.1/org/apache/kafka/raft/RaftClient.html#logEndOffset--"/>
        /// </summary>

        /// <returns><see cref="long"/></returns>
        public long LogEndOffset()
        {
            return IExecute<long>("logEndOffset");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.6.1/org/apache/kafka/raft/RaftClient.html#scheduleAppend-int-java.util.List-"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Util.List"/></param>
        /// <returns><see cref="long"/></returns>
        public long ScheduleAppend(int arg0, Java.Util.List arg1)
        {
            return IExecute<long>("scheduleAppend", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.6.1/org/apache/kafka/raft/RaftClient.html#scheduleAtomicAppend-int-java.util.OptionalLong-java.util.List-"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Util.OptionalLong"/></param>
        /// <param name="arg2"><see cref="Java.Util.List"/></param>
        /// <returns><see cref="long"/></returns>
        public long ScheduleAtomicAppend(int arg0, Java.Util.OptionalLong arg1, Java.Util.List arg2)
        {
            return IExecute<long>("scheduleAtomicAppend", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.6.1/org/apache/kafka/raft/RaftClient.html#leaderAndEpoch--"/>
        /// </summary>

        /// <returns><see cref="Org.Apache.Kafka.Raft.LeaderAndEpoch"/></returns>
        public Org.Apache.Kafka.Raft.LeaderAndEpoch LeaderAndEpoch()
        {
            return IExecute<Org.Apache.Kafka.Raft.LeaderAndEpoch>("leaderAndEpoch");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.6.1/org/apache/kafka/raft/RaftClient.html#initialize--"/>
        /// </summary>
        public void Initialize()
        {
            IExecute("initialize");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.6.1/org/apache/kafka/raft/RaftClient.html#register-org.apache.kafka.raft.RaftClient.Listener-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Raft.RaftClient.Listener"/></param>
        public void Register(Org.Apache.Kafka.Raft.RaftClient.Listener arg0)
        {
            IExecute("register", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.6.1/org/apache/kafka/raft/RaftClient.html#resign-int-"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void Resign(int arg0)
        {
            IExecute("resign", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.6.1/org/apache/kafka/raft/RaftClient.html#unregister-org.apache.kafka.raft.RaftClient.Listener-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Raft.RaftClient.Listener"/></param>
        public void Unregister(Org.Apache.Kafka.Raft.RaftClient.Listener arg0)
        {
            IExecute("unregister", arg0);
        }

        #endregion

        #region Nested classes
        #region Listener
        public partial class Listener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="Listener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("handleCommit", new System.EventHandler<CLRListenerEventArgs<CLREventData<Org.Apache.Kafka.Raft.BatchReader>>>(HandleCommitEventHandler));
                AddEventHandler("handleLoadSnapshot", new System.EventHandler<CLRListenerEventArgs<CLREventData<Org.Apache.Kafka.Snapshot.SnapshotReader>>>(HandleLoadSnapshotEventHandler));
                AddEventHandler("beginShutdown", new System.EventHandler<CLRListenerEventArgs<CLREventData>>(BeginShutdownEventHandler));
                AddEventHandler("handleLeaderChange", new System.EventHandler<CLRListenerEventArgs<CLREventData<Org.Apache.Kafka.Raft.LeaderAndEpoch>>>(HandleLeaderChangeEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.6.1/org/apache/kafka/raft/RaftClient.Listener.html#handleCommit-org.apache.kafka.raft.BatchReader-"/>
            /// </summary>
            /// <remarks>If <see cref="OnHandleCommit"/> has a value it takes precedence over corresponding class method</remarks>
            public System.Action<Org.Apache.Kafka.Raft.BatchReader> OnHandleCommit { get; set; } = null;

            void HandleCommitEventHandler(object sender, CLRListenerEventArgs<CLREventData<Org.Apache.Kafka.Raft.BatchReader>> data)
            {
                var methodToExecute = (OnHandleCommit != null) ? OnHandleCommit : HandleCommit;
                methodToExecute.Invoke(data.EventData.TypedEventData);
            }

            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.6.1/org/apache/kafka/raft/RaftClient.Listener.html#handleCommit-org.apache.kafka.raft.BatchReader-"/>
            /// </summary>
            /// <param name="arg0"><see cref="Org.Apache.Kafka.Raft.BatchReader"/></param>
            public virtual void HandleCommit(Org.Apache.Kafka.Raft.BatchReader arg0)
            {
                
            }

            /// <summary>
            /// Handler for <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.6.1/org/apache/kafka/raft/RaftClient.Listener.html#handleLoadSnapshot-org.apache.kafka.snapshot.SnapshotReader-"/>
            /// </summary>
            /// <remarks>If <see cref="OnHandleLoadSnapshot"/> has a value it takes precedence over corresponding class method</remarks>
            public System.Action<Org.Apache.Kafka.Snapshot.SnapshotReader> OnHandleLoadSnapshot { get; set; } = null;

            void HandleLoadSnapshotEventHandler(object sender, CLRListenerEventArgs<CLREventData<Org.Apache.Kafka.Snapshot.SnapshotReader>> data)
            {
                var methodToExecute = (OnHandleLoadSnapshot != null) ? OnHandleLoadSnapshot : HandleLoadSnapshot;
                methodToExecute.Invoke(data.EventData.TypedEventData);
            }

            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.6.1/org/apache/kafka/raft/RaftClient.Listener.html#handleLoadSnapshot-org.apache.kafka.snapshot.SnapshotReader-"/>
            /// </summary>
            /// <param name="arg0"><see cref="Org.Apache.Kafka.Snapshot.SnapshotReader"/></param>
            public virtual void HandleLoadSnapshot(Org.Apache.Kafka.Snapshot.SnapshotReader arg0)
            {
                
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.6.1/org/apache/kafka/raft/RaftClient.Listener.html#beginShutdown--"/>
            /// </summary>
            /// <remarks>The method invokes the default implementation in the JVM interface</remarks>
            public void BeginShutdownDefault()
            {
                IExecute("beginShutdownDefault");
            }

            /// <summary>
            /// Handler for <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.6.1/org/apache/kafka/raft/RaftClient.Listener.html#beginShutdown--"/>
            /// </summary>
            /// <remarks>If <see cref="OnBeginShutdown"/> has a value it takes precedence over corresponding class method</remarks>
            public System.Action OnBeginShutdown { get; set; } = null;

            void BeginShutdownEventHandler(object sender, CLRListenerEventArgs<CLREventData> data)
            {
                var methodToExecute = (OnBeginShutdown != null) ? OnBeginShutdown : BeginShutdown;
                methodToExecute.Invoke();
            }

            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.6.1/org/apache/kafka/raft/RaftClient.Listener.html#beginShutdown--"/>
            /// </summary>
            /// <remarks>The method invokes the default implementation in the JVM interface using <see cref="BeginShutdownDefault"/>; override the method to implement a different behavior</remarks>
            public virtual void BeginShutdown()
            {
                BeginShutdownDefault();
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.6.1/org/apache/kafka/raft/RaftClient.Listener.html#handleLeaderChange-org.apache.kafka.raft.LeaderAndEpoch-"/>
            /// </summary>
            /// <param name="arg0"><see cref="Org.Apache.Kafka.Raft.LeaderAndEpoch"/></param>
            /// <remarks>The method invokes the default implementation in the JVM interface</remarks>
            public void HandleLeaderChangeDefault(Org.Apache.Kafka.Raft.LeaderAndEpoch arg0)
            {
                IExecute("handleLeaderChangeDefault", arg0);
            }

            /// <summary>
            /// Handler for <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.6.1/org/apache/kafka/raft/RaftClient.Listener.html#handleLeaderChange-org.apache.kafka.raft.LeaderAndEpoch-"/>
            /// </summary>
            /// <remarks>If <see cref="OnHandleLeaderChange"/> has a value it takes precedence over corresponding class method</remarks>
            public System.Action<Org.Apache.Kafka.Raft.LeaderAndEpoch> OnHandleLeaderChange { get; set; } = null;

            void HandleLeaderChangeEventHandler(object sender, CLRListenerEventArgs<CLREventData<Org.Apache.Kafka.Raft.LeaderAndEpoch>> data)
            {
                var methodToExecute = (OnHandleLeaderChange != null) ? OnHandleLeaderChange : HandleLeaderChange;
                methodToExecute.Invoke(data.EventData.TypedEventData);
            }

            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.6.1/org/apache/kafka/raft/RaftClient.Listener.html#handleLeaderChange-org.apache.kafka.raft.LeaderAndEpoch-"/>
            /// </summary>
            /// <param name="arg0"><see cref="Org.Apache.Kafka.Raft.LeaderAndEpoch"/></param>
            /// <remarks>The method invokes the default implementation in the JVM interface using <see cref="HandleLeaderChangeDefault"/>; override the method to implement a different behavior</remarks>
            public virtual void HandleLeaderChange(Org.Apache.Kafka.Raft.LeaderAndEpoch arg0)
            {
                HandleLeaderChangeDefault(arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region Listener<T>
        public partial class Listener<T>
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="Listener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("handleCommit", new System.EventHandler<CLRListenerEventArgs<CLREventData<Org.Apache.Kafka.Raft.BatchReader<T>>>>(HandleCommitEventHandler));
                AddEventHandler("handleLoadSnapshot", new System.EventHandler<CLRListenerEventArgs<CLREventData<Org.Apache.Kafka.Snapshot.SnapshotReader<T>>>>(HandleLoadSnapshotEventHandler));
                AddEventHandler("beginShutdown", new System.EventHandler<CLRListenerEventArgs<CLREventData>>(BeginShutdownEventHandler));
                AddEventHandler("handleLeaderChange", new System.EventHandler<CLRListenerEventArgs<CLREventData<Org.Apache.Kafka.Raft.LeaderAndEpoch>>>(HandleLeaderChangeEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.6.1/org/apache/kafka/raft/RaftClient.Listener.html#handleCommit-org.apache.kafka.raft.BatchReader-"/>
            /// </summary>
            /// <remarks>If <see cref="OnHandleCommit"/> has a value it takes precedence over corresponding class method</remarks>
            public System.Action<Org.Apache.Kafka.Raft.BatchReader<T>> OnHandleCommit { get; set; } = null;

            void HandleCommitEventHandler(object sender, CLRListenerEventArgs<CLREventData<Org.Apache.Kafka.Raft.BatchReader<T>>> data)
            {
                var methodToExecute = (OnHandleCommit != null) ? OnHandleCommit : HandleCommit;
                methodToExecute.Invoke(data.EventData.TypedEventData);
            }

            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.6.1/org/apache/kafka/raft/RaftClient.Listener.html#handleCommit-org.apache.kafka.raft.BatchReader-"/>
            /// </summary>
            /// <param name="arg0"><see cref="Org.Apache.Kafka.Raft.BatchReader"/></param>
            public virtual void HandleCommit(Org.Apache.Kafka.Raft.BatchReader<T> arg0)
            {
                
            }

            /// <summary>
            /// Handler for <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.6.1/org/apache/kafka/raft/RaftClient.Listener.html#handleLoadSnapshot-org.apache.kafka.snapshot.SnapshotReader-"/>
            /// </summary>
            /// <remarks>If <see cref="OnHandleLoadSnapshot"/> has a value it takes precedence over corresponding class method</remarks>
            public System.Action<Org.Apache.Kafka.Snapshot.SnapshotReader<T>> OnHandleLoadSnapshot { get; set; } = null;

            void HandleLoadSnapshotEventHandler(object sender, CLRListenerEventArgs<CLREventData<Org.Apache.Kafka.Snapshot.SnapshotReader<T>>> data)
            {
                var methodToExecute = (OnHandleLoadSnapshot != null) ? OnHandleLoadSnapshot : HandleLoadSnapshot;
                methodToExecute.Invoke(data.EventData.TypedEventData);
            }

            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.6.1/org/apache/kafka/raft/RaftClient.Listener.html#handleLoadSnapshot-org.apache.kafka.snapshot.SnapshotReader-"/>
            /// </summary>
            /// <param name="arg0"><see cref="Org.Apache.Kafka.Snapshot.SnapshotReader"/></param>
            public virtual void HandleLoadSnapshot(Org.Apache.Kafka.Snapshot.SnapshotReader<T> arg0)
            {
                
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.6.1/org/apache/kafka/raft/RaftClient.Listener.html#beginShutdown--"/>
            /// </summary>
            /// <remarks>The method invokes the default implementation in the JVM interface</remarks>
            public void BeginShutdownDefault()
            {
                IExecute("beginShutdownDefault");
            }

            /// <summary>
            /// Handler for <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.6.1/org/apache/kafka/raft/RaftClient.Listener.html#beginShutdown--"/>
            /// </summary>
            /// <remarks>If <see cref="OnBeginShutdown"/> has a value it takes precedence over corresponding class method</remarks>
            public System.Action OnBeginShutdown { get; set; } = null;

            void BeginShutdownEventHandler(object sender, CLRListenerEventArgs<CLREventData> data)
            {
                var methodToExecute = (OnBeginShutdown != null) ? OnBeginShutdown : BeginShutdown;
                methodToExecute.Invoke();
            }

            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.6.1/org/apache/kafka/raft/RaftClient.Listener.html#beginShutdown--"/>
            /// </summary>
            /// <remarks>The method invokes the default implementation in the JVM interface using <see cref="BeginShutdownDefault"/>; override the method to implement a different behavior</remarks>
            public virtual void BeginShutdown()
            {
                BeginShutdownDefault();
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.6.1/org/apache/kafka/raft/RaftClient.Listener.html#handleLeaderChange-org.apache.kafka.raft.LeaderAndEpoch-"/>
            /// </summary>
            /// <param name="arg0"><see cref="Org.Apache.Kafka.Raft.LeaderAndEpoch"/></param>
            /// <remarks>The method invokes the default implementation in the JVM interface</remarks>
            public void HandleLeaderChangeDefault(Org.Apache.Kafka.Raft.LeaderAndEpoch arg0)
            {
                IExecute("handleLeaderChangeDefault", arg0);
            }

            /// <summary>
            /// Handler for <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.6.1/org/apache/kafka/raft/RaftClient.Listener.html#handleLeaderChange-org.apache.kafka.raft.LeaderAndEpoch-"/>
            /// </summary>
            /// <remarks>If <see cref="OnHandleLeaderChange"/> has a value it takes precedence over corresponding class method</remarks>
            public System.Action<Org.Apache.Kafka.Raft.LeaderAndEpoch> OnHandleLeaderChange { get; set; } = null;

            void HandleLeaderChangeEventHandler(object sender, CLRListenerEventArgs<CLREventData<Org.Apache.Kafka.Raft.LeaderAndEpoch>> data)
            {
                var methodToExecute = (OnHandleLeaderChange != null) ? OnHandleLeaderChange : HandleLeaderChange;
                methodToExecute.Invoke(data.EventData.TypedEventData);
            }

            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.6.1/org/apache/kafka/raft/RaftClient.Listener.html#handleLeaderChange-org.apache.kafka.raft.LeaderAndEpoch-"/>
            /// </summary>
            /// <param name="arg0"><see cref="Org.Apache.Kafka.Raft.LeaderAndEpoch"/></param>
            /// <remarks>The method invokes the default implementation in the JVM interface using <see cref="HandleLeaderChangeDefault"/>; override the method to implement a different behavior</remarks>
            public virtual void HandleLeaderChange(Org.Apache.Kafka.Raft.LeaderAndEpoch arg0)
            {
                HandleLeaderChangeDefault(arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion

    #region IRaftClient<T>
    /// <summary>
    /// .NET interface for TO BE DEFINED FROM USER
    /// </summary>
    public partial interface IRaftClient<T> : Java.Lang.IAutoCloseable
    {
        #region Instance methods

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion

    #region RaftClient<T>
    public partial class RaftClient<T> : Org.Apache.Kafka.Raft.IRaftClient<T>
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Org.Apache.Kafka.Raft.RaftClient{T}"/> to <see cref="Org.Apache.Kafka.Raft.RaftClient"/>
        /// </summary>
        public static implicit operator Org.Apache.Kafka.Raft.RaftClient(Org.Apache.Kafka.Raft.RaftClient<T> t) => t.Cast<Org.Apache.Kafka.Raft.RaftClient>();

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.6.1/org/apache/kafka/raft/RaftClient.html#shutdown-int-"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Java.Util.Concurrent.CompletableFuture"/></returns>
        public Java.Util.Concurrent.CompletableFuture<Java.Lang.Void> Shutdown(int arg0)
        {
            return IExecute<Java.Util.Concurrent.CompletableFuture<Java.Lang.Void>>("shutdown", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.6.1/org/apache/kafka/raft/RaftClient.html#latestSnapshotId--"/>
        /// </summary>

        /// <returns><see cref="Java.Util.Optional"/></returns>
        public Java.Util.Optional<Org.Apache.Kafka.Raft.OffsetAndEpoch> LatestSnapshotId()
        {
            return IExecute<Java.Util.Optional<Org.Apache.Kafka.Raft.OffsetAndEpoch>>("latestSnapshotId");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.6.1/org/apache/kafka/raft/RaftClient.html#createSnapshot-org.apache.kafka.raft.OffsetAndEpoch-long-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Raft.OffsetAndEpoch"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        /// <returns><see cref="Java.Util.Optional"/></returns>
        public Java.Util.Optional<Org.Apache.Kafka.Snapshot.SnapshotWriter<T>> CreateSnapshot(Org.Apache.Kafka.Raft.OffsetAndEpoch arg0, long arg1)
        {
            return IExecute<Java.Util.Optional<Org.Apache.Kafka.Snapshot.SnapshotWriter<T>>>("createSnapshot", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.6.1/org/apache/kafka/raft/RaftClient.html#nodeId--"/>
        /// </summary>

        /// <returns><see cref="Java.Util.OptionalInt"/></returns>
        public Java.Util.OptionalInt NodeId()
        {
            return IExecute<Java.Util.OptionalInt>("nodeId");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.6.1/org/apache/kafka/raft/RaftClient.html#highWatermark--"/>
        /// </summary>

        /// <returns><see cref="Java.Util.OptionalLong"/></returns>
        public Java.Util.OptionalLong HighWatermark()
        {
            return IExecute<Java.Util.OptionalLong>("highWatermark");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.6.1/org/apache/kafka/raft/RaftClient.html#logEndOffset--"/>
        /// </summary>

        /// <returns><see cref="long"/></returns>
        public long LogEndOffset()
        {
            return IExecute<long>("logEndOffset");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.6.1/org/apache/kafka/raft/RaftClient.html#scheduleAppend-int-java.util.List-"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Util.List"/></param>
        /// <returns><see cref="long"/></returns>
        public long ScheduleAppend(int arg0, Java.Util.List<T> arg1)
        {
            return IExecute<long>("scheduleAppend", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.6.1/org/apache/kafka/raft/RaftClient.html#scheduleAtomicAppend-int-java.util.OptionalLong-java.util.List-"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Util.OptionalLong"/></param>
        /// <param name="arg2"><see cref="Java.Util.List"/></param>
        /// <returns><see cref="long"/></returns>
        public long ScheduleAtomicAppend(int arg0, Java.Util.OptionalLong arg1, Java.Util.List<T> arg2)
        {
            return IExecute<long>("scheduleAtomicAppend", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.6.1/org/apache/kafka/raft/RaftClient.html#leaderAndEpoch--"/>
        /// </summary>

        /// <returns><see cref="Org.Apache.Kafka.Raft.LeaderAndEpoch"/></returns>
        public Org.Apache.Kafka.Raft.LeaderAndEpoch LeaderAndEpoch()
        {
            return IExecute<Org.Apache.Kafka.Raft.LeaderAndEpoch>("leaderAndEpoch");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.6.1/org/apache/kafka/raft/RaftClient.html#initialize--"/>
        /// </summary>
        public void Initialize()
        {
            IExecute("initialize");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.6.1/org/apache/kafka/raft/RaftClient.html#register-org.apache.kafka.raft.RaftClient.Listener-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Raft.RaftClient.Listener"/></param>
        public void Register(Org.Apache.Kafka.Raft.RaftClient.Listener<T> arg0)
        {
            IExecute("register", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.6.1/org/apache/kafka/raft/RaftClient.html#resign-int-"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void Resign(int arg0)
        {
            IExecute("resign", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.6.1/org/apache/kafka/raft/RaftClient.html#unregister-org.apache.kafka.raft.RaftClient.Listener-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Raft.RaftClient.Listener"/></param>
        public void Unregister(Org.Apache.Kafka.Raft.RaftClient.Listener<T> arg0)
        {
            IExecute("unregister", arg0);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}