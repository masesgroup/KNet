/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.11.0)
*  using kafka-raft-3.9.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Raft
{
    #region RaftClient declaration
    /// <summary>
    /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.9.0/org/apache/kafka/raft/RaftClient.html"/>
    /// </summary>
    public partial class RaftClient : Java.Lang.AutoCloseable
    {
        const string _bridgeClassName = "org.apache.kafka.raft.RaftClient";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        [global::System.Obsolete("RaftClient class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public RaftClient() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        [global::System.Obsolete("RaftClient class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public RaftClient(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => true;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => true;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class
        #region Listener declaration
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.9.0/org/apache/kafka/raft/RaftClient.Listener.html"/>
        /// </summary>
        public partial class Listener : MASES.JCOBridge.C2JBridge.JVMBridgeListener
        {
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public Listener() { InitializeHandlers(); }

            const string _bridgeClassName = "org.mases.knet.generated.org.apache.kafka.raft.RaftClient_Listener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
            
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;

        
            // TODO: complete the class

        }
        #endregion

        #region ListenerDirect declaration
        /// <summary>
        /// Direct override of <see cref="Listener"/> or its generic type if there is one
        /// </summary>
        public partial class ListenerDirect : Listener
        {
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_AutoInit.htm"/>
            /// </summary>
            public override bool AutoInit => false;

            /// <inheritdoc />
            protected override void InitializeHandlers() { }

            const string _bridgeClassName = "org.apache.kafka.raft.RaftClient$Listener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        }
        #endregion

        #region Listener<T> declaration
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.9.0/org/apache/kafka/raft/RaftClient.Listener.html"/>
        /// </summary>
        /// <typeparam name="T"></typeparam>
        public partial class Listener<T> : MASES.JCOBridge.C2JBridge.JVMBridgeListener
        {
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public Listener() { InitializeHandlers(); }

            const string _bridgeClassName = "org.mases.knet.generated.org.apache.kafka.raft.RaftClient_Listener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");
            
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;

        
            // TODO: complete the class

        }
        #endregion

        #region ListenerDirect<T> declaration
        /// <summary>
        /// Direct override of <see cref="Listener"/> or its generic type if there is one
        /// </summary>
        public partial class ListenerDirect<T> : Listener<T>
        {
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_AutoInit.htm"/>
            /// </summary>
            public override bool AutoInit => false;

            /// <inheritdoc />
            protected override void InitializeHandlers() { }

            const string _bridgeClassName = "org.apache.kafka.raft.RaftClient$Listener";
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeListener_BridgeClassName.htm"/>
            /// </summary>
            public override string BridgeClassName => _bridgeClassName;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
            /// </summary>
            public override bool IsBridgeAbstract => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
            /// </summary>
            public override bool IsBridgeCloseable => false;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
            /// </summary>
            public override bool IsBridgeInterface => true;
            /// <summary>
            /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
            /// </summary>
            public override bool IsBridgeStatic => true;
        }
        #endregion

    
    }
    #endregion

    #region RaftClient<T> declaration
    /// <summary>
    /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.9.0/org/apache/kafka/raft/RaftClient.html"/>
    /// </summary>
    /// <typeparam name="T"></typeparam>
    public partial class RaftClient<T> : Java.Lang.AutoCloseable
    {
        const string _bridgeClassName = "org.apache.kafka.raft.RaftClient";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        [global::System.Obsolete("RaftClient class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public RaftClient() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        [global::System.Obsolete("RaftClient class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public RaftClient(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => true;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => true;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class
    
    }
    #endregion

    #region RaftClient implementation
    public partial class RaftClient
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.9.0/org/apache/kafka/raft/RaftClient.html#shutdown-int-"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Java.Util.Concurrent.CompletableFuture"/></returns>
        public Java.Util.Concurrent.CompletableFuture Shutdown(int arg0)
        {
            return IExecuteWithSignature<Java.Util.Concurrent.CompletableFuture>("shutdown", "(I)Ljava/util/concurrent/CompletableFuture;", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.9.0/org/apache/kafka/raft/RaftClient.html#latestSnapshotId--"/>
        /// </summary>
        /// <returns><see cref="Java.Util.Optional"/></returns>
        public Java.Util.Optional LatestSnapshotId()
        {
            return IExecuteWithSignature<Java.Util.Optional>("latestSnapshotId", "()Ljava/util/Optional;");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.9.0/org/apache/kafka/raft/RaftClient.html#createSnapshot-org.apache.kafka.raft.OffsetAndEpoch-long-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Raft.OffsetAndEpoch"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        /// <returns><see cref="Java.Util.Optional"/></returns>
        public Java.Util.Optional CreateSnapshot(Org.Apache.Kafka.Raft.OffsetAndEpoch arg0, long arg1)
        {
            return IExecuteWithSignature<Java.Util.Optional>("createSnapshot", "(Lorg/apache/kafka/raft/OffsetAndEpoch;J)Ljava/util/Optional;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.9.0/org/apache/kafka/raft/RaftClient.html#nodeId--"/>
        /// </summary>
        /// <returns><see cref="Java.Util.OptionalInt"/></returns>
        public Java.Util.OptionalInt NodeId()
        {
            return IExecuteWithSignature<Java.Util.OptionalInt>("nodeId", "()Ljava/util/OptionalInt;");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.9.0/org/apache/kafka/raft/RaftClient.html#highWatermark--"/>
        /// </summary>
        /// <returns><see cref="Java.Util.OptionalLong"/></returns>
        public Java.Util.OptionalLong HighWatermark()
        {
            return IExecuteWithSignature<Java.Util.OptionalLong>("highWatermark", "()Ljava/util/OptionalLong;");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.9.0/org/apache/kafka/raft/RaftClient.html#logEndOffset--"/>
        /// </summary>
        /// <returns><see cref="long"/></returns>
        public long LogEndOffset()
        {
            return IExecuteWithSignature<long>("logEndOffset", "()J");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.9.0/org/apache/kafka/raft/RaftClient.html#prepareAppend-int-java.util.List-"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Util.List"/></param>
        /// <returns><see cref="long"/></returns>
        public long PrepareAppend(int arg0, Java.Util.List arg1)
        {
            return IExecuteWithSignature<long>("prepareAppend", "(ILjava/util/List;)J", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.9.0/org/apache/kafka/raft/RaftClient.html#leaderAndEpoch--"/>
        /// </summary>
        /// <returns><see cref="Org.Apache.Kafka.Raft.LeaderAndEpoch"/></returns>
        public Org.Apache.Kafka.Raft.LeaderAndEpoch LeaderAndEpoch()
        {
            return IExecuteWithSignature<Org.Apache.Kafka.Raft.LeaderAndEpoch>("leaderAndEpoch", "()Lorg/apache/kafka/raft/LeaderAndEpoch;");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.9.0/org/apache/kafka/raft/RaftClient.html#register-org.apache.kafka.raft.RaftClient.Listener-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Raft.RaftClient.Listener"/></param>
        public void Register(Org.Apache.Kafka.Raft.RaftClient.Listener arg0)
        {
            IExecuteWithSignature("register", "(Lorg/apache/kafka/raft/RaftClient$Listener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.9.0/org/apache/kafka/raft/RaftClient.html#resign-int-"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void Resign(int arg0)
        {
            IExecuteWithSignature("resign", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.9.0/org/apache/kafka/raft/RaftClient.html#schedulePreparedAppend--"/>
        /// </summary>
        public void SchedulePreparedAppend()
        {
            IExecuteWithSignature("schedulePreparedAppend", "()V");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.9.0/org/apache/kafka/raft/RaftClient.html#unregister-org.apache.kafka.raft.RaftClient.Listener-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Raft.RaftClient.Listener"/></param>
        public void Unregister(Org.Apache.Kafka.Raft.RaftClient.Listener arg0)
        {
            IExecuteWithSignature("unregister", "(Lorg/apache/kafka/raft/RaftClient$Listener;)V", arg0);
        }

        #endregion

        #region Nested classes
        #region Listener implementation
        public partial class Listener
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="Listener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("handleCommit", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(HandleCommitEventHandler));
                AddEventHandler("handleLoadSnapshot", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(HandleLoadSnapshotEventHandler));
                AddEventHandler("beginShutdown", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(BeginShutdownEventHandler));
                AddEventHandler("handleLeaderChange", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(HandleLeaderChangeEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.9.0/org/apache/kafka/raft/RaftClient.Listener.html#handleCommit-org.apache.kafka.raft.BatchReader-"/>
            /// </summary>
            /// <remarks>If <see cref="OnHandleCommit"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<Org.Apache.Kafka.Raft.BatchReader> OnHandleCommit { get; set; } = null;

            bool hasOverrideHandleCommit = true;
            void HandleCommitEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideHandleCommit = true;
                var methodToExecute = (OnHandleCommit != null) ? OnHandleCommit : HandleCommit;
                methodToExecute.Invoke(data.EventData.GetAt<Org.Apache.Kafka.Raft.BatchReader>(0));
                data.EventData.TypedEventData.HasOverride = hasOverrideHandleCommit;
            }

            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.9.0/org/apache/kafka/raft/RaftClient.Listener.html#handleCommit-org.apache.kafka.raft.BatchReader-"/>
            /// </summary>
            /// <param name="arg0"><see cref="Org.Apache.Kafka.Raft.BatchReader"/></param>
            public virtual void HandleCommit(Org.Apache.Kafka.Raft.BatchReader arg0)
            {
                hasOverrideHandleCommit = false;
            }

            /// <summary>
            /// Handler for <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.9.0/org/apache/kafka/raft/RaftClient.Listener.html#handleLoadSnapshot-org.apache.kafka.snapshot.SnapshotReader-"/>
            /// </summary>
            /// <remarks>If <see cref="OnHandleLoadSnapshot"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<Org.Apache.Kafka.Snapshot.SnapshotReader> OnHandleLoadSnapshot { get; set; } = null;

            bool hasOverrideHandleLoadSnapshot = true;
            void HandleLoadSnapshotEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideHandleLoadSnapshot = true;
                var methodToExecute = (OnHandleLoadSnapshot != null) ? OnHandleLoadSnapshot : HandleLoadSnapshot;
                methodToExecute.Invoke(data.EventData.GetAt<Org.Apache.Kafka.Snapshot.SnapshotReader>(0));
                data.EventData.TypedEventData.HasOverride = hasOverrideHandleLoadSnapshot;
            }

            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.9.0/org/apache/kafka/raft/RaftClient.Listener.html#handleLoadSnapshot-org.apache.kafka.snapshot.SnapshotReader-"/>
            /// </summary>
            /// <param name="arg0"><see cref="Org.Apache.Kafka.Snapshot.SnapshotReader"/></param>
            public virtual void HandleLoadSnapshot(Org.Apache.Kafka.Snapshot.SnapshotReader arg0)
            {
                hasOverrideHandleLoadSnapshot = false;
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.9.0/org/apache/kafka/raft/RaftClient.Listener.html#beginShutdown--"/>
            /// </summary>
            /// <remarks>The method invokes the default implementation in the JVM interface</remarks>
            public void BeginShutdownDefault()
            {
                IExecuteWithSignature("beginShutdownDefault", "()V");
            }

            /// <summary>
            /// Handler for <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.9.0/org/apache/kafka/raft/RaftClient.Listener.html#beginShutdown--"/>
            /// </summary>
            /// <remarks>If <see cref="OnBeginShutdown"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action OnBeginShutdown { get; set; } = null;

            bool hasOverrideBeginShutdown = true;
            void BeginShutdownEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideBeginShutdown = true;
                var methodToExecute = (OnBeginShutdown != null) ? OnBeginShutdown : BeginShutdown;
                methodToExecute.Invoke();
                data.EventData.TypedEventData.HasOverride = hasOverrideBeginShutdown;
            }

            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.9.0/org/apache/kafka/raft/RaftClient.Listener.html#beginShutdown--"/>
            /// </summary>
            /// <remarks>The method invokes the default implementation in the JVM interface using <see cref="BeginShutdownDefault"/>; override the method to implement a different behavior</remarks>
            public virtual void BeginShutdown()
            {
                hasOverrideBeginShutdown = false;
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.9.0/org/apache/kafka/raft/RaftClient.Listener.html#handleLeaderChange-org.apache.kafka.raft.LeaderAndEpoch-"/>
            /// </summary>
            /// <param name="arg0"><see cref="Org.Apache.Kafka.Raft.LeaderAndEpoch"/></param>
            /// <remarks>The method invokes the default implementation in the JVM interface</remarks>
            public void HandleLeaderChangeDefault(Org.Apache.Kafka.Raft.LeaderAndEpoch arg0)
            {
                IExecuteWithSignature("handleLeaderChangeDefault", "(Lorg/apache/kafka/raft/LeaderAndEpoch;)V", arg0);
            }

            /// <summary>
            /// Handler for <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.9.0/org/apache/kafka/raft/RaftClient.Listener.html#handleLeaderChange-org.apache.kafka.raft.LeaderAndEpoch-"/>
            /// </summary>
            /// <remarks>If <see cref="OnHandleLeaderChange"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<Org.Apache.Kafka.Raft.LeaderAndEpoch> OnHandleLeaderChange { get; set; } = null;

            bool hasOverrideHandleLeaderChange = true;
            void HandleLeaderChangeEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideHandleLeaderChange = true;
                var methodToExecute = (OnHandleLeaderChange != null) ? OnHandleLeaderChange : HandleLeaderChange;
                methodToExecute.Invoke(data.EventData.GetAt<Org.Apache.Kafka.Raft.LeaderAndEpoch>(0));
                data.EventData.TypedEventData.HasOverride = hasOverrideHandleLeaderChange;
            }

            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.9.0/org/apache/kafka/raft/RaftClient.Listener.html#handleLeaderChange-org.apache.kafka.raft.LeaderAndEpoch-"/>
            /// </summary>
            /// <param name="arg0"><see cref="Org.Apache.Kafka.Raft.LeaderAndEpoch"/></param>
            /// <remarks>The method invokes the default implementation in the JVM interface using <see cref="HandleLeaderChangeDefault"/>; override the method to implement a different behavior</remarks>
            public virtual void HandleLeaderChange(Org.Apache.Kafka.Raft.LeaderAndEpoch arg0)
            {
                hasOverrideHandleLeaderChange = false;
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region ListenerDirect implementation
        public partial class ListenerDirect
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.9.0/org/apache/kafka/raft/RaftClient.Listener.html#handleCommit-org.apache.kafka.raft.BatchReader-"/>
            /// </summary>
            /// <param name="arg0"><see cref="Org.Apache.Kafka.Raft.BatchReader"/></param>
            public override void HandleCommit(Org.Apache.Kafka.Raft.BatchReader arg0)
            {
                IExecuteWithSignature("handleCommit", "(Lorg/apache/kafka/raft/BatchReader;)V", arg0);
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.9.0/org/apache/kafka/raft/RaftClient.Listener.html#handleLoadSnapshot-org.apache.kafka.snapshot.SnapshotReader-"/>
            /// </summary>
            /// <param name="arg0"><see cref="Org.Apache.Kafka.Snapshot.SnapshotReader"/></param>
            public override void HandleLoadSnapshot(Org.Apache.Kafka.Snapshot.SnapshotReader arg0)
            {
                IExecuteWithSignature("handleLoadSnapshot", "(Lorg/apache/kafka/snapshot/SnapshotReader;)V", arg0);
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.9.0/org/apache/kafka/raft/RaftClient.Listener.html#beginShutdown--"/>
            /// </summary>
            public override void BeginShutdown()
            {
                IExecuteWithSignature("beginShutdown", "()V");
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.9.0/org/apache/kafka/raft/RaftClient.Listener.html#handleLeaderChange-org.apache.kafka.raft.LeaderAndEpoch-"/>
            /// </summary>
            /// <param name="arg0"><see cref="Org.Apache.Kafka.Raft.LeaderAndEpoch"/></param>
            public override void HandleLeaderChange(Org.Apache.Kafka.Raft.LeaderAndEpoch arg0)
            {
                IExecuteWithSignature("handleLeaderChange", "(Lorg/apache/kafka/raft/LeaderAndEpoch;)V", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region Listener<T> implementation
        public partial class Listener<T>
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// Handlers initializer for <see cref="Listener"/>
            /// </summary>
            protected virtual void InitializeHandlers()
            {
                AddEventHandler("handleCommit", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(HandleCommitEventHandler));
                AddEventHandler("handleLoadSnapshot", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(HandleLoadSnapshotEventHandler));
                AddEventHandler("beginShutdown", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(BeginShutdownEventHandler));
                AddEventHandler("handleLeaderChange", new global::System.EventHandler<CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>>>(HandleLeaderChangeEventHandler));

            }

            /// <summary>
            /// Handler for <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.9.0/org/apache/kafka/raft/RaftClient.Listener.html#handleCommit-org.apache.kafka.raft.BatchReader-"/>
            /// </summary>
            /// <remarks>If <see cref="OnHandleCommit"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<Org.Apache.Kafka.Raft.BatchReader<T>> OnHandleCommit { get; set; } = null;

            bool hasOverrideHandleCommit = true;
            void HandleCommitEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideHandleCommit = true;
                var methodToExecute = (OnHandleCommit != null) ? OnHandleCommit : HandleCommit;
                methodToExecute.Invoke(data.EventData.GetAt<Org.Apache.Kafka.Raft.BatchReader<T>>(0));
                data.EventData.TypedEventData.HasOverride = hasOverrideHandleCommit;
            }

            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.9.0/org/apache/kafka/raft/RaftClient.Listener.html#handleCommit-org.apache.kafka.raft.BatchReader-"/>
            /// </summary>
            /// <param name="arg0"><see cref="Org.Apache.Kafka.Raft.BatchReader"/></param>
            public virtual void HandleCommit(Org.Apache.Kafka.Raft.BatchReader<T> arg0)
            {
                hasOverrideHandleCommit = false;
            }

            /// <summary>
            /// Handler for <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.9.0/org/apache/kafka/raft/RaftClient.Listener.html#handleLoadSnapshot-org.apache.kafka.snapshot.SnapshotReader-"/>
            /// </summary>
            /// <remarks>If <see cref="OnHandleLoadSnapshot"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<Org.Apache.Kafka.Snapshot.SnapshotReader<T>> OnHandleLoadSnapshot { get; set; } = null;

            bool hasOverrideHandleLoadSnapshot = true;
            void HandleLoadSnapshotEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideHandleLoadSnapshot = true;
                var methodToExecute = (OnHandleLoadSnapshot != null) ? OnHandleLoadSnapshot : HandleLoadSnapshot;
                methodToExecute.Invoke(data.EventData.GetAt<Org.Apache.Kafka.Snapshot.SnapshotReader<T>>(0));
                data.EventData.TypedEventData.HasOverride = hasOverrideHandleLoadSnapshot;
            }

            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.9.0/org/apache/kafka/raft/RaftClient.Listener.html#handleLoadSnapshot-org.apache.kafka.snapshot.SnapshotReader-"/>
            /// </summary>
            /// <param name="arg0"><see cref="Org.Apache.Kafka.Snapshot.SnapshotReader"/></param>
            public virtual void HandleLoadSnapshot(Org.Apache.Kafka.Snapshot.SnapshotReader<T> arg0)
            {
                hasOverrideHandleLoadSnapshot = false;
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.9.0/org/apache/kafka/raft/RaftClient.Listener.html#beginShutdown--"/>
            /// </summary>
            /// <remarks>The method invokes the default implementation in the JVM interface</remarks>
            public void BeginShutdownDefault()
            {
                IExecuteWithSignature("beginShutdownDefault", "()V");
            }

            /// <summary>
            /// Handler for <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.9.0/org/apache/kafka/raft/RaftClient.Listener.html#beginShutdown--"/>
            /// </summary>
            /// <remarks>If <see cref="OnBeginShutdown"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action OnBeginShutdown { get; set; } = null;

            bool hasOverrideBeginShutdown = true;
            void BeginShutdownEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideBeginShutdown = true;
                var methodToExecute = (OnBeginShutdown != null) ? OnBeginShutdown : BeginShutdown;
                methodToExecute.Invoke();
                data.EventData.TypedEventData.HasOverride = hasOverrideBeginShutdown;
            }

            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.9.0/org/apache/kafka/raft/RaftClient.Listener.html#beginShutdown--"/>
            /// </summary>
            /// <remarks>The method invokes the default implementation in the JVM interface using <see cref="BeginShutdownDefault"/>; override the method to implement a different behavior</remarks>
            public virtual void BeginShutdown()
            {
                hasOverrideBeginShutdown = false;
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.9.0/org/apache/kafka/raft/RaftClient.Listener.html#handleLeaderChange-org.apache.kafka.raft.LeaderAndEpoch-"/>
            /// </summary>
            /// <param name="arg0"><see cref="Org.Apache.Kafka.Raft.LeaderAndEpoch"/></param>
            /// <remarks>The method invokes the default implementation in the JVM interface</remarks>
            public void HandleLeaderChangeDefault(Org.Apache.Kafka.Raft.LeaderAndEpoch arg0)
            {
                IExecuteWithSignature("handleLeaderChangeDefault", "(Lorg/apache/kafka/raft/LeaderAndEpoch;)V", arg0);
            }

            /// <summary>
            /// Handler for <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.9.0/org/apache/kafka/raft/RaftClient.Listener.html#handleLeaderChange-org.apache.kafka.raft.LeaderAndEpoch-"/>
            /// </summary>
            /// <remarks>If <see cref="OnHandleLeaderChange"/> has a value it takes precedence over corresponding class method</remarks>
            public global::System.Action<Org.Apache.Kafka.Raft.LeaderAndEpoch> OnHandleLeaderChange { get; set; } = null;

            bool hasOverrideHandleLeaderChange = true;
            void HandleLeaderChangeEventHandler(object sender, CLRListenerEventArgs<CLREventData<MASES.JNet.Specific.JNetEventResult>> data)
            {
                hasOverrideHandleLeaderChange = true;
                var methodToExecute = (OnHandleLeaderChange != null) ? OnHandleLeaderChange : HandleLeaderChange;
                methodToExecute.Invoke(data.EventData.GetAt<Org.Apache.Kafka.Raft.LeaderAndEpoch>(0));
                data.EventData.TypedEventData.HasOverride = hasOverrideHandleLeaderChange;
            }

            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.9.0/org/apache/kafka/raft/RaftClient.Listener.html#handleLeaderChange-org.apache.kafka.raft.LeaderAndEpoch-"/>
            /// </summary>
            /// <param name="arg0"><see cref="Org.Apache.Kafka.Raft.LeaderAndEpoch"/></param>
            /// <remarks>The method invokes the default implementation in the JVM interface using <see cref="HandleLeaderChangeDefault"/>; override the method to implement a different behavior</remarks>
            public virtual void HandleLeaderChange(Org.Apache.Kafka.Raft.LeaderAndEpoch arg0)
            {
                hasOverrideHandleLeaderChange = false;
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region ListenerDirect<T> implementation
        public partial class ListenerDirect<T>
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.9.0/org/apache/kafka/raft/RaftClient.Listener.html#handleCommit-org.apache.kafka.raft.BatchReader-"/>
            /// </summary>
            /// <param name="arg0"><see cref="Org.Apache.Kafka.Raft.BatchReader"/></param>
            public override void HandleCommit(Org.Apache.Kafka.Raft.BatchReader<T> arg0)
            {
                IExecuteWithSignature("handleCommit", "(Lorg/apache/kafka/raft/BatchReader;)V", arg0);
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.9.0/org/apache/kafka/raft/RaftClient.Listener.html#handleLoadSnapshot-org.apache.kafka.snapshot.SnapshotReader-"/>
            /// </summary>
            /// <param name="arg0"><see cref="Org.Apache.Kafka.Snapshot.SnapshotReader"/></param>
            public override void HandleLoadSnapshot(Org.Apache.Kafka.Snapshot.SnapshotReader<T> arg0)
            {
                IExecuteWithSignature("handleLoadSnapshot", "(Lorg/apache/kafka/snapshot/SnapshotReader;)V", arg0);
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.9.0/org/apache/kafka/raft/RaftClient.Listener.html#beginShutdown--"/>
            /// </summary>
            public override void BeginShutdown()
            {
                IExecuteWithSignature("beginShutdown", "()V");
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.9.0/org/apache/kafka/raft/RaftClient.Listener.html#handleLeaderChange-org.apache.kafka.raft.LeaderAndEpoch-"/>
            /// </summary>
            /// <param name="arg0"><see cref="Org.Apache.Kafka.Raft.LeaderAndEpoch"/></param>
            public override void HandleLeaderChange(Org.Apache.Kafka.Raft.LeaderAndEpoch arg0)
            {
                IExecuteWithSignature("handleLeaderChange", "(Lorg/apache/kafka/raft/LeaderAndEpoch;)V", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion

    #region IRaftClient<T>
    /// <summary>
    /// .NET interface for TO BE DEFINED FROM USER
    /// </summary>
    public partial interface IRaftClient<T> : Java.Lang.IAutoCloseable
    {
        #region Instance methods

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion

    #region RaftClient<T> implementation
    public partial class RaftClient<T> : Org.Apache.Kafka.Raft.IRaftClient<T>
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Org.Apache.Kafka.Raft.RaftClient{T}"/> to <see cref="Org.Apache.Kafka.Raft.RaftClient"/>
        /// </summary>
        public static implicit operator Org.Apache.Kafka.Raft.RaftClient(Org.Apache.Kafka.Raft.RaftClient<T> t) => t.Cast<Org.Apache.Kafka.Raft.RaftClient>();

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.9.0/org/apache/kafka/raft/RaftClient.html#shutdown-int-"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <returns><see cref="Java.Util.Concurrent.CompletableFuture"/></returns>
        public Java.Util.Concurrent.CompletableFuture<Java.Lang.Void> Shutdown(int arg0)
        {
            return IExecuteWithSignature<Java.Util.Concurrent.CompletableFuture<Java.Lang.Void>>("shutdown", "(I)Ljava/util/concurrent/CompletableFuture;", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.9.0/org/apache/kafka/raft/RaftClient.html#latestSnapshotId--"/>
        /// </summary>
        /// <returns><see cref="Java.Util.Optional"/></returns>
        public Java.Util.Optional<Org.Apache.Kafka.Raft.OffsetAndEpoch> LatestSnapshotId()
        {
            return IExecuteWithSignature<Java.Util.Optional<Org.Apache.Kafka.Raft.OffsetAndEpoch>>("latestSnapshotId", "()Ljava/util/Optional;");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.9.0/org/apache/kafka/raft/RaftClient.html#createSnapshot-org.apache.kafka.raft.OffsetAndEpoch-long-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Raft.OffsetAndEpoch"/></param>
        /// <param name="arg1"><see cref="long"/></param>
        /// <returns><see cref="Java.Util.Optional"/></returns>
        public Java.Util.Optional<Org.Apache.Kafka.Snapshot.SnapshotWriter<T>> CreateSnapshot(Org.Apache.Kafka.Raft.OffsetAndEpoch arg0, long arg1)
        {
            return IExecuteWithSignature<Java.Util.Optional<Org.Apache.Kafka.Snapshot.SnapshotWriter<T>>>("createSnapshot", "(Lorg/apache/kafka/raft/OffsetAndEpoch;J)Ljava/util/Optional;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.9.0/org/apache/kafka/raft/RaftClient.html#nodeId--"/>
        /// </summary>
        /// <returns><see cref="Java.Util.OptionalInt"/></returns>
        public Java.Util.OptionalInt NodeId()
        {
            return IExecuteWithSignature<Java.Util.OptionalInt>("nodeId", "()Ljava/util/OptionalInt;");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.9.0/org/apache/kafka/raft/RaftClient.html#highWatermark--"/>
        /// </summary>
        /// <returns><see cref="Java.Util.OptionalLong"/></returns>
        public Java.Util.OptionalLong HighWatermark()
        {
            return IExecuteWithSignature<Java.Util.OptionalLong>("highWatermark", "()Ljava/util/OptionalLong;");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.9.0/org/apache/kafka/raft/RaftClient.html#logEndOffset--"/>
        /// </summary>
        /// <returns><see cref="long"/></returns>
        public long LogEndOffset()
        {
            return IExecuteWithSignature<long>("logEndOffset", "()J");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.9.0/org/apache/kafka/raft/RaftClient.html#prepareAppend-int-java.util.List-"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        /// <param name="arg1"><see cref="Java.Util.List"/></param>
        /// <returns><see cref="long"/></returns>
        public long PrepareAppend(int arg0, Java.Util.List<T> arg1)
        {
            return IExecuteWithSignature<long>("prepareAppend", "(ILjava/util/List;)J", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.9.0/org/apache/kafka/raft/RaftClient.html#leaderAndEpoch--"/>
        /// </summary>
        /// <returns><see cref="Org.Apache.Kafka.Raft.LeaderAndEpoch"/></returns>
        public Org.Apache.Kafka.Raft.LeaderAndEpoch LeaderAndEpoch()
        {
            return IExecuteWithSignature<Org.Apache.Kafka.Raft.LeaderAndEpoch>("leaderAndEpoch", "()Lorg/apache/kafka/raft/LeaderAndEpoch;");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.9.0/org/apache/kafka/raft/RaftClient.html#register-org.apache.kafka.raft.RaftClient.Listener-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Raft.RaftClient.Listener"/></param>
        public void Register(Org.Apache.Kafka.Raft.RaftClient.Listener<T> arg0)
        {
            IExecuteWithSignature("register", "(Lorg/apache/kafka/raft/RaftClient$Listener;)V", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.9.0/org/apache/kafka/raft/RaftClient.html#resign-int-"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void Resign(int arg0)
        {
            IExecuteWithSignature("resign", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.9.0/org/apache/kafka/raft/RaftClient.html#schedulePreparedAppend--"/>
        /// </summary>
        public void SchedulePreparedAppend()
        {
            IExecuteWithSignature("schedulePreparedAppend", "()V");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/3.9.0/org/apache/kafka/raft/RaftClient.html#unregister-org.apache.kafka.raft.RaftClient.Listener-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Raft.RaftClient.Listener"/></param>
        public void Unregister(Org.Apache.Kafka.Raft.RaftClient.Listener<T> arg0)
        {
            IExecuteWithSignature("unregister", "(Lorg/apache/kafka/raft/RaftClient$Listener;)V", arg0);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}