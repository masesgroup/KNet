/*
*  Copyright (c) 2021-2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.6.3.0)
*  using kafka-raft-4.1.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Raft
{
    #region ReplicatedLog declaration
    /// <summary>
    /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/ReplicatedLog.html"/>
    /// </summary>
    public partial class ReplicatedLog : Java.Lang.AutoCloseable
    {
        const string _bridgeClassName = "org.apache.kafka.raft.ReplicatedLog";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        [global::System.Obsolete("ReplicatedLog class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public ReplicatedLog() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        [global::System.Obsolete("ReplicatedLog class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public ReplicatedLog(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, false);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <inheritdoc/>
        public override string BridgeClassName => _bridgeClassName;
        /// <inheritdoc/>
        public override bool IsBridgeAbstract => true;
        /// <inheritdoc/>
        public override bool IsBridgeCloseable => true;
        /// <inheritdoc/>
        public override bool IsBridgeInterface => true;
        /// <inheritdoc/>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class

    }
    #endregion

    #region IReplicatedLog
    /// <summary>
    /// .NET interface skeleton to be manually developed following <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/ReplicatedLog.html"/>
    /// </summary>
    public partial interface IReplicatedLog : Java.Lang.IAutoCloseable
    {
        #region Instance methods

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion

    #region ReplicatedLog implementation
    public partial class ReplicatedLog : Org.Apache.Kafka.Raft.IReplicatedLog
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/ReplicatedLog.html#maybeClean()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool MaybeClean()
        {
            return IExecuteWithSignature<bool>("maybeClean", "()Z");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/ReplicatedLog.html#truncateToLatestSnapshot()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool TruncateToLatestSnapshot()
        {
            return IExecuteWithSignature<bool>("truncateToLatestSnapshot", "()Z");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/ReplicatedLog.html#lastFetchedEpoch()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int LastFetchedEpoch()
        {
            return IExecuteWithSignature<int>("lastFetchedEpoch", "()I");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/ReplicatedLog.html#latestSnapshot()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.Optional"/></returns>
        public Java.Util.Optional<Org.Apache.Kafka.Snapshot.RawSnapshotReader> LatestSnapshot()
        {
            return IExecuteWithSignature<Java.Util.Optional<Org.Apache.Kafka.Snapshot.RawSnapshotReader>>("latestSnapshot", "()Ljava/util/Optional;");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/ReplicatedLog.html#startOffset()"/>
        /// </summary>
        /// <returns><see cref="long"/></returns>
        public long StartOffset()
        {
            return IExecuteWithSignature<long>("startOffset", "()J");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/ReplicatedLog.html#topicPartition()"/>
        /// </summary>
        /// <returns><see cref="Org.Apache.Kafka.Common.TopicPartition"/></returns>
        public Org.Apache.Kafka.Common.TopicPartition TopicPartition()
        {
            return IExecuteWithSignature<Org.Apache.Kafka.Common.TopicPartition>("topicPartition", "()Lorg/apache/kafka/common/TopicPartition;");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/ReplicatedLog.html#topicId()"/>
        /// </summary>
        /// <returns><see cref="Org.Apache.Kafka.Common.Uuid"/></returns>
        public Org.Apache.Kafka.Common.Uuid TopicId()
        {
            return IExecuteWithSignature<Org.Apache.Kafka.Common.Uuid>("topicId", "()Lorg/apache/kafka/common/Uuid;");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/ReplicatedLog.html#read(long,org.apache.kafka.raft.Isolation)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Raft.Isolation"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Raft.LogFetchInfo"/></returns>
        public Org.Apache.Kafka.Raft.LogFetchInfo Read(long arg0, Org.Apache.Kafka.Raft.Isolation arg1)
        {
            return IExecuteWithSignature<Org.Apache.Kafka.Raft.LogFetchInfo>("read", "(JLorg/apache/kafka/raft/Isolation;)Lorg/apache/kafka/raft/LogFetchInfo;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/ReplicatedLog.html#endOffset()"/>
        /// </summary>
        /// <returns><see cref="Org.Apache.Kafka.Raft.LogOffsetMetadata"/></returns>
        public Org.Apache.Kafka.Raft.LogOffsetMetadata EndOffset()
        {
            return IExecuteWithSignature<Org.Apache.Kafka.Raft.LogOffsetMetadata>("endOffset", "()Lorg/apache/kafka/raft/LogOffsetMetadata;");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/ReplicatedLog.html#highWatermark()"/>
        /// </summary>
        /// <returns><see cref="Org.Apache.Kafka.Raft.LogOffsetMetadata"/></returns>
        public Org.Apache.Kafka.Raft.LogOffsetMetadata HighWatermark()
        {
            return IExecuteWithSignature<Org.Apache.Kafka.Raft.LogOffsetMetadata>("highWatermark", "()Lorg/apache/kafka/raft/LogOffsetMetadata;");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/ReplicatedLog.html#flush(boolean)"/>
        /// </summary>
        /// <param name="arg0"><see cref="bool"/></param>
        public void Flush(bool arg0)
        {
            IExecuteWithSignature("flush", "(Z)V", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/ReplicatedLog.html#initializeLeaderEpoch(int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="int"/></param>
        public void InitializeLeaderEpoch(int arg0)
        {
            IExecuteWithSignature("initializeLeaderEpoch", "(I)V", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/ReplicatedLog.html#truncateTo(long)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        public void TruncateTo(long arg0)
        {
            IExecuteWithSignature("truncateTo", "(J)V", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/ReplicatedLog.html#updateHighWatermark(org.apache.kafka.raft.LogOffsetMetadata)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Raft.LogOffsetMetadata"/></param>
        public void UpdateHighWatermark(Org.Apache.Kafka.Raft.LogOffsetMetadata arg0)
        {
            IExecuteWithSignature("updateHighWatermark", "(Lorg/apache/kafka/raft/LogOffsetMetadata;)V", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/ReplicatedLog.html#validateOffsetAndEpoch(long,int)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <param name="arg1"><see cref="int"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Raft.ValidOffsetAndEpoch"/></returns>
        public Org.Apache.Kafka.Raft.ValidOffsetAndEpoch ValidateOffsetAndEpoch(long arg0, int arg1)
        {
            return IExecuteWithSignature<Org.Apache.Kafka.Raft.ValidOffsetAndEpoch>("validateOffsetAndEpoch", "(JI)Lorg/apache/kafka/raft/ValidOffsetAndEpoch;", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-raft/4.0.0/org/apache/kafka/raft/ReplicatedLog.html#close()"/>
        /// </summary>
        public void Close()
        {
            IExecuteWithSignature("close", "()V");
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}