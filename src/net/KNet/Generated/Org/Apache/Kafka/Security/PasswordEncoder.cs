/*
*  Copyright 2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.12.0)
*  using kafka-server-common-3.9.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Security
{
    #region PasswordEncoder declaration
    /// <summary>
    /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-server-common/3.9.0/org/apache/kafka/security/PasswordEncoder.html"/>
    /// </summary>
    public partial class PasswordEncoder : MASES.JCOBridge.C2JBridge.JVMBridgeBase<PasswordEncoder>
    {
        const string _bridgeClassName = "org.apache.kafka.security.PasswordEncoder";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        [global::System.Obsolete("PasswordEncoder class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public PasswordEncoder() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        [global::System.Obsolete("PasswordEncoder class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public PasswordEncoder(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_BridgeClassName.htm"/>
        /// </summary>
        public override string BridgeClassName => _bridgeClassName;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeAbstract.htm"/>
        /// </summary>
        public override bool IsBridgeAbstract => true;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeCloseable.htm"/>
        /// </summary>
        public override bool IsBridgeCloseable => false;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeInterface.htm"/>
        /// </summary>
        public override bool IsBridgeInterface => true;
        /// <summary>
        /// <see href="https://www.jcobridge.com/api-clr/html/P_MASES_JCOBridge_C2JBridge_JVMBridgeBase_IsBridgeStatic.htm"/>
        /// </summary>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class

    }
    #endregion

    #region IPasswordEncoder
    /// <summary>
    /// .NET interface for TO BE DEFINED FROM USER
    /// </summary>
    public partial interface IPasswordEncoder
    {
        #region Instance methods

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion

    #region PasswordEncoder implementation
    public partial class PasswordEncoder : Org.Apache.Kafka.Security.IPasswordEncoder
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-server-common/3.9.0/org/apache/kafka/security/PasswordEncoder.html#CIPHER_ALGORITHM"/>
        /// </summary>
        public static Java.Lang.String CIPHER_ALGORITHM { get { if (!_CIPHER_ALGORITHMReady) { _CIPHER_ALGORITHMContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "CIPHER_ALGORITHM"); _CIPHER_ALGORITHMReady = true; } return _CIPHER_ALGORITHMContent; } }
        private static Java.Lang.String _CIPHER_ALGORITHMContent = default;
        private static bool _CIPHER_ALGORITHMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-server-common/3.9.0/org/apache/kafka/security/PasswordEncoder.html#ENCRYPTED_PASSWORD"/>
        /// </summary>
        public static Java.Lang.String ENCRYPTED_PASSWORD { get { if (!_ENCRYPTED_PASSWORDReady) { _ENCRYPTED_PASSWORDContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ENCRYPTED_PASSWORD"); _ENCRYPTED_PASSWORDReady = true; } return _ENCRYPTED_PASSWORDContent; } }
        private static Java.Lang.String _ENCRYPTED_PASSWORDContent = default;
        private static bool _ENCRYPTED_PASSWORDReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-server-common/3.9.0/org/apache/kafka/security/PasswordEncoder.html#INITIALIZATION_VECTOR"/>
        /// </summary>
        public static Java.Lang.String INITIALIZATION_VECTOR { get { if (!_INITIALIZATION_VECTORReady) { _INITIALIZATION_VECTORContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "INITIALIZATION_VECTOR"); _INITIALIZATION_VECTORReady = true; } return _INITIALIZATION_VECTORContent; } }
        private static Java.Lang.String _INITIALIZATION_VECTORContent = default;
        private static bool _INITIALIZATION_VECTORReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-server-common/3.9.0/org/apache/kafka/security/PasswordEncoder.html#ITERATIONS"/>
        /// </summary>
        public static Java.Lang.String ITERATIONS { get { if (!_ITERATIONSReady) { _ITERATIONSContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "ITERATIONS"); _ITERATIONSReady = true; } return _ITERATIONSContent; } }
        private static Java.Lang.String _ITERATIONSContent = default;
        private static bool _ITERATIONSReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-server-common/3.9.0/org/apache/kafka/security/PasswordEncoder.html#KEY_FACTORY_ALGORITHM"/>
        /// </summary>
        public static Java.Lang.String KEY_FACTORY_ALGORITHM { get { if (!_KEY_FACTORY_ALGORITHMReady) { _KEY_FACTORY_ALGORITHMContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_FACTORY_ALGORITHM"); _KEY_FACTORY_ALGORITHMReady = true; } return _KEY_FACTORY_ALGORITHMContent; } }
        private static Java.Lang.String _KEY_FACTORY_ALGORITHMContent = default;
        private static bool _KEY_FACTORY_ALGORITHMReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-server-common/3.9.0/org/apache/kafka/security/PasswordEncoder.html#KEY_LENGTH"/>
        /// </summary>
        public static Java.Lang.String KEY_LENGTH { get { if (!_KEY_LENGTHReady) { _KEY_LENGTHContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "KEY_LENGTH"); _KEY_LENGTHReady = true; } return _KEY_LENGTHContent; } }
        private static Java.Lang.String _KEY_LENGTHContent = default;
        private static bool _KEY_LENGTHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-server-common/3.9.0/org/apache/kafka/security/PasswordEncoder.html#PASSWORD_LENGTH"/>
        /// </summary>
        public static Java.Lang.String PASSWORD_LENGTH { get { if (!_PASSWORD_LENGTHReady) { _PASSWORD_LENGTHContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PASSWORD_LENGTH"); _PASSWORD_LENGTHReady = true; } return _PASSWORD_LENGTHContent; } }
        private static Java.Lang.String _PASSWORD_LENGTHContent = default;
        private static bool _PASSWORD_LENGTHReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-server-common/3.9.0/org/apache/kafka/security/PasswordEncoder.html#SALT"/>
        /// </summary>
        public static Java.Lang.String SALT { get { if (!_SALTReady) { _SALTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "SALT"); _SALTReady = true; } return _SALTContent; } }
        private static Java.Lang.String _SALTContent = default;
        private static bool _SALTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-server-common/3.9.0/org/apache/kafka/security/PasswordEncoder.html#NOOP"/>
        /// </summary>
        public static Org.Apache.Kafka.Security.PasswordEncoder NOOP { get { if (!_NOOPReady) { _NOOPContent = SGetField<Org.Apache.Kafka.Security.PasswordEncoder>(LocalBridgeClazz, "NOOP"); _NOOPReady = true; } return _NOOPContent; } }
        private static Org.Apache.Kafka.Security.PasswordEncoder _NOOPContent = default;
        private static bool _NOOPReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-server-common/3.9.0/org/apache/kafka/security/PasswordEncoder.html#base64Decode-java.lang.String-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="byte"/></returns>
        public static byte[] Base64Decode(Java.Lang.String arg0)
        {
            return SExecuteWithSignatureArray<byte>(LocalBridgeClazz, "base64Decode", "(Ljava/lang/String;)[B", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-server-common/3.9.0/org/apache/kafka/security/PasswordEncoder.html#base64Encode-byte[]-"/>
        /// </summary>
        /// <param name="arg0"><see cref="byte"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public static Java.Lang.String Base64Encode(byte[] arg0)
        {
            return SExecuteWithSignature<Java.Lang.String>(LocalBridgeClazz, "base64Encode", "([B)Ljava/lang/String;", new object[] { arg0 });
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-server-common/3.9.0/org/apache/kafka/security/PasswordEncoder.html#encrypting-org.apache.kafka.common.config.types.Password-java.lang.String-java.lang.String-int-int-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Config.Types.Password"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="Java.Lang.String"/></param>
        /// <param name="arg3"><see cref="int"/></param>
        /// <param name="arg4"><see cref="int"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Security.EncryptingPasswordEncoder"/></returns>
        public static Org.Apache.Kafka.Security.EncryptingPasswordEncoder Encrypting(Org.Apache.Kafka.Common.Config.Types.Password arg0, Java.Lang.String arg1, Java.Lang.String arg2, int arg3, int arg4)
        {
            return SExecuteWithSignature<Org.Apache.Kafka.Security.EncryptingPasswordEncoder>(LocalBridgeClazz, "encrypting", "(Lorg/apache/kafka/common/config/types/Password;Ljava/lang/String;Ljava/lang/String;II)Lorg/apache/kafka/security/EncryptingPasswordEncoder;", arg0, arg1, arg2, arg3, arg4);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-server-common/3.9.0/org/apache/kafka/security/PasswordEncoder.html#encode-org.apache.kafka.common.config.types.Password-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Config.Types.Password"/></param>
        /// <returns><see cref="Java.Lang.String"/></returns>
        /// <exception cref="Java.Security.GeneralSecurityException"/>
        public Java.Lang.String Encode(Org.Apache.Kafka.Common.Config.Types.Password arg0)
        {
            return IExecuteWithSignature<Java.Lang.String>("encode", "(Lorg/apache/kafka/common/config/types/Password;)Ljava/lang/String;", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-server-common/3.9.0/org/apache/kafka/security/PasswordEncoder.html#decode-java.lang.String-"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Config.Types.Password"/></returns>
        /// <exception cref="Java.Security.GeneralSecurityException"/>
        public Org.Apache.Kafka.Common.Config.Types.Password Decode(Java.Lang.String arg0)
        {
            return IExecuteWithSignature<Org.Apache.Kafka.Common.Config.Types.Password>("decode", "(Ljava/lang/String;)Lorg/apache/kafka/common/config/types/Password;", arg0);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}