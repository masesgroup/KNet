/*
*  Copyright (c) 2021-2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.6.4.0)
*  using kafka-server-common-3.9.1.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Security
{
    #region PasswordEncoderConfigs declaration
    /// <summary>
    /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-server-common/3.9.1/org/apache/kafka/security/PasswordEncoderConfigs.html"/>
    /// </summary>
    public partial class PasswordEncoderConfigs : MASES.JCOBridge.C2JBridge.JVMBridgeBase<PasswordEncoderConfigs>
    {
        const string _bridgeClassName = "org.apache.kafka.security.PasswordEncoderConfigs";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public PasswordEncoderConfigs() { }
        /// <summary>
        /// Internal constructor: used internally from JCOBridge
        /// </summary>
        [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public PasswordEncoderConfigs(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public PasswordEncoderConfigs(params object[] args) : base(args) { }

        private static readonly global::System.Exception _LocalBridgeClazzException = null;
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <inheritdoc/>
        public override string BridgeClassName => _bridgeClassName;
        /// <inheritdoc/>
        public override bool IsBridgeAbstract => false;
        /// <inheritdoc/>
        public override bool IsBridgeCloseable => false;
        /// <inheritdoc/>
        public override bool IsBridgeInterface => false;
        /// <inheritdoc/>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class

    }
    #endregion

    #region PasswordEncoderConfigs implementation
    public partial class PasswordEncoderConfigs
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-server-common/3.9.1/org/apache/kafka/security/PasswordEncoderConfigs.html#PASSWORD_ENCODER_ITERATIONS_DEFAULT"/>
        /// </summary>
        public static int PASSWORD_ENCODER_ITERATIONS_DEFAULT { get { if (!_PASSWORD_ENCODER_ITERATIONS_DEFAULTReady) { _PASSWORD_ENCODER_ITERATIONS_DEFAULTContent = SGetField<int>(LocalBridgeClazz, "PASSWORD_ENCODER_ITERATIONS_DEFAULT"); _PASSWORD_ENCODER_ITERATIONS_DEFAULTReady = true; } return _PASSWORD_ENCODER_ITERATIONS_DEFAULTContent; } }
        private static int _PASSWORD_ENCODER_ITERATIONS_DEFAULTContent = default;
        private static bool _PASSWORD_ENCODER_ITERATIONS_DEFAULTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-server-common/3.9.1/org/apache/kafka/security/PasswordEncoderConfigs.html#PASSWORD_ENCODER_KEY_LENGTH_DEFAULT"/>
        /// </summary>
        public static int PASSWORD_ENCODER_KEY_LENGTH_DEFAULT { get { if (!_PASSWORD_ENCODER_KEY_LENGTH_DEFAULTReady) { _PASSWORD_ENCODER_KEY_LENGTH_DEFAULTContent = SGetField<int>(LocalBridgeClazz, "PASSWORD_ENCODER_KEY_LENGTH_DEFAULT"); _PASSWORD_ENCODER_KEY_LENGTH_DEFAULTReady = true; } return _PASSWORD_ENCODER_KEY_LENGTH_DEFAULTContent; } }
        private static int _PASSWORD_ENCODER_KEY_LENGTH_DEFAULTContent = default;
        private static bool _PASSWORD_ENCODER_KEY_LENGTH_DEFAULTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-server-common/3.9.1/org/apache/kafka/security/PasswordEncoderConfigs.html#PASSWORD_ENCODER_CIPHER_ALGORITHM_CONFIG"/>
        /// </summary>
        public static Java.Lang.String PASSWORD_ENCODER_CIPHER_ALGORITHM_CONFIG { get { if (!_PASSWORD_ENCODER_CIPHER_ALGORITHM_CONFIGReady) { _PASSWORD_ENCODER_CIPHER_ALGORITHM_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PASSWORD_ENCODER_CIPHER_ALGORITHM_CONFIG"); _PASSWORD_ENCODER_CIPHER_ALGORITHM_CONFIGReady = true; } return _PASSWORD_ENCODER_CIPHER_ALGORITHM_CONFIGContent; } }
        private static Java.Lang.String _PASSWORD_ENCODER_CIPHER_ALGORITHM_CONFIGContent = default;
        private static bool _PASSWORD_ENCODER_CIPHER_ALGORITHM_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-server-common/3.9.1/org/apache/kafka/security/PasswordEncoderConfigs.html#PASSWORD_ENCODER_CIPHER_ALGORITHM_DEFAULT"/>
        /// </summary>
        public static Java.Lang.String PASSWORD_ENCODER_CIPHER_ALGORITHM_DEFAULT { get { if (!_PASSWORD_ENCODER_CIPHER_ALGORITHM_DEFAULTReady) { _PASSWORD_ENCODER_CIPHER_ALGORITHM_DEFAULTContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PASSWORD_ENCODER_CIPHER_ALGORITHM_DEFAULT"); _PASSWORD_ENCODER_CIPHER_ALGORITHM_DEFAULTReady = true; } return _PASSWORD_ENCODER_CIPHER_ALGORITHM_DEFAULTContent; } }
        private static Java.Lang.String _PASSWORD_ENCODER_CIPHER_ALGORITHM_DEFAULTContent = default;
        private static bool _PASSWORD_ENCODER_CIPHER_ALGORITHM_DEFAULTReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-server-common/3.9.1/org/apache/kafka/security/PasswordEncoderConfigs.html#PASSWORD_ENCODER_CIPHER_ALGORITHM_DOC"/>
        /// </summary>
        public static Java.Lang.String PASSWORD_ENCODER_CIPHER_ALGORITHM_DOC { get { if (!_PASSWORD_ENCODER_CIPHER_ALGORITHM_DOCReady) { _PASSWORD_ENCODER_CIPHER_ALGORITHM_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PASSWORD_ENCODER_CIPHER_ALGORITHM_DOC"); _PASSWORD_ENCODER_CIPHER_ALGORITHM_DOCReady = true; } return _PASSWORD_ENCODER_CIPHER_ALGORITHM_DOCContent; } }
        private static Java.Lang.String _PASSWORD_ENCODER_CIPHER_ALGORITHM_DOCContent = default;
        private static bool _PASSWORD_ENCODER_CIPHER_ALGORITHM_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-server-common/3.9.1/org/apache/kafka/security/PasswordEncoderConfigs.html#PASSWORD_ENCODER_ITERATIONS_CONFIG"/>
        /// </summary>
        public static Java.Lang.String PASSWORD_ENCODER_ITERATIONS_CONFIG { get { if (!_PASSWORD_ENCODER_ITERATIONS_CONFIGReady) { _PASSWORD_ENCODER_ITERATIONS_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PASSWORD_ENCODER_ITERATIONS_CONFIG"); _PASSWORD_ENCODER_ITERATIONS_CONFIGReady = true; } return _PASSWORD_ENCODER_ITERATIONS_CONFIGContent; } }
        private static Java.Lang.String _PASSWORD_ENCODER_ITERATIONS_CONFIGContent = default;
        private static bool _PASSWORD_ENCODER_ITERATIONS_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-server-common/3.9.1/org/apache/kafka/security/PasswordEncoderConfigs.html#PASSWORD_ENCODER_ITERATIONS_DOC"/>
        /// </summary>
        public static Java.Lang.String PASSWORD_ENCODER_ITERATIONS_DOC { get { if (!_PASSWORD_ENCODER_ITERATIONS_DOCReady) { _PASSWORD_ENCODER_ITERATIONS_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PASSWORD_ENCODER_ITERATIONS_DOC"); _PASSWORD_ENCODER_ITERATIONS_DOCReady = true; } return _PASSWORD_ENCODER_ITERATIONS_DOCContent; } }
        private static Java.Lang.String _PASSWORD_ENCODER_ITERATIONS_DOCContent = default;
        private static bool _PASSWORD_ENCODER_ITERATIONS_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-server-common/3.9.1/org/apache/kafka/security/PasswordEncoderConfigs.html#PASSWORD_ENCODER_KEY_LENGTH_CONFIG"/>
        /// </summary>
        public static Java.Lang.String PASSWORD_ENCODER_KEY_LENGTH_CONFIG { get { if (!_PASSWORD_ENCODER_KEY_LENGTH_CONFIGReady) { _PASSWORD_ENCODER_KEY_LENGTH_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PASSWORD_ENCODER_KEY_LENGTH_CONFIG"); _PASSWORD_ENCODER_KEY_LENGTH_CONFIGReady = true; } return _PASSWORD_ENCODER_KEY_LENGTH_CONFIGContent; } }
        private static Java.Lang.String _PASSWORD_ENCODER_KEY_LENGTH_CONFIGContent = default;
        private static bool _PASSWORD_ENCODER_KEY_LENGTH_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-server-common/3.9.1/org/apache/kafka/security/PasswordEncoderConfigs.html#PASSWORD_ENCODER_KEY_LENGTH_DOC"/>
        /// </summary>
        public static Java.Lang.String PASSWORD_ENCODER_KEY_LENGTH_DOC { get { if (!_PASSWORD_ENCODER_KEY_LENGTH_DOCReady) { _PASSWORD_ENCODER_KEY_LENGTH_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PASSWORD_ENCODER_KEY_LENGTH_DOC"); _PASSWORD_ENCODER_KEY_LENGTH_DOCReady = true; } return _PASSWORD_ENCODER_KEY_LENGTH_DOCContent; } }
        private static Java.Lang.String _PASSWORD_ENCODER_KEY_LENGTH_DOCContent = default;
        private static bool _PASSWORD_ENCODER_KEY_LENGTH_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-server-common/3.9.1/org/apache/kafka/security/PasswordEncoderConfigs.html#PASSWORD_ENCODER_KEYFACTORY_ALGORITHM_CONFIG"/>
        /// </summary>
        public static Java.Lang.String PASSWORD_ENCODER_KEYFACTORY_ALGORITHM_CONFIG { get { if (!_PASSWORD_ENCODER_KEYFACTORY_ALGORITHM_CONFIGReady) { _PASSWORD_ENCODER_KEYFACTORY_ALGORITHM_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PASSWORD_ENCODER_KEYFACTORY_ALGORITHM_CONFIG"); _PASSWORD_ENCODER_KEYFACTORY_ALGORITHM_CONFIGReady = true; } return _PASSWORD_ENCODER_KEYFACTORY_ALGORITHM_CONFIGContent; } }
        private static Java.Lang.String _PASSWORD_ENCODER_KEYFACTORY_ALGORITHM_CONFIGContent = default;
        private static bool _PASSWORD_ENCODER_KEYFACTORY_ALGORITHM_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-server-common/3.9.1/org/apache/kafka/security/PasswordEncoderConfigs.html#PASSWORD_ENCODER_KEYFACTORY_ALGORITHM_DOC"/>
        /// </summary>
        public static Java.Lang.String PASSWORD_ENCODER_KEYFACTORY_ALGORITHM_DOC { get { if (!_PASSWORD_ENCODER_KEYFACTORY_ALGORITHM_DOCReady) { _PASSWORD_ENCODER_KEYFACTORY_ALGORITHM_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PASSWORD_ENCODER_KEYFACTORY_ALGORITHM_DOC"); _PASSWORD_ENCODER_KEYFACTORY_ALGORITHM_DOCReady = true; } return _PASSWORD_ENCODER_KEYFACTORY_ALGORITHM_DOCContent; } }
        private static Java.Lang.String _PASSWORD_ENCODER_KEYFACTORY_ALGORITHM_DOCContent = default;
        private static bool _PASSWORD_ENCODER_KEYFACTORY_ALGORITHM_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-server-common/3.9.1/org/apache/kafka/security/PasswordEncoderConfigs.html#PASSWORD_ENCODER_OLD_SECRET_CONFIG"/>
        /// </summary>
        public static Java.Lang.String PASSWORD_ENCODER_OLD_SECRET_CONFIG { get { if (!_PASSWORD_ENCODER_OLD_SECRET_CONFIGReady) { _PASSWORD_ENCODER_OLD_SECRET_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PASSWORD_ENCODER_OLD_SECRET_CONFIG"); _PASSWORD_ENCODER_OLD_SECRET_CONFIGReady = true; } return _PASSWORD_ENCODER_OLD_SECRET_CONFIGContent; } }
        private static Java.Lang.String _PASSWORD_ENCODER_OLD_SECRET_CONFIGContent = default;
        private static bool _PASSWORD_ENCODER_OLD_SECRET_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-server-common/3.9.1/org/apache/kafka/security/PasswordEncoderConfigs.html#PASSWORD_ENCODER_OLD_SECRET_DOC"/>
        /// </summary>
        public static Java.Lang.String PASSWORD_ENCODER_OLD_SECRET_DOC { get { if (!_PASSWORD_ENCODER_OLD_SECRET_DOCReady) { _PASSWORD_ENCODER_OLD_SECRET_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PASSWORD_ENCODER_OLD_SECRET_DOC"); _PASSWORD_ENCODER_OLD_SECRET_DOCReady = true; } return _PASSWORD_ENCODER_OLD_SECRET_DOCContent; } }
        private static Java.Lang.String _PASSWORD_ENCODER_OLD_SECRET_DOCContent = default;
        private static bool _PASSWORD_ENCODER_OLD_SECRET_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-server-common/3.9.1/org/apache/kafka/security/PasswordEncoderConfigs.html#PASSWORD_ENCODER_SECRET_CONFIG"/>
        /// </summary>
        public static Java.Lang.String PASSWORD_ENCODER_SECRET_CONFIG { get { if (!_PASSWORD_ENCODER_SECRET_CONFIGReady) { _PASSWORD_ENCODER_SECRET_CONFIGContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PASSWORD_ENCODER_SECRET_CONFIG"); _PASSWORD_ENCODER_SECRET_CONFIGReady = true; } return _PASSWORD_ENCODER_SECRET_CONFIGContent; } }
        private static Java.Lang.String _PASSWORD_ENCODER_SECRET_CONFIGContent = default;
        private static bool _PASSWORD_ENCODER_SECRET_CONFIGReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-server-common/3.9.1/org/apache/kafka/security/PasswordEncoderConfigs.html#PASSWORD_ENCODER_SECRET_DOC"/>
        /// </summary>
        public static Java.Lang.String PASSWORD_ENCODER_SECRET_DOC { get { if (!_PASSWORD_ENCODER_SECRET_DOCReady) { _PASSWORD_ENCODER_SECRET_DOCContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "PASSWORD_ENCODER_SECRET_DOC"); _PASSWORD_ENCODER_SECRET_DOCReady = true; } return _PASSWORD_ENCODER_SECRET_DOCContent; } }
        private static Java.Lang.String _PASSWORD_ENCODER_SECRET_DOCContent = default;
        private static bool _PASSWORD_ENCODER_SECRET_DOCReady = false; // this is used because in case of generics 
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-server-common/3.9.1/org/apache/kafka/security/PasswordEncoderConfigs.html#CONFIG_DEF"/>
        /// </summary>
        public static Org.Apache.Kafka.Common.Config.ConfigDef CONFIG_DEF { get { if (!_CONFIG_DEFReady) { _CONFIG_DEFContent = SGetField<Org.Apache.Kafka.Common.Config.ConfigDef>(LocalBridgeClazz, "CONFIG_DEF"); _CONFIG_DEFReady = true; } return _CONFIG_DEFContent; } }
        private static Org.Apache.Kafka.Common.Config.ConfigDef _CONFIG_DEFContent = default;
        private static bool _CONFIG_DEFReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}