/*
*  Copyright (c) 2021-2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.6.3.0)
*  using kafka-server-common-4.0.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Queue
{
    #region KafkaEventQueue declaration
    /// <summary>
    /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-server-common/4.0.0/org/apache/kafka/queue/KafkaEventQueue.html"/>
    /// </summary>
    public partial class KafkaEventQueue : Org.Apache.Kafka.Queue.EventQueue
    {
        const string _bridgeClassName = "org.apache.kafka.queue.KafkaEventQueue";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public KafkaEventQueue() { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public KafkaEventQueue(params object[] args) : base(args) { }

        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, false);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <inheritdoc/>
        public override string BridgeClassName => _bridgeClassName;
        /// <inheritdoc/>
        public override bool IsBridgeAbstract => false;
        /// <inheritdoc/>
        public override bool IsBridgeCloseable => true;
        /// <inheritdoc/>
        public override bool IsBridgeInterface => false;
        /// <inheritdoc/>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class

    }
    #endregion

    #region KafkaEventQueue implementation
    public partial class KafkaEventQueue
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-server-common/4.0.0/org/apache/kafka/queue/KafkaEventQueue.html#%3Cinit%3E(org.apache.kafka.common.utils.Time,org.apache.kafka.common.utils.LogContext,java.lang.String,org.apache.kafka.queue.EventQueue.Event)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Utils.Time"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Common.Utils.LogContext"/></param>
        /// <param name="arg2"><see cref="Java.Lang.String"/></param>
        /// <param name="arg3"><see cref="Org.Apache.Kafka.Queue.EventQueue.Event"/></param>
        public KafkaEventQueue(Org.Apache.Kafka.Common.Utils.Time arg0, Org.Apache.Kafka.Common.Utils.LogContext arg1, Java.Lang.String arg2, Org.Apache.Kafka.Queue.EventQueue.Event arg3)
            : base(arg0, arg1, arg2, arg3)
        {
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-server-common/4.0.0/org/apache/kafka/queue/KafkaEventQueue.html#%3Cinit%3E(org.apache.kafka.common.utils.Time,org.apache.kafka.common.utils.LogContext,java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Common.Utils.Time"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Common.Utils.LogContext"/></param>
        /// <param name="arg2"><see cref="Java.Lang.String"/></param>
        public KafkaEventQueue(Org.Apache.Kafka.Common.Utils.Time arg0, Org.Apache.Kafka.Common.Utils.LogContext arg1, Java.Lang.String arg2)
            : base(arg0, arg1, arg2)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-server-common/4.0.0/org/apache/kafka/queue/KafkaEventQueue.html#EVENT_HANDLER_THREAD_SUFFIX"/>
        /// </summary>
        public static Java.Lang.String EVENT_HANDLER_THREAD_SUFFIX { get { if (!_EVENT_HANDLER_THREAD_SUFFIXReady) { _EVENT_HANDLER_THREAD_SUFFIXContent = SGetField<Java.Lang.String>(LocalBridgeClazz, "EVENT_HANDLER_THREAD_SUFFIX"); _EVENT_HANDLER_THREAD_SUFFIXReady = true; } return _EVENT_HANDLER_THREAD_SUFFIXContent; } }
        private static Java.Lang.String _EVENT_HANDLER_THREAD_SUFFIXContent = default;
        private static bool _EVENT_HANDLER_THREAD_SUFFIXReady = false; // this is used because in case of generics 

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-server-common/4.0.0/org/apache/kafka/queue/KafkaEventQueue.html#size()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int Size()
        {
            return IExecuteWithSignature<int>("size", "()I");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-server-common/4.0.0/org/apache/kafka/queue/KafkaEventQueue.html#firstDeferredIfIdling()"/>
        /// </summary>
        /// <returns><see cref="Java.Util.Optional"/></returns>
        public Java.Util.Optional<Org.Apache.Kafka.Queue.EventQueue.Event> FirstDeferredIfIdling()
        {
            return IExecuteWithSignature<Java.Util.Optional<Org.Apache.Kafka.Queue.EventQueue.Event>>("firstDeferredIfIdling", "()Ljava/util/Optional;");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-server-common/4.0.0/org/apache/kafka/queue/KafkaEventQueue.html#time()"/>
        /// </summary>
        /// <returns><see cref="Org.Apache.Kafka.Common.Utils.Time"/></returns>
        public Org.Apache.Kafka.Common.Utils.Time Time()
        {
            return IExecuteWithSignature<Org.Apache.Kafka.Common.Utils.Time>("time", "()Lorg/apache/kafka/common/utils/Time;");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-server-common/4.0.0/org/apache/kafka/queue/KafkaEventQueue.html#beginShutdown(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        public void BeginShutdown(Java.Lang.String arg0)
        {
            IExecuteWithSignature("beginShutdown", "(Ljava/lang/String;)V", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-server-common/4.0.0/org/apache/kafka/queue/KafkaEventQueue.html#cancelDeferred(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        public void CancelDeferred(Java.Lang.String arg0)
        {
            IExecuteWithSignature("cancelDeferred", "(Ljava/lang/String;)V", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-server-common/4.0.0/org/apache/kafka/queue/KafkaEventQueue.html#close()"/>
        /// </summary>
        /// <exception cref="Java.Lang.InterruptedException"/>
        public void Close()
        {
            IExecuteWithSignature("close", "()V");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-server-common/4.0.0/org/apache/kafka/queue/KafkaEventQueue.html#enqueue(org.apache.kafka.queue.EventQueue.EventInsertionType,java.lang.String,java.util.function.Function,org.apache.kafka.queue.EventQueue.Event)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Queue.EventQueue.EventInsertionType"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="Java.Util.Function.Function"/></param>
        /// <param name="arg3"><see cref="Org.Apache.Kafka.Queue.EventQueue.Event"/></param>
        public void Enqueue(Org.Apache.Kafka.Queue.EventQueue.EventInsertionType arg0, Java.Lang.String arg1, Java.Util.Function.Function<Java.Util.OptionalLong, Java.Util.OptionalLong> arg2, Org.Apache.Kafka.Queue.EventQueue.Event arg3)
        {
            IExecuteWithSignature("enqueue", "(Lorg/apache/kafka/queue/EventQueue$EventInsertionType;Ljava/lang/String;Ljava/util/function/Function;Lorg/apache/kafka/queue/EventQueue$Event;)V", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-server-common/4.0.0/org/apache/kafka/queue/KafkaEventQueue.html#wakeup()"/>
        /// </summary>
        public void Wakeup()
        {
            IExecuteWithSignature("wakeup", "()V");
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}