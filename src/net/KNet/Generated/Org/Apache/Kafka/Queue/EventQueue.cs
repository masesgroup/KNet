/*
*  Copyright (c) 2021-2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.6.4.0)
*  using kafka-server-common-4.1.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Org.Apache.Kafka.Queue
{
    #region EventQueue declaration
    /// <summary>
    /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-server-common/4.1.0/org/apache/kafka/queue/EventQueue.html"/>
    /// </summary>
    public partial class EventQueue : Java.Lang.AutoCloseable
    {
        const string _bridgeClassName = "org.apache.kafka.queue.EventQueue";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        [global::System.Obsolete("EventQueue class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public EventQueue() { }
        /// <summary>
        /// Internal constructor: used internally from JCOBridge
        /// </summary>
        [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public EventQueue(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        [global::System.Obsolete("EventQueue class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public EventQueue(params object[] args) : base(args) { }

        private static readonly global::System.Exception _LocalBridgeClazzException = null;
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <inheritdoc/>
        public override string BridgeClassName => _bridgeClassName;
        /// <inheritdoc/>
        public override bool IsBridgeAbstract => true;
        /// <inheritdoc/>
        public override bool IsBridgeCloseable => true;
        /// <inheritdoc/>
        public override bool IsBridgeInterface => true;
        /// <inheritdoc/>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class
        #region DeadlineFunction declaration
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-server-common/4.1.0/org/apache/kafka/queue/EventQueue.DeadlineFunction.html"/>
        /// </summary>
        public partial class DeadlineFunction : MASES.JCOBridge.C2JBridge.JVMBridgeBase<DeadlineFunction>
        {
            const string _bridgeClassName = "org.apache.kafka.queue.EventQueue$DeadlineFunction";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public DeadlineFunction() { }
            /// <summary>
            /// Internal constructor: used internally from JCOBridge
            /// </summary>
            [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public DeadlineFunction(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public DeadlineFunction(params object[] args) : base(args) { }

            private static readonly global::System.Exception _LocalBridgeClazzException = null;
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <inheritdoc/>
            public override string BridgeClassName => _bridgeClassName;
            /// <inheritdoc/>
            public override bool IsBridgeAbstract => false;
            /// <inheritdoc/>
            public override bool IsBridgeCloseable => false;
            /// <inheritdoc/>
            public override bool IsBridgeInterface => false;
            /// <inheritdoc/>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region EarliestDeadlineFunction declaration
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-server-common/4.1.0/org/apache/kafka/queue/EventQueue.EarliestDeadlineFunction.html"/>
        /// </summary>
        public partial class EarliestDeadlineFunction : MASES.JCOBridge.C2JBridge.JVMBridgeBase<EarliestDeadlineFunction>
        {
            const string _bridgeClassName = "org.apache.kafka.queue.EventQueue$EarliestDeadlineFunction";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public EarliestDeadlineFunction() { }
            /// <summary>
            /// Internal constructor: used internally from JCOBridge
            /// </summary>
            [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public EarliestDeadlineFunction(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public EarliestDeadlineFunction(params object[] args) : base(args) { }

            private static readonly global::System.Exception _LocalBridgeClazzException = null;
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <inheritdoc/>
            public override string BridgeClassName => _bridgeClassName;
            /// <inheritdoc/>
            public override bool IsBridgeAbstract => false;
            /// <inheritdoc/>
            public override bool IsBridgeCloseable => false;
            /// <inheritdoc/>
            public override bool IsBridgeInterface => false;
            /// <inheritdoc/>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region Event declaration
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-server-common/4.1.0/org/apache/kafka/queue/EventQueue.Event.html"/>
        /// </summary>
        public partial class Event : MASES.JCOBridge.C2JBridge.JVMBridgeBase<Event>
        {
            const string _bridgeClassName = "org.apache.kafka.queue.EventQueue$Event";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            [global::System.Obsolete("Event class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public Event() { }
            /// <summary>
            /// Internal constructor: used internally from JCOBridge
            /// </summary>
            [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public Event(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            [global::System.Obsolete("Event class represents, in .NET, an instance of a JVM interface or abstract class. This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public Event(params object[] args) : base(args) { }

            private static readonly global::System.Exception _LocalBridgeClazzException = null;
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <inheritdoc/>
            public override string BridgeClassName => _bridgeClassName;
            /// <inheritdoc/>
            public override bool IsBridgeAbstract => true;
            /// <inheritdoc/>
            public override bool IsBridgeCloseable => false;
            /// <inheritdoc/>
            public override bool IsBridgeInterface => true;
            /// <inheritdoc/>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region EventInsertionType declaration
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-server-common/4.1.0/org/apache/kafka/queue/EventQueue.EventInsertionType.html"/>
        /// </summary>
        public partial class EventInsertionType : Java.Lang.Enum<Org.Apache.Kafka.Queue.EventQueue.EventInsertionType>
        {
            const string _bridgeClassName = "org.apache.kafka.queue.EventQueue$EventInsertionType";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public EventInsertionType() { }
            /// <summary>
            /// Internal constructor: used internally from JCOBridge
            /// </summary>
            [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public EventInsertionType(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public EventInsertionType(params object[] args) : base(args) { }

            private static readonly global::System.Exception _LocalBridgeClazzException = null;
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <inheritdoc/>
            public override string BridgeClassName => _bridgeClassName;
            /// <inheritdoc/>
            public override bool IsBridgeAbstract => false;
            /// <inheritdoc/>
            public override bool IsBridgeCloseable => false;
            /// <inheritdoc/>
            public override bool IsBridgeInterface => false;
            /// <inheritdoc/>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region NoDeadlineFunction declaration
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-server-common/4.1.0/org/apache/kafka/queue/EventQueue.NoDeadlineFunction.html"/>
        /// </summary>
        public partial class NoDeadlineFunction : MASES.JCOBridge.C2JBridge.JVMBridgeBase<NoDeadlineFunction>
        {
            const string _bridgeClassName = "org.apache.kafka.queue.EventQueue$NoDeadlineFunction";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public NoDeadlineFunction() { }
            /// <summary>
            /// Internal constructor: used internally from JCOBridge
            /// </summary>
            [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public NoDeadlineFunction(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public NoDeadlineFunction(params object[] args) : base(args) { }

            private static readonly global::System.Exception _LocalBridgeClazzException = null;
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <inheritdoc/>
            public override string BridgeClassName => _bridgeClassName;
            /// <inheritdoc/>
            public override bool IsBridgeAbstract => false;
            /// <inheritdoc/>
            public override bool IsBridgeCloseable => false;
            /// <inheritdoc/>
            public override bool IsBridgeInterface => false;
            /// <inheritdoc/>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

        #region VoidEvent declaration
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-server-common/4.1.0/org/apache/kafka/queue/EventQueue.VoidEvent.html"/>
        /// </summary>
        public partial class VoidEvent : Org.Apache.Kafka.Queue.EventQueue.Event
        {
            const string _bridgeClassName = "org.apache.kafka.queue.EventQueue$VoidEvent";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public VoidEvent() { }
            /// <summary>
            /// Internal constructor: used internally from JCOBridge
            /// </summary>
            [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public VoidEvent(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public VoidEvent(params object[] args) : base(args) { }

            private static readonly global::System.Exception _LocalBridgeClazzException = null;
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <inheritdoc/>
            public override string BridgeClassName => _bridgeClassName;
            /// <inheritdoc/>
            public override bool IsBridgeAbstract => false;
            /// <inheritdoc/>
            public override bool IsBridgeCloseable => false;
            /// <inheritdoc/>
            public override bool IsBridgeInterface => false;
            /// <inheritdoc/>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

    
    }
    #endregion

    #region IEventQueue
    /// <summary>
    /// .NET interface skeleton to be manually developed following <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-server-common/4.1.0/org/apache/kafka/queue/EventQueue.html"/>
    /// </summary>
    public partial interface IEventQueue : Java.Lang.IAutoCloseable
    {
        #region Instance methods

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion

    #region EventQueue implementation
    public partial class EventQueue : Org.Apache.Kafka.Queue.IEventQueue
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-server-common/4.1.0/org/apache/kafka/queue/EventQueue.html#size()"/>
        /// </summary>
        /// <returns><see cref="int"/></returns>
        public int Size()
        {
            return IExecuteWithSignature<int>("size", "()I");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-server-common/4.1.0/org/apache/kafka/queue/EventQueue.html#beginShutdown(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        public void BeginShutdown(Java.Lang.String arg0)
        {
            IExecuteWithSignature("beginShutdown", "(Ljava/lang/String;)V", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-server-common/4.1.0/org/apache/kafka/queue/EventQueue.html#cancelDeferred(java.lang.String)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        public void CancelDeferred(Java.Lang.String arg0)
        {
            IExecuteWithSignature("cancelDeferred", "(Ljava/lang/String;)V", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-server-common/4.1.0/org/apache/kafka/queue/EventQueue.html#close()"/>
        /// </summary>
        /// <exception cref="Java.Lang.InterruptedException"/>
        public void Close()
        {
            IExecuteWithSignature("close", "()V");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-server-common/4.1.0/org/apache/kafka/queue/EventQueue.html#enqueue(org.apache.kafka.queue.EventQueue.EventInsertionType,java.lang.String,java.util.function.UnaryOperator,org.apache.kafka.queue.EventQueue.Event)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Queue.EventQueue.EventInsertionType"/></param>
        /// <param name="arg1"><see cref="Java.Lang.String"/></param>
        /// <param name="arg2"><see cref="Java.Util.Function.UnaryOperator"/></param>
        /// <param name="arg3"><see cref="Org.Apache.Kafka.Queue.EventQueue.Event"/></param>
        public void Enqueue(Org.Apache.Kafka.Queue.EventQueue.EventInsertionType arg0, Java.Lang.String arg1, Java.Util.Function.UnaryOperator<Java.Util.OptionalLong> arg2, Org.Apache.Kafka.Queue.EventQueue.Event arg3)
        {
            IExecuteWithSignature("enqueue", "(Lorg/apache/kafka/queue/EventQueue$EventInsertionType;Ljava/lang/String;Ljava/util/function/UnaryOperator;Lorg/apache/kafka/queue/EventQueue$Event;)V", arg0, arg1, arg2, arg3);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-server-common/4.1.0/org/apache/kafka/queue/EventQueue.html#isEmpty()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public bool IsEmpty()
        {
            return IExecuteWithSignature<bool>("isEmpty", "()Z");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-server-common/4.1.0/org/apache/kafka/queue/EventQueue.html#append(org.apache.kafka.queue.EventQueue.Event)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Queue.EventQueue.Event"/></param>
        public void Append(Org.Apache.Kafka.Queue.EventQueue.Event arg0)
        {
            IExecuteWithSignature("append", "(Lorg/apache/kafka/queue/EventQueue$Event;)V", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-server-common/4.1.0/org/apache/kafka/queue/EventQueue.html#appendWithDeadline(long,org.apache.kafka.queue.EventQueue.Event)"/>
        /// </summary>
        /// <param name="arg0"><see cref="long"/></param>
        /// <param name="arg1"><see cref="Org.Apache.Kafka.Queue.EventQueue.Event"/></param>
        public void AppendWithDeadline(long arg0, Org.Apache.Kafka.Queue.EventQueue.Event arg1)
        {
            IExecuteWithSignature("appendWithDeadline", "(JLorg/apache/kafka/queue/EventQueue$Event;)V", arg0, arg1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-server-common/4.1.0/org/apache/kafka/queue/EventQueue.html#prepend(org.apache.kafka.queue.EventQueue.Event)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Org.Apache.Kafka.Queue.EventQueue.Event"/></param>
        public void Prepend(Org.Apache.Kafka.Queue.EventQueue.Event arg0)
        {
            IExecuteWithSignature("prepend", "(Lorg/apache/kafka/queue/EventQueue$Event;)V", arg0);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-server-common/4.1.0/org/apache/kafka/queue/EventQueue.html#scheduleDeferred(java.lang.String,java.util.function.UnaryOperator,org.apache.kafka.queue.EventQueue.Event)"/>
        /// </summary>
        /// <param name="arg0"><see cref="Java.Lang.String"/></param>
        /// <param name="arg1"><see cref="Java.Util.Function.UnaryOperator"/></param>
        /// <param name="arg2"><see cref="Org.Apache.Kafka.Queue.EventQueue.Event"/></param>
        public void ScheduleDeferred(Java.Lang.String arg0, Java.Util.Function.UnaryOperator<Java.Util.OptionalLong> arg1, Org.Apache.Kafka.Queue.EventQueue.Event arg2)
        {
            IExecuteWithSignature("scheduleDeferred", "(Ljava/lang/String;Ljava/util/function/UnaryOperator;Lorg/apache/kafka/queue/EventQueue$Event;)V", arg0, arg1, arg2);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-server-common/4.1.0/org/apache/kafka/queue/EventQueue.html#wakeup()"/>
        /// </summary>
        public void Wakeup()
        {
            IExecuteWithSignature("wakeup", "()V");
        }

        #endregion

        #region Nested classes
        #region DeadlineFunction implementation
        public partial class DeadlineFunction
        {
            #region Constructors
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-server-common/4.1.0/org/apache/kafka/queue/EventQueue.DeadlineFunction.html#%3Cinit%3E(long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="long"/></param>
            public DeadlineFunction(long arg0)
                : base(arg0)
            {
            }

            #endregion

            #region Class/Interface conversion operators
            /// <summary>
            /// Converter from <see cref="Org.Apache.Kafka.Queue.EventQueue.DeadlineFunction"/> to <see cref="Java.Util.Function.UnaryOperator"/>
            /// </summary>
            public static implicit operator Java.Util.Function.UnaryOperator(Org.Apache.Kafka.Queue.EventQueue.DeadlineFunction t) => t.Cast<Java.Util.Function.UnaryOperator>();

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-server-common/4.1.0/org/apache/kafka/queue/EventQueue.DeadlineFunction.html#apply(java.lang.Object)"/>
            /// </summary>
            /// <param name="arg0"><see cref="object"/></param>
            /// <returns><see cref="object"/></returns>
            public object Apply(object arg0)
            {
                return IExecuteWithSignature("apply", "(Ljava/lang/Object;)Ljava/lang/Object;", arg0);
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-server-common/4.1.0/org/apache/kafka/queue/EventQueue.DeadlineFunction.html#apply(java.util.OptionalLong)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Util.OptionalLong"/></param>
            /// <returns><see cref="Java.Util.OptionalLong"/></returns>
            public Java.Util.OptionalLong Apply(Java.Util.OptionalLong arg0)
            {
                return IExecuteWithSignature<Java.Util.OptionalLong>("apply", "(Ljava/util/OptionalLong;)Ljava/util/OptionalLong;", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region EarliestDeadlineFunction implementation
        public partial class EarliestDeadlineFunction
        {
            #region Constructors
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-server-common/4.1.0/org/apache/kafka/queue/EventQueue.EarliestDeadlineFunction.html#%3Cinit%3E(long)"/>
            /// </summary>
            /// <param name="arg0"><see cref="long"/></param>
            public EarliestDeadlineFunction(long arg0)
                : base(arg0)
            {
            }

            #endregion

            #region Class/Interface conversion operators
            /// <summary>
            /// Converter from <see cref="Org.Apache.Kafka.Queue.EventQueue.EarliestDeadlineFunction"/> to <see cref="Java.Util.Function.UnaryOperator"/>
            /// </summary>
            public static implicit operator Java.Util.Function.UnaryOperator(Org.Apache.Kafka.Queue.EventQueue.EarliestDeadlineFunction t) => t.Cast<Java.Util.Function.UnaryOperator>();

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-server-common/4.1.0/org/apache/kafka/queue/EventQueue.EarliestDeadlineFunction.html#apply(java.lang.Object)"/>
            /// </summary>
            /// <param name="arg0"><see cref="object"/></param>
            /// <returns><see cref="object"/></returns>
            public object Apply(object arg0)
            {
                return IExecuteWithSignature("apply", "(Ljava/lang/Object;)Ljava/lang/Object;", arg0);
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-server-common/4.1.0/org/apache/kafka/queue/EventQueue.EarliestDeadlineFunction.html#apply(java.util.OptionalLong)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Util.OptionalLong"/></param>
            /// <returns><see cref="Java.Util.OptionalLong"/></returns>
            public Java.Util.OptionalLong Apply(Java.Util.OptionalLong arg0)
            {
                return IExecuteWithSignature<Java.Util.OptionalLong>("apply", "(Ljava/util/OptionalLong;)Ljava/util/OptionalLong;", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region Event implementation
        public partial class Event
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-server-common/4.1.0/org/apache/kafka/queue/EventQueue.Event.html#run()"/>
            /// </summary>
            /// <exception cref="Java.Lang.Exception"/>
            public void Run()
            {
                IExecuteWithSignature("run", "()V");
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-server-common/4.1.0/org/apache/kafka/queue/EventQueue.Event.html#handleException(java.lang.Throwable)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.Throwable"/></param>
            public void HandleException(MASES.JCOBridge.C2JBridge.JVMBridgeException arg0)
            {
                IExecuteWithSignature("handleException", "(Ljava/lang/Throwable;)V", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region EventInsertionType implementation
        public partial class EventInsertionType
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-server-common/4.1.0/org/apache/kafka/queue/EventQueue.EventInsertionType.html#APPEND"/>
            /// </summary>
            public static Org.Apache.Kafka.Queue.EventQueue.EventInsertionType APPEND { get { if (!_APPENDReady) { _APPENDContent = SGetField<Org.Apache.Kafka.Queue.EventQueue.EventInsertionType>(LocalBridgeClazz, "APPEND"); _APPENDReady = true; } return _APPENDContent; } }
            private static Org.Apache.Kafka.Queue.EventQueue.EventInsertionType _APPENDContent = default;
            private static bool _APPENDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-server-common/4.1.0/org/apache/kafka/queue/EventQueue.EventInsertionType.html#DEFERRED"/>
            /// </summary>
            public static Org.Apache.Kafka.Queue.EventQueue.EventInsertionType DEFERRED { get { if (!_DEFERREDReady) { _DEFERREDContent = SGetField<Org.Apache.Kafka.Queue.EventQueue.EventInsertionType>(LocalBridgeClazz, "DEFERRED"); _DEFERREDReady = true; } return _DEFERREDContent; } }
            private static Org.Apache.Kafka.Queue.EventQueue.EventInsertionType _DEFERREDContent = default;
            private static bool _DEFERREDReady = false; // this is used because in case of generics 
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-server-common/4.1.0/org/apache/kafka/queue/EventQueue.EventInsertionType.html#PREPEND"/>
            /// </summary>
            public static Org.Apache.Kafka.Queue.EventQueue.EventInsertionType PREPEND { get { if (!_PREPENDReady) { _PREPENDContent = SGetField<Org.Apache.Kafka.Queue.EventQueue.EventInsertionType>(LocalBridgeClazz, "PREPEND"); _PREPENDReady = true; } return _PREPENDContent; } }
            private static Org.Apache.Kafka.Queue.EventQueue.EventInsertionType _PREPENDContent = default;
            private static bool _PREPENDReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-server-common/4.1.0/org/apache/kafka/queue/EventQueue.EventInsertionType.html#valueOf(java.lang.String)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Lang.String"/></param>
            /// <returns><see cref="Org.Apache.Kafka.Queue.EventQueue.EventInsertionType"/></returns>
            public static Org.Apache.Kafka.Queue.EventQueue.EventInsertionType ValueOf(Java.Lang.String arg0)
            {
                return SExecuteWithSignature<Org.Apache.Kafka.Queue.EventQueue.EventInsertionType>(LocalBridgeClazz, "valueOf", "(Ljava/lang/String;)Lorg/apache/kafka/queue/EventQueue$EventInsertionType;", arg0);
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-server-common/4.1.0/org/apache/kafka/queue/EventQueue.EventInsertionType.html#values()"/>
            /// </summary>
            /// <returns><see cref="Org.Apache.Kafka.Queue.EventQueue.EventInsertionType"/></returns>
            public static Org.Apache.Kafka.Queue.EventQueue.EventInsertionType[] Values()
            {
                return SExecuteWithSignatureArray<Org.Apache.Kafka.Queue.EventQueue.EventInsertionType>(LocalBridgeClazz, "values", "()[Lorg/apache/kafka/queue/EventQueue$EventInsertionType;");
            }

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region NoDeadlineFunction implementation
        public partial class NoDeadlineFunction
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators
            /// <summary>
            /// Converter from <see cref="Org.Apache.Kafka.Queue.EventQueue.NoDeadlineFunction"/> to <see cref="Java.Util.Function.UnaryOperator"/>
            /// </summary>
            public static implicit operator Java.Util.Function.UnaryOperator(Org.Apache.Kafka.Queue.EventQueue.NoDeadlineFunction t) => t.Cast<Java.Util.Function.UnaryOperator>();

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-server-common/4.1.0/org/apache/kafka/queue/EventQueue.NoDeadlineFunction.html#INSTANCE"/>
            /// </summary>
            public static Org.Apache.Kafka.Queue.EventQueue.NoDeadlineFunction INSTANCE { get { if (!_INSTANCEReady) { _INSTANCEContent = SGetField<Org.Apache.Kafka.Queue.EventQueue.NoDeadlineFunction>(LocalBridgeClazz, "INSTANCE"); _INSTANCEReady = true; } return _INSTANCEContent; } }
            private static Org.Apache.Kafka.Queue.EventQueue.NoDeadlineFunction _INSTANCEContent = default;
            private static bool _INSTANCEReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-server-common/4.1.0/org/apache/kafka/queue/EventQueue.NoDeadlineFunction.html#apply(java.lang.Object)"/>
            /// </summary>
            /// <param name="arg0"><see cref="object"/></param>
            /// <returns><see cref="object"/></returns>
            public object Apply(object arg0)
            {
                return IExecuteWithSignature("apply", "(Ljava/lang/Object;)Ljava/lang/Object;", arg0);
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-server-common/4.1.0/org/apache/kafka/queue/EventQueue.NoDeadlineFunction.html#apply(java.util.OptionalLong)"/>
            /// </summary>
            /// <param name="arg0"><see cref="Java.Util.OptionalLong"/></param>
            /// <returns><see cref="Java.Util.OptionalLong"/></returns>
            public Java.Util.OptionalLong Apply(Java.Util.OptionalLong arg0)
            {
                return IExecuteWithSignature<Java.Util.OptionalLong>("apply", "(Ljava/util/OptionalLong;)Ljava/util/OptionalLong;", arg0);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region VoidEvent implementation
        public partial class VoidEvent
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-server-common/4.1.0/org/apache/kafka/queue/EventQueue.VoidEvent.html#INSTANCE"/>
            /// </summary>
            public static Org.Apache.Kafka.Queue.EventQueue.VoidEvent INSTANCE { get { if (!_INSTANCEReady) { _INSTANCEContent = SGetField<Org.Apache.Kafka.Queue.EventQueue.VoidEvent>(LocalBridgeClazz, "INSTANCE"); _INSTANCEReady = true; } return _INSTANCEContent; } }
            private static Org.Apache.Kafka.Queue.EventQueue.VoidEvent _INSTANCEContent = default;
            private static bool _INSTANCEReady = false; // this is used because in case of generics 

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka-server-common/4.1.0/org/apache/kafka/queue/EventQueue.VoidEvent.html#run()"/>
            /// </summary>
            /// <exception cref="Java.Lang.Exception"/>
            public void Run()
            {
                IExecuteWithSignature("run", "()V");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}