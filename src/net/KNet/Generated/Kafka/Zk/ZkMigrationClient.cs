/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka_2.13-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Kafka.Zk
{
    #region ZkMigrationClient
    public partial class ZkMigrationClient
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/ZkMigrationClient.html#%3Cinit%3E(kafka.zk.KafkaZkClient)"/>
        /// </summary>
        /// <param name="zkClient"><see cref="Kafka.Zk.KafkaZkClient"/></param>
        public ZkMigrationClient(Kafka.Zk.KafkaZkClient zkClient)
            : base(zkClient)
        {
        }

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Kafka.Zk.ZkMigrationClient"/> to <see cref="Org.Apache.Kafka.Metadata.Migration.MigrationClient"/>
        /// </summary>
        public static implicit operator Org.Apache.Kafka.Metadata.Migration.MigrationClient(Kafka.Zk.ZkMigrationClient t) => t.Cast<Org.Apache.Kafka.Metadata.Migration.MigrationClient>();
        /// <summary>
        /// Converter from <see cref="Kafka.Zk.ZkMigrationClient"/> to <see cref="Kafka.Utils.Logging"/>
        /// </summary>
        public static implicit operator Kafka.Utils.Logging(Kafka.Zk.ZkMigrationClient t) => t.Cast<Kafka.Utils.Logging>();

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/ZkMigrationClient.html#isDebugEnabled()"/> 
        /// </summary>
        public bool IsDebugEnabled
        {
            get { return IExecute<bool>("isDebugEnabled"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/ZkMigrationClient.html#isTraceEnabled()"/> 
        /// </summary>
        public bool IsTraceEnabled
        {
            get { return IExecute<bool>("isTraceEnabled"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/ZkMigrationClient.html#logger()"/> 
        /// </summary>
        public Com.Typesafe.Scalalogging.Logger Logger
        {
            get { return IExecute<Com.Typesafe.Scalalogging.Logger>("logger"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/ZkMigrationClient.html#loggerName()"/> 
        /// </summary>
        public string LoggerName
        {
            get { return IExecute<string>("loggerName"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/ZkMigrationClient.html#logIdent()"/> 
        /// </summary>
        public string LogIdent
        {
            get { return IExecute<string>("logIdent"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/ZkMigrationClient.html#readBrokerIds()"/> 
        /// </summary>
        public Java.Util.Set<int?> ReadBrokerIds
        {
            get { return IExecute<Java.Util.Set<int?>>("readBrokerIds"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/ZkMigrationClient.html#readBrokerIdsFromTopicAssignments()"/> 
        /// </summary>
        public Java.Util.Set<int?> ReadBrokerIdsFromTopicAssignments
        {
            get { return IExecute<Java.Util.Set<int?>>("readBrokerIdsFromTopicAssignments"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/ZkMigrationClient.html#msgWithLogIdent(java.lang.String)"/>
        /// </summary>
        /// <param name="msg"><see cref="string"/></param>
        /// <returns><see cref="string"/></returns>
        public string MsgWithLogIdent(string msg)
        {
            return IExecute<string>("msgWithLogIdent", msg);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/ZkMigrationClient.html#claimControllerLeadership(org.apache.kafka.metadata.migration.ZkMigrationLeadershipState)"/>
        /// </summary>
        /// <param name="state"><see cref="Org.Apache.Kafka.Metadata.Migration.ZkMigrationLeadershipState"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Metadata.Migration.ZkMigrationLeadershipState"/></returns>
        public Org.Apache.Kafka.Metadata.Migration.ZkMigrationLeadershipState ClaimControllerLeadership(Org.Apache.Kafka.Metadata.Migration.ZkMigrationLeadershipState state)
        {
            return IExecute<Org.Apache.Kafka.Metadata.Migration.ZkMigrationLeadershipState>("claimControllerLeadership", state);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/ZkMigrationClient.html#createTopic(java.lang.String,org.apache.kafka.common.Uuid,java.util.Map,org.apache.kafka.metadata.migration.ZkMigrationLeadershipState)"/>
        /// </summary>
        /// <param name="topicName"><see cref="string"/></param>
        /// <param name="topicId"><see cref="Org.Apache.Kafka.Common.Uuid"/></param>
        /// <param name="partitions"><see cref="Java.Util.Map"/></param>
        /// <param name="state"><see cref="Org.Apache.Kafka.Metadata.Migration.ZkMigrationLeadershipState"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Metadata.Migration.ZkMigrationLeadershipState"/></returns>
        public Org.Apache.Kafka.Metadata.Migration.ZkMigrationLeadershipState CreateTopic(string topicName, Org.Apache.Kafka.Common.Uuid topicId, Java.Util.Map<int?, Org.Apache.Kafka.Metadata.PartitionRegistration> partitions, Org.Apache.Kafka.Metadata.Migration.ZkMigrationLeadershipState state)
        {
            return IExecute<Org.Apache.Kafka.Metadata.Migration.ZkMigrationLeadershipState>("createTopic", topicName, topicId, partitions, state);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/ZkMigrationClient.html#getOrCreateMigrationRecoveryState(org.apache.kafka.metadata.migration.ZkMigrationLeadershipState)"/>
        /// </summary>
        /// <param name="initialState"><see cref="Org.Apache.Kafka.Metadata.Migration.ZkMigrationLeadershipState"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Metadata.Migration.ZkMigrationLeadershipState"/></returns>
        public Org.Apache.Kafka.Metadata.Migration.ZkMigrationLeadershipState GetOrCreateMigrationRecoveryState(Org.Apache.Kafka.Metadata.Migration.ZkMigrationLeadershipState initialState)
        {
            return IExecute<Org.Apache.Kafka.Metadata.Migration.ZkMigrationLeadershipState>("getOrCreateMigrationRecoveryState", initialState);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/ZkMigrationClient.html#releaseControllerLeadership(org.apache.kafka.metadata.migration.ZkMigrationLeadershipState)"/>
        /// </summary>
        /// <param name="state"><see cref="Org.Apache.Kafka.Metadata.Migration.ZkMigrationLeadershipState"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Metadata.Migration.ZkMigrationLeadershipState"/></returns>
        public Org.Apache.Kafka.Metadata.Migration.ZkMigrationLeadershipState ReleaseControllerLeadership(Org.Apache.Kafka.Metadata.Migration.ZkMigrationLeadershipState state)
        {
            return IExecute<Org.Apache.Kafka.Metadata.Migration.ZkMigrationLeadershipState>("releaseControllerLeadership", state);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/ZkMigrationClient.html#setMigrationRecoveryState(org.apache.kafka.metadata.migration.ZkMigrationLeadershipState)"/>
        /// </summary>
        /// <param name="state"><see cref="Org.Apache.Kafka.Metadata.Migration.ZkMigrationLeadershipState"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Metadata.Migration.ZkMigrationLeadershipState"/></returns>
        public Org.Apache.Kafka.Metadata.Migration.ZkMigrationLeadershipState SetMigrationRecoveryState(Org.Apache.Kafka.Metadata.Migration.ZkMigrationLeadershipState state)
        {
            return IExecute<Org.Apache.Kafka.Metadata.Migration.ZkMigrationLeadershipState>("setMigrationRecoveryState", state);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/ZkMigrationClient.html#updateTopicPartitions(java.util.Map,org.apache.kafka.metadata.migration.ZkMigrationLeadershipState)"/>
        /// </summary>
        /// <param name="topicPartitions"><see cref="Java.Util.Map"/></param>
        /// <param name="state"><see cref="Org.Apache.Kafka.Metadata.Migration.ZkMigrationLeadershipState"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Metadata.Migration.ZkMigrationLeadershipState"/></returns>
        public Org.Apache.Kafka.Metadata.Migration.ZkMigrationLeadershipState UpdateTopicPartitions(Java.Util.Map<string, Java.Util.Map<int?, Org.Apache.Kafka.Metadata.PartitionRegistration>> topicPartitions, Org.Apache.Kafka.Metadata.Migration.ZkMigrationLeadershipState state)
        {
            return IExecute<Org.Apache.Kafka.Metadata.Migration.ZkMigrationLeadershipState>("updateTopicPartitions", topicPartitions, state);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/ZkMigrationClient.html#writeClientQuotas(java.util.Map,java.util.Map,org.apache.kafka.metadata.migration.ZkMigrationLeadershipState)"/>
        /// </summary>
        /// <param name="entity"><see cref="Java.Util.Map"/></param>
        /// <param name="quotas"><see cref="Java.Util.Map"/></param>
        /// <param name="state"><see cref="Org.Apache.Kafka.Metadata.Migration.ZkMigrationLeadershipState"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Metadata.Migration.ZkMigrationLeadershipState"/></returns>
        public Org.Apache.Kafka.Metadata.Migration.ZkMigrationLeadershipState WriteClientQuotas(Java.Util.Map<string, string> entity, Java.Util.Map<string, double?> quotas, Org.Apache.Kafka.Metadata.Migration.ZkMigrationLeadershipState state)
        {
            return IExecute<Org.Apache.Kafka.Metadata.Migration.ZkMigrationLeadershipState>("writeClientQuotas", entity, quotas, state);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/ZkMigrationClient.html#writeConfigs(org.apache.kafka.common.config.ConfigResource,java.util.Map,org.apache.kafka.metadata.migration.ZkMigrationLeadershipState)"/>
        /// </summary>
        /// <param name="resource"><see cref="Org.Apache.Kafka.Common.Config.ConfigResource"/></param>
        /// <param name="configs"><see cref="Java.Util.Map"/></param>
        /// <param name="state"><see cref="Org.Apache.Kafka.Metadata.Migration.ZkMigrationLeadershipState"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Metadata.Migration.ZkMigrationLeadershipState"/></returns>
        public Org.Apache.Kafka.Metadata.Migration.ZkMigrationLeadershipState WriteConfigs(Org.Apache.Kafka.Common.Config.ConfigResource resource, Java.Util.Map<string, string> configs, Org.Apache.Kafka.Metadata.Migration.ZkMigrationLeadershipState state)
        {
            return IExecute<Org.Apache.Kafka.Metadata.Migration.ZkMigrationLeadershipState>("writeConfigs", resource, configs, state);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/ZkMigrationClient.html#writeMetadataDeltaToZookeeper(org.apache.kafka.image.MetadataDelta,org.apache.kafka.image.MetadataImage,org.apache.kafka.metadata.migration.ZkMigrationLeadershipState)"/>
        /// </summary>
        /// <param name="delta"><see cref="Org.Apache.Kafka.Image.MetadataDelta"/></param>
        /// <param name="image"><see cref="Org.Apache.Kafka.Image.MetadataImage"/></param>
        /// <param name="state"><see cref="Org.Apache.Kafka.Metadata.Migration.ZkMigrationLeadershipState"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Metadata.Migration.ZkMigrationLeadershipState"/></returns>
        public Org.Apache.Kafka.Metadata.Migration.ZkMigrationLeadershipState WriteMetadataDeltaToZookeeper(Org.Apache.Kafka.Image.MetadataDelta delta, Org.Apache.Kafka.Image.MetadataImage image, Org.Apache.Kafka.Metadata.Migration.ZkMigrationLeadershipState state)
        {
            return IExecute<Org.Apache.Kafka.Metadata.Migration.ZkMigrationLeadershipState>("writeMetadataDeltaToZookeeper", delta, image, state);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/ZkMigrationClient.html#writeProducerId(long,org.apache.kafka.metadata.migration.ZkMigrationLeadershipState)"/>
        /// </summary>
        /// <param name="nextProducerId"><see cref="long"/></param>
        /// <param name="state"><see cref="Org.Apache.Kafka.Metadata.Migration.ZkMigrationLeadershipState"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Metadata.Migration.ZkMigrationLeadershipState"/></returns>
        public Org.Apache.Kafka.Metadata.Migration.ZkMigrationLeadershipState WriteProducerId(long nextProducerId, Org.Apache.Kafka.Metadata.Migration.ZkMigrationLeadershipState state)
        {
            return IExecute<Org.Apache.Kafka.Metadata.Migration.ZkMigrationLeadershipState>("writeProducerId", nextProducerId, state);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/ZkMigrationClient.html#migrateBrokerConfigs(org.apache.kafka.server.common.MetadataVersion,java.util.function.Consumer)"/>
        /// </summary>
        /// <param name="metadataVersion"><see cref="Org.Apache.Kafka.Server.Common.MetadataVersion"/></param>
        /// <param name="recordConsumer"><see cref="Java.Util.Function.Consumer"/></param>
        public void MigrateBrokerConfigs(Org.Apache.Kafka.Server.Common.MetadataVersion metadataVersion, Java.Util.Function.Consumer<Java.Util.List<Org.Apache.Kafka.Server.Common.ApiMessageAndVersion>> recordConsumer)
        {
            IExecute("migrateBrokerConfigs", metadataVersion, recordConsumer);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/ZkMigrationClient.html#migrateClientQuotas(org.apache.kafka.server.common.MetadataVersion,java.util.function.Consumer)"/>
        /// </summary>
        /// <param name="metadataVersion"><see cref="Org.Apache.Kafka.Server.Common.MetadataVersion"/></param>
        /// <param name="recordConsumer"><see cref="Java.Util.Function.Consumer"/></param>
        public void MigrateClientQuotas(Org.Apache.Kafka.Server.Common.MetadataVersion metadataVersion, Java.Util.Function.Consumer<Java.Util.List<Org.Apache.Kafka.Server.Common.ApiMessageAndVersion>> recordConsumer)
        {
            IExecute("migrateClientQuotas", metadataVersion, recordConsumer);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/ZkMigrationClient.html#migrateProducerId(org.apache.kafka.server.common.MetadataVersion,java.util.function.Consumer)"/>
        /// </summary>
        /// <param name="metadataVersion"><see cref="Org.Apache.Kafka.Server.Common.MetadataVersion"/></param>
        /// <param name="recordConsumer"><see cref="Java.Util.Function.Consumer"/></param>
        public void MigrateProducerId(Org.Apache.Kafka.Server.Common.MetadataVersion metadataVersion, Java.Util.Function.Consumer<Java.Util.List<Org.Apache.Kafka.Server.Common.ApiMessageAndVersion>> recordConsumer)
        {
            IExecute("migrateProducerId", metadataVersion, recordConsumer);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/ZkMigrationClient.html#migrateTopics(org.apache.kafka.server.common.MetadataVersion,java.util.function.Consumer,java.util.function.Consumer)"/>
        /// </summary>
        /// <param name="metadataVersion"><see cref="Org.Apache.Kafka.Server.Common.MetadataVersion"/></param>
        /// <param name="recordConsumer"><see cref="Java.Util.Function.Consumer"/></param>
        /// <param name="brokerIdConsumer"><see cref="Java.Util.Function.Consumer"/></param>
        public void MigrateTopics(Org.Apache.Kafka.Server.Common.MetadataVersion metadataVersion, Java.Util.Function.Consumer<Java.Util.List<Org.Apache.Kafka.Server.Common.ApiMessageAndVersion>> recordConsumer, Java.Util.Function.Consumer<int?> brokerIdConsumer)
        {
            IExecute("migrateTopics", metadataVersion, recordConsumer, brokerIdConsumer);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/ZkMigrationClient.html#readAllMetadata(java.util.function.Consumer,java.util.function.Consumer)"/>
        /// </summary>
        /// <param name="batchConsumer"><see cref="Java.Util.Function.Consumer"/></param>
        /// <param name="brokerIdConsumer"><see cref="Java.Util.Function.Consumer"/></param>
        public void ReadAllMetadata(Java.Util.Function.Consumer<Java.Util.List<Org.Apache.Kafka.Server.Common.ApiMessageAndVersion>> batchConsumer, Java.Util.Function.Consumer<int?> brokerIdConsumer)
        {
            IExecute("readAllMetadata", batchConsumer, brokerIdConsumer);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}