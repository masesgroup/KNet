/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka_2.13-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Kafka.Zk
{
    #region ExtendedAclChangeStore
    public partial class ExtendedAclChangeStore
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/ExtendedAclChangeStore.html#aclChangePath()"/> 
        /// </summary>
        public static string AclChangePath
        {
            get { return SExecute<string>(LocalBridgeClazz, "aclChangePath"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/ExtendedAclChangeStore.html#createPath()"/> 
        /// </summary>
        public static string CreatePath
        {
            get { return SExecute<string>(LocalBridgeClazz, "createPath"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/ExtendedAclChangeStore.html#name()"/> 
        /// </summary>
        public static string Name
        {
            get { return SExecute<string>(LocalBridgeClazz, "name"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/ExtendedAclChangeStore.html#productArity()"/> 
        /// </summary>
        public static int ProductArity
        {
            get { return SExecute<int>(LocalBridgeClazz, "productArity"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/ExtendedAclChangeStore.html#productPrefix()"/> 
        /// </summary>
        public static string ProductPrefix
        {
            get { return SExecute<string>(LocalBridgeClazz, "productPrefix"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/ExtendedAclChangeStore.html#canEqual(java.lang.Object)"/>
        /// </summary>
        /// <param name="x$1"><see cref="object"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool CanEqual(object x_1)
        {
            return SExecute<bool>(LocalBridgeClazz, "canEqual", x_1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/ExtendedAclChangeStore.html#encode(org.apache.kafka.common.resource.ResourcePattern)"/>
        /// </summary>
        /// <param name="resource"><see cref="Org.Apache.Kafka.Common.Resource.ResourcePattern"/></param>
        /// <returns><see cref="byte"/></returns>
        public static byte[] Encode(Org.Apache.Kafka.Common.Resource.ResourcePattern resource)
        {
            return SExecuteArray<byte>(LocalBridgeClazz, "encode", resource);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/ExtendedAclChangeStore.html#productElement(int)"/>
        /// </summary>
        /// <param name="x$1"><see cref="int"/></param>
        /// <returns><see cref="object"/></returns>
        public static object ProductElement(int x_1)
        {
            return SExecute(LocalBridgeClazz, "productElement", x_1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/ExtendedAclChangeStore.html#productElementName(int)"/>
        /// </summary>
        /// <param name="n"><see cref="int"/></param>
        /// <returns><see cref="string"/></returns>
        public static string ProductElementName(int n)
        {
            return SExecute<string>(LocalBridgeClazz, "productElementName", n);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/ExtendedAclChangeStore.html#createChangeNode(org.apache.kafka.common.resource.ResourcePattern)"/>
        /// </summary>
        /// <param name="resource"><see cref="Org.Apache.Kafka.Common.Resource.ResourcePattern"/></param>
        /// <returns><see cref="Kafka.Zk.AclChangeNode"/></returns>
        public static Kafka.Zk.AclChangeNode CreateChangeNode(Org.Apache.Kafka.Common.Resource.ResourcePattern resource)
        {
            return SExecute<Kafka.Zk.AclChangeNode>(LocalBridgeClazz, "createChangeNode", resource);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/ExtendedAclChangeStore.html#createListener(kafka.zk.AclChangeNotificationHandler,kafka.zk.KafkaZkClient)"/>
        /// </summary>
        /// <param name="handler"><see cref="Kafka.Zk.AclChangeNotificationHandler"/></param>
        /// <param name="zkClient"><see cref="Kafka.Zk.KafkaZkClient"/></param>
        /// <returns><see cref="Kafka.Zk.AclChangeSubscription"/></returns>
        public static Kafka.Zk.AclChangeSubscription CreateListener(Kafka.Zk.AclChangeNotificationHandler handler, Kafka.Zk.KafkaZkClient zkClient)
        {
            return SExecute<Kafka.Zk.AclChangeSubscription>(LocalBridgeClazz, "createListener", handler, zkClient);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/ExtendedAclChangeStore.html#decode(byte[])"/>
        /// </summary>
        /// <param name="bytes"><see cref="byte"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Resource.ResourcePattern"/></returns>
        public static Org.Apache.Kafka.Common.Resource.ResourcePattern Decode(byte[] bytes)
        {
            return SExecute<Org.Apache.Kafka.Common.Resource.ResourcePattern>(LocalBridgeClazz, "decode", new object[] { bytes });
        }

        #endregion

        #region Instance methods

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}