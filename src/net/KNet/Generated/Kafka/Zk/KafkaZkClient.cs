/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka_2.13-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Kafka.Zk
{
    #region KafkaZkClient
    public partial class KafkaZkClient
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/KafkaZkClient.html#%3Cinit%3E(kafka.zookeeper.ZooKeeperClient,boolean,org.apache.kafka.common.utils.Time)"/>
        /// </summary>
        /// <param name="zooKeeperClient"><see cref="Kafka.Zookeeper.ZooKeeperClient"/></param>
        /// <param name="isSecure"><see cref="bool"/></param>
        /// <param name="time"><see cref="Org.Apache.Kafka.Common.Utils.Time"/></param>
        public KafkaZkClient(Kafka.Zookeeper.ZooKeeperClient zooKeeperClient, bool isSecure, Org.Apache.Kafka.Common.Utils.Time time)
            : base(zooKeeperClient, isSecure, time)
        {
        }

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Kafka.Zk.KafkaZkClient"/> to <see cref="Java.Lang.AutoCloseable"/>
        /// </summary>
        public static implicit operator Java.Lang.AutoCloseable(Kafka.Zk.KafkaZkClient t) => t.Cast<Java.Lang.AutoCloseable>();
        /// <summary>
        /// Converter from <see cref="Kafka.Zk.KafkaZkClient"/> to <see cref="Kafka.Metrics.KafkaMetricsGroup"/>
        /// </summary>
        public static implicit operator Kafka.Metrics.KafkaMetricsGroup(Kafka.Zk.KafkaZkClient t) => t.Cast<Kafka.Metrics.KafkaMetricsGroup>();

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/KafkaZkClient.html#kafka$zk$KafkaZkClient$$zooKeeperClient"/>
        /// </summary>
        public Kafka.Zookeeper.ZooKeeperClient kafka$zk$KafkaZkClient$$zooKeeperClient { get { return IGetField<Kafka.Zookeeper.ZooKeeperClient>("kafka$zk$KafkaZkClient$$zooKeeperClient"); } }

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/KafkaZkClient.html#apply(java.lang.String,boolean,int,int,int,org.apache.kafka.common.utils.Time,java.lang.String,org.apache.zookeeper.client.ZKClientConfig,java.lang.String,java.lang.String,boolean)"/>
        /// </summary>
        /// <param name="connectString"><see cref="string"/></param>
        /// <param name="isSecure"><see cref="bool"/></param>
        /// <param name="sessionTimeoutMs"><see cref="int"/></param>
        /// <param name="connectionTimeoutMs"><see cref="int"/></param>
        /// <param name="maxInFlightRequests"><see cref="int"/></param>
        /// <param name="time"><see cref="Org.Apache.Kafka.Common.Utils.Time"/></param>
        /// <param name="name"><see cref="string"/></param>
        /// <param name="zkClientConfig"><see cref="Org.Apache.Zookeeper.Client.ZKClientConfig"/></param>
        /// <param name="metricGroup"><see cref="string"/></param>
        /// <param name="metricType"><see cref="string"/></param>
        /// <param name="createChrootIfNecessary"><see cref="bool"/></param>
        /// <returns><see cref="Kafka.Zk.KafkaZkClient"/></returns>
        public static Kafka.Zk.KafkaZkClient Apply(string connectString, bool isSecure, int sessionTimeoutMs, int connectionTimeoutMs, int maxInFlightRequests, Org.Apache.Kafka.Common.Utils.Time time, string name, Org.Apache.Zookeeper.Client.ZKClientConfig zkClientConfig, string metricGroup, string metricType, bool createChrootIfNecessary)
        {
            return SExecute<Kafka.Zk.KafkaZkClient>(LocalBridgeClazz, "apply", connectString, isSecure, sessionTimeoutMs, connectionTimeoutMs, maxInFlightRequests, time, name, zkClientConfig, metricGroup, metricType, createChrootIfNecessary);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/KafkaZkClient.html#createZkClient(java.lang.String,org.apache.kafka.common.utils.Time,kafka.server.KafkaConfig,org.apache.zookeeper.client.ZKClientConfig)"/>
        /// </summary>
        /// <param name="name"><see cref="string"/></param>
        /// <param name="time"><see cref="Org.Apache.Kafka.Common.Utils.Time"/></param>
        /// <param name="config"><see cref="Kafka.Server.KafkaConfig"/></param>
        /// <param name="zkClientConfig"><see cref="Org.Apache.Zookeeper.Client.ZKClientConfig"/></param>
        /// <returns><see cref="Kafka.Zk.KafkaZkClient"/></returns>
        public static Kafka.Zk.KafkaZkClient CreateZkClient(string name, Org.Apache.Kafka.Common.Utils.Time time, Kafka.Server.KafkaConfig config, Org.Apache.Zookeeper.Client.ZKClientConfig zkClientConfig)
        {
            return SExecute<Kafka.Zk.KafkaZkClient>(LocalBridgeClazz, "createZkClient", name, time, config, zkClientConfig);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/KafkaZkClient.html#currentZooKeeper()"/> 
        /// </summary>
        public Org.Apache.Zookeeper.ZooKeeper CurrentZooKeeper
        {
            get { return IExecute<Org.Apache.Zookeeper.ZooKeeper>("currentZooKeeper"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/KafkaZkClient.html#generateBrokerSequenceId()"/> 
        /// </summary>
        public int GenerateBrokerSequenceId
        {
            get { return IExecute<int>("generateBrokerSequenceId"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/KafkaZkClient.html#isDebugEnabled()"/> 
        /// </summary>
        public bool IsDebugEnabled
        {
            get { return IExecute<bool>("isDebugEnabled"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/KafkaZkClient.html#isTraceEnabled()"/> 
        /// </summary>
        public bool IsTraceEnabled
        {
            get { return IExecute<bool>("isTraceEnabled"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/KafkaZkClient.html#logger()"/> 
        /// </summary>
        public Com.Typesafe.Scalalogging.Logger Logger
        {
            get { return IExecute<Com.Typesafe.Scalalogging.Logger>("logger"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/KafkaZkClient.html#loggerName()"/> 
        /// </summary>
        public string LoggerName
        {
            get { return IExecute<string>("loggerName"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/KafkaZkClient.html#logIdent()"/> 
        /// </summary>
        public string LogIdent
        {
            get { return IExecute<string>("logIdent"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/KafkaZkClient.html#reassignPartitionsInProgress()"/> 
        /// </summary>
        public bool ReassignPartitionsInProgress
        {
            get { return IExecute<bool>("reassignPartitionsInProgress"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/KafkaZkClient.html#secure()"/> 
        /// </summary>
        public bool Secure
        {
            get { return IExecute<bool>("secure"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/KafkaZkClient.html#retryRequestUntilConnected(kafka.zookeeper.AsyncRequest,int)"/>
        /// </summary>
        /// <param name="request"><typeparamref name="Req"/></param>
        /// <param name="expectedControllerZkVersion"><see cref="int"/></param>
        /// <typeparam name="Req"><see cref="Kafka.Zookeeper.AsyncRequest"/></typeparam>
        /// <returns><see cref="Kafka.Zookeeper.AsyncResponse"/></returns>
        public Kafka.Zookeeper.AsyncResponse RetryRequestUntilConnected<Req>(Req request, int expectedControllerZkVersion) where Req: Kafka.Zookeeper.AsyncRequest
        {
            return IExecute<Kafka.Zookeeper.AsyncResponse>("retryRequestUntilConnected", request, expectedControllerZkVersion);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/KafkaZkClient.html#conditionalDelete(org.apache.kafka.common.resource.ResourcePattern,int)"/>
        /// </summary>
        /// <param name="resource"><see cref="Org.Apache.Kafka.Common.Resource.ResourcePattern"/></param>
        /// <param name="expectedVersion"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool ConditionalDelete(Org.Apache.Kafka.Common.Resource.ResourcePattern resource, int expectedVersion)
        {
            return IExecute<bool>("conditionalDelete", resource, expectedVersion);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/KafkaZkClient.html#deleteDelegationToken(java.lang.String)"/>
        /// </summary>
        /// <param name="delegationTokenId"><see cref="string"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool DeleteDelegationToken(string delegationTokenId)
        {
            return IExecute<bool>("deleteDelegationToken", delegationTokenId);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/KafkaZkClient.html#deleteRecursive(java.lang.String,int)"/>
        /// </summary>
        /// <param name="path"><see cref="string"/></param>
        /// <param name="expectedControllerEpochZkVersion"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool DeleteRecursive(string path, int expectedControllerEpochZkVersion)
        {
            return IExecute<bool>("deleteRecursive", path, expectedControllerEpochZkVersion);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/KafkaZkClient.html#deleteResource(org.apache.kafka.common.resource.ResourcePattern)"/>
        /// </summary>
        /// <param name="resource"><see cref="Org.Apache.Kafka.Common.Resource.ResourcePattern"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool DeleteResource(Org.Apache.Kafka.Common.Resource.ResourcePattern resource)
        {
            return IExecute<bool>("deleteResource", resource);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/KafkaZkClient.html#isTopicMarkedForDeletion(java.lang.String)"/>
        /// </summary>
        /// <param name="topic"><see cref="string"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsTopicMarkedForDeletion(string topic)
        {
            return IExecute<bool>("isTopicMarkedForDeletion", topic);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/KafkaZkClient.html#pathExists(java.lang.String)"/>
        /// </summary>
        /// <param name="path"><see cref="string"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool PathExists(string path)
        {
            return IExecute<bool>("pathExists", path);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/KafkaZkClient.html#registerZNodeChangeHandlerAndCheckExistence(kafka.zookeeper.ZNodeChangeHandler)"/>
        /// </summary>
        /// <param name="zNodeChangeHandler"><see cref="Kafka.Zookeeper.ZNodeChangeHandler"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool RegisterZNodeChangeHandlerAndCheckExistence(Kafka.Zookeeper.ZNodeChangeHandler zNodeChangeHandler)
        {
            return IExecute<bool>("registerZNodeChangeHandlerAndCheckExistence", zNodeChangeHandler);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/KafkaZkClient.html#resourceExists(org.apache.kafka.common.resource.ResourcePattern)"/>
        /// </summary>
        /// <param name="resource"><see cref="Org.Apache.Kafka.Common.Resource.ResourcePattern"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool ResourceExists(Org.Apache.Kafka.Common.Resource.ResourcePattern resource)
        {
            return IExecute<bool>("resourceExists", resource);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/KafkaZkClient.html#shouldReCreateEphemeralZNode(long)"/>
        /// </summary>
        /// <param name="ephemeralOwnerId"><see cref="long"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool ShouldReCreateEphemeralZNode(long ephemeralOwnerId)
        {
            return IExecute<bool>("shouldReCreateEphemeralZNode", ephemeralOwnerId);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/KafkaZkClient.html#topicExists(java.lang.String)"/>
        /// </summary>
        /// <param name="topicName"><see cref="string"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool TopicExists(string topicName)
        {
            return IExecute<bool>("topicExists", topicName);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/KafkaZkClient.html#newMeter(com.yammer.metrics.core.MetricName,java.lang.String,java.util.concurrent.TimeUnit)"/>
        /// </summary>
        /// <param name="metricName"><see cref="Com.Yammer.Metrics.Core.MetricName"/></param>
        /// <param name="eventType"><see cref="string"/></param>
        /// <param name="timeUnit"><see cref="Java.Util.Concurrent.TimeUnit"/></param>
        /// <returns><see cref="Com.Yammer.Metrics.Core.Meter"/></returns>
        public Com.Yammer.Metrics.Core.Meter NewMeter(Com.Yammer.Metrics.Core.MetricName metricName, string eventType, Java.Util.Concurrent.TimeUnit timeUnit)
        {
            return IExecute<Com.Yammer.Metrics.Core.Meter>("newMeter", metricName, eventType, timeUnit);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/KafkaZkClient.html#updateFeatureZNode(kafka.zk.FeatureZNode)"/>
        /// </summary>
        /// <param name="nodeContents"><see cref="Kafka.Zk.FeatureZNode"/></param>
        /// <returns><see cref="int"/></returns>
        public int UpdateFeatureZNode(Kafka.Zk.FeatureZNode nodeContents)
        {
            return IExecute<int>("updateFeatureZNode", nodeContents);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/KafkaZkClient.html#createOrGetClusterId(java.lang.String)"/>
        /// </summary>
        /// <param name="proposedClusterId"><see cref="string"/></param>
        /// <returns><see cref="string"/></returns>
        public string CreateOrGetClusterId(string proposedClusterId)
        {
            return IExecute<string>("createOrGetClusterId", proposedClusterId);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/KafkaZkClient.html#createSequentialPersistentPath(java.lang.String,byte[])"/>
        /// </summary>
        /// <param name="path"><see cref="string"/></param>
        /// <param name="data"><see cref="byte"/></param>
        /// <returns><see cref="string"/></returns>
        public string CreateSequentialPersistentPath(string path, byte[] data)
        {
            return IExecute<string>("createSequentialPersistentPath", path, data);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/KafkaZkClient.html#msgWithLogIdent(java.lang.String)"/>
        /// </summary>
        /// <param name="msg"><see cref="string"/></param>
        /// <returns><see cref="string"/></returns>
        public string MsgWithLogIdent(string msg)
        {
            return IExecute<string>("msgWithLogIdent", msg);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/KafkaZkClient.html#getEntityConfigs(java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="rootEntityType"><see cref="string"/></param>
        /// <param name="sanitizedEntityName"><see cref="string"/></param>
        /// <returns><see cref="Java.Util.Properties"/></returns>
        public Java.Util.Properties GetEntityConfigs(string rootEntityType, string sanitizedEntityName)
        {
            return IExecute<Java.Util.Properties>("getEntityConfigs", rootEntityType, sanitizedEntityName);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/KafkaZkClient.html#getVersionedAclsForResource(org.apache.kafka.common.resource.ResourcePattern)"/>
        /// </summary>
        /// <param name="resource"><see cref="Org.Apache.Kafka.Common.Resource.ResourcePattern"/></param>
        /// <returns><see cref="Kafka.Security.Authorizer.AclAuthorizer.VersionedAcls"/></returns>
        public Kafka.Security.Authorizer.AclAuthorizer.VersionedAcls GetVersionedAclsForResource(Org.Apache.Kafka.Common.Resource.ResourcePattern resource)
        {
            return IExecute<Kafka.Security.Authorizer.AclAuthorizer.VersionedAcls>("getVersionedAclsForResource", resource);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/KafkaZkClient.html#tryRegisterKRaftControllerAsActiveController(int,int)"/>
        /// </summary>
        /// <param name="kraftControllerId"><see cref="int"/></param>
        /// <param name="kraftControllerEpoch"><see cref="int"/></param>
        /// <returns><see cref="Kafka.Zk.KRaftRegistrationResult"/></returns>
        public Kafka.Zk.KRaftRegistrationResult TryRegisterKRaftControllerAsActiveController(int kraftControllerId, int kraftControllerEpoch)
        {
            return IExecute<Kafka.Zk.KRaftRegistrationResult>("tryRegisterKRaftControllerAsActiveController", kraftControllerId, kraftControllerEpoch);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/KafkaZkClient.html#createControllerEpochRaw(int)"/>
        /// </summary>
        /// <param name="epoch"><see cref="int"/></param>
        /// <returns><see cref="Kafka.Zookeeper.CreateResponse"/></returns>
        public Kafka.Zookeeper.CreateResponse CreateControllerEpochRaw(int epoch)
        {
            return IExecute<Kafka.Zookeeper.CreateResponse>("createControllerEpochRaw", epoch);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/KafkaZkClient.html#setControllerEpochRaw(int,int)"/>
        /// </summary>
        /// <param name="epoch"><see cref="int"/></param>
        /// <param name="epochZkVersion"><see cref="int"/></param>
        /// <returns><see cref="Kafka.Zookeeper.SetDataResponse"/></returns>
        public Kafka.Zookeeper.SetDataResponse SetControllerEpochRaw(int epoch, int epochZkVersion)
        {
            return IExecute<Kafka.Zookeeper.SetDataResponse>("setControllerEpochRaw", epoch, epochZkVersion);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/KafkaZkClient.html#registerBroker(kafka.zk.BrokerInfo)"/>
        /// </summary>
        /// <param name="brokerInfo"><see cref="Kafka.Zk.BrokerInfo"/></param>
        /// <returns><see cref="long"/></returns>
        public long RegisterBroker(Kafka.Zk.BrokerInfo brokerInfo)
        {
            return IExecute<long>("registerBroker", brokerInfo);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/KafkaZkClient.html#createInitialMigrationState(org.apache.kafka.metadata.migration.ZkMigrationLeadershipState)"/>
        /// </summary>
        /// <param name="initialState"><see cref="Org.Apache.Kafka.Metadata.Migration.ZkMigrationLeadershipState"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Metadata.Migration.ZkMigrationLeadershipState"/></returns>
        public Org.Apache.Kafka.Metadata.Migration.ZkMigrationLeadershipState CreateInitialMigrationState(Org.Apache.Kafka.Metadata.Migration.ZkMigrationLeadershipState initialState)
        {
            return IExecute<Org.Apache.Kafka.Metadata.Migration.ZkMigrationLeadershipState>("createInitialMigrationState", initialState);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/KafkaZkClient.html#getOrCreateMigrationState(org.apache.kafka.metadata.migration.ZkMigrationLeadershipState)"/>
        /// </summary>
        /// <param name="initialState"><see cref="Org.Apache.Kafka.Metadata.Migration.ZkMigrationLeadershipState"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Metadata.Migration.ZkMigrationLeadershipState"/></returns>
        public Org.Apache.Kafka.Metadata.Migration.ZkMigrationLeadershipState GetOrCreateMigrationState(Org.Apache.Kafka.Metadata.Migration.ZkMigrationLeadershipState initialState)
        {
            return IExecute<Org.Apache.Kafka.Metadata.Migration.ZkMigrationLeadershipState>("getOrCreateMigrationState", initialState);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/KafkaZkClient.html#updateMigrationState(org.apache.kafka.metadata.migration.ZkMigrationLeadershipState)"/>
        /// </summary>
        /// <param name="migrationState"><see cref="Org.Apache.Kafka.Metadata.Migration.ZkMigrationLeadershipState"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Metadata.Migration.ZkMigrationLeadershipState"/></returns>
        public Org.Apache.Kafka.Metadata.Migration.ZkMigrationLeadershipState UpdateMigrationState(Org.Apache.Kafka.Metadata.Migration.ZkMigrationLeadershipState migrationState)
        {
            return IExecute<Org.Apache.Kafka.Metadata.Migration.ZkMigrationLeadershipState>("updateMigrationState", migrationState);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/KafkaZkClient.html#close()"/>
        /// </summary>
        public void Close()
        {
            IExecute("close");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/KafkaZkClient.html#createAclChangeNotification(org.apache.kafka.common.resource.ResourcePattern)"/>
        /// </summary>
        /// <param name="resource"><see cref="Org.Apache.Kafka.Common.Resource.ResourcePattern"/></param>
        public void CreateAclChangeNotification(Org.Apache.Kafka.Common.Resource.ResourcePattern resource)
        {
            IExecute("createAclChangeNotification", resource);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/KafkaZkClient.html#createAclPaths()"/>
        /// </summary>
        public void CreateAclPaths()
        {
            IExecute("createAclPaths");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/KafkaZkClient.html#createConfigChangeNotification(java.lang.String)"/>
        /// </summary>
        /// <param name="sanitizedEntityPath"><see cref="string"/></param>
        public void CreateConfigChangeNotification(string sanitizedEntityPath)
        {
            IExecute("createConfigChangeNotification", sanitizedEntityPath);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/KafkaZkClient.html#createDelegationTokenPaths()"/>
        /// </summary>
        public void CreateDelegationTokenPaths()
        {
            IExecute("createDelegationTokenPaths");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/KafkaZkClient.html#createDeleteTopicPath(java.lang.String)"/>
        /// </summary>
        /// <param name="topicName"><see cref="string"/></param>
        public void CreateDeleteTopicPath(string topicName)
        {
            IExecute("createDeleteTopicPath", topicName);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/KafkaZkClient.html#createFeatureZNode(kafka.zk.FeatureZNode)"/>
        /// </summary>
        /// <param name="nodeContents"><see cref="Kafka.Zk.FeatureZNode"/></param>
        public void CreateFeatureZNode(Kafka.Zk.FeatureZNode nodeContents)
        {
            IExecute("createFeatureZNode", nodeContents);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/KafkaZkClient.html#createRecursive(java.lang.String,byte[],boolean)"/>
        /// </summary>
        /// <param name="path"><see cref="string"/></param>
        /// <param name="data"><see cref="byte"/></param>
        /// <param name="throwIfPathExists"><see cref="bool"/></param>
        public void CreateRecursive(string path, byte[] data, bool throwIfPathExists)
        {
            IExecute("createRecursive", path, data, throwIfPathExists);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/KafkaZkClient.html#createTokenChangeNotification(java.lang.String)"/>
        /// </summary>
        /// <param name="tokenId"><see cref="string"/></param>
        public void CreateTokenChangeNotification(string tokenId)
        {
            IExecute("createTokenChangeNotification", tokenId);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/KafkaZkClient.html#createTopLevelPaths()"/>
        /// </summary>
        public void CreateTopLevelPaths()
        {
            IExecute("createTopLevelPaths");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/KafkaZkClient.html#deleteAclChangeNotifications()"/>
        /// </summary>
        public void DeleteAclChangeNotifications()
        {
            IExecute("deleteAclChangeNotifications");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/KafkaZkClient.html#deleteController(int)"/>
        /// </summary>
        /// <param name="expectedControllerEpochZkVersion"><see cref="int"/></param>
        public void DeleteController(int expectedControllerEpochZkVersion)
        {
            IExecute("deleteController", expectedControllerEpochZkVersion);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/KafkaZkClient.html#deleteFeatureZNode()"/>
        /// </summary>
        public void DeleteFeatureZNode()
        {
            IExecute("deleteFeatureZNode");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/KafkaZkClient.html#deleteIsrChangeNotifications(int)"/>
        /// </summary>
        /// <param name="expectedControllerEpochZkVersion"><see cref="int"/></param>
        public void DeleteIsrChangeNotifications(int expectedControllerEpochZkVersion)
        {
            IExecute("deleteIsrChangeNotifications", expectedControllerEpochZkVersion);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/KafkaZkClient.html#deleteLogDirEventNotifications(int)"/>
        /// </summary>
        /// <param name="expectedControllerEpochZkVersion"><see cref="int"/></param>
        public void DeleteLogDirEventNotifications(int expectedControllerEpochZkVersion)
        {
            IExecute("deleteLogDirEventNotifications", expectedControllerEpochZkVersion);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/KafkaZkClient.html#deletePartitionReassignment(int)"/>
        /// </summary>
        /// <param name="expectedControllerEpochZkVersion"><see cref="int"/></param>
        public void DeletePartitionReassignment(int expectedControllerEpochZkVersion)
        {
            IExecute("deletePartitionReassignment", expectedControllerEpochZkVersion);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/KafkaZkClient.html#deletePath(java.lang.String,int,boolean)"/>
        /// </summary>
        /// <param name="path"><see cref="string"/></param>
        /// <param name="expectedControllerEpochZkVersion"><see cref="int"/></param>
        /// <param name="recursiveDelete"><see cref="bool"/></param>
        public void DeletePath(string path, int expectedControllerEpochZkVersion, bool recursiveDelete)
        {
            IExecute("deletePath", path, expectedControllerEpochZkVersion, recursiveDelete);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/KafkaZkClient.html#deletePreferredReplicaElection(int)"/>
        /// </summary>
        /// <param name="expectedControllerEpochZkVersion"><see cref="int"/></param>
        public void DeletePreferredReplicaElection(int expectedControllerEpochZkVersion)
        {
            IExecute("deletePreferredReplicaElection", expectedControllerEpochZkVersion);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/KafkaZkClient.html#deleteTopicZNode(java.lang.String,int)"/>
        /// </summary>
        /// <param name="topic"><see cref="string"/></param>
        /// <param name="expectedControllerEpochZkVersion"><see cref="int"/></param>
        public void DeleteTopicZNode(string topic, int expectedControllerEpochZkVersion)
        {
            IExecute("deleteTopicZNode", topic, expectedControllerEpochZkVersion);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/KafkaZkClient.html#makeSurePersistentPathExists(java.lang.String)"/>
        /// </summary>
        /// <param name="path"><see cref="string"/></param>
        public void MakeSurePersistentPathExists(string path)
        {
            IExecute("makeSurePersistentPathExists", path);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/KafkaZkClient.html#propagateLogDirEvent(int)"/>
        /// </summary>
        /// <param name="brokerId"><see cref="int"/></param>
        public void PropagateLogDirEvent(int brokerId)
        {
            IExecute("propagateLogDirEvent", brokerId);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/KafkaZkClient.html#registerStateChangeHandler(kafka.zookeeper.StateChangeHandler)"/>
        /// </summary>
        /// <param name="stateChangeHandler"><see cref="Kafka.Zookeeper.StateChangeHandler"/></param>
        public void RegisterStateChangeHandler(Kafka.Zookeeper.StateChangeHandler stateChangeHandler)
        {
            IExecute("registerStateChangeHandler", stateChangeHandler);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/KafkaZkClient.html#registerZNodeChangeHandler(kafka.zookeeper.ZNodeChangeHandler)"/>
        /// </summary>
        /// <param name="zNodeChangeHandler"><see cref="Kafka.Zookeeper.ZNodeChangeHandler"/></param>
        public void RegisterZNodeChangeHandler(Kafka.Zookeeper.ZNodeChangeHandler zNodeChangeHandler)
        {
            IExecute("registerZNodeChangeHandler", zNodeChangeHandler);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/KafkaZkClient.html#registerZNodeChildChangeHandler(kafka.zookeeper.ZNodeChildChangeHandler)"/>
        /// </summary>
        /// <param name="zNodeChildChangeHandler"><see cref="Kafka.Zookeeper.ZNodeChildChangeHandler"/></param>
        public void RegisterZNodeChildChangeHandler(Kafka.Zookeeper.ZNodeChildChangeHandler zNodeChildChangeHandler)
        {
            IExecute("registerZNodeChildChangeHandler", zNodeChildChangeHandler);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/KafkaZkClient.html#setOrCreateConsumerOffset(java.lang.String,org.apache.kafka.common.TopicPartition,long)"/>
        /// </summary>
        /// <param name="group"><see cref="string"/></param>
        /// <param name="topicPartition"><see cref="Org.Apache.Kafka.Common.TopicPartition"/></param>
        /// <param name="offset"><see cref="long"/></param>
        public void SetOrCreateConsumerOffset(string group, Org.Apache.Kafka.Common.TopicPartition topicPartition, long offset)
        {
            IExecute("setOrCreateConsumerOffset", group, topicPartition, offset);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/KafkaZkClient.html#setOrCreateDelegationToken(org.apache.kafka.common.security.token.delegation.DelegationToken)"/>
        /// </summary>
        /// <param name="token"><see cref="Org.Apache.Kafka.Common.Security.Token.Delegation.DelegationToken"/></param>
        public void SetOrCreateDelegationToken(Org.Apache.Kafka.Common.Security.Token.Delegation.DelegationToken token)
        {
            IExecute("setOrCreateDelegationToken", token);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/KafkaZkClient.html#setOrCreateEntityConfigs(java.lang.String,java.lang.String,java.util.Properties)"/>
        /// </summary>
        /// <param name="rootEntityType"><see cref="string"/></param>
        /// <param name="sanitizedEntityName"><see cref="string"/></param>
        /// <param name="config"><see cref="Java.Util.Properties"/></param>
        public void SetOrCreateEntityConfigs(string rootEntityType, string sanitizedEntityName, Java.Util.Properties config)
        {
            IExecute("setOrCreateEntityConfigs", rootEntityType, sanitizedEntityName, config);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/KafkaZkClient.html#unregisterStateChangeHandler(java.lang.String)"/>
        /// </summary>
        /// <param name="name"><see cref="string"/></param>
        public void UnregisterStateChangeHandler(string name)
        {
            IExecute("unregisterStateChangeHandler", name);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/KafkaZkClient.html#unregisterZNodeChangeHandler(java.lang.String)"/>
        /// </summary>
        /// <param name="path"><see cref="string"/></param>
        public void UnregisterZNodeChangeHandler(string path)
        {
            IExecute("unregisterZNodeChangeHandler", path);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/KafkaZkClient.html#unregisterZNodeChildChangeHandler(java.lang.String)"/>
        /// </summary>
        /// <param name="path"><see cref="string"/></param>
        public void UnregisterZNodeChildChangeHandler(string path)
        {
            IExecute("unregisterZNodeChildChangeHandler", path);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/KafkaZkClient.html#updateBrokerInfo(kafka.zk.BrokerInfo)"/>
        /// </summary>
        /// <param name="brokerInfo"><see cref="Kafka.Zk.BrokerInfo"/></param>
        public void UpdateBrokerInfo(Kafka.Zk.BrokerInfo brokerInfo)
        {
            IExecute("updateBrokerInfo", brokerInfo);
        }

        #endregion

        #region Nested classes
        #region UpdateLeaderAndIsrResult
        public partial class UpdateLeaderAndIsrResult
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators
            /// <summary>
            /// Converter from <see cref="Kafka.Zk.KafkaZkClient.UpdateLeaderAndIsrResult"/> to <see cref="Java.Io.Serializable"/>
            /// </summary>
            public static implicit operator Java.Io.Serializable(Kafka.Zk.KafkaZkClient.UpdateLeaderAndIsrResult t) => t.Cast<Java.Io.Serializable>();

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/KafkaZkClient.UpdateLeaderAndIsrResult.html#productArity()"/> 
            /// </summary>
            public int ProductArity
            {
                get { return IExecute<int>("productArity"); }
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/KafkaZkClient.UpdateLeaderAndIsrResult.html#productPrefix()"/> 
            /// </summary>
            public string ProductPrefix
            {
                get { return IExecute<string>("productPrefix"); }
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/KafkaZkClient.UpdateLeaderAndIsrResult.html#canEqual(java.lang.Object)"/>
            /// </summary>
            /// <param name="x$1"><see cref="object"/></param>
            /// <returns><see cref="bool"/></returns>
            public bool CanEqual(object x_1)
            {
                return IExecute<bool>("canEqual", x_1);
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/KafkaZkClient.UpdateLeaderAndIsrResult.html#productElement(int)"/>
            /// </summary>
            /// <param name="x$1"><see cref="int"/></param>
            /// <returns><see cref="object"/></returns>
            public object ProductElement(int x_1)
            {
                return IExecute("productElement", x_1);
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zk/KafkaZkClient.UpdateLeaderAndIsrResult.html#productElementName(int)"/>
            /// </summary>
            /// <param name="x$1"><see cref="int"/></param>
            /// <returns><see cref="string"/></returns>
            public string ProductElementName(int x_1)
            {
                return IExecute<string>("productElementName", x_1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}