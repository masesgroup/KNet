/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka_2.13-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Kafka.Security.Authorizer
{
    #region AclEntry
    public partial class AclEntry
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/security/authorizer/AclEntry.html#%3Cinit%3E(org.apache.kafka.common.acl.AccessControlEntry)"/>
        /// </summary>
        /// <param name="ace"><see cref="Org.Apache.Kafka.Common.Acl.AccessControlEntry"/></param>
        public AclEntry(Org.Apache.Kafka.Common.Acl.AccessControlEntry ace)
            : base(ace)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/security/authorizer/AclEntry.html#AclsKey()"/> 
        /// </summary>
        public static string AclsKey
        {
            get { return SExecute<string>(LocalBridgeClazz, "AclsKey"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/security/authorizer/AclEntry.html#CurrentVersion()"/> 
        /// </summary>
        public static int CurrentVersion
        {
            get { return SExecute<int>(LocalBridgeClazz, "CurrentVersion"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/security/authorizer/AclEntry.html#HostsKey()"/> 
        /// </summary>
        public static string HostsKey
        {
            get { return SExecute<string>(LocalBridgeClazz, "HostsKey"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/security/authorizer/AclEntry.html#OperationKey()"/> 
        /// </summary>
        public static string OperationKey
        {
            get { return SExecute<string>(LocalBridgeClazz, "OperationKey"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/security/authorizer/AclEntry.html#PermissionTypeKey()"/> 
        /// </summary>
        public static string PermissionTypeKey
        {
            get { return SExecute<string>(LocalBridgeClazz, "PermissionTypeKey"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/security/authorizer/AclEntry.html#PrincipalKey()"/> 
        /// </summary>
        public static string PrincipalKey
        {
            get { return SExecute<string>(LocalBridgeClazz, "PrincipalKey"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/security/authorizer/AclEntry.html#ResourceSeparator()"/> 
        /// </summary>
        public static string ResourceSeparator
        {
            get { return SExecute<string>(LocalBridgeClazz, "ResourceSeparator"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/security/authorizer/AclEntry.html#VersionKey()"/> 
        /// </summary>
        public static string VersionKey
        {
            get { return SExecute<string>(LocalBridgeClazz, "VersionKey"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/security/authorizer/AclEntry.html#WildcardHost()"/> 
        /// </summary>
        public static string WildcardHost
        {
            get { return SExecute<string>(LocalBridgeClazz, "WildcardHost"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/security/authorizer/AclEntry.html#WildcardPrincipal()"/> 
        /// </summary>
        public static Org.Apache.Kafka.Common.Security.Auth.KafkaPrincipal WildcardPrincipal
        {
            get { return SExecute<Org.Apache.Kafka.Common.Security.Auth.KafkaPrincipal>(LocalBridgeClazz, "WildcardPrincipal"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/security/authorizer/AclEntry.html#WildcardPrincipalString()"/> 
        /// </summary>
        public static string WildcardPrincipalString
        {
            get { return SExecute<string>(LocalBridgeClazz, "WildcardPrincipalString"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/security/authorizer/AclEntry.html#WildcardResource()"/> 
        /// </summary>
        public static string WildcardResource
        {
            get { return SExecute<string>(LocalBridgeClazz, "WildcardResource"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/security/authorizer/AclEntry.html#apply(org.apache.kafka.common.security.auth.KafkaPrincipal,org.apache.kafka.common.acl.AclPermissionType,java.lang.String,org.apache.kafka.common.acl.AclOperation)"/>
        /// </summary>
        /// <param name="principal"><see cref="Org.Apache.Kafka.Common.Security.Auth.KafkaPrincipal"/></param>
        /// <param name="permissionType"><see cref="Org.Apache.Kafka.Common.Acl.AclPermissionType"/></param>
        /// <param name="host"><see cref="string"/></param>
        /// <param name="operation"><see cref="Org.Apache.Kafka.Common.Acl.AclOperation"/></param>
        /// <returns><see cref="Kafka.Security.Authorizer.AclEntry"/></returns>
        public static Kafka.Security.Authorizer.AclEntry Apply(Org.Apache.Kafka.Common.Security.Auth.KafkaPrincipal principal, Org.Apache.Kafka.Common.Acl.AclPermissionType permissionType, string host, Org.Apache.Kafka.Common.Acl.AclOperation operation)
        {
            return SExecute<Kafka.Security.Authorizer.AclEntry>(LocalBridgeClazz, "apply", principal, permissionType, host, operation);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/security/authorizer/AclEntry.html#authorizationError(org.apache.kafka.common.resource.ResourceType)"/>
        /// </summary>
        /// <param name="resourceType"><see cref="Org.Apache.Kafka.Common.Resource.ResourceType"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Protocol.Errors"/></returns>
        public static Org.Apache.Kafka.Common.Protocol.Errors AuthorizationError(Org.Apache.Kafka.Common.Resource.ResourceType resourceType)
        {
            return SExecute<Org.Apache.Kafka.Common.Protocol.Errors>(LocalBridgeClazz, "authorizationError", resourceType);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/security/authorizer/AclEntry.html#ace()"/> 
        /// </summary>
        public Org.Apache.Kafka.Common.Acl.AccessControlEntry Ace
        {
            get { return IExecute<Org.Apache.Kafka.Common.Acl.AccessControlEntry>("ace"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/security/authorizer/AclEntry.html#kafkaPrincipal()"/> 
        /// </summary>
        public Org.Apache.Kafka.Common.Security.Auth.KafkaPrincipal KafkaPrincipal
        {
            get { return IExecute<Org.Apache.Kafka.Common.Security.Auth.KafkaPrincipal>("kafkaPrincipal"); }
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}