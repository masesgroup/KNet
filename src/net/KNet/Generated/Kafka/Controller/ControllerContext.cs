/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka_2.13-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Kafka.Controller
{
    #region ControllerContext
    public partial class ControllerContext
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Kafka.Controller.ControllerContext"/> to <see cref="Kafka.Controller.ControllerChannelContext"/>
        /// </summary>
        public static implicit operator Kafka.Controller.ControllerChannelContext(Kafka.Controller.ControllerContext t) => t.Cast<Kafka.Controller.ControllerChannelContext>();

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/controller/ControllerContext.html#epoch()"/> 
        /// </summary>
        public int Epoch
        {
            get { return IExecute<int>("epoch"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/controller/ControllerContext.html#epochZkVersion()"/> 
        /// </summary>
        public int EpochZkVersion
        {
            get { return IExecute<int>("epochZkVersion"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/controller/ControllerContext.html#offlinePartitionCount()"/> 
        /// </summary>
        public int OfflinePartitionCount
        {
            get { return IExecute<int>("offlinePartitionCount"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/controller/ControllerContext.html#partitionWithLeadersCount()"/> 
        /// </summary>
        public int PartitionWithLeadersCount
        {
            get { return IExecute<int>("partitionWithLeadersCount"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/controller/ControllerContext.html#preferredReplicaImbalanceCount()"/> 
        /// </summary>
        public int PreferredReplicaImbalanceCount
        {
            get { return IExecute<int>("preferredReplicaImbalanceCount"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/controller/ControllerContext.html#stats()"/> 
        /// </summary>
        public Kafka.Controller.ControllerStats Stats
        {
            get { return IExecute<Kafka.Controller.ControllerStats>("stats"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/controller/ControllerContext.html#areAllReplicasInState(java.lang.String,kafka.controller.ReplicaState)"/>
        /// </summary>
        /// <param name="topic"><see cref="string"/></param>
        /// <param name="state"><see cref="Kafka.Controller.ReplicaState"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool AreAllReplicasInState(string topic, Kafka.Controller.ReplicaState state)
        {
            return IExecute<bool>("areAllReplicasInState", topic, state);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/controller/ControllerContext.html#isAnyReplicaInState(java.lang.String,kafka.controller.ReplicaState)"/>
        /// </summary>
        /// <param name="topic"><see cref="string"/></param>
        /// <param name="state"><see cref="Kafka.Controller.ReplicaState"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsAnyReplicaInState(string topic, Kafka.Controller.ReplicaState state)
        {
            return IExecute<bool>("isAnyReplicaInState", topic, state);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/controller/ControllerContext.html#isReplicaOnline(int,org.apache.kafka.common.TopicPartition,boolean)"/>
        /// </summary>
        /// <param name="brokerId"><see cref="int"/></param>
        /// <param name="topicPartition"><see cref="Org.Apache.Kafka.Common.TopicPartition"/></param>
        /// <param name="includeShuttingDownBrokers"><see cref="bool"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsReplicaOnline(int brokerId, Org.Apache.Kafka.Common.TopicPartition topicPartition, bool includeShuttingDownBrokers)
        {
            return IExecute<bool>("isReplicaOnline", brokerId, topicPartition, includeShuttingDownBrokers);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/controller/ControllerContext.html#isReplicaOnline(int,org.apache.kafka.common.TopicPartition)"/>
        /// </summary>
        /// <param name="brokerId"><see cref="int"/></param>
        /// <param name="topicPartition"><see cref="Org.Apache.Kafka.Common.TopicPartition"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsReplicaOnline(int brokerId, Org.Apache.Kafka.Common.TopicPartition topicPartition)
        {
            return IExecute<bool>("isReplicaOnline", brokerId, topicPartition);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/controller/ControllerContext.html#isTopicDeletionInProgress(java.lang.String)"/>
        /// </summary>
        /// <param name="topic"><see cref="string"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsTopicDeletionInProgress(string topic)
        {
            return IExecute<bool>("isTopicDeletionInProgress", topic);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/controller/ControllerContext.html#isTopicEligibleForDeletion(java.lang.String)"/>
        /// </summary>
        /// <param name="topic"><see cref="string"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsTopicEligibleForDeletion(string topic)
        {
            return IExecute<bool>("isTopicEligibleForDeletion", topic);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/controller/ControllerContext.html#isTopicQueuedUpForDeletion(java.lang.String)"/>
        /// </summary>
        /// <param name="topic"><see cref="string"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsTopicQueuedUpForDeletion(string topic)
        {
            return IExecute<bool>("isTopicQueuedUpForDeletion", topic);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/controller/ControllerContext.html#leaderEpoch(org.apache.kafka.common.TopicPartition)"/>
        /// </summary>
        /// <param name="partition"><see cref="Org.Apache.Kafka.Common.TopicPartition"/></param>
        /// <returns><see cref="int"/></returns>
        public int LeaderEpoch(Org.Apache.Kafka.Common.TopicPartition partition)
        {
            return IExecute<int>("leaderEpoch", partition);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/controller/ControllerContext.html#partitionState(org.apache.kafka.common.TopicPartition)"/>
        /// </summary>
        /// <param name="partition"><see cref="Org.Apache.Kafka.Common.TopicPartition"/></param>
        /// <returns><see cref="Kafka.Controller.PartitionState"/></returns>
        public Kafka.Controller.PartitionState PartitionState(Org.Apache.Kafka.Common.TopicPartition partition)
        {
            return IExecute<Kafka.Controller.PartitionState>("partitionState", partition);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/controller/ControllerContext.html#partitionFullReplicaAssignment(org.apache.kafka.common.TopicPartition)"/>
        /// </summary>
        /// <param name="topicPartition"><see cref="Org.Apache.Kafka.Common.TopicPartition"/></param>
        /// <returns><see cref="Kafka.Controller.ReplicaAssignment"/></returns>
        public Kafka.Controller.ReplicaAssignment PartitionFullReplicaAssignment(Org.Apache.Kafka.Common.TopicPartition topicPartition)
        {
            return IExecute<Kafka.Controller.ReplicaAssignment>("partitionFullReplicaAssignment", topicPartition);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/controller/ControllerContext.html#replicaState(kafka.controller.PartitionAndReplica)"/>
        /// </summary>
        /// <param name="replica"><see cref="Kafka.Controller.PartitionAndReplica"/></param>
        /// <returns><see cref="Kafka.Controller.ReplicaState"/></returns>
        public Kafka.Controller.ReplicaState ReplicaState(Kafka.Controller.PartitionAndReplica replica)
        {
            return IExecute<Kafka.Controller.ReplicaState>("replicaState", replica);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/controller/ControllerContext.html#addTopicId(java.lang.String,org.apache.kafka.common.Uuid)"/>
        /// </summary>
        /// <param name="topic"><see cref="string"/></param>
        /// <param name="id"><see cref="Org.Apache.Kafka.Common.Uuid"/></param>
        public void AddTopicId(string topic, Org.Apache.Kafka.Common.Uuid id)
        {
            IExecute("addTopicId", topic, id);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/controller/ControllerContext.html#clearPartitionLeadershipInfo()"/>
        /// </summary>
        public void ClearPartitionLeadershipInfo()
        {
            IExecute("clearPartitionLeadershipInfo");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/controller/ControllerContext.html#putPartitionLeadershipInfo(org.apache.kafka.common.TopicPartition,kafka.controller.LeaderIsrAndControllerEpoch)"/>
        /// </summary>
        /// <param name="partition"><see cref="Org.Apache.Kafka.Common.TopicPartition"/></param>
        /// <param name="leaderIsrAndControllerEpoch"><see cref="Kafka.Controller.LeaderIsrAndControllerEpoch"/></param>
        public void PutPartitionLeadershipInfo(Org.Apache.Kafka.Common.TopicPartition partition, Kafka.Controller.LeaderIsrAndControllerEpoch leaderIsrAndControllerEpoch)
        {
            IExecute("putPartitionLeadershipInfo", partition, leaderIsrAndControllerEpoch);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/controller/ControllerContext.html#putPartitionState(org.apache.kafka.common.TopicPartition,kafka.controller.PartitionState)"/>
        /// </summary>
        /// <param name="partition"><see cref="Org.Apache.Kafka.Common.TopicPartition"/></param>
        /// <param name="targetState"><see cref="Kafka.Controller.PartitionState"/></param>
        public void PutPartitionState(Org.Apache.Kafka.Common.TopicPartition partition, Kafka.Controller.PartitionState targetState)
        {
            IExecute("putPartitionState", partition, targetState);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/controller/ControllerContext.html#putPartitionStateIfNotExists(org.apache.kafka.common.TopicPartition,kafka.controller.PartitionState)"/>
        /// </summary>
        /// <param name="partition"><see cref="Org.Apache.Kafka.Common.TopicPartition"/></param>
        /// <param name="state"><see cref="Kafka.Controller.PartitionState"/></param>
        public void PutPartitionStateIfNotExists(Org.Apache.Kafka.Common.TopicPartition partition, Kafka.Controller.PartitionState state)
        {
            IExecute("putPartitionStateIfNotExists", partition, state);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/controller/ControllerContext.html#putReplicaState(kafka.controller.PartitionAndReplica,kafka.controller.ReplicaState)"/>
        /// </summary>
        /// <param name="replica"><see cref="Kafka.Controller.PartitionAndReplica"/></param>
        /// <param name="state"><see cref="Kafka.Controller.ReplicaState"/></param>
        public void PutReplicaState(Kafka.Controller.PartitionAndReplica replica, Kafka.Controller.ReplicaState state)
        {
            IExecute("putReplicaState", replica, state);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/controller/ControllerContext.html#putReplicaStateIfNotExists(kafka.controller.PartitionAndReplica,kafka.controller.ReplicaState)"/>
        /// </summary>
        /// <param name="replica"><see cref="Kafka.Controller.PartitionAndReplica"/></param>
        /// <param name="state"><see cref="Kafka.Controller.ReplicaState"/></param>
        public void PutReplicaStateIfNotExists(Kafka.Controller.PartitionAndReplica replica, Kafka.Controller.ReplicaState state)
        {
            IExecute("putReplicaStateIfNotExists", replica, state);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/controller/ControllerContext.html#removeReplicaState(kafka.controller.PartitionAndReplica)"/>
        /// </summary>
        /// <param name="replica"><see cref="Kafka.Controller.PartitionAndReplica"/></param>
        public void RemoveReplicaState(Kafka.Controller.PartitionAndReplica replica)
        {
            IExecute("removeReplicaState", replica);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/controller/ControllerContext.html#removeTopic(java.lang.String)"/>
        /// </summary>
        /// <param name="topic"><see cref="string"/></param>
        public void RemoveTopic(string topic)
        {
            IExecute("removeTopic", topic);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/controller/ControllerContext.html#resetContext()"/>
        /// </summary>
        public void ResetContext()
        {
            IExecute("resetContext");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/controller/ControllerContext.html#updateBrokerMetadata(kafka.cluster.Broker,kafka.cluster.Broker)"/>
        /// </summary>
        /// <param name="oldMetadata"><see cref="Kafka.Cluster.Broker"/></param>
        /// <param name="newMetadata"><see cref="Kafka.Cluster.Broker"/></param>
        public void UpdateBrokerMetadata(Kafka.Cluster.Broker oldMetadata, Kafka.Cluster.Broker newMetadata)
        {
            IExecute("updateBrokerMetadata", oldMetadata, newMetadata);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/controller/ControllerContext.html#updatePartitionFullReplicaAssignment(org.apache.kafka.common.TopicPartition,kafka.controller.ReplicaAssignment)"/>
        /// </summary>
        /// <param name="topicPartition"><see cref="Org.Apache.Kafka.Common.TopicPartition"/></param>
        /// <param name="newAssignment"><see cref="Kafka.Controller.ReplicaAssignment"/></param>
        public void UpdatePartitionFullReplicaAssignment(Org.Apache.Kafka.Common.TopicPartition topicPartition, Kafka.Controller.ReplicaAssignment newAssignment)
        {
            IExecute("updatePartitionFullReplicaAssignment", topicPartition, newAssignment);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}