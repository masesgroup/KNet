/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka_2.13-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Kafka.Controller
{
    #region QueuedEvent
    public partial class QueuedEvent
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/controller/QueuedEvent.html#%3Cinit%3E(kafka.controller.ControllerEvent,long)"/>
        /// </summary>
        /// <param name="event"><see cref="Kafka.Controller.ControllerEvent"/></param>
        /// <param name="enqueueTimeMs"><see cref="long"/></param>
        public QueuedEvent(Kafka.Controller.ControllerEvent event, long enqueueTimeMs)
            : base(event, enqueueTimeMs)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/controller/QueuedEvent.html#enqueueTimeMs()"/> 
        /// </summary>
        public long EnqueueTimeMs
        {
            get { return IExecute<long>("enqueueTimeMs"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/controller/QueuedEvent.html#event()"/> 
        /// </summary>
        public Kafka.Controller.ControllerEvent Event
        {
            get { return IExecute<Kafka.Controller.ControllerEvent>("event"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/controller/QueuedEvent.html#processingStarted()"/> 
        /// </summary>
        public Java.Util.Concurrent.CountDownLatch ProcessingStarted
        {
            get { return IExecute<Java.Util.Concurrent.CountDownLatch>("processingStarted"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/controller/QueuedEvent.html#spent()"/> 
        /// </summary>
        public Java.Util.Concurrent.Atomic.AtomicBoolean Spent
        {
            get { return IExecute<Java.Util.Concurrent.Atomic.AtomicBoolean>("spent"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/controller/QueuedEvent.html#awaitProcessing()"/>
        /// </summary>
        public void AwaitProcessing()
        {
            IExecute("awaitProcessing");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/controller/QueuedEvent.html#preempt(kafka.controller.ControllerEventProcessor)"/>
        /// </summary>
        /// <param name="processor"><see cref="Kafka.Controller.ControllerEventProcessor"/></param>
        public void Preempt(Kafka.Controller.ControllerEventProcessor processor)
        {
            IExecute("preempt", processor);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/controller/QueuedEvent.html#process(kafka.controller.ControllerEventProcessor)"/>
        /// </summary>
        /// <param name="processor"><see cref="Kafka.Controller.ControllerEventProcessor"/></param>
        public void Process(Kafka.Controller.ControllerEventProcessor processor)
        {
            IExecute("process", processor);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}