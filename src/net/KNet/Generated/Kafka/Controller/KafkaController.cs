/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka_2.13-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Kafka.Controller
{
    #region KafkaController
    public partial class KafkaController
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Kafka.Controller.KafkaController"/> to <see cref="Kafka.Controller.ControllerEventProcessor"/>
        /// </summary>
        public static implicit operator Kafka.Controller.ControllerEventProcessor(Kafka.Controller.KafkaController t) => t.Cast<Kafka.Controller.ControllerEventProcessor>();
        /// <summary>
        /// Converter from <see cref="Kafka.Controller.KafkaController"/> to <see cref="Kafka.Metrics.KafkaMetricsGroup"/>
        /// </summary>
        public static implicit operator Kafka.Metrics.KafkaMetricsGroup(Kafka.Controller.KafkaController t) => t.Cast<Kafka.Metrics.KafkaMetricsGroup>();

        #endregion

        #region Fields

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/controller/KafkaController.html#InitialControllerEpoch()"/> 
        /// </summary>
        public static int InitialControllerEpoch
        {
            get { return SExecute<int>(LocalBridgeClazz, "InitialControllerEpoch"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/controller/KafkaController.html#InitialControllerEpochZkVersion()"/> 
        /// </summary>
        public static int InitialControllerEpochZkVersion
        {
            get { return SExecute<int>(LocalBridgeClazz, "InitialControllerEpochZkVersion"); }
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/controller/KafkaController.html#brokerEpoch()"/> 
        /// </summary>
        public long BrokerEpoch
        {
            get { return IExecute<long>("brokerEpoch"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/controller/KafkaController.html#config()"/> 
        /// </summary>
        public Kafka.Server.KafkaConfig Config
        {
            get { return IExecute<Kafka.Server.KafkaConfig>("config"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/controller/KafkaController.html#controllerChannelManager()"/> 
        /// </summary>
        public Kafka.Controller.ControllerChannelManager ControllerChannelManager
        {
            get { return IExecute<Kafka.Controller.ControllerChannelManager>("controllerChannelManager"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/controller/KafkaController.html#controllerContext()"/> 
        /// </summary>
        public Kafka.Controller.ControllerContext ControllerContext
        {
            get { return IExecute<Kafka.Controller.ControllerContext>("controllerContext"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/controller/KafkaController.html#epoch()"/> 
        /// </summary>
        public int Epoch
        {
            get { return IExecute<int>("epoch"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/controller/KafkaController.html#eventManager()"/> 
        /// </summary>
        public Kafka.Controller.ControllerEventManager EventManager
        {
            get { return IExecute<Kafka.Controller.ControllerEventManager>("eventManager"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/controller/KafkaController.html#isActive()"/> 
        /// </summary>
        public bool IsActive
        {
            get { return IExecute<bool>("isActive"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/controller/KafkaController.html#isDebugEnabled()"/> 
        /// </summary>
        public bool IsDebugEnabled
        {
            get { return IExecute<bool>("isDebugEnabled"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/controller/KafkaController.html#isTraceEnabled()"/> 
        /// </summary>
        public bool IsTraceEnabled
        {
            get { return IExecute<bool>("isTraceEnabled"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/controller/KafkaController.html#kafkaScheduler()"/> 
        /// </summary>
        public Kafka.Utils.KafkaScheduler KafkaScheduler
        {
            get { return IExecute<Kafka.Utils.KafkaScheduler>("kafkaScheduler"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/controller/KafkaController.html#logger()"/> 
        /// </summary>
        public Com.Typesafe.Scalalogging.Logger Logger
        {
            get { return IExecute<Com.Typesafe.Scalalogging.Logger>("logger"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/controller/KafkaController.html#loggerName()"/> 
        /// </summary>
        public string LoggerName
        {
            get { return IExecute<string>("loggerName"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/controller/KafkaController.html#logIdent()"/> 
        /// </summary>
        public string LogIdent
        {
            get { return IExecute<string>("logIdent"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/controller/KafkaController.html#partitionStateMachine()"/> 
        /// </summary>
        public Kafka.Controller.PartitionStateMachine PartitionStateMachine
        {
            get { return IExecute<Kafka.Controller.PartitionStateMachine>("partitionStateMachine"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/controller/KafkaController.html#replicaStateMachine()"/> 
        /// </summary>
        public Kafka.Controller.ReplicaStateMachine ReplicaStateMachine
        {
            get { return IExecute<Kafka.Controller.ReplicaStateMachine>("replicaStateMachine"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/controller/KafkaController.html#isTopicQueuedForDeletion(java.lang.String)"/>
        /// </summary>
        /// <param name="topic"><see cref="string"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsTopicQueuedForDeletion(string topic)
        {
            return IExecute<bool>("isTopicQueuedForDeletion", topic);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/controller/KafkaController.html#newMeter(com.yammer.metrics.core.MetricName,java.lang.String,java.util.concurrent.TimeUnit)"/>
        /// </summary>
        /// <param name="metricName"><see cref="Com.Yammer.Metrics.Core.MetricName"/></param>
        /// <param name="eventType"><see cref="string"/></param>
        /// <param name="timeUnit"><see cref="Java.Util.Concurrent.TimeUnit"/></param>
        /// <returns><see cref="Com.Yammer.Metrics.Core.Meter"/></returns>
        public Com.Yammer.Metrics.Core.Meter NewMeter(Com.Yammer.Metrics.Core.MetricName metricName, string eventType, Java.Util.Concurrent.TimeUnit timeUnit)
        {
            return IExecute<Com.Yammer.Metrics.Core.Meter>("newMeter", metricName, eventType, timeUnit);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/controller/KafkaController.html#msgWithLogIdent(java.lang.String)"/>
        /// </summary>
        /// <param name="msg"><see cref="string"/></param>
        /// <returns><see cref="string"/></returns>
        public string MsgWithLogIdent(string msg)
        {
            return IExecute<string>("msgWithLogIdent", msg);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/controller/KafkaController.html#enableDefaultUncleanLeaderElection()"/>
        /// </summary>
        public void EnableDefaultUncleanLeaderElection()
        {
            IExecute("enableDefaultUncleanLeaderElection");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/controller/KafkaController.html#enableTopicUncleanLeaderElection(java.lang.String)"/>
        /// </summary>
        /// <param name="topic"><see cref="string"/></param>
        public void EnableTopicUncleanLeaderElection(string topic)
        {
            IExecute("enableTopicUncleanLeaderElection", topic);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/controller/KafkaController.html#preempt(kafka.controller.ControllerEvent)"/>
        /// </summary>
        /// <param name="event"><see cref="Kafka.Controller.ControllerEvent"/></param>
        public void Preempt(Kafka.Controller.ControllerEvent event)
        {
            IExecute("preempt", event);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/controller/KafkaController.html#process(kafka.controller.ControllerEvent)"/>
        /// </summary>
        /// <param name="event"><see cref="Kafka.Controller.ControllerEvent"/></param>
        public void Process(Kafka.Controller.ControllerEvent event)
        {
            IExecute("process", event);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/controller/KafkaController.html#shutdown()"/>
        /// </summary>
        public void Shutdown()
        {
            IExecute("shutdown");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/controller/KafkaController.html#startup()"/>
        /// </summary>
        public void Startup()
        {
            IExecute("startup");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/controller/KafkaController.html#updateBrokerInfo(kafka.zk.BrokerInfo)"/>
        /// </summary>
        /// <param name="newBrokerInfo"><see cref="Kafka.Zk.BrokerInfo"/></param>
        public void UpdateBrokerInfo(Kafka.Zk.BrokerInfo newBrokerInfo)
        {
            IExecute("updateBrokerInfo", newBrokerInfo);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}