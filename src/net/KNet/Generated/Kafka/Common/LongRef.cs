/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka_2.13-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Kafka.Common
{
    #region LongRef
    public partial class LongRef
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/common/LongRef.html#%3Cinit%3E(long)"/>
        /// </summary>
        /// <param name="value"><see cref="long"/></param>
        public LongRef(long value)
            : base(value)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/common/LongRef.html#getAndDecrement()"/> 
        /// </summary>
        public long AndDecrement
        {
            get { return IExecute<long>("getAndDecrement"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/common/LongRef.html#getAndIncrement()"/> 
        /// </summary>
        public long AndIncrement
        {
            get { return IExecute<long>("getAndIncrement"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/common/LongRef.html#decrementAndGet()"/> 
        /// </summary>
        public long DecrementAndGet
        {
            get { return IExecute<long>("decrementAndGet"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/common/LongRef.html#incrementAndGet()"/> 
        /// </summary>
        public long IncrementAndGet
        {
            get { return IExecute<long>("incrementAndGet"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/common/LongRef.html#value()"/> 
        /// </summary>
        public long Value
        {
            get { return IExecute<long>("value"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/common/LongRef.html#addAndGet(long)"/>
        /// </summary>
        /// <param name="delta"><see cref="long"/></param>
        /// <returns><see cref="long"/></returns>
        public long AddAndGet(long delta)
        {
            return IExecute<long>("addAndGet", delta);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/common/LongRef.html#getAndAdd(long)"/>
        /// </summary>
        /// <param name="delta"><see cref="long"/></param>
        /// <returns><see cref="long"/></returns>
        public long GetAndAdd(long delta)
        {
            return IExecute<long>("getAndAdd", delta);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}