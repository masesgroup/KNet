/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka_2.13-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Kafka.Server
{
    #region AbstractFetcherManager
    public partial class AbstractFetcherManager
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/AbstractFetcherManager.html#%3Cinit%3E(java.lang.String,java.lang.String,int)"/>
        /// </summary>
        /// <param name="name"><see cref="string"/></param>
        /// <param name="clientId"><see cref="string"/></param>
        /// <param name="numFetchers"><see cref="int"/></param>
        public AbstractFetcherManager(string name, string clientId, int numFetchers)
            : base(name, clientId, numFetchers)
        {
        }

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Kafka.Server.AbstractFetcherManager"/> to <see cref="Kafka.Metrics.KafkaMetricsGroup"/>
        /// </summary>
        public static implicit operator Kafka.Metrics.KafkaMetricsGroup(Kafka.Server.AbstractFetcherManager t) => t.Cast<Kafka.Metrics.KafkaMetricsGroup>();

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/AbstractFetcherManager.html#deadThreadCount()"/> 
        /// </summary>
        public int DeadThreadCount
        {
            get { return IExecute<int>("deadThreadCount"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/AbstractFetcherManager.html#failedPartitions()"/> 
        /// </summary>
        public Kafka.Server.FailedPartitions FailedPartitions
        {
            get { return IExecute<Kafka.Server.FailedPartitions>("failedPartitions"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/AbstractFetcherManager.html#isDebugEnabled()"/> 
        /// </summary>
        public bool IsDebugEnabled
        {
            get { return IExecute<bool>("isDebugEnabled"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/AbstractFetcherManager.html#isTraceEnabled()"/> 
        /// </summary>
        public bool IsTraceEnabled
        {
            get { return IExecute<bool>("isTraceEnabled"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/AbstractFetcherManager.html#logger()"/> 
        /// </summary>
        public Com.Typesafe.Scalalogging.Logger Logger
        {
            get { return IExecute<Com.Typesafe.Scalalogging.Logger>("logger"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/AbstractFetcherManager.html#loggerName()"/> 
        /// </summary>
        public string LoggerName
        {
            get { return IExecute<string>("loggerName"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/AbstractFetcherManager.html#logIdent()"/> 
        /// </summary>
        public string LogIdent
        {
            get { return IExecute<string>("logIdent"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/AbstractFetcherManager.html#name()"/> 
        /// </summary>
        public string Name
        {
            get { return IExecute<string>("name"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/AbstractFetcherManager.html#createFetcherThread(int,kafka.cluster.BrokerEndPoint)"/>
        /// </summary>
        /// <param name="fetcherId"><see cref="int"/></param>
        /// <param name="sourceBroker"><see cref="Kafka.Cluster.BrokerEndPoint"/></param>
        /// <returns><see cref="Kafka.Server.AbstractFetcherThread"/></returns>
        public Kafka.Server.AbstractFetcherThread CreateFetcherThread(int fetcherId, Kafka.Cluster.BrokerEndPoint sourceBroker)
        {
            return IExecute<Kafka.Server.AbstractFetcherThread>("createFetcherThread", fetcherId, sourceBroker);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/AbstractFetcherManager.html#newMeter(com.yammer.metrics.core.MetricName,java.lang.String,java.util.concurrent.TimeUnit)"/>
        /// </summary>
        /// <param name="metricName"><see cref="Com.Yammer.Metrics.Core.MetricName"/></param>
        /// <param name="eventType"><see cref="string"/></param>
        /// <param name="timeUnit"><see cref="Java.Util.Concurrent.TimeUnit"/></param>
        /// <returns><see cref="Com.Yammer.Metrics.Core.Meter"/></returns>
        public Com.Yammer.Metrics.Core.Meter NewMeter(Com.Yammer.Metrics.Core.MetricName metricName, string eventType, Java.Util.Concurrent.TimeUnit timeUnit)
        {
            return IExecute<Com.Yammer.Metrics.Core.Meter>("newMeter", metricName, eventType, timeUnit);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/AbstractFetcherManager.html#getFetcherId(org.apache.kafka.common.TopicPartition)"/>
        /// </summary>
        /// <param name="topicPartition"><see cref="Org.Apache.Kafka.Common.TopicPartition"/></param>
        /// <returns><see cref="int"/></returns>
        public int GetFetcherId(Org.Apache.Kafka.Common.TopicPartition topicPartition)
        {
            return IExecute<int>("getFetcherId", topicPartition);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/AbstractFetcherManager.html#msgWithLogIdent(java.lang.String)"/>
        /// </summary>
        /// <param name="msg"><see cref="string"/></param>
        /// <returns><see cref="string"/></returns>
        public string MsgWithLogIdent(string msg)
        {
            return IExecute<string>("msgWithLogIdent", msg);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/AbstractFetcherManager.html#addFailedPartition(org.apache.kafka.common.TopicPartition)"/>
        /// </summary>
        /// <param name="topicPartition"><see cref="Org.Apache.Kafka.Common.TopicPartition"/></param>
        public void AddFailedPartition(Org.Apache.Kafka.Common.TopicPartition topicPartition)
        {
            IExecute("addFailedPartition", topicPartition);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/AbstractFetcherManager.html#closeAllFetchers()"/>
        /// </summary>
        public void CloseAllFetchers()
        {
            IExecute("closeAllFetchers");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/AbstractFetcherManager.html#markPartitionsForTruncation(int,org.apache.kafka.common.TopicPartition,long)"/>
        /// </summary>
        /// <param name="brokerId"><see cref="int"/></param>
        /// <param name="topicPartition"><see cref="Org.Apache.Kafka.Common.TopicPartition"/></param>
        /// <param name="truncationOffset"><see cref="long"/></param>
        public void MarkPartitionsForTruncation(int brokerId, Org.Apache.Kafka.Common.TopicPartition topicPartition, long truncationOffset)
        {
            IExecute("markPartitionsForTruncation", brokerId, topicPartition, truncationOffset);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/AbstractFetcherManager.html#resizeThreadPool(int)"/>
        /// </summary>
        /// <param name="newSize"><see cref="int"/></param>
        public void ResizeThreadPool(int newSize)
        {
            IExecute("resizeThreadPool", newSize);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/AbstractFetcherManager.html#shutdownIdleFetcherThreads()"/>
        /// </summary>
        public void ShutdownIdleFetcherThreads()
        {
            IExecute("shutdownIdleFetcherThreads");
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion

    #region AbstractFetcherManager<T>
    public partial class AbstractFetcherManager<T>
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/AbstractFetcherManager.html#%3Cinit%3E(java.lang.String,java.lang.String,int)"/>
        /// </summary>
        /// <param name="name"><see cref="string"/></param>
        /// <param name="clientId"><see cref="string"/></param>
        /// <param name="numFetchers"><see cref="int"/></param>
        public AbstractFetcherManager(string name, string clientId, int numFetchers)
            : base(name, clientId, numFetchers)
        {
        }

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Kafka.Server.AbstractFetcherManager{T}"/> to <see cref="Kafka.Metrics.KafkaMetricsGroup"/>
        /// </summary>
        public static implicit operator Kafka.Metrics.KafkaMetricsGroup(Kafka.Server.AbstractFetcherManager<T> t) => t.Cast<Kafka.Metrics.KafkaMetricsGroup>();
        /// <summary>
        /// Converter from <see cref="Kafka.Server.AbstractFetcherManager{T}"/> to <see cref="Kafka.Server.AbstractFetcherManager"/>
        /// </summary>
        public static implicit operator Kafka.Server.AbstractFetcherManager(Kafka.Server.AbstractFetcherManager<T> t) => t.Cast<Kafka.Server.AbstractFetcherManager>();

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/AbstractFetcherManager.html#deadThreadCount()"/> 
        /// </summary>
        public int DeadThreadCount
        {
            get { return IExecute<int>("deadThreadCount"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/AbstractFetcherManager.html#failedPartitions()"/> 
        /// </summary>
        public Kafka.Server.FailedPartitions FailedPartitions
        {
            get { return IExecute<Kafka.Server.FailedPartitions>("failedPartitions"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/AbstractFetcherManager.html#isDebugEnabled()"/> 
        /// </summary>
        public bool IsDebugEnabled
        {
            get { return IExecute<bool>("isDebugEnabled"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/AbstractFetcherManager.html#isTraceEnabled()"/> 
        /// </summary>
        public bool IsTraceEnabled
        {
            get { return IExecute<bool>("isTraceEnabled"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/AbstractFetcherManager.html#logger()"/> 
        /// </summary>
        public Com.Typesafe.Scalalogging.Logger Logger
        {
            get { return IExecute<Com.Typesafe.Scalalogging.Logger>("logger"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/AbstractFetcherManager.html#loggerName()"/> 
        /// </summary>
        public string LoggerName
        {
            get { return IExecute<string>("loggerName"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/AbstractFetcherManager.html#logIdent()"/> 
        /// </summary>
        public string LogIdent
        {
            get { return IExecute<string>("logIdent"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/AbstractFetcherManager.html#name()"/> 
        /// </summary>
        public string Name
        {
            get { return IExecute<string>("name"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/AbstractFetcherManager.html#createFetcherThread(int,kafka.cluster.BrokerEndPoint)"/>
        /// </summary>
        /// <param name="fetcherId"><see cref="int"/></param>
        /// <param name="sourceBroker"><see cref="Kafka.Cluster.BrokerEndPoint"/></param>
        /// <returns><typeparamref name="T"/></returns>
        public T CreateFetcherThread(int fetcherId, Kafka.Cluster.BrokerEndPoint sourceBroker)
        {
            return IExecute<T>("createFetcherThread", fetcherId, sourceBroker);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/AbstractFetcherManager.html#newMeter(com.yammer.metrics.core.MetricName,java.lang.String,java.util.concurrent.TimeUnit)"/>
        /// </summary>
        /// <param name="metricName"><see cref="Com.Yammer.Metrics.Core.MetricName"/></param>
        /// <param name="eventType"><see cref="string"/></param>
        /// <param name="timeUnit"><see cref="Java.Util.Concurrent.TimeUnit"/></param>
        /// <returns><see cref="Com.Yammer.Metrics.Core.Meter"/></returns>
        public Com.Yammer.Metrics.Core.Meter NewMeter(Com.Yammer.Metrics.Core.MetricName metricName, string eventType, Java.Util.Concurrent.TimeUnit timeUnit)
        {
            return IExecute<Com.Yammer.Metrics.Core.Meter>("newMeter", metricName, eventType, timeUnit);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/AbstractFetcherManager.html#getFetcherId(org.apache.kafka.common.TopicPartition)"/>
        /// </summary>
        /// <param name="topicPartition"><see cref="Org.Apache.Kafka.Common.TopicPartition"/></param>
        /// <returns><see cref="int"/></returns>
        public int GetFetcherId(Org.Apache.Kafka.Common.TopicPartition topicPartition)
        {
            return IExecute<int>("getFetcherId", topicPartition);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/AbstractFetcherManager.html#msgWithLogIdent(java.lang.String)"/>
        /// </summary>
        /// <param name="msg"><see cref="string"/></param>
        /// <returns><see cref="string"/></returns>
        public string MsgWithLogIdent(string msg)
        {
            return IExecute<string>("msgWithLogIdent", msg);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/AbstractFetcherManager.html#addFailedPartition(org.apache.kafka.common.TopicPartition)"/>
        /// </summary>
        /// <param name="topicPartition"><see cref="Org.Apache.Kafka.Common.TopicPartition"/></param>
        public void AddFailedPartition(Org.Apache.Kafka.Common.TopicPartition topicPartition)
        {
            IExecute("addFailedPartition", topicPartition);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/AbstractFetcherManager.html#closeAllFetchers()"/>
        /// </summary>
        public void CloseAllFetchers()
        {
            IExecute("closeAllFetchers");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/AbstractFetcherManager.html#markPartitionsForTruncation(int,org.apache.kafka.common.TopicPartition,long)"/>
        /// </summary>
        /// <param name="brokerId"><see cref="int"/></param>
        /// <param name="topicPartition"><see cref="Org.Apache.Kafka.Common.TopicPartition"/></param>
        /// <param name="truncationOffset"><see cref="long"/></param>
        public void MarkPartitionsForTruncation(int brokerId, Org.Apache.Kafka.Common.TopicPartition topicPartition, long truncationOffset)
        {
            IExecute("markPartitionsForTruncation", brokerId, topicPartition, truncationOffset);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/AbstractFetcherManager.html#resizeThreadPool(int)"/>
        /// </summary>
        /// <param name="newSize"><see cref="int"/></param>
        public void ResizeThreadPool(int newSize)
        {
            IExecute("resizeThreadPool", newSize);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/AbstractFetcherManager.html#shutdownIdleFetcherThreads()"/>
        /// </summary>
        public void ShutdownIdleFetcherThreads()
        {
            IExecute("shutdownIdleFetcherThreads");
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}