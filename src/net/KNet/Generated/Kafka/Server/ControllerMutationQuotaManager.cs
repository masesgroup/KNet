/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka_2.13-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Kafka.Server
{
    #region ControllerMutationQuotaManager
    public partial class ControllerMutationQuotaManager
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ControllerMutationQuotaManager.html#QuotaControllerMutationDefault()"/> 
        /// </summary>
        public static double QuotaControllerMutationDefault
        {
            get { return SExecute<double>(LocalBridgeClazz, "QuotaControllerMutationDefault"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ControllerMutationQuotaManager.html#throttleTimeMs(org.apache.kafka.common.metrics.QuotaViolationException,long)"/>
        /// </summary>
        /// <param name="e"><see cref="Org.Apache.Kafka.Common.Metrics.QuotaViolationException"/></param>
        /// <param name="timeMs"><see cref="long"/></param>
        /// <returns><see cref="long"/></returns>
        public static long ThrottleTimeMs(Org.Apache.Kafka.Common.Metrics.QuotaViolationException e, long timeMs)
        {
            return SExecute<long>(LocalBridgeClazz, "throttleTimeMs", e, timeMs);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ControllerMutationQuotaManager.html#newPermissiveQuotaFor(kafka.network.RequestChannel.Request)"/>
        /// </summary>
        /// <param name="request"><see cref="Kafka.Network.RequestChannel.Request"/></param>
        /// <returns><see cref="Kafka.Server.ControllerMutationQuota"/></returns>
        public Kafka.Server.ControllerMutationQuota NewPermissiveQuotaFor(Kafka.Network.RequestChannel.Request request)
        {
            return IExecute<Kafka.Server.ControllerMutationQuota>("newPermissiveQuotaFor", request);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ControllerMutationQuotaManager.html#newPermissiveQuotaFor(kafka.network.RequestChannel.Session,java.lang.String)"/>
        /// </summary>
        /// <param name="session"><see cref="Kafka.Network.RequestChannel.Session"/></param>
        /// <param name="clientId"><see cref="string"/></param>
        /// <returns><see cref="Kafka.Server.ControllerMutationQuota"/></returns>
        public Kafka.Server.ControllerMutationQuota NewPermissiveQuotaFor(Kafka.Network.RequestChannel.Session session, string clientId)
        {
            return IExecute<Kafka.Server.ControllerMutationQuota>("newPermissiveQuotaFor", session, clientId);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ControllerMutationQuotaManager.html#newQuotaFor(kafka.network.RequestChannel.Request,short)"/>
        /// </summary>
        /// <param name="request"><see cref="Kafka.Network.RequestChannel.Request"/></param>
        /// <param name="strictSinceVersion"><see cref="short"/></param>
        /// <returns><see cref="Kafka.Server.ControllerMutationQuota"/></returns>
        public Kafka.Server.ControllerMutationQuota NewQuotaFor(Kafka.Network.RequestChannel.Request request, short strictSinceVersion)
        {
            return IExecute<Kafka.Server.ControllerMutationQuota>("newQuotaFor", request, strictSinceVersion);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ControllerMutationQuotaManager.html#newStrictQuotaFor(kafka.network.RequestChannel.Request)"/>
        /// </summary>
        /// <param name="request"><see cref="Kafka.Network.RequestChannel.Request"/></param>
        /// <returns><see cref="Kafka.Server.ControllerMutationQuota"/></returns>
        public Kafka.Server.ControllerMutationQuota NewStrictQuotaFor(Kafka.Network.RequestChannel.Request request)
        {
            return IExecute<Kafka.Server.ControllerMutationQuota>("newStrictQuotaFor", request);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ControllerMutationQuotaManager.html#newStrictQuotaFor(kafka.network.RequestChannel.Session,java.lang.String)"/>
        /// </summary>
        /// <param name="session"><see cref="Kafka.Network.RequestChannel.Session"/></param>
        /// <param name="clientId"><see cref="string"/></param>
        /// <returns><see cref="Kafka.Server.ControllerMutationQuota"/></returns>
        public Kafka.Server.ControllerMutationQuota NewStrictQuotaFor(Kafka.Network.RequestChannel.Session session, string clientId)
        {
            return IExecute<Kafka.Server.ControllerMutationQuota>("newStrictQuotaFor", session, clientId);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}