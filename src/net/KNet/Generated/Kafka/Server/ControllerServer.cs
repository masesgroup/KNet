/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka_2.13-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Kafka.Server
{
    #region ControllerServer
    public partial class ControllerServer
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ControllerServer.html#%3Cinit%3E(kafka.server.SharedServer,org.apache.kafka.metadata.KafkaConfigSchema,org.apache.kafka.metadata.bootstrap.BootstrapMetadata)"/>
        /// </summary>
        /// <param name="sharedServer"><see cref="Kafka.Server.SharedServer"/></param>
        /// <param name="configSchema"><see cref="Org.Apache.Kafka.Metadata.KafkaConfigSchema"/></param>
        /// <param name="bootstrapMetadata"><see cref="Org.Apache.Kafka.Metadata.Bootstrap.BootstrapMetadata"/></param>
        public ControllerServer(Kafka.Server.SharedServer sharedServer, Org.Apache.Kafka.Metadata.KafkaConfigSchema configSchema, Org.Apache.Kafka.Metadata.Bootstrap.BootstrapMetadata bootstrapMetadata)
            : base(sharedServer, configSchema, bootstrapMetadata)
        {
        }

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Kafka.Server.ControllerServer"/> to <see cref="Kafka.Metrics.KafkaMetricsGroup"/>
        /// </summary>
        public static implicit operator Kafka.Metrics.KafkaMetricsGroup(Kafka.Server.ControllerServer t) => t.Cast<Kafka.Metrics.KafkaMetricsGroup>();

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ControllerServer.html#awaitShutdownCond()"/> 
        /// </summary>
        public Java.Util.Concurrent.Locks.Condition AwaitShutdownCond
        {
            get { return IExecute<Java.Util.Concurrent.Locks.Condition>("awaitShutdownCond"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ControllerServer.html#bootstrapMetadata()"/> 
        /// </summary>
        public Org.Apache.Kafka.Metadata.Bootstrap.BootstrapMetadata BootstrapMetadata
        {
            get { return IExecute<Org.Apache.Kafka.Metadata.Bootstrap.BootstrapMetadata>("bootstrapMetadata"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ControllerServer.html#clusterId()"/> 
        /// </summary>
        public string ClusterId
        {
            get { return IExecute<string>("clusterId"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ControllerServer.html#config()"/> 
        /// </summary>
        public Kafka.Server.KafkaConfig Config
        {
            get { return IExecute<Kafka.Server.KafkaConfig>("config"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ControllerServer.html#configSchema()"/> 
        /// </summary>
        public Org.Apache.Kafka.Metadata.KafkaConfigSchema ConfigSchema
        {
            get { return IExecute<Org.Apache.Kafka.Metadata.KafkaConfigSchema>("configSchema"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ControllerServer.html#controller()"/> 
        /// </summary>
        public Org.Apache.Kafka.Controller.Controller Controller
        {
            get { return IExecute<Org.Apache.Kafka.Controller.Controller>("controller"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ControllerServer.html#controllerApis()"/> 
        /// </summary>
        public Kafka.Server.ControllerApis ControllerApis
        {
            get { return IExecute<Kafka.Server.ControllerApis>("controllerApis"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ControllerServer.html#controllerApisHandlerPool()"/> 
        /// </summary>
        public Kafka.Server.KafkaRequestHandlerPool ControllerApisHandlerPool
        {
            get { return IExecute<Kafka.Server.KafkaRequestHandlerPool>("controllerApisHandlerPool"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ControllerServer.html#credentialProvider()"/> 
        /// </summary>
        public Kafka.Security.CredentialProvider CredentialProvider
        {
            get { return IExecute<Kafka.Security.CredentialProvider>("credentialProvider"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ControllerServer.html#isDebugEnabled()"/> 
        /// </summary>
        public bool IsDebugEnabled
        {
            get { return IExecute<bool>("isDebugEnabled"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ControllerServer.html#isTraceEnabled()"/> 
        /// </summary>
        public bool IsTraceEnabled
        {
            get { return IExecute<bool>("isTraceEnabled"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ControllerServer.html#linuxIoMetricsCollector()"/> 
        /// </summary>
        public Kafka.Metrics.LinuxIoMetricsCollector LinuxIoMetricsCollector
        {
            get { return IExecute<Kafka.Metrics.LinuxIoMetricsCollector>("linuxIoMetricsCollector"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ControllerServer.html#lock()"/> 
        /// </summary>
        public Java.Util.Concurrent.Locks.ReentrantLock Lock
        {
            get { return IExecute<Java.Util.Concurrent.Locks.ReentrantLock>("lock"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ControllerServer.html#logger()"/> 
        /// </summary>
        public Com.Typesafe.Scalalogging.Logger Logger
        {
            get { return IExecute<Com.Typesafe.Scalalogging.Logger>("logger"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ControllerServer.html#loggerName()"/> 
        /// </summary>
        public string LoggerName
        {
            get { return IExecute<string>("loggerName"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ControllerServer.html#logIdent()"/> 
        /// </summary>
        public string LogIdent
        {
            get { return IExecute<string>("logIdent"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ControllerServer.html#metrics()"/> 
        /// </summary>
        public Org.Apache.Kafka.Common.Metrics.Metrics Metrics
        {
            get { return IExecute<Org.Apache.Kafka.Common.Metrics.Metrics>("metrics"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ControllerServer.html#quotaManagers()"/> 
        /// </summary>
        public Kafka.Server.QuotaFactory.QuotaManagers QuotaManagers
        {
            get { return IExecute<Kafka.Server.QuotaFactory.QuotaManagers>("quotaManagers"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ControllerServer.html#raftManager()"/> 
        /// </summary>
        public Kafka.Raft.KafkaRaftManager<Org.Apache.Kafka.Server.Common.ApiMessageAndVersion> RaftManager
        {
            get { return IExecute<Kafka.Raft.KafkaRaftManager<Org.Apache.Kafka.Server.Common.ApiMessageAndVersion>>("raftManager"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ControllerServer.html#sharedServer()"/> 
        /// </summary>
        public Kafka.Server.SharedServer SharedServer
        {
            get { return IExecute<Kafka.Server.SharedServer>("sharedServer"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ControllerServer.html#socketServer()"/> 
        /// </summary>
        public Kafka.Network.SocketServer SocketServer
        {
            get { return IExecute<Kafka.Network.SocketServer>("socketServer"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ControllerServer.html#socketServerFirstBoundPortFuture()"/> 
        /// </summary>
        public Java.Util.Concurrent.CompletableFuture<int?> SocketServerFirstBoundPortFuture
        {
            get { return IExecute<Java.Util.Concurrent.CompletableFuture<int?>>("socketServerFirstBoundPortFuture"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ControllerServer.html#status()"/> 
        /// </summary>
        public Kafka.Server.Server.ProcessStatus Status
        {
            get { return IExecute<Kafka.Server.Server.ProcessStatus>("status"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ControllerServer.html#threadNamePrefix()"/> 
        /// </summary>
        public string ThreadNamePrefix
        {
            get { return IExecute<string>("threadNamePrefix"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ControllerServer.html#time()"/> 
        /// </summary>
        public Org.Apache.Kafka.Common.Utils.Time Time
        {
            get { return IExecute<Org.Apache.Kafka.Common.Utils.Time>("time"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ControllerServer.html#tokenCache()"/> 
        /// </summary>
        public Org.Apache.Kafka.Common.Security.Token.Delegation.Internals.DelegationTokenCache TokenCache
        {
            get { return IExecute<Org.Apache.Kafka.Common.Security.Token.Delegation.Internals.DelegationTokenCache>("tokenCache"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ControllerServer.html#newMeter(com.yammer.metrics.core.MetricName,java.lang.String,java.util.concurrent.TimeUnit)"/>
        /// </summary>
        /// <param name="metricName"><see cref="Com.Yammer.Metrics.Core.MetricName"/></param>
        /// <param name="eventType"><see cref="string"/></param>
        /// <param name="timeUnit"><see cref="Java.Util.Concurrent.TimeUnit"/></param>
        /// <returns><see cref="Com.Yammer.Metrics.Core.Meter"/></returns>
        public Com.Yammer.Metrics.Core.Meter NewMeter(Com.Yammer.Metrics.Core.MetricName metricName, string eventType, Java.Util.Concurrent.TimeUnit timeUnit)
        {
            return IExecute<Com.Yammer.Metrics.Core.Meter>("newMeter", metricName, eventType, timeUnit);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ControllerServer.html#msgWithLogIdent(java.lang.String)"/>
        /// </summary>
        /// <param name="msg"><see cref="string"/></param>
        /// <returns><see cref="string"/></returns>
        public string MsgWithLogIdent(string msg)
        {
            return IExecute<string>("msgWithLogIdent", msg);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ControllerServer.html#awaitShutdown()"/>
        /// </summary>
        public void AwaitShutdown()
        {
            IExecute("awaitShutdown");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ControllerServer.html#shutdown()"/>
        /// </summary>
        public void Shutdown()
        {
            IExecute("shutdown");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ControllerServer.html#startup()"/>
        /// </summary>
        public void Startup()
        {
            IExecute("startup");
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}