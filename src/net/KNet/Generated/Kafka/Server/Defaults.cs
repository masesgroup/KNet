/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka_2.13-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Kafka.Server
{
    #region Defaults
    public partial class Defaults
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#AlterLogDirsReplicationQuotaWindowSizeSeconds()"/> 
        /// </summary>
        public static int AlterLogDirsReplicationQuotaWindowSizeSeconds
        {
            get { return SExecute<int>(LocalBridgeClazz, "AlterLogDirsReplicationQuotaWindowSizeSeconds"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#AuthorizerClassName()"/> 
        /// </summary>
        public static string AuthorizerClassName
        {
            get { return SExecute<string>(LocalBridgeClazz, "AuthorizerClassName"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#AutoCreateTopicsEnable()"/> 
        /// </summary>
        public static bool AutoCreateTopicsEnable
        {
            get { return SExecute<bool>(LocalBridgeClazz, "AutoCreateTopicsEnable"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#AutoIncludeJmxReporter()"/> 
        /// </summary>
        public static bool AutoIncludeJmxReporter
        {
            get { return SExecute<bool>(LocalBridgeClazz, "AutoIncludeJmxReporter"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#AutoLeaderRebalanceEnable()"/> 
        /// </summary>
        public static bool AutoLeaderRebalanceEnable
        {
            get { return SExecute<bool>(LocalBridgeClazz, "AutoLeaderRebalanceEnable"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#BackgroundThreads()"/> 
        /// </summary>
        public static int BackgroundThreads
        {
            get { return SExecute<int>(LocalBridgeClazz, "BackgroundThreads"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#BrokerHeartbeatIntervalMs()"/> 
        /// </summary>
        public static int BrokerHeartbeatIntervalMs
        {
            get { return SExecute<int>(LocalBridgeClazz, "BrokerHeartbeatIntervalMs"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#BrokerId()"/> 
        /// </summary>
        public static int BrokerId
        {
            get { return SExecute<int>(LocalBridgeClazz, "BrokerId"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#BrokerIdGenerationEnable()"/> 
        /// </summary>
        public static bool BrokerIdGenerationEnable
        {
            get { return SExecute<bool>(LocalBridgeClazz, "BrokerIdGenerationEnable"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#BrokerSessionTimeoutMs()"/> 
        /// </summary>
        public static int BrokerSessionTimeoutMs
        {
            get { return SExecute<int>(LocalBridgeClazz, "BrokerSessionTimeoutMs"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#Compact()"/> 
        /// </summary>
        public static string Compact
        {
            get { return SExecute<string>(LocalBridgeClazz, "Compact"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#CompressionType()"/> 
        /// </summary>
        public static string CompressionType
        {
            get { return SExecute<string>(LocalBridgeClazz, "CompressionType"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#ConnectionSetupTimeoutMaxMs()"/> 
        /// </summary>
        public static long? ConnectionSetupTimeoutMaxMs
        {
            get { return SExecute<long?>(LocalBridgeClazz, "ConnectionSetupTimeoutMaxMs"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#ConnectionSetupTimeoutMs()"/> 
        /// </summary>
        public static long? ConnectionSetupTimeoutMs
        {
            get { return SExecute<long?>(LocalBridgeClazz, "ConnectionSetupTimeoutMs"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#ConnectionsMaxIdleMs()"/> 
        /// </summary>
        public static long ConnectionsMaxIdleMs
        {
            get { return SExecute<long>(LocalBridgeClazz, "ConnectionsMaxIdleMs"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#ConnectionsMaxReauthMsDefault()"/> 
        /// </summary>
        public static long ConnectionsMaxReauthMsDefault
        {
            get { return SExecute<long>(LocalBridgeClazz, "ConnectionsMaxReauthMsDefault"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#ControlledShutdownEnable()"/> 
        /// </summary>
        public static bool ControlledShutdownEnable
        {
            get { return SExecute<bool>(LocalBridgeClazz, "ControlledShutdownEnable"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#ControlledShutdownMaxRetries()"/> 
        /// </summary>
        public static int ControlledShutdownMaxRetries
        {
            get { return SExecute<int>(LocalBridgeClazz, "ControlledShutdownMaxRetries"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#ControlledShutdownRetryBackoffMs()"/> 
        /// </summary>
        public static int ControlledShutdownRetryBackoffMs
        {
            get { return SExecute<int>(LocalBridgeClazz, "ControlledShutdownRetryBackoffMs"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#ControllerMessageQueueSize()"/> 
        /// </summary>
        public static int ControllerMessageQueueSize
        {
            get { return SExecute<int>(LocalBridgeClazz, "ControllerMessageQueueSize"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#ControllerQuotaWindowSizeSeconds()"/> 
        /// </summary>
        public static int ControllerQuotaWindowSizeSeconds
        {
            get { return SExecute<int>(LocalBridgeClazz, "ControllerQuotaWindowSizeSeconds"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#ControllerSocketTimeoutMs()"/> 
        /// </summary>
        public static int ControllerSocketTimeoutMs
        {
            get { return SExecute<int>(LocalBridgeClazz, "ControllerSocketTimeoutMs"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#DefaultPrincipalBuilder()"/> 
        /// </summary>
        public static Java.Lang.Class DefaultPrincipalBuilder
        {
            get { return SExecute<Java.Lang.Class>(LocalBridgeClazz, "DefaultPrincipalBuilder"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#DefaultReplicationFactor()"/> 
        /// </summary>
        public static int DefaultReplicationFactor
        {
            get { return SExecute<int>(LocalBridgeClazz, "DefaultReplicationFactor"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#DefaultServerMaxMaxReceiveSize()"/> 
        /// </summary>
        public static int DefaultServerMaxMaxReceiveSize
        {
            get { return SExecute<int>(LocalBridgeClazz, "DefaultServerMaxMaxReceiveSize"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#DelegationTokenExpiryCheckIntervalMsDefault()"/> 
        /// </summary>
        public static long DelegationTokenExpiryCheckIntervalMsDefault
        {
            get { return SExecute<long>(LocalBridgeClazz, "DelegationTokenExpiryCheckIntervalMsDefault"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#DelegationTokenExpiryTimeMsDefault()"/> 
        /// </summary>
        public static long DelegationTokenExpiryTimeMsDefault
        {
            get { return SExecute<long>(LocalBridgeClazz, "DelegationTokenExpiryTimeMsDefault"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#DelegationTokenMaxLifeTimeMsDefault()"/> 
        /// </summary>
        public static long DelegationTokenMaxLifeTimeMsDefault
        {
            get { return SExecute<long>(LocalBridgeClazz, "DelegationTokenMaxLifeTimeMsDefault"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#Delete()"/> 
        /// </summary>
        public static string Delete
        {
            get { return SExecute<string>(LocalBridgeClazz, "Delete"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#DeleteRecordsPurgatoryPurgeIntervalRequests()"/> 
        /// </summary>
        public static int DeleteRecordsPurgatoryPurgeIntervalRequests
        {
            get { return SExecute<int>(LocalBridgeClazz, "DeleteRecordsPurgatoryPurgeIntervalRequests"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#DeleteTopicEnable()"/> 
        /// </summary>
        public static bool DeleteTopicEnable
        {
            get { return SExecute<bool>(LocalBridgeClazz, "DeleteTopicEnable"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#EmptyNodeId()"/> 
        /// </summary>
        public static int EmptyNodeId
        {
            get { return SExecute<int>(LocalBridgeClazz, "EmptyNodeId"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#FailedAuthenticationDelayMs()"/> 
        /// </summary>
        public static int FailedAuthenticationDelayMs
        {
            get { return SExecute<int>(LocalBridgeClazz, "FailedAuthenticationDelayMs"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#FetchMaxBytes()"/> 
        /// </summary>
        public static int FetchMaxBytes
        {
            get { return SExecute<int>(LocalBridgeClazz, "FetchMaxBytes"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#FetchPurgatoryPurgeIntervalRequests()"/> 
        /// </summary>
        public static int FetchPurgatoryPurgeIntervalRequests
        {
            get { return SExecute<int>(LocalBridgeClazz, "FetchPurgatoryPurgeIntervalRequests"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#GroupInitialRebalanceDelayMs()"/> 
        /// </summary>
        public static int GroupInitialRebalanceDelayMs
        {
            get { return SExecute<int>(LocalBridgeClazz, "GroupInitialRebalanceDelayMs"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#GroupMaxSessionTimeoutMs()"/> 
        /// </summary>
        public static int GroupMaxSessionTimeoutMs
        {
            get { return SExecute<int>(LocalBridgeClazz, "GroupMaxSessionTimeoutMs"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#GroupMaxSize()"/> 
        /// </summary>
        public static int GroupMaxSize
        {
            get { return SExecute<int>(LocalBridgeClazz, "GroupMaxSize"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#GroupMinSessionTimeoutMs()"/> 
        /// </summary>
        public static int GroupMinSessionTimeoutMs
        {
            get { return SExecute<int>(LocalBridgeClazz, "GroupMinSessionTimeoutMs"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#InitialBrokerRegistrationTimeoutMs()"/> 
        /// </summary>
        public static int InitialBrokerRegistrationTimeoutMs
        {
            get { return SExecute<int>(LocalBridgeClazz, "InitialBrokerRegistrationTimeoutMs"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#InterBrokerProtocolVersion()"/> 
        /// </summary>
        public static string InterBrokerProtocolVersion
        {
            get { return SExecute<string>(LocalBridgeClazz, "InterBrokerProtocolVersion"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#InterBrokerSecurityProtocol()"/> 
        /// </summary>
        public static string InterBrokerSecurityProtocol
        {
            get { return SExecute<string>(LocalBridgeClazz, "InterBrokerSecurityProtocol"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#KafkaMetricReporterClasses()"/> 
        /// </summary>
        public static string KafkaMetricReporterClasses
        {
            get { return SExecute<string>(LocalBridgeClazz, "KafkaMetricReporterClasses"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#KafkaMetricsPollingIntervalSeconds()"/> 
        /// </summary>
        public static int KafkaMetricsPollingIntervalSeconds
        {
            get { return SExecute<int>(LocalBridgeClazz, "KafkaMetricsPollingIntervalSeconds"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#LeaderImbalanceCheckIntervalSeconds()"/> 
        /// </summary>
        public static int LeaderImbalanceCheckIntervalSeconds
        {
            get { return SExecute<int>(LocalBridgeClazz, "LeaderImbalanceCheckIntervalSeconds"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#LeaderImbalancePerBrokerPercentage()"/> 
        /// </summary>
        public static int LeaderImbalancePerBrokerPercentage
        {
            get { return SExecute<int>(LocalBridgeClazz, "LeaderImbalancePerBrokerPercentage"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#Listeners()"/> 
        /// </summary>
        public static string Listeners
        {
            get { return SExecute<string>(LocalBridgeClazz, "Listeners"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#ListenerSecurityProtocolMap()"/> 
        /// </summary>
        public static string ListenerSecurityProtocolMap
        {
            get { return SExecute<string>(LocalBridgeClazz, "ListenerSecurityProtocolMap"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#LogCleanerBackoffMs()"/> 
        /// </summary>
        public static int LogCleanerBackoffMs
        {
            get { return SExecute<int>(LocalBridgeClazz, "LogCleanerBackoffMs"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#LogCleanerDedupeBufferLoadFactor()"/> 
        /// </summary>
        public static double LogCleanerDedupeBufferLoadFactor
        {
            get { return SExecute<double>(LocalBridgeClazz, "LogCleanerDedupeBufferLoadFactor"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#LogCleanerDedupeBufferSize()"/> 
        /// </summary>
        public static long LogCleanerDedupeBufferSize
        {
            get { return SExecute<long>(LocalBridgeClazz, "LogCleanerDedupeBufferSize"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#LogCleanerDeleteRetentionMs()"/> 
        /// </summary>
        public static long LogCleanerDeleteRetentionMs
        {
            get { return SExecute<long>(LocalBridgeClazz, "LogCleanerDeleteRetentionMs"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#LogCleanerEnable()"/> 
        /// </summary>
        public static bool LogCleanerEnable
        {
            get { return SExecute<bool>(LocalBridgeClazz, "LogCleanerEnable"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#LogCleanerIoBufferSize()"/> 
        /// </summary>
        public static int LogCleanerIoBufferSize
        {
            get { return SExecute<int>(LocalBridgeClazz, "LogCleanerIoBufferSize"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#LogCleanerIoMaxBytesPerSecond()"/> 
        /// </summary>
        public static double LogCleanerIoMaxBytesPerSecond
        {
            get { return SExecute<double>(LocalBridgeClazz, "LogCleanerIoMaxBytesPerSecond"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#LogCleanerMaxCompactionLagMs()"/> 
        /// </summary>
        public static long LogCleanerMaxCompactionLagMs
        {
            get { return SExecute<long>(LocalBridgeClazz, "LogCleanerMaxCompactionLagMs"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#LogCleanerMinCleanRatio()"/> 
        /// </summary>
        public static double LogCleanerMinCleanRatio
        {
            get { return SExecute<double>(LocalBridgeClazz, "LogCleanerMinCleanRatio"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#LogCleanerMinCompactionLagMs()"/> 
        /// </summary>
        public static long LogCleanerMinCompactionLagMs
        {
            get { return SExecute<long>(LocalBridgeClazz, "LogCleanerMinCompactionLagMs"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#LogCleanerThreads()"/> 
        /// </summary>
        public static int LogCleanerThreads
        {
            get { return SExecute<int>(LocalBridgeClazz, "LogCleanerThreads"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#LogCleanupIntervalMs()"/> 
        /// </summary>
        public static long LogCleanupIntervalMs
        {
            get { return SExecute<long>(LocalBridgeClazz, "LogCleanupIntervalMs"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#LogCleanupPolicy()"/> 
        /// </summary>
        public static string LogCleanupPolicy
        {
            get { return SExecute<string>(LocalBridgeClazz, "LogCleanupPolicy"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#LogDeleteDelayMs()"/> 
        /// </summary>
        public static int LogDeleteDelayMs
        {
            get { return SExecute<int>(LocalBridgeClazz, "LogDeleteDelayMs"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#LogDir()"/> 
        /// </summary>
        public static string LogDir
        {
            get { return SExecute<string>(LocalBridgeClazz, "LogDir"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#LogFlushIntervalMessages()"/> 
        /// </summary>
        public static long LogFlushIntervalMessages
        {
            get { return SExecute<long>(LocalBridgeClazz, "LogFlushIntervalMessages"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#LogFlushOffsetCheckpointIntervalMs()"/> 
        /// </summary>
        public static int LogFlushOffsetCheckpointIntervalMs
        {
            get { return SExecute<int>(LocalBridgeClazz, "LogFlushOffsetCheckpointIntervalMs"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#LogFlushSchedulerIntervalMs()"/> 
        /// </summary>
        public static long LogFlushSchedulerIntervalMs
        {
            get { return SExecute<long>(LocalBridgeClazz, "LogFlushSchedulerIntervalMs"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#LogFlushStartOffsetCheckpointIntervalMs()"/> 
        /// </summary>
        public static int LogFlushStartOffsetCheckpointIntervalMs
        {
            get { return SExecute<int>(LocalBridgeClazz, "LogFlushStartOffsetCheckpointIntervalMs"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#LogIndexIntervalBytes()"/> 
        /// </summary>
        public static int LogIndexIntervalBytes
        {
            get { return SExecute<int>(LocalBridgeClazz, "LogIndexIntervalBytes"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#LogIndexSizeMaxBytes()"/> 
        /// </summary>
        public static int LogIndexSizeMaxBytes
        {
            get { return SExecute<int>(LocalBridgeClazz, "LogIndexSizeMaxBytes"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#LogMessageFormatVersion()"/> 
        /// </summary>
        public static string LogMessageFormatVersion
        {
            get { return SExecute<string>(LocalBridgeClazz, "LogMessageFormatVersion"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#LogMessageTimestampDifferenceMaxMs()"/> 
        /// </summary>
        public static long LogMessageTimestampDifferenceMaxMs
        {
            get { return SExecute<long>(LocalBridgeClazz, "LogMessageTimestampDifferenceMaxMs"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#LogMessageTimestampType()"/> 
        /// </summary>
        public static string LogMessageTimestampType
        {
            get { return SExecute<string>(LocalBridgeClazz, "LogMessageTimestampType"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#LogPreAllocateEnable()"/> 
        /// </summary>
        public static bool LogPreAllocateEnable
        {
            get { return SExecute<bool>(LocalBridgeClazz, "LogPreAllocateEnable"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#LogRetentionBytes()"/> 
        /// </summary>
        public static long LogRetentionBytes
        {
            get { return SExecute<long>(LocalBridgeClazz, "LogRetentionBytes"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#LogRetentionHours()"/> 
        /// </summary>
        public static int LogRetentionHours
        {
            get { return SExecute<int>(LocalBridgeClazz, "LogRetentionHours"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#LogRollHours()"/> 
        /// </summary>
        public static int LogRollHours
        {
            get { return SExecute<int>(LocalBridgeClazz, "LogRollHours"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#LogRollJitterHours()"/> 
        /// </summary>
        public static int LogRollJitterHours
        {
            get { return SExecute<int>(LocalBridgeClazz, "LogRollJitterHours"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#LogSegmentBytes()"/> 
        /// </summary>
        public static int LogSegmentBytes
        {
            get { return SExecute<int>(LocalBridgeClazz, "LogSegmentBytes"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#MaxConnectionCreationRate()"/> 
        /// </summary>
        public static int MaxConnectionCreationRate
        {
            get { return SExecute<int>(LocalBridgeClazz, "MaxConnectionCreationRate"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#MaxConnections()"/> 
        /// </summary>
        public static int MaxConnections
        {
            get { return SExecute<int>(LocalBridgeClazz, "MaxConnections"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#MaxConnectionsPerIp()"/> 
        /// </summary>
        public static int MaxConnectionsPerIp
        {
            get { return SExecute<int>(LocalBridgeClazz, "MaxConnectionsPerIp"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#MaxConnectionsPerIpOverrides()"/> 
        /// </summary>
        public static string MaxConnectionsPerIpOverrides
        {
            get { return SExecute<string>(LocalBridgeClazz, "MaxConnectionsPerIpOverrides"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#MaxIdMapSnapshots()"/> 
        /// </summary>
        public static int MaxIdMapSnapshots
        {
            get { return SExecute<int>(LocalBridgeClazz, "MaxIdMapSnapshots"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#MaxIncrementalFetchSessionCacheSlots()"/> 
        /// </summary>
        public static int MaxIncrementalFetchSessionCacheSlots
        {
            get { return SExecute<int>(LocalBridgeClazz, "MaxIncrementalFetchSessionCacheSlots"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#MaxReservedBrokerId()"/> 
        /// </summary>
        public static int MaxReservedBrokerId
        {
            get { return SExecute<int>(LocalBridgeClazz, "MaxReservedBrokerId"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#MessageDownConversionEnable()"/> 
        /// </summary>
        public static bool MessageDownConversionEnable
        {
            get { return SExecute<bool>(LocalBridgeClazz, "MessageDownConversionEnable"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#MessageMaxBytes()"/> 
        /// </summary>
        public static int MessageMaxBytes
        {
            get { return SExecute<int>(LocalBridgeClazz, "MessageMaxBytes"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#MetadataMaxIdleIntervalMs()"/> 
        /// </summary>
        public static int MetadataMaxIdleIntervalMs
        {
            get { return SExecute<int>(LocalBridgeClazz, "MetadataMaxIdleIntervalMs"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#MetadataMaxRetentionBytes()"/> 
        /// </summary>
        public static int MetadataMaxRetentionBytes
        {
            get { return SExecute<int>(LocalBridgeClazz, "MetadataMaxRetentionBytes"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#MetadataSnapshotMaxIntervalMs()"/> 
        /// </summary>
        public static long MetadataSnapshotMaxIntervalMs
        {
            get { return SExecute<long>(LocalBridgeClazz, "MetadataSnapshotMaxIntervalMs"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#MetadataSnapshotMaxNewRecordBytes()"/> 
        /// </summary>
        public static int MetadataSnapshotMaxNewRecordBytes
        {
            get { return SExecute<int>(LocalBridgeClazz, "MetadataSnapshotMaxNewRecordBytes"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#MetricNumSamples()"/> 
        /// </summary>
        public static int MetricNumSamples
        {
            get { return SExecute<int>(LocalBridgeClazz, "MetricNumSamples"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#MetricRecordingLevel()"/> 
        /// </summary>
        public static string MetricRecordingLevel
        {
            get { return SExecute<string>(LocalBridgeClazz, "MetricRecordingLevel"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#MetricReporterClasses()"/> 
        /// </summary>
        public static string MetricReporterClasses
        {
            get { return SExecute<string>(LocalBridgeClazz, "MetricReporterClasses"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#MetricSampleWindowMs()"/> 
        /// </summary>
        public static int MetricSampleWindowMs
        {
            get { return SExecute<int>(LocalBridgeClazz, "MetricSampleWindowMs"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#MinInSyncReplicas()"/> 
        /// </summary>
        public static int MinInSyncReplicas
        {
            get { return SExecute<int>(LocalBridgeClazz, "MinInSyncReplicas"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#NumAlterLogDirsReplicationQuotaSamples()"/> 
        /// </summary>
        public static int NumAlterLogDirsReplicationQuotaSamples
        {
            get { return SExecute<int>(LocalBridgeClazz, "NumAlterLogDirsReplicationQuotaSamples"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#NumControllerQuotaSamples()"/> 
        /// </summary>
        public static int NumControllerQuotaSamples
        {
            get { return SExecute<int>(LocalBridgeClazz, "NumControllerQuotaSamples"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#NumIoThreads()"/> 
        /// </summary>
        public static int NumIoThreads
        {
            get { return SExecute<int>(LocalBridgeClazz, "NumIoThreads"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#NumNetworkThreads()"/> 
        /// </summary>
        public static int NumNetworkThreads
        {
            get { return SExecute<int>(LocalBridgeClazz, "NumNetworkThreads"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#NumPartitions()"/> 
        /// </summary>
        public static int NumPartitions
        {
            get { return SExecute<int>(LocalBridgeClazz, "NumPartitions"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#NumQuotaSamples()"/> 
        /// </summary>
        public static int NumQuotaSamples
        {
            get { return SExecute<int>(LocalBridgeClazz, "NumQuotaSamples"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#NumRecoveryThreadsPerDataDir()"/> 
        /// </summary>
        public static int NumRecoveryThreadsPerDataDir
        {
            get { return SExecute<int>(LocalBridgeClazz, "NumRecoveryThreadsPerDataDir"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#NumReplicaFetchers()"/> 
        /// </summary>
        public static int NumReplicaFetchers
        {
            get { return SExecute<int>(LocalBridgeClazz, "NumReplicaFetchers"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#NumReplicationQuotaSamples()"/> 
        /// </summary>
        public static int NumReplicationQuotaSamples
        {
            get { return SExecute<int>(LocalBridgeClazz, "NumReplicationQuotaSamples"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#OffsetCommitRequiredAcks()"/> 
        /// </summary>
        public static short OffsetCommitRequiredAcks
        {
            get { return SExecute<short>(LocalBridgeClazz, "OffsetCommitRequiredAcks"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#OffsetCommitTimeoutMs()"/> 
        /// </summary>
        public static int OffsetCommitTimeoutMs
        {
            get { return SExecute<int>(LocalBridgeClazz, "OffsetCommitTimeoutMs"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#OffsetMetadataMaxSize()"/> 
        /// </summary>
        public static int OffsetMetadataMaxSize
        {
            get { return SExecute<int>(LocalBridgeClazz, "OffsetMetadataMaxSize"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#OffsetsLoadBufferSize()"/> 
        /// </summary>
        public static int OffsetsLoadBufferSize
        {
            get { return SExecute<int>(LocalBridgeClazz, "OffsetsLoadBufferSize"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#OffsetsRetentionCheckIntervalMs()"/> 
        /// </summary>
        public static long OffsetsRetentionCheckIntervalMs
        {
            get { return SExecute<long>(LocalBridgeClazz, "OffsetsRetentionCheckIntervalMs"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#OffsetsRetentionMinutes()"/> 
        /// </summary>
        public static int OffsetsRetentionMinutes
        {
            get { return SExecute<int>(LocalBridgeClazz, "OffsetsRetentionMinutes"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#OffsetsTopicCompressionCodec()"/> 
        /// </summary>
        public static int OffsetsTopicCompressionCodec
        {
            get { return SExecute<int>(LocalBridgeClazz, "OffsetsTopicCompressionCodec"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#OffsetsTopicPartitions()"/> 
        /// </summary>
        public static int OffsetsTopicPartitions
        {
            get { return SExecute<int>(LocalBridgeClazz, "OffsetsTopicPartitions"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#OffsetsTopicReplicationFactor()"/> 
        /// </summary>
        public static short OffsetsTopicReplicationFactor
        {
            get { return SExecute<short>(LocalBridgeClazz, "OffsetsTopicReplicationFactor"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#OffsetsTopicSegmentBytes()"/> 
        /// </summary>
        public static int OffsetsTopicSegmentBytes
        {
            get { return SExecute<int>(LocalBridgeClazz, "OffsetsTopicSegmentBytes"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#PasswordEncoderCipherAlgorithm()"/> 
        /// </summary>
        public static string PasswordEncoderCipherAlgorithm
        {
            get { return SExecute<string>(LocalBridgeClazz, "PasswordEncoderCipherAlgorithm"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#PasswordEncoderIterations()"/> 
        /// </summary>
        public static int PasswordEncoderIterations
        {
            get { return SExecute<int>(LocalBridgeClazz, "PasswordEncoderIterations"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#PasswordEncoderKeyLength()"/> 
        /// </summary>
        public static int PasswordEncoderKeyLength
        {
            get { return SExecute<int>(LocalBridgeClazz, "PasswordEncoderKeyLength"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#ProducerIdExpirationCheckIntervalMs()"/> 
        /// </summary>
        public static int ProducerIdExpirationCheckIntervalMs
        {
            get { return SExecute<int>(LocalBridgeClazz, "ProducerIdExpirationCheckIntervalMs"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#ProducerIdExpirationMs()"/> 
        /// </summary>
        public static int ProducerIdExpirationMs
        {
            get { return SExecute<int>(LocalBridgeClazz, "ProducerIdExpirationMs"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#ProducerPurgatoryPurgeIntervalRequests()"/> 
        /// </summary>
        public static int ProducerPurgatoryPurgeIntervalRequests
        {
            get { return SExecute<int>(LocalBridgeClazz, "ProducerPurgatoryPurgeIntervalRequests"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#QueuedMaxRequestBytes()"/> 
        /// </summary>
        public static int QueuedMaxRequestBytes
        {
            get { return SExecute<int>(LocalBridgeClazz, "QueuedMaxRequestBytes"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#QueuedMaxRequests()"/> 
        /// </summary>
        public static int QueuedMaxRequests
        {
            get { return SExecute<int>(LocalBridgeClazz, "QueuedMaxRequests"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#QuorumElectionBackoffMs()"/> 
        /// </summary>
        public static int QuorumElectionBackoffMs
        {
            get { return SExecute<int>(LocalBridgeClazz, "QuorumElectionBackoffMs"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#QuorumElectionTimeoutMs()"/> 
        /// </summary>
        public static int QuorumElectionTimeoutMs
        {
            get { return SExecute<int>(LocalBridgeClazz, "QuorumElectionTimeoutMs"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#QuorumFetchTimeoutMs()"/> 
        /// </summary>
        public static int QuorumFetchTimeoutMs
        {
            get { return SExecute<int>(LocalBridgeClazz, "QuorumFetchTimeoutMs"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#QuorumLingerMs()"/> 
        /// </summary>
        public static int QuorumLingerMs
        {
            get { return SExecute<int>(LocalBridgeClazz, "QuorumLingerMs"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#QuorumRequestTimeoutMs()"/> 
        /// </summary>
        public static int QuorumRequestTimeoutMs
        {
            get { return SExecute<int>(LocalBridgeClazz, "QuorumRequestTimeoutMs"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#QuorumRetryBackoffMs()"/> 
        /// </summary>
        public static int QuorumRetryBackoffMs
        {
            get { return SExecute<int>(LocalBridgeClazz, "QuorumRetryBackoffMs"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#QuorumVoters()"/> 
        /// </summary>
        public static Java.Util.List<string> QuorumVoters
        {
            get { return SExecute<Java.Util.List<string>>(LocalBridgeClazz, "QuorumVoters"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#QuotaWindowSizeSeconds()"/> 
        /// </summary>
        public static int QuotaWindowSizeSeconds
        {
            get { return SExecute<int>(LocalBridgeClazz, "QuotaWindowSizeSeconds"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#ReplicaFetchBackoffMs()"/> 
        /// </summary>
        public static int ReplicaFetchBackoffMs
        {
            get { return SExecute<int>(LocalBridgeClazz, "ReplicaFetchBackoffMs"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#ReplicaFetchMaxBytes()"/> 
        /// </summary>
        public static int ReplicaFetchMaxBytes
        {
            get { return SExecute<int>(LocalBridgeClazz, "ReplicaFetchMaxBytes"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#ReplicaFetchMinBytes()"/> 
        /// </summary>
        public static int ReplicaFetchMinBytes
        {
            get { return SExecute<int>(LocalBridgeClazz, "ReplicaFetchMinBytes"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#ReplicaFetchResponseMaxBytes()"/> 
        /// </summary>
        public static int ReplicaFetchResponseMaxBytes
        {
            get { return SExecute<int>(LocalBridgeClazz, "ReplicaFetchResponseMaxBytes"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#ReplicaFetchWaitMaxMs()"/> 
        /// </summary>
        public static int ReplicaFetchWaitMaxMs
        {
            get { return SExecute<int>(LocalBridgeClazz, "ReplicaFetchWaitMaxMs"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#ReplicaHighWatermarkCheckpointIntervalMs()"/> 
        /// </summary>
        public static long ReplicaHighWatermarkCheckpointIntervalMs
        {
            get { return SExecute<long>(LocalBridgeClazz, "ReplicaHighWatermarkCheckpointIntervalMs"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#ReplicaLagTimeMaxMs()"/> 
        /// </summary>
        public static long ReplicaLagTimeMaxMs
        {
            get { return SExecute<long>(LocalBridgeClazz, "ReplicaLagTimeMaxMs"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#ReplicaSocketReceiveBufferBytes()"/> 
        /// </summary>
        public static int ReplicaSocketReceiveBufferBytes
        {
            get { return SExecute<int>(LocalBridgeClazz, "ReplicaSocketReceiveBufferBytes"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#ReplicaSocketTimeoutMs()"/> 
        /// </summary>
        public static int ReplicaSocketTimeoutMs
        {
            get { return SExecute<int>(LocalBridgeClazz, "ReplicaSocketTimeoutMs"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#ReplicationQuotaWindowSizeSeconds()"/> 
        /// </summary>
        public static int ReplicationQuotaWindowSizeSeconds
        {
            get { return SExecute<int>(LocalBridgeClazz, "ReplicationQuotaWindowSizeSeconds"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#RequestTimeoutMs()"/> 
        /// </summary>
        public static int RequestTimeoutMs
        {
            get { return SExecute<int>(LocalBridgeClazz, "RequestTimeoutMs"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#SaslEnabledMechanisms()"/> 
        /// </summary>
        public static Java.Util.List<string> SaslEnabledMechanisms
        {
            get { return SExecute<Java.Util.List<string>>(LocalBridgeClazz, "SaslEnabledMechanisms"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#SaslKerberosKinitCmd()"/> 
        /// </summary>
        public static string SaslKerberosKinitCmd
        {
            get { return SExecute<string>(LocalBridgeClazz, "SaslKerberosKinitCmd"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#SaslKerberosMinTimeBeforeRelogin()"/> 
        /// </summary>
        public static long SaslKerberosMinTimeBeforeRelogin
        {
            get { return SExecute<long>(LocalBridgeClazz, "SaslKerberosMinTimeBeforeRelogin"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#SaslKerberosPrincipalToLocalRules()"/> 
        /// </summary>
        public static Java.Util.List<string> SaslKerberosPrincipalToLocalRules
        {
            get { return SExecute<Java.Util.List<string>>(LocalBridgeClazz, "SaslKerberosPrincipalToLocalRules"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#SaslKerberosTicketRenewJitter()"/> 
        /// </summary>
        public static double SaslKerberosTicketRenewJitter
        {
            get { return SExecute<double>(LocalBridgeClazz, "SaslKerberosTicketRenewJitter"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#SaslKerberosTicketRenewWindowFactor()"/> 
        /// </summary>
        public static double SaslKerberosTicketRenewWindowFactor
        {
            get { return SExecute<double>(LocalBridgeClazz, "SaslKerberosTicketRenewWindowFactor"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#SaslLoginRefreshBufferSeconds()"/> 
        /// </summary>
        public static short SaslLoginRefreshBufferSeconds
        {
            get { return SExecute<short>(LocalBridgeClazz, "SaslLoginRefreshBufferSeconds"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#SaslLoginRefreshMinPeriodSeconds()"/> 
        /// </summary>
        public static short SaslLoginRefreshMinPeriodSeconds
        {
            get { return SExecute<short>(LocalBridgeClazz, "SaslLoginRefreshMinPeriodSeconds"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#SaslLoginRefreshWindowFactor()"/> 
        /// </summary>
        public static double SaslLoginRefreshWindowFactor
        {
            get { return SExecute<double>(LocalBridgeClazz, "SaslLoginRefreshWindowFactor"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#SaslLoginRefreshWindowJitter()"/> 
        /// </summary>
        public static double SaslLoginRefreshWindowJitter
        {
            get { return SExecute<double>(LocalBridgeClazz, "SaslLoginRefreshWindowJitter"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#SaslLoginRetryBackoffMaxMs()"/> 
        /// </summary>
        public static long SaslLoginRetryBackoffMaxMs
        {
            get { return SExecute<long>(LocalBridgeClazz, "SaslLoginRetryBackoffMaxMs"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#SaslLoginRetryBackoffMs()"/> 
        /// </summary>
        public static long SaslLoginRetryBackoffMs
        {
            get { return SExecute<long>(LocalBridgeClazz, "SaslLoginRetryBackoffMs"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#SaslMechanismInterBrokerProtocol()"/> 
        /// </summary>
        public static string SaslMechanismInterBrokerProtocol
        {
            get { return SExecute<string>(LocalBridgeClazz, "SaslMechanismInterBrokerProtocol"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#SaslOAuthBearerClockSkewSeconds()"/> 
        /// </summary>
        public static int SaslOAuthBearerClockSkewSeconds
        {
            get { return SExecute<int>(LocalBridgeClazz, "SaslOAuthBearerClockSkewSeconds"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#SaslOAuthBearerJwksEndpointRefreshMs()"/> 
        /// </summary>
        public static long SaslOAuthBearerJwksEndpointRefreshMs
        {
            get { return SExecute<long>(LocalBridgeClazz, "SaslOAuthBearerJwksEndpointRefreshMs"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#SaslOAuthBearerJwksEndpointRetryBackoffMaxMs()"/> 
        /// </summary>
        public static long SaslOAuthBearerJwksEndpointRetryBackoffMaxMs
        {
            get { return SExecute<long>(LocalBridgeClazz, "SaslOAuthBearerJwksEndpointRetryBackoffMaxMs"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#SaslOAuthBearerJwksEndpointRetryBackoffMs()"/> 
        /// </summary>
        public static long SaslOAuthBearerJwksEndpointRetryBackoffMs
        {
            get { return SExecute<long>(LocalBridgeClazz, "SaslOAuthBearerJwksEndpointRetryBackoffMs"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#SaslOAuthBearerScopeClaimName()"/> 
        /// </summary>
        public static string SaslOAuthBearerScopeClaimName
        {
            get { return SExecute<string>(LocalBridgeClazz, "SaslOAuthBearerScopeClaimName"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#SaslOAuthBearerSubClaimName()"/> 
        /// </summary>
        public static string SaslOAuthBearerSubClaimName
        {
            get { return SExecute<string>(LocalBridgeClazz, "SaslOAuthBearerSubClaimName"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#SocketListenBacklogSize()"/> 
        /// </summary>
        public static int SocketListenBacklogSize
        {
            get { return SExecute<int>(LocalBridgeClazz, "SocketListenBacklogSize"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#SocketReceiveBufferBytes()"/> 
        /// </summary>
        public static int SocketReceiveBufferBytes
        {
            get { return SExecute<int>(LocalBridgeClazz, "SocketReceiveBufferBytes"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#SocketRequestMaxBytes()"/> 
        /// </summary>
        public static int SocketRequestMaxBytes
        {
            get { return SExecute<int>(LocalBridgeClazz, "SocketRequestMaxBytes"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#SocketSendBufferBytes()"/> 
        /// </summary>
        public static int SocketSendBufferBytes
        {
            get { return SExecute<int>(LocalBridgeClazz, "SocketSendBufferBytes"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#SslClientAuthentication()"/> 
        /// </summary>
        public static string SslClientAuthentication
        {
            get { return SExecute<string>(LocalBridgeClazz, "SslClientAuthentication"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#SslClientAuthenticationValidValues()"/> 
        /// </summary>
        public static string[] SslClientAuthenticationValidValues
        {
            get { return SExecuteArray<string>(LocalBridgeClazz, "SslClientAuthenticationValidValues"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#SslEnabledProtocols()"/> 
        /// </summary>
        public static string SslEnabledProtocols
        {
            get { return SExecute<string>(LocalBridgeClazz, "SslEnabledProtocols"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#SslEndpointIdentificationAlgorithm()"/> 
        /// </summary>
        public static string SslEndpointIdentificationAlgorithm
        {
            get { return SExecute<string>(LocalBridgeClazz, "SslEndpointIdentificationAlgorithm"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#SslKeyManagerAlgorithm()"/> 
        /// </summary>
        public static string SslKeyManagerAlgorithm
        {
            get { return SExecute<string>(LocalBridgeClazz, "SslKeyManagerAlgorithm"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#SslKeystoreType()"/> 
        /// </summary>
        public static string SslKeystoreType
        {
            get { return SExecute<string>(LocalBridgeClazz, "SslKeystoreType"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#SslPrincipalMappingRules()"/> 
        /// </summary>
        public static string SslPrincipalMappingRules
        {
            get { return SExecute<string>(LocalBridgeClazz, "SslPrincipalMappingRules"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#SslProtocol()"/> 
        /// </summary>
        public static string SslProtocol
        {
            get { return SExecute<string>(LocalBridgeClazz, "SslProtocol"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#SslTrustManagerAlgorithm()"/> 
        /// </summary>
        public static string SslTrustManagerAlgorithm
        {
            get { return SExecute<string>(LocalBridgeClazz, "SslTrustManagerAlgorithm"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#SslTruststoreType()"/> 
        /// </summary>
        public static string SslTruststoreType
        {
            get { return SExecute<string>(LocalBridgeClazz, "SslTruststoreType"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#TransactionalIdExpirationMs()"/> 
        /// </summary>
        public static int TransactionalIdExpirationMs
        {
            get { return SExecute<int>(LocalBridgeClazz, "TransactionalIdExpirationMs"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#TransactionalIdExpirationMsDefault()"/> 
        /// </summary>
        public static int TransactionalIdExpirationMsDefault
        {
            get { return SExecute<int>(LocalBridgeClazz, "TransactionalIdExpirationMsDefault"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#TransactionsAbortTimedOutTransactionsCleanupIntervalMS()"/> 
        /// </summary>
        public static int TransactionsAbortTimedOutTransactionsCleanupIntervalMS
        {
            get { return SExecute<int>(LocalBridgeClazz, "TransactionsAbortTimedOutTransactionsCleanupIntervalMS"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#TransactionsLoadBufferSize()"/> 
        /// </summary>
        public static int TransactionsLoadBufferSize
        {
            get { return SExecute<int>(LocalBridgeClazz, "TransactionsLoadBufferSize"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#TransactionsMaxTimeoutMs()"/> 
        /// </summary>
        public static int TransactionsMaxTimeoutMs
        {
            get { return SExecute<int>(LocalBridgeClazz, "TransactionsMaxTimeoutMs"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#TransactionsRemoveExpiredTransactionsCleanupIntervalMS()"/> 
        /// </summary>
        public static int TransactionsRemoveExpiredTransactionsCleanupIntervalMS
        {
            get { return SExecute<int>(LocalBridgeClazz, "TransactionsRemoveExpiredTransactionsCleanupIntervalMS"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#TransactionsTopicMinISR()"/> 
        /// </summary>
        public static int TransactionsTopicMinISR
        {
            get { return SExecute<int>(LocalBridgeClazz, "TransactionsTopicMinISR"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#TransactionsTopicPartitions()"/> 
        /// </summary>
        public static int TransactionsTopicPartitions
        {
            get { return SExecute<int>(LocalBridgeClazz, "TransactionsTopicPartitions"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#TransactionsTopicReplicationFactor()"/> 
        /// </summary>
        public static short TransactionsTopicReplicationFactor
        {
            get { return SExecute<short>(LocalBridgeClazz, "TransactionsTopicReplicationFactor"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#TransactionsTopicSegmentBytes()"/> 
        /// </summary>
        public static int TransactionsTopicSegmentBytes
        {
            get { return SExecute<int>(LocalBridgeClazz, "TransactionsTopicSegmentBytes"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#UncleanLeaderElectionEnable()"/> 
        /// </summary>
        public static bool UncleanLeaderElectionEnable
        {
            get { return SExecute<bool>(LocalBridgeClazz, "UncleanLeaderElectionEnable"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#ZkEnableSecureAcls()"/> 
        /// </summary>
        public static bool ZkEnableSecureAcls
        {
            get { return SExecute<bool>(LocalBridgeClazz, "ZkEnableSecureAcls"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#ZkMaxInFlightRequests()"/> 
        /// </summary>
        public static int ZkMaxInFlightRequests
        {
            get { return SExecute<int>(LocalBridgeClazz, "ZkMaxInFlightRequests"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#ZkSessionTimeoutMs()"/> 
        /// </summary>
        public static int ZkSessionTimeoutMs
        {
            get { return SExecute<int>(LocalBridgeClazz, "ZkSessionTimeoutMs"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#ZkSslClientEnable()"/> 
        /// </summary>
        public static bool ZkSslClientEnable
        {
            get { return SExecute<bool>(LocalBridgeClazz, "ZkSslClientEnable"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#ZkSslCrlEnable()"/> 
        /// </summary>
        public static bool ZkSslCrlEnable
        {
            get { return SExecute<bool>(LocalBridgeClazz, "ZkSslCrlEnable"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#ZkSslEndpointIdentificationAlgorithm()"/> 
        /// </summary>
        public static string ZkSslEndpointIdentificationAlgorithm
        {
            get { return SExecute<string>(LocalBridgeClazz, "ZkSslEndpointIdentificationAlgorithm"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#ZkSslOcspEnable()"/> 
        /// </summary>
        public static bool ZkSslOcspEnable
        {
            get { return SExecute<bool>(LocalBridgeClazz, "ZkSslOcspEnable"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/Defaults.html#ZkSslProtocol()"/> 
        /// </summary>
        public static string ZkSslProtocol
        {
            get { return SExecute<string>(LocalBridgeClazz, "ZkSslProtocol"); }
        }

        #endregion

        #region Instance methods

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}