/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka_2.13-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Kafka.Server
{
    #region CachedPartition
    public partial class CachedPartition
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/CachedPartition.html#%3Cinit%3E(java.lang.String,org.apache.kafka.common.Uuid,int,int,long,long,java.util.Optional,long,long,java.util.Optional)"/>
        /// </summary>
        /// <param name="topic"><see cref="string"/></param>
        /// <param name="topicId"><see cref="Org.Apache.Kafka.Common.Uuid"/></param>
        /// <param name="partition"><see cref="int"/></param>
        /// <param name="maxBytes"><see cref="int"/></param>
        /// <param name="fetchOffset"><see cref="long"/></param>
        /// <param name="highWatermark"><see cref="long"/></param>
        /// <param name="leaderEpoch"><see cref="Java.Util.Optional"/></param>
        /// <param name="fetcherLogStartOffset"><see cref="long"/></param>
        /// <param name="localLogStartOffset"><see cref="long"/></param>
        /// <param name="lastFetchedEpoch"><see cref="Java.Util.Optional"/></param>
        public CachedPartition(string topic, Org.Apache.Kafka.Common.Uuid topicId, int partition, int maxBytes, long fetchOffset, long highWatermark, Java.Util.Optional leaderEpoch, long fetcherLogStartOffset, long localLogStartOffset, Java.Util.Optional lastFetchedEpoch)
            : base(topic, topicId, partition, maxBytes, fetchOffset, highWatermark, leaderEpoch, fetcherLogStartOffset, localLogStartOffset, lastFetchedEpoch)
        {
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/CachedPartition.html#%3Cinit%3E(java.lang.String,org.apache.kafka.common.Uuid,int)"/>
        /// </summary>
        /// <param name="topic"><see cref="string"/></param>
        /// <param name="topicId"><see cref="Org.Apache.Kafka.Common.Uuid"/></param>
        /// <param name="partition"><see cref="int"/></param>
        public CachedPartition(string topic, Org.Apache.Kafka.Common.Uuid topicId, int partition)
            : base(topic, topicId, partition)
        {
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/CachedPartition.html#%3Cinit%3E(org.apache.kafka.common.TopicIdPartition,org.apache.kafka.common.requests.FetchRequest.PartitionData,org.apache.kafka.common.message.FetchResponseData.PartitionData)"/>
        /// </summary>
        /// <param name="part"><see cref="Org.Apache.Kafka.Common.TopicIdPartition"/></param>
        /// <param name="reqData"><see cref="Org.Apache.Kafka.Common.Requests.FetchRequest.PartitionData"/></param>
        /// <param name="respData"><see cref="Org.Apache.Kafka.Common.Message.FetchResponseData.PartitionData"/></param>
        public CachedPartition(Org.Apache.Kafka.Common.TopicIdPartition part, Org.Apache.Kafka.Common.Requests.FetchRequest.PartitionData reqData, Org.Apache.Kafka.Common.Message.FetchResponseData.PartitionData respData)
            : base(part, reqData, respData)
        {
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/CachedPartition.html#%3Cinit%3E(org.apache.kafka.common.TopicIdPartition,org.apache.kafka.common.requests.FetchRequest.PartitionData)"/>
        /// </summary>
        /// <param name="part"><see cref="Org.Apache.Kafka.Common.TopicIdPartition"/></param>
        /// <param name="reqData"><see cref="Org.Apache.Kafka.Common.Requests.FetchRequest.PartitionData"/></param>
        public CachedPartition(Org.Apache.Kafka.Common.TopicIdPartition part, Org.Apache.Kafka.Common.Requests.FetchRequest.PartitionData reqData)
            : base(part, reqData)
        {
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/CachedPartition.html#%3Cinit%3E(org.apache.kafka.common.TopicIdPartition)"/>
        /// </summary>
        /// <param name="part"><see cref="Org.Apache.Kafka.Common.TopicIdPartition"/></param>
        public CachedPartition(Org.Apache.Kafka.Common.TopicIdPartition part)
            : base(part)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/CachedPartition.html#cachedNext()"/> 
        /// </summary>
        public int CachedNext
        {
            get { return IExecute<int>("cachedNext"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/CachedPartition.html#cachedPrev()"/> 
        /// </summary>
        public int CachedPrev
        {
            get { return IExecute<int>("cachedPrev"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/CachedPartition.html#fetcherLogStartOffset()"/> 
        /// </summary>
        public long FetcherLogStartOffset
        {
            get { return IExecute<long>("fetcherLogStartOffset"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/CachedPartition.html#fetchOffset()"/> 
        /// </summary>
        public long FetchOffset
        {
            get { return IExecute<long>("fetchOffset"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/CachedPartition.html#highWatermark()"/> 
        /// </summary>
        public long HighWatermark
        {
            get { return IExecute<long>("highWatermark"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/CachedPartition.html#lastFetchedEpoch()"/> 
        /// </summary>
        public Java.Util.Optional<int?> LastFetchedEpoch
        {
            get { return IExecute<Java.Util.Optional<int?>>("lastFetchedEpoch"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/CachedPartition.html#leaderEpoch()"/> 
        /// </summary>
        public Java.Util.Optional<int?> LeaderEpoch
        {
            get { return IExecute<Java.Util.Optional<int?>>("leaderEpoch"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/CachedPartition.html#localLogStartOffset()"/> 
        /// </summary>
        public long LocalLogStartOffset
        {
            get { return IExecute<long>("localLogStartOffset"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/CachedPartition.html#maxBytes()"/> 
        /// </summary>
        public int MaxBytes
        {
            get { return IExecute<int>("maxBytes"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/CachedPartition.html#next()"/> 
        /// </summary>
        public int Next
        {
            get { return IExecute<int>("next"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/CachedPartition.html#partition()"/> 
        /// </summary>
        public int Partition
        {
            get { return IExecute<int>("partition"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/CachedPartition.html#prev()"/> 
        /// </summary>
        public int Prev
        {
            get { return IExecute<int>("prev"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/CachedPartition.html#reqData()"/> 
        /// </summary>
        public Org.Apache.Kafka.Common.Requests.FetchRequest.PartitionData ReqData
        {
            get { return IExecute<Org.Apache.Kafka.Common.Requests.FetchRequest.PartitionData>("reqData"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/CachedPartition.html#topic()"/> 
        /// </summary>
        public string Topic
        {
            get { return IExecute<string>("topic"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/CachedPartition.html#topicId()"/> 
        /// </summary>
        public Org.Apache.Kafka.Common.Uuid TopicId
        {
            get { return IExecute<Org.Apache.Kafka.Common.Uuid>("topicId"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/CachedPartition.html#elementKeysAreEqual(java.lang.Object)"/>
        /// </summary>
        /// <param name="x$1"><see cref="object"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool ElementKeysAreEqual(object x_1)
        {
            return IExecute<bool>("elementKeysAreEqual", x_1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/CachedPartition.html#maybeUpdateResponseData(org.apache.kafka.common.message.FetchResponseData.PartitionData,boolean)"/>
        /// </summary>
        /// <param name="respData"><see cref="Org.Apache.Kafka.Common.Message.FetchResponseData.PartitionData"/></param>
        /// <param name="updateResponseData"><see cref="bool"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool MaybeUpdateResponseData(Org.Apache.Kafka.Common.Message.FetchResponseData.PartitionData respData, bool updateResponseData)
        {
            return IExecute<bool>("maybeUpdateResponseData", respData, updateResponseData);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/CachedPartition.html#maybeResolveUnknownName(java.util.Map)"/>
        /// </summary>
        /// <param name="topicNames"><see cref="Java.Util.Map"/></param>
        public void MaybeResolveUnknownName(Java.Util.Map<Org.Apache.Kafka.Common.Uuid, string> topicNames)
        {
            IExecute("maybeResolveUnknownName", topicNames);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/CachedPartition.html#setNext(int)"/>
        /// </summary>
        /// <param name="next"><see cref="int"/></param>
        public void SetNext(int next)
        {
            IExecute("setNext", next);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/CachedPartition.html#setPrev(int)"/>
        /// </summary>
        /// <param name="prev"><see cref="int"/></param>
        public void SetPrev(int prev)
        {
            IExecute("setPrev", prev);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/CachedPartition.html#updateRequestParams(org.apache.kafka.common.requests.FetchRequest.PartitionData)"/>
        /// </summary>
        /// <param name="reqData"><see cref="Org.Apache.Kafka.Common.Requests.FetchRequest.PartitionData"/></param>
        public void UpdateRequestParams(Org.Apache.Kafka.Common.Requests.FetchRequest.PartitionData reqData)
        {
            IExecute("updateRequestParams", reqData);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}