/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka_2.13-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Kafka.Server
{
    #region KafkaRequestHandler
    public partial class KafkaRequestHandler
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/KafkaRequestHandler.html#%3Cinit%3E(int,int,com.yammer.metrics.core.Meter,java.util.concurrent.atomic.AtomicInteger,kafka.network.RequestChannel,kafka.server.ApiRequestHandler,org.apache.kafka.common.utils.Time)"/>
        /// </summary>
        /// <param name="id"><see cref="int"/></param>
        /// <param name="brokerId"><see cref="int"/></param>
        /// <param name="aggregateIdleMeter"><see cref="Com.Yammer.Metrics.Core.Meter"/></param>
        /// <param name="totalHandlerThreads"><see cref="Java.Util.Concurrent.Atomic.AtomicInteger"/></param>
        /// <param name="requestChannel"><see cref="Kafka.Network.RequestChannel"/></param>
        /// <param name="apis"><see cref="Kafka.Server.ApiRequestHandler"/></param>
        /// <param name="time"><see cref="Org.Apache.Kafka.Common.Utils.Time"/></param>
        public KafkaRequestHandler(int id, int brokerId, Com.Yammer.Metrics.Core.Meter aggregateIdleMeter, Java.Util.Concurrent.Atomic.AtomicInteger totalHandlerThreads, Kafka.Network.RequestChannel requestChannel, Kafka.Server.ApiRequestHandler apis, Org.Apache.Kafka.Common.Utils.Time time)
            : base(id, brokerId, aggregateIdleMeter, totalHandlerThreads, requestChannel, apis, time)
        {
        }

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Kafka.Server.KafkaRequestHandler"/> to <see cref="Java.Lang.Runnable"/>
        /// </summary>
        public static implicit operator Java.Lang.Runnable(Kafka.Server.KafkaRequestHandler t) => t.Cast<Java.Lang.Runnable>();
        /// <summary>
        /// Converter from <see cref="Kafka.Server.KafkaRequestHandler"/> to <see cref="Kafka.Utils.Logging"/>
        /// </summary>
        public static implicit operator Kafka.Utils.Logging(Kafka.Server.KafkaRequestHandler t) => t.Cast<Kafka.Utils.Logging>();

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/KafkaRequestHandler.html#aggregateIdleMeter()"/> 
        /// </summary>
        public Com.Yammer.Metrics.Core.Meter AggregateIdleMeter
        {
            get { return IExecute<Com.Yammer.Metrics.Core.Meter>("aggregateIdleMeter"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/KafkaRequestHandler.html#isDebugEnabled()"/> 
        /// </summary>
        public bool IsDebugEnabled
        {
            get { return IExecute<bool>("isDebugEnabled"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/KafkaRequestHandler.html#isTraceEnabled()"/> 
        /// </summary>
        public bool IsTraceEnabled
        {
            get { return IExecute<bool>("isTraceEnabled"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/KafkaRequestHandler.html#logger()"/> 
        /// </summary>
        public Com.Typesafe.Scalalogging.Logger Logger
        {
            get { return IExecute<Com.Typesafe.Scalalogging.Logger>("logger"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/KafkaRequestHandler.html#loggerName()"/> 
        /// </summary>
        public string LoggerName
        {
            get { return IExecute<string>("loggerName"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/KafkaRequestHandler.html#logIdent()"/> 
        /// </summary>
        public string LogIdent
        {
            get { return IExecute<string>("logIdent"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/KafkaRequestHandler.html#requestChannel()"/> 
        /// </summary>
        public Kafka.Network.RequestChannel RequestChannel
        {
            get { return IExecute<Kafka.Network.RequestChannel>("requestChannel"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/KafkaRequestHandler.html#totalHandlerThreads()"/> 
        /// </summary>
        public Java.Util.Concurrent.Atomic.AtomicInteger TotalHandlerThreads
        {
            get { return IExecute<Java.Util.Concurrent.Atomic.AtomicInteger>("totalHandlerThreads"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/KafkaRequestHandler.html#msgWithLogIdent(java.lang.String)"/>
        /// </summary>
        /// <param name="msg"><see cref="string"/></param>
        /// <returns><see cref="string"/></returns>
        public string MsgWithLogIdent(string msg)
        {
            return IExecute<string>("msgWithLogIdent", msg);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/KafkaRequestHandler.html#awaitShutdown()"/>
        /// </summary>
        public void AwaitShutdown()
        {
            IExecute("awaitShutdown");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/KafkaRequestHandler.html#initiateShutdown()"/>
        /// </summary>
        public void InitiateShutdown()
        {
            IExecute("initiateShutdown");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/KafkaRequestHandler.html#run()"/>
        /// </summary>
        public void Run()
        {
            IExecute("run");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/KafkaRequestHandler.html#stop()"/>
        /// </summary>
        public void Stop()
        {
            IExecute("stop");
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}