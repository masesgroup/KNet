/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka_2.13-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Kafka.Server
{
    #region MetadataCache
    public partial class MetadataCache
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/MetadataCache.html#kRaftMetadataCache(int)"/>
        /// </summary>
        /// <param name="brokerId"><see cref="int"/></param>
        /// <returns><see cref="Kafka.Server.Metadata.KRaftMetadataCache"/></returns>
        public static Kafka.Server.Metadata.KRaftMetadataCache KRaftMetadataCache(int brokerId)
        {
            return SExecute<Kafka.Server.Metadata.KRaftMetadataCache>(LocalBridgeClazz, "kRaftMetadataCache", brokerId);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/MetadataCache.html#features()"/> 
        /// </summary>
        public Kafka.Server.FinalizedFeaturesAndEpoch Features
        {
            get { return IExecute<Kafka.Server.FinalizedFeaturesAndEpoch>("features"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/MetadataCache.html#metadataVersion()"/> 
        /// </summary>
        public Org.Apache.Kafka.Server.Common.MetadataVersion MetadataVersion
        {
            get { return IExecute<Org.Apache.Kafka.Server.Common.MetadataVersion>("metadataVersion"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/MetadataCache.html#topicIdsToNames()"/> 
        /// </summary>
        public Java.Util.Map<Org.Apache.Kafka.Common.Uuid, string> TopicIdsToNames
        {
            get { return IExecute<Java.Util.Map<Org.Apache.Kafka.Common.Uuid, string>>("topicIdsToNames"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/MetadataCache.html#topicNamesToIds()"/> 
        /// </summary>
        public Java.Util.Map<string, Org.Apache.Kafka.Common.Uuid> TopicNamesToIds
        {
            get { return IExecute<Java.Util.Map<string, Org.Apache.Kafka.Common.Uuid>>("topicNamesToIds"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/MetadataCache.html#contains(java.lang.String)"/>
        /// </summary>
        /// <param name="topic"><see cref="string"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool Contains(string topic)
        {
            return IExecute<bool>("contains", topic);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/MetadataCache.html#contains(org.apache.kafka.common.TopicPartition)"/>
        /// </summary>
        /// <param name="tp"><see cref="Org.Apache.Kafka.Common.TopicPartition"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool Contains(Org.Apache.Kafka.Common.TopicPartition tp)
        {
            return IExecute<bool>("contains", tp);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/MetadataCache.html#hasAliveBroker(int)"/>
        /// </summary>
        /// <param name="brokerId"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool HasAliveBroker(int brokerId)
        {
            return IExecute<bool>("hasAliveBroker", brokerId);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/MetadataCache.html#getClusterMetadata(java.lang.String,org.apache.kafka.common.network.ListenerName)"/>
        /// </summary>
        /// <param name="clusterId"><see cref="string"/></param>
        /// <param name="listenerName"><see cref="Org.Apache.Kafka.Common.Network.ListenerName"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Cluster"/></returns>
        public Org.Apache.Kafka.Common.Cluster GetClusterMetadata(string clusterId, Org.Apache.Kafka.Common.Network.ListenerName listenerName)
        {
            return IExecute<Org.Apache.Kafka.Common.Cluster>("getClusterMetadata", clusterId, listenerName);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/MetadataCache.html#getTopicId(java.lang.String)"/>
        /// </summary>
        /// <param name="topicName"><see cref="string"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Uuid"/></returns>
        public Org.Apache.Kafka.Common.Uuid GetTopicId(string topicName)
        {
            return IExecute<Org.Apache.Kafka.Common.Uuid>("getTopicId", topicName);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}