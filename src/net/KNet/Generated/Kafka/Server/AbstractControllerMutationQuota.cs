/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka_2.13-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Kafka.Server
{
    #region AbstractControllerMutationQuota
    public partial class AbstractControllerMutationQuota
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/AbstractControllerMutationQuota.html#%3Cinit%3E(org.apache.kafka.common.utils.Time)"/>
        /// </summary>
        /// <param name="time"><see cref="Org.Apache.Kafka.Common.Utils.Time"/></param>
        public AbstractControllerMutationQuota(Org.Apache.Kafka.Common.Utils.Time time)
            : base(time)
        {
        }

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Kafka.Server.AbstractControllerMutationQuota"/> to <see cref="Kafka.Server.ControllerMutationQuota"/>
        /// </summary>
        public static implicit operator Kafka.Server.ControllerMutationQuota(Kafka.Server.AbstractControllerMutationQuota t) => t.Cast<Kafka.Server.ControllerMutationQuota>();

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/AbstractControllerMutationQuota.html#lastRecordedTimeMs()"/> 
        /// </summary>
        public long LastRecordedTimeMs
        {
            get { return IExecute<long>("lastRecordedTimeMs"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/AbstractControllerMutationQuota.html#lastThrottleTimeMs()"/> 
        /// </summary>
        public long LastThrottleTimeMs
        {
            get { return IExecute<long>("lastThrottleTimeMs"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/AbstractControllerMutationQuota.html#throttleTime()"/> 
        /// </summary>
        public int ThrottleTime
        {
            get { return IExecute<int>("throttleTime"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/AbstractControllerMutationQuota.html#updateThrottleTime(org.apache.kafka.common.metrics.QuotaViolationException,long)"/>
        /// </summary>
        /// <param name="e"><see cref="Org.Apache.Kafka.Common.Metrics.QuotaViolationException"/></param>
        /// <param name="timeMs"><see cref="long"/></param>
        public void UpdateThrottleTime(Org.Apache.Kafka.Common.Metrics.QuotaViolationException e, long timeMs)
        {
            IExecute("updateThrottleTime", e, timeMs);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}