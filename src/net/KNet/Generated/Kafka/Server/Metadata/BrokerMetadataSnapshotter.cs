/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka_2.13-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Kafka.Server.Metadata
{
    #region BrokerMetadataSnapshotter
    public partial class BrokerMetadataSnapshotter
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Kafka.Server.Metadata.BrokerMetadataSnapshotter"/> to <see cref="Kafka.Utils.Logging"/>
        /// </summary>
        public static implicit operator Kafka.Utils.Logging(Kafka.Server.Metadata.BrokerMetadataSnapshotter t) => t.Cast<Kafka.Utils.Logging>();
        /// <summary>
        /// Converter from <see cref="Kafka.Server.Metadata.BrokerMetadataSnapshotter"/> to <see cref="Kafka.Server.Metadata.MetadataSnapshotter"/>
        /// </summary>
        public static implicit operator Kafka.Server.Metadata.MetadataSnapshotter(Kafka.Server.Metadata.BrokerMetadataSnapshotter t) => t.Cast<Kafka.Server.Metadata.MetadataSnapshotter>();

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/metadata/BrokerMetadataSnapshotter.html#eventQueue()"/> 
        /// </summary>
        public Org.Apache.Kafka.Queue.KafkaEventQueue EventQueue
        {
            get { return IExecute<Org.Apache.Kafka.Queue.KafkaEventQueue>("eventQueue"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/metadata/BrokerMetadataSnapshotter.html#isDebugEnabled()"/> 
        /// </summary>
        public bool IsDebugEnabled
        {
            get { return IExecute<bool>("isDebugEnabled"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/metadata/BrokerMetadataSnapshotter.html#isTraceEnabled()"/> 
        /// </summary>
        public bool IsTraceEnabled
        {
            get { return IExecute<bool>("isTraceEnabled"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/metadata/BrokerMetadataSnapshotter.html#logger()"/> 
        /// </summary>
        public Com.Typesafe.Scalalogging.Logger Logger
        {
            get { return IExecute<Com.Typesafe.Scalalogging.Logger>("logger"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/metadata/BrokerMetadataSnapshotter.html#loggerName()"/> 
        /// </summary>
        public string LoggerName
        {
            get { return IExecute<string>("loggerName"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/metadata/BrokerMetadataSnapshotter.html#logIdent()"/> 
        /// </summary>
        public string LogIdent
        {
            get { return IExecute<string>("logIdent"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/metadata/BrokerMetadataSnapshotter.html#time()"/> 
        /// </summary>
        public Org.Apache.Kafka.Common.Utils.Time Time
        {
            get { return IExecute<Org.Apache.Kafka.Common.Utils.Time>("time"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/metadata/BrokerMetadataSnapshotter.html#msgWithLogIdent(java.lang.String)"/>
        /// </summary>
        /// <param name="msg"><see cref="string"/></param>
        /// <returns><see cref="string"/></returns>
        public string MsgWithLogIdent(string msg)
        {
            return IExecute<string>("msgWithLogIdent", msg);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/metadata/BrokerMetadataSnapshotter.html#beginShutdown()"/>
        /// </summary>
        public void BeginShutdown()
        {
            IExecute("beginShutdown");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/metadata/BrokerMetadataSnapshotter.html#close()"/>
        /// </summary>
        public void Close()
        {
            IExecute("close");
        }

        #endregion

        #region Nested classes
        #region CreateSnapshotEvent
        public partial class CreateSnapshotEvent
        {
            #region Constructors
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/metadata/BrokerMetadataSnapshotter.CreateSnapshotEvent.html#%3Cinit%3E(kafka.server.metadata.BrokerMetadataSnapshotter,org.apache.kafka.image.MetadataImage,org.apache.kafka.snapshot.SnapshotWriter)"/>
            /// </summary>
            /// <param name="$outer"><see cref="Kafka.Server.Metadata.BrokerMetadataSnapshotter"/></param>
            /// <param name="image"><see cref="Org.Apache.Kafka.Image.MetadataImage"/></param>
            /// <param name="snapshotWriter"><see cref="Org.Apache.Kafka.Snapshot.SnapshotWriter"/></param>
            public CreateSnapshotEvent(Kafka.Server.Metadata.BrokerMetadataSnapshotter _outer, Org.Apache.Kafka.Image.MetadataImage image, Org.Apache.Kafka.Snapshot.SnapshotWriter snapshotWriter)
                : base(_outer, image, snapshotWriter)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/metadata/BrokerMetadataSnapshotter.CreateSnapshotEvent.html#$outer"/>
            /// </summary>
            public Kafka.Server.Metadata.BrokerMetadataSnapshotter $outer { get { return IGetField<Kafka.Server.Metadata.BrokerMetadataSnapshotter>("$outer"); } }

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/metadata/BrokerMetadataSnapshotter.CreateSnapshotEvent.html#handleException(java.lang.Throwable)"/>
            /// </summary>
            /// <param name="e"><see cref="Java.Lang.Throwable"/></param>
            public void HandleException(Java.Lang.Throwable e)
            {
                IExecute("handleException", e);
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/metadata/BrokerMetadataSnapshotter.CreateSnapshotEvent.html#run()"/>
            /// </summary>
            public void Run()
            {
                IExecute("run");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region ShutdownEvent
        public partial class ShutdownEvent
        {
            #region Constructors
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/metadata/BrokerMetadataSnapshotter.ShutdownEvent.html#%3Cinit%3E(kafka.server.metadata.BrokerMetadataSnapshotter)"/>
            /// </summary>
            /// <param name="$outer"><see cref="Kafka.Server.Metadata.BrokerMetadataSnapshotter"/></param>
            public ShutdownEvent(Kafka.Server.Metadata.BrokerMetadataSnapshotter _outer)
                : base(_outer)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/metadata/BrokerMetadataSnapshotter.ShutdownEvent.html#$outer"/>
            /// </summary>
            public Kafka.Server.Metadata.BrokerMetadataSnapshotter $outer { get { return IGetField<Kafka.Server.Metadata.BrokerMetadataSnapshotter>("$outer"); } }

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/metadata/BrokerMetadataSnapshotter.ShutdownEvent.html#handleException(java.lang.Throwable)"/>
            /// </summary>
            /// <param name="x$1"><see cref="Java.Lang.Throwable"/></param>
            public void HandleException(Java.Lang.Throwable x_1)
            {
                IExecute("handleException", x_1);
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/metadata/BrokerMetadataSnapshotter.ShutdownEvent.html#run()"/>
            /// </summary>
            public void Run()
            {
                IExecute("run");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}