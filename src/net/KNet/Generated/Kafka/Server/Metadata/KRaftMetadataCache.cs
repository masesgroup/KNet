/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka_2.13-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Kafka.Server.Metadata
{
    #region KRaftMetadataCache
    public partial class KRaftMetadataCache
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/metadata/KRaftMetadataCache.html#%3Cinit%3E(int)"/>
        /// </summary>
        /// <param name="brokerId"><see cref="int"/></param>
        public KRaftMetadataCache(int brokerId)
            : base(brokerId)
        {
        }

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Kafka.Server.Metadata.KRaftMetadataCache"/> to <see cref="Kafka.Server.MetadataCache"/>
        /// </summary>
        public static implicit operator Kafka.Server.MetadataCache(Kafka.Server.Metadata.KRaftMetadataCache t) => t.Cast<Kafka.Server.MetadataCache>();
        /// <summary>
        /// Converter from <see cref="Kafka.Server.Metadata.KRaftMetadataCache"/> to <see cref="Kafka.Utils.Logging"/>
        /// </summary>
        public static implicit operator Kafka.Utils.Logging(Kafka.Server.Metadata.KRaftMetadataCache t) => t.Cast<Kafka.Utils.Logging>();
        /// <summary>
        /// Converter from <see cref="Kafka.Server.Metadata.KRaftMetadataCache"/> to <see cref="Kafka.Server.Metadata.ConfigRepository"/>
        /// </summary>
        public static implicit operator Kafka.Server.Metadata.ConfigRepository(Kafka.Server.Metadata.KRaftMetadataCache t) => t.Cast<Kafka.Server.Metadata.ConfigRepository>();

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/metadata/KRaftMetadataCache.html#brokerId()"/> 
        /// </summary>
        public int BrokerId
        {
            get { return IExecute<int>("brokerId"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/metadata/KRaftMetadataCache.html#currentImage()"/> 
        /// </summary>
        public Org.Apache.Kafka.Image.MetadataImage CurrentImage
        {
            get { return IExecute<Org.Apache.Kafka.Image.MetadataImage>("currentImage"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/metadata/KRaftMetadataCache.html#features()"/> 
        /// </summary>
        public Kafka.Server.FinalizedFeaturesAndEpoch Features
        {
            get { return IExecute<Kafka.Server.FinalizedFeaturesAndEpoch>("features"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/metadata/KRaftMetadataCache.html#isDebugEnabled()"/> 
        /// </summary>
        public bool IsDebugEnabled
        {
            get { return IExecute<bool>("isDebugEnabled"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/metadata/KRaftMetadataCache.html#isTraceEnabled()"/> 
        /// </summary>
        public bool IsTraceEnabled
        {
            get { return IExecute<bool>("isTraceEnabled"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/metadata/KRaftMetadataCache.html#logger()"/> 
        /// </summary>
        public Com.Typesafe.Scalalogging.Logger Logger
        {
            get { return IExecute<Com.Typesafe.Scalalogging.Logger>("logger"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/metadata/KRaftMetadataCache.html#loggerName()"/> 
        /// </summary>
        public string LoggerName
        {
            get { return IExecute<string>("loggerName"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/metadata/KRaftMetadataCache.html#logIdent()"/> 
        /// </summary>
        public string LogIdent
        {
            get { return IExecute<string>("logIdent"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/metadata/KRaftMetadataCache.html#metadataVersion()"/> 
        /// </summary>
        public Org.Apache.Kafka.Server.Common.MetadataVersion MetadataVersion
        {
            get { return IExecute<Org.Apache.Kafka.Server.Common.MetadataVersion>("metadataVersion"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/metadata/KRaftMetadataCache.html#stateChangeTraceEnabled()"/> 
        /// </summary>
        public bool StateChangeTraceEnabled
        {
            get { return IExecute<bool>("stateChangeTraceEnabled"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/metadata/KRaftMetadataCache.html#topicIdsToNames()"/> 
        /// </summary>
        public Java.Util.Map<Org.Apache.Kafka.Common.Uuid, string> TopicIdsToNames
        {
            get { return IExecute<Java.Util.Map<Org.Apache.Kafka.Common.Uuid, string>>("topicIdsToNames"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/metadata/KRaftMetadataCache.html#topicNamesToIds()"/> 
        /// </summary>
        public Java.Util.Map<string, Org.Apache.Kafka.Common.Uuid> TopicNamesToIds
        {
            get { return IExecute<Java.Util.Map<string, Org.Apache.Kafka.Common.Uuid>>("topicNamesToIds"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/metadata/KRaftMetadataCache.html#contains(java.lang.String)"/>
        /// </summary>
        /// <param name="topicName"><see cref="string"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool Contains(string topicName)
        {
            return IExecute<bool>("contains", topicName);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/metadata/KRaftMetadataCache.html#contains(org.apache.kafka.common.TopicPartition)"/>
        /// </summary>
        /// <param name="tp"><see cref="Org.Apache.Kafka.Common.TopicPartition"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool Contains(Org.Apache.Kafka.Common.TopicPartition tp)
        {
            return IExecute<bool>("contains", tp);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/metadata/KRaftMetadataCache.html#hasAliveBroker(int)"/>
        /// </summary>
        /// <param name="brokerId"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool HasAliveBroker(int brokerId)
        {
            return IExecute<bool>("hasAliveBroker", brokerId);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/metadata/KRaftMetadataCache.html#isBrokerFenced(int)"/>
        /// </summary>
        /// <param name="brokerId"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsBrokerFenced(int brokerId)
        {
            return IExecute<bool>("isBrokerFenced", brokerId);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/metadata/KRaftMetadataCache.html#isBrokerShuttingDown(int)"/>
        /// </summary>
        /// <param name="brokerId"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsBrokerShuttingDown(int brokerId)
        {
            return IExecute<bool>("isBrokerShuttingDown", brokerId);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/metadata/KRaftMetadataCache.html#msgWithLogIdent(java.lang.String)"/>
        /// </summary>
        /// <param name="msg"><see cref="string"/></param>
        /// <returns><see cref="string"/></returns>
        public string MsgWithLogIdent(string msg)
        {
            return IExecute<string>("msgWithLogIdent", msg);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/metadata/KRaftMetadataCache.html#brokerConfig(int)"/>
        /// </summary>
        /// <param name="brokerId"><see cref="int"/></param>
        /// <returns><see cref="Java.Util.Properties"/></returns>
        public Java.Util.Properties BrokerConfig(int brokerId)
        {
            return IExecute<Java.Util.Properties>("brokerConfig", brokerId);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/metadata/KRaftMetadataCache.html#config(org.apache.kafka.common.config.ConfigResource)"/>
        /// </summary>
        /// <param name="configResource"><see cref="Org.Apache.Kafka.Common.Config.ConfigResource"/></param>
        /// <returns><see cref="Java.Util.Properties"/></returns>
        public Java.Util.Properties Config(Org.Apache.Kafka.Common.Config.ConfigResource configResource)
        {
            return IExecute<Java.Util.Properties>("config", configResource);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/metadata/KRaftMetadataCache.html#topicConfig(java.lang.String)"/>
        /// </summary>
        /// <param name="topicName"><see cref="string"/></param>
        /// <returns><see cref="Java.Util.Properties"/></returns>
        public Java.Util.Properties TopicConfig(string topicName)
        {
            return IExecute<Java.Util.Properties>("topicConfig", topicName);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/metadata/KRaftMetadataCache.html#getClusterMetadata(java.lang.String,org.apache.kafka.common.network.ListenerName)"/>
        /// </summary>
        /// <param name="clusterId"><see cref="string"/></param>
        /// <param name="listenerName"><see cref="Org.Apache.Kafka.Common.Network.ListenerName"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Cluster"/></returns>
        public Org.Apache.Kafka.Common.Cluster GetClusterMetadata(string clusterId, Org.Apache.Kafka.Common.Network.ListenerName listenerName)
        {
            return IExecute<Org.Apache.Kafka.Common.Cluster>("getClusterMetadata", clusterId, listenerName);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/metadata/KRaftMetadataCache.html#describeClientQuotas(org.apache.kafka.common.message.DescribeClientQuotasRequestData)"/>
        /// </summary>
        /// <param name="request"><see cref="Org.Apache.Kafka.Common.Message.DescribeClientQuotasRequestData"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Message.DescribeClientQuotasResponseData"/></returns>
        public Org.Apache.Kafka.Common.Message.DescribeClientQuotasResponseData DescribeClientQuotas(Org.Apache.Kafka.Common.Message.DescribeClientQuotasRequestData request)
        {
            return IExecute<Org.Apache.Kafka.Common.Message.DescribeClientQuotasResponseData>("describeClientQuotas", request);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/metadata/KRaftMetadataCache.html#getTopicId(java.lang.String)"/>
        /// </summary>
        /// <param name="topicName"><see cref="string"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Uuid"/></returns>
        public Org.Apache.Kafka.Common.Uuid GetTopicId(string topicName)
        {
            return IExecute<Org.Apache.Kafka.Common.Uuid>("getTopicId", topicName);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/metadata/KRaftMetadataCache.html#logStateChangeTrace(java.lang.String)"/>
        /// </summary>
        /// <param name="str"><see cref="string"/></param>
        public void LogStateChangeTrace(string str)
        {
            IExecute("logStateChangeTrace", str);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/metadata/KRaftMetadataCache.html#setImage(org.apache.kafka.image.MetadataImage)"/>
        /// </summary>
        /// <param name="newImage"><see cref="Org.Apache.Kafka.Image.MetadataImage"/></param>
        public void SetImage(Org.Apache.Kafka.Image.MetadataImage newImage)
        {
            IExecute("setImage", newImage);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}