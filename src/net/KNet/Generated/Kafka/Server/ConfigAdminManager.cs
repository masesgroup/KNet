/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka_2.13-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Kafka.Server
{
    #region ConfigAdminManager
    public partial class ConfigAdminManager
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ConfigAdminManager.html#%3Cinit%3E(int,kafka.server.KafkaConfig,kafka.server.metadata.ConfigRepository)"/>
        /// </summary>
        /// <param name="nodeId"><see cref="int"/></param>
        /// <param name="conf"><see cref="Kafka.Server.KafkaConfig"/></param>
        /// <param name="configRepository"><see cref="Kafka.Server.Metadata.ConfigRepository"/></param>
        public ConfigAdminManager(int nodeId, Kafka.Server.KafkaConfig conf, Kafka.Server.Metadata.ConfigRepository configRepository)
            : base(nodeId, conf, configRepository)
        {
        }

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Kafka.Server.ConfigAdminManager"/> to <see cref="Kafka.Utils.Logging"/>
        /// </summary>
        public static implicit operator Kafka.Utils.Logging(Kafka.Server.ConfigAdminManager t) => t.Cast<Kafka.Utils.Logging>();

        #endregion

        #region Fields

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ConfigAdminManager.html#log()"/> 
        /// </summary>
        public static Org.Slf4j.Logger Log
        {
            get { return SExecute<Org.Slf4j.Logger>(LocalBridgeClazz, "log"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ConfigAdminManager.html#copyWithoutPreprocessed(org.apache.kafka.common.message.AlterConfigsRequestData,java.util.IdentityHashMap)"/>
        /// </summary>
        /// <param name="request"><see cref="Org.Apache.Kafka.Common.Message.AlterConfigsRequestData"/></param>
        /// <param name="processed"><see cref="Java.Util.IdentityHashMap"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Message.AlterConfigsRequestData"/></returns>
        public static Org.Apache.Kafka.Common.Message.AlterConfigsRequestData CopyWithoutPreprocessed(Org.Apache.Kafka.Common.Message.AlterConfigsRequestData request, Java.Util.IdentityHashMap<Org.Apache.Kafka.Common.Message.AlterConfigsRequestData.AlterConfigsResource, Org.Apache.Kafka.Common.Requests.ApiError> processed)
        {
            return SExecute<Org.Apache.Kafka.Common.Message.AlterConfigsRequestData>(LocalBridgeClazz, "copyWithoutPreprocessed", request, processed);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ConfigAdminManager.html#reassembleLegacyResponse(org.apache.kafka.common.message.AlterConfigsRequestData,java.util.IdentityHashMap,org.apache.kafka.common.message.AlterConfigsResponseData)"/>
        /// </summary>
        /// <param name="original"><see cref="Org.Apache.Kafka.Common.Message.AlterConfigsRequestData"/></param>
        /// <param name="preprocessingResponses"><see cref="Java.Util.IdentityHashMap"/></param>
        /// <param name="persistentResponses"><see cref="Org.Apache.Kafka.Common.Message.AlterConfigsResponseData"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Message.AlterConfigsResponseData"/></returns>
        public static Org.Apache.Kafka.Common.Message.AlterConfigsResponseData ReassembleLegacyResponse(Org.Apache.Kafka.Common.Message.AlterConfigsRequestData original, Java.Util.IdentityHashMap<Org.Apache.Kafka.Common.Message.AlterConfigsRequestData.AlterConfigsResource, Org.Apache.Kafka.Common.Requests.ApiError> preprocessingResponses, Org.Apache.Kafka.Common.Message.AlterConfigsResponseData persistentResponses)
        {
            return SExecute<Org.Apache.Kafka.Common.Message.AlterConfigsResponseData>(LocalBridgeClazz, "reassembleLegacyResponse", original, preprocessingResponses, persistentResponses);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ConfigAdminManager.html#copyWithoutPreprocessed(org.apache.kafka.common.message.IncrementalAlterConfigsRequestData,java.util.IdentityHashMap)"/>
        /// </summary>
        /// <param name="request"><see cref="Org.Apache.Kafka.Common.Message.IncrementalAlterConfigsRequestData"/></param>
        /// <param name="processed"><see cref="Java.Util.IdentityHashMap"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Message.IncrementalAlterConfigsRequestData"/></returns>
        public static Org.Apache.Kafka.Common.Message.IncrementalAlterConfigsRequestData CopyWithoutPreprocessed(Org.Apache.Kafka.Common.Message.IncrementalAlterConfigsRequestData request, Java.Util.IdentityHashMap<Org.Apache.Kafka.Common.Message.IncrementalAlterConfigsRequestData.AlterConfigsResource, Org.Apache.Kafka.Common.Requests.ApiError> processed)
        {
            return SExecute<Org.Apache.Kafka.Common.Message.IncrementalAlterConfigsRequestData>(LocalBridgeClazz, "copyWithoutPreprocessed", request, processed);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ConfigAdminManager.html#reassembleIncrementalResponse(org.apache.kafka.common.message.IncrementalAlterConfigsRequestData,java.util.IdentityHashMap,org.apache.kafka.common.message.IncrementalAlterConfigsResponseData)"/>
        /// </summary>
        /// <param name="original"><see cref="Org.Apache.Kafka.Common.Message.IncrementalAlterConfigsRequestData"/></param>
        /// <param name="preprocessingResponses"><see cref="Java.Util.IdentityHashMap"/></param>
        /// <param name="persistentResponses"><see cref="Org.Apache.Kafka.Common.Message.IncrementalAlterConfigsResponseData"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Message.IncrementalAlterConfigsResponseData"/></returns>
        public static Org.Apache.Kafka.Common.Message.IncrementalAlterConfigsResponseData ReassembleIncrementalResponse(Org.Apache.Kafka.Common.Message.IncrementalAlterConfigsRequestData original, Java.Util.IdentityHashMap<Org.Apache.Kafka.Common.Message.IncrementalAlterConfigsRequestData.AlterConfigsResource, Org.Apache.Kafka.Common.Requests.ApiError> preprocessingResponses, Org.Apache.Kafka.Common.Message.IncrementalAlterConfigsResponseData persistentResponses)
        {
            return SExecute<Org.Apache.Kafka.Common.Message.IncrementalAlterConfigsResponseData>(LocalBridgeClazz, "reassembleIncrementalResponse", original, preprocessingResponses, persistentResponses);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ConfigAdminManager.html#isDebugEnabled()"/> 
        /// </summary>
        public bool IsDebugEnabled
        {
            get { return IExecute<bool>("isDebugEnabled"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ConfigAdminManager.html#isTraceEnabled()"/> 
        /// </summary>
        public bool IsTraceEnabled
        {
            get { return IExecute<bool>("isTraceEnabled"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ConfigAdminManager.html#logger()"/> 
        /// </summary>
        public Com.Typesafe.Scalalogging.Logger Logger
        {
            get { return IExecute<Com.Typesafe.Scalalogging.Logger>("logger"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ConfigAdminManager.html#loggerName()"/> 
        /// </summary>
        public string LoggerName
        {
            get { return IExecute<string>("loggerName"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ConfigAdminManager.html#logIdent()"/> 
        /// </summary>
        public string LogIdent
        {
            get { return IExecute<string>("logIdent"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ConfigAdminManager.html#msgWithLogIdent(java.lang.String)"/>
        /// </summary>
        /// <param name="msg"><see cref="string"/></param>
        /// <returns><see cref="string"/></returns>
        public string MsgWithLogIdent(string msg)
        {
            return IExecute<string>("msgWithLogIdent", msg);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ConfigAdminManager.html#preprocess(org.apache.kafka.common.message.AlterConfigsRequestData)"/>
        /// </summary>
        /// <param name="request"><see cref="Org.Apache.Kafka.Common.Message.AlterConfigsRequestData"/></param>
        /// <returns><see cref="Java.Util.IdentityHashMap"/></returns>
        public Java.Util.IdentityHashMap<Org.Apache.Kafka.Common.Message.AlterConfigsRequestData.AlterConfigsResource, Org.Apache.Kafka.Common.Requests.ApiError> Preprocess(Org.Apache.Kafka.Common.Message.AlterConfigsRequestData request)
        {
            return IExecute<Java.Util.IdentityHashMap<Org.Apache.Kafka.Common.Message.AlterConfigsRequestData.AlterConfigsResource, Org.Apache.Kafka.Common.Requests.ApiError>>("preprocess", request);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ConfigAdminManager.html#alterLogLevelConfigs(java.util.Collection)"/>
        /// </summary>
        /// <param name="ops"><see cref="Java.Util.Collection"/></param>
        public void AlterLogLevelConfigs(Java.Util.Collection<Org.Apache.Kafka.Common.Message.IncrementalAlterConfigsRequestData.AlterableConfig> ops)
        {
            IExecute("alterLogLevelConfigs", ops);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ConfigAdminManager.html#validateBrokerConfigChange(java.util.Properties,org.apache.kafka.common.config.ConfigResource)"/>
        /// </summary>
        /// <param name="props"><see cref="Java.Util.Properties"/></param>
        /// <param name="configResource"><see cref="Org.Apache.Kafka.Common.Config.ConfigResource"/></param>
        public void ValidateBrokerConfigChange(Java.Util.Properties props, Org.Apache.Kafka.Common.Config.ConfigResource configResource)
        {
            IExecute("validateBrokerConfigChange", props, configResource);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ConfigAdminManager.html#validateBrokerConfigChange(org.apache.kafka.common.message.AlterConfigsRequestData.AlterConfigsResource,org.apache.kafka.common.config.ConfigResource)"/>
        /// </summary>
        /// <param name="resource"><see cref="Org.Apache.Kafka.Common.Message.AlterConfigsRequestData.AlterConfigsResource"/></param>
        /// <param name="configResource"><see cref="Org.Apache.Kafka.Common.Config.ConfigResource"/></param>
        public void ValidateBrokerConfigChange(Org.Apache.Kafka.Common.Message.AlterConfigsRequestData.AlterConfigsResource resource, Org.Apache.Kafka.Common.Config.ConfigResource configResource)
        {
            IExecute("validateBrokerConfigChange", resource, configResource);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ConfigAdminManager.html#validateBrokerConfigChange(org.apache.kafka.common.message.IncrementalAlterConfigsRequestData.AlterConfigsResource,org.apache.kafka.common.config.ConfigResource)"/>
        /// </summary>
        /// <param name="resource"><see cref="Org.Apache.Kafka.Common.Message.IncrementalAlterConfigsRequestData.AlterConfigsResource"/></param>
        /// <param name="configResource"><see cref="Org.Apache.Kafka.Common.Config.ConfigResource"/></param>
        public void ValidateBrokerConfigChange(Org.Apache.Kafka.Common.Message.IncrementalAlterConfigsRequestData.AlterConfigsResource resource, Org.Apache.Kafka.Common.Config.ConfigResource configResource)
        {
            IExecute("validateBrokerConfigChange", resource, configResource);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ConfigAdminManager.html#validateLogLevelConfigs(java.util.Collection)"/>
        /// </summary>
        /// <param name="ops"><see cref="Java.Util.Collection"/></param>
        public void ValidateLogLevelConfigs(Java.Util.Collection<Org.Apache.Kafka.Common.Message.IncrementalAlterConfigsRequestData.AlterableConfig> ops)
        {
            IExecute("validateLogLevelConfigs", ops);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ConfigAdminManager.html#validateResourceNameIsCurrentNodeId(java.lang.String)"/>
        /// </summary>
        /// <param name="name"><see cref="string"/></param>
        public void ValidateResourceNameIsCurrentNodeId(string name)
        {
            IExecute("validateResourceNameIsCurrentNodeId", name);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}