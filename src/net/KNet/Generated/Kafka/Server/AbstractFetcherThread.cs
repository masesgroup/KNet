/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka_2.13-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Kafka.Server
{
    #region AbstractFetcherThread
    public partial class AbstractFetcherThread
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/AbstractFetcherThread.html#%3Cinit%3E(java.lang.String,java.lang.String,kafka.server.LeaderEndPoint,kafka.server.FailedPartitions,int,boolean,kafka.server.BrokerTopicStats)"/>
        /// </summary>
        /// <param name="name"><see cref="string"/></param>
        /// <param name="clientId"><see cref="string"/></param>
        /// <param name="leader"><see cref="Kafka.Server.LeaderEndPoint"/></param>
        /// <param name="failedPartitions"><see cref="Kafka.Server.FailedPartitions"/></param>
        /// <param name="fetchBackOffMs"><see cref="int"/></param>
        /// <param name="isInterruptible"><see cref="bool"/></param>
        /// <param name="brokerTopicStats"><see cref="Kafka.Server.BrokerTopicStats"/></param>
        public AbstractFetcherThread(string name, string clientId, Kafka.Server.LeaderEndPoint leader, Kafka.Server.FailedPartitions failedPartitions, int fetchBackOffMs, bool isInterruptible, Kafka.Server.BrokerTopicStats brokerTopicStats)
            : base(name, clientId, leader, failedPartitions, fetchBackOffMs, isInterruptible, brokerTopicStats)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/AbstractFetcherThread.html#brokerTopicStats()"/> 
        /// </summary>
        public Kafka.Server.BrokerTopicStats BrokerTopicStats
        {
            get { return IExecute<Kafka.Server.BrokerTopicStats>("brokerTopicStats"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/AbstractFetcherThread.html#fetcherLagStats()"/> 
        /// </summary>
        public Kafka.Server.FetcherLagStats FetcherLagStats
        {
            get { return IExecute<Kafka.Server.FetcherLagStats>("fetcherLagStats"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/AbstractFetcherThread.html#fetcherStats()"/> 
        /// </summary>
        public Kafka.Server.FetcherStats FetcherStats
        {
            get { return IExecute<Kafka.Server.FetcherStats>("fetcherStats"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/AbstractFetcherThread.html#isOffsetForLeaderEpochSupported()"/> 
        /// </summary>
        public bool IsOffsetForLeaderEpochSupported
        {
            get { return IExecute<bool>("isOffsetForLeaderEpochSupported"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/AbstractFetcherThread.html#leader()"/> 
        /// </summary>
        public Kafka.Server.LeaderEndPoint Leader
        {
            get { return IExecute<Kafka.Server.LeaderEndPoint>("leader"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/AbstractFetcherThread.html#partitionCount()"/> 
        /// </summary>
        public int PartitionCount
        {
            get { return IExecute<int>("partitionCount"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/AbstractFetcherThread.html#partitionMapLock()"/> 
        /// </summary>
        public Java.Util.Concurrent.Locks.ReentrantLock PartitionMapLock
        {
            get { return IExecute<Java.Util.Concurrent.Locks.ReentrantLock>("partitionMapLock"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/AbstractFetcherThread.html#logEndOffset(org.apache.kafka.common.TopicPartition)"/>
        /// </summary>
        /// <param name="topicPartition"><see cref="Org.Apache.Kafka.Common.TopicPartition"/></param>
        /// <returns><see cref="long"/></returns>
        public long LogEndOffset(Org.Apache.Kafka.Common.TopicPartition topicPartition)
        {
            return IExecute<long>("logEndOffset", topicPartition);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/AbstractFetcherThread.html#logStartOffset(org.apache.kafka.common.TopicPartition)"/>
        /// </summary>
        /// <param name="topicPartition"><see cref="Org.Apache.Kafka.Common.TopicPartition"/></param>
        /// <returns><see cref="long"/></returns>
        public long LogStartOffset(Org.Apache.Kafka.Common.TopicPartition topicPartition)
        {
            return IExecute<long>("logStartOffset", topicPartition);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/AbstractFetcherThread.html#truncate(org.apache.kafka.common.TopicPartition,kafka.server.OffsetTruncationState)"/>
        /// </summary>
        /// <param name="topicPartition"><see cref="Org.Apache.Kafka.Common.TopicPartition"/></param>
        /// <param name="truncationState"><see cref="Kafka.Server.OffsetTruncationState"/></param>
        public void Truncate(Org.Apache.Kafka.Common.TopicPartition topicPartition, Kafka.Server.OffsetTruncationState truncationState)
        {
            IExecute("truncate", topicPartition, truncationState);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/AbstractFetcherThread.html#truncateFullyAndStartAt(org.apache.kafka.common.TopicPartition,long)"/>
        /// </summary>
        /// <param name="topicPartition"><see cref="Org.Apache.Kafka.Common.TopicPartition"/></param>
        /// <param name="offset"><see cref="long"/></param>
        public void TruncateFullyAndStartAt(Org.Apache.Kafka.Common.TopicPartition topicPartition, long offset)
        {
            IExecute("truncateFullyAndStartAt", topicPartition, offset);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/AbstractFetcherThread.html#toMemoryRecords(org.apache.kafka.common.record.Records)"/>
        /// </summary>
        /// <param name="records"><see cref="Org.Apache.Kafka.Common.Record.Records"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Record.MemoryRecords"/></returns>
        public Org.Apache.Kafka.Common.Record.MemoryRecords ToMemoryRecords(Org.Apache.Kafka.Common.Record.Records records)
        {
            return IExecute<Org.Apache.Kafka.Common.Record.MemoryRecords>("toMemoryRecords", records);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/AbstractFetcherThread.html#markPartitionsForTruncation(org.apache.kafka.common.TopicPartition,long)"/>
        /// </summary>
        /// <param name="topicPartition"><see cref="Org.Apache.Kafka.Common.TopicPartition"/></param>
        /// <param name="truncationOffset"><see cref="long"/></param>
        public void MarkPartitionsForTruncation(Org.Apache.Kafka.Common.TopicPartition topicPartition, long truncationOffset)
        {
            IExecute("markPartitionsForTruncation", topicPartition, truncationOffset);
        }

        #endregion

        #region Nested classes
        #region ReplicaFetch
        public partial class ReplicaFetch
        {
            #region Constructors
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/AbstractFetcherThread.ReplicaFetch.html#%3Cinit%3E(java.util.Map,org.apache.kafka.common.requests.FetchRequest.Builder)"/>
            /// </summary>
            /// <param name="partitionData"><see cref="Java.Util.Map"/></param>
            /// <param name="fetchRequest"><see cref="Org.Apache.Kafka.Common.Requests.FetchRequest.Builder"/></param>
            public ReplicaFetch(Java.Util.Map partitionData, Org.Apache.Kafka.Common.Requests.FetchRequest.Builder fetchRequest)
                : base(partitionData, fetchRequest)
            {
            }

            #endregion

            #region Class/Interface conversion operators
            /// <summary>
            /// Converter from <see cref="Kafka.Server.AbstractFetcherThread.ReplicaFetch"/> to <see cref="Java.Io.Serializable"/>
            /// </summary>
            public static implicit operator Java.Io.Serializable(Kafka.Server.AbstractFetcherThread.ReplicaFetch t) => t.Cast<Java.Io.Serializable>();

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/AbstractFetcherThread.ReplicaFetch.html#fetchRequest()"/> 
            /// </summary>
            public Org.Apache.Kafka.Common.Requests.FetchRequest.Builder FetchRequest
            {
                get { return IExecute<Org.Apache.Kafka.Common.Requests.FetchRequest.Builder>("fetchRequest"); }
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/AbstractFetcherThread.ReplicaFetch.html#partitionData()"/> 
            /// </summary>
            public Java.Util.Map<Org.Apache.Kafka.Common.TopicPartition, Org.Apache.Kafka.Common.Requests.FetchRequest.PartitionData> PartitionData
            {
                get { return IExecute<Java.Util.Map<Org.Apache.Kafka.Common.TopicPartition, Org.Apache.Kafka.Common.Requests.FetchRequest.PartitionData>>("partitionData"); }
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/AbstractFetcherThread.ReplicaFetch.html#productArity()"/> 
            /// </summary>
            public int ProductArity
            {
                get { return IExecute<int>("productArity"); }
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/AbstractFetcherThread.ReplicaFetch.html#productPrefix()"/> 
            /// </summary>
            public string ProductPrefix
            {
                get { return IExecute<string>("productPrefix"); }
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/AbstractFetcherThread.ReplicaFetch.html#canEqual(java.lang.Object)"/>
            /// </summary>
            /// <param name="x$1"><see cref="object"/></param>
            /// <returns><see cref="bool"/></returns>
            public bool CanEqual(object x_1)
            {
                return IExecute<bool>("canEqual", x_1);
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/AbstractFetcherThread.ReplicaFetch.html#productElement(int)"/>
            /// </summary>
            /// <param name="x$1"><see cref="int"/></param>
            /// <returns><see cref="object"/></returns>
            public object ProductElement(int x_1)
            {
                return IExecute("productElement", x_1);
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/AbstractFetcherThread.ReplicaFetch.html#productElementName(int)"/>
            /// </summary>
            /// <param name="x$1"><see cref="int"/></param>
            /// <returns><see cref="string"/></returns>
            public string ProductElementName(int x_1)
            {
                return IExecute<string>("productElementName", x_1);
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/AbstractFetcherThread.ReplicaFetch.html#copy(java.util.Map,org.apache.kafka.common.requests.FetchRequest.Builder)"/>
            /// </summary>
            /// <param name="partitionData"><see cref="Java.Util.Map"/></param>
            /// <param name="fetchRequest"><see cref="Org.Apache.Kafka.Common.Requests.FetchRequest.Builder"/></param>
            /// <returns><see cref="Kafka.Server.AbstractFetcherThread.ReplicaFetch"/></returns>
            public Kafka.Server.AbstractFetcherThread.ReplicaFetch Copy(Java.Util.Map<Org.Apache.Kafka.Common.TopicPartition, Org.Apache.Kafka.Common.Requests.FetchRequest.PartitionData> partitionData, Org.Apache.Kafka.Common.Requests.FetchRequest.Builder fetchRequest)
            {
                return IExecute<Kafka.Server.AbstractFetcherThread.ReplicaFetch>("copy", partitionData, fetchRequest);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region ResultWithPartitions
        public partial class ResultWithPartitions
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators
            /// <summary>
            /// Converter from <see cref="Kafka.Server.AbstractFetcherThread.ResultWithPartitions"/> to <see cref="Java.Io.Serializable"/>
            /// </summary>
            public static implicit operator Java.Io.Serializable(Kafka.Server.AbstractFetcherThread.ResultWithPartitions t) => t.Cast<Java.Io.Serializable>();

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/AbstractFetcherThread.ResultWithPartitions.html#productArity()"/> 
            /// </summary>
            public int ProductArity
            {
                get { return IExecute<int>("productArity"); }
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/AbstractFetcherThread.ResultWithPartitions.html#productPrefix()"/> 
            /// </summary>
            public string ProductPrefix
            {
                get { return IExecute<string>("productPrefix"); }
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/AbstractFetcherThread.ResultWithPartitions.html#result()"/> 
            /// </summary>
            public object Result
            {
                get { return IExecute("result"); }
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/AbstractFetcherThread.ResultWithPartitions.html#canEqual(java.lang.Object)"/>
            /// </summary>
            /// <param name="x$1"><see cref="object"/></param>
            /// <returns><see cref="bool"/></returns>
            public bool CanEqual(object x_1)
            {
                return IExecute<bool>("canEqual", x_1);
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/AbstractFetcherThread.ResultWithPartitions.html#productElement(int)"/>
            /// </summary>
            /// <param name="x$1"><see cref="int"/></param>
            /// <returns><see cref="object"/></returns>
            public object ProductElement(int x_1)
            {
                return IExecute("productElement", x_1);
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/AbstractFetcherThread.ResultWithPartitions.html#productElementName(int)"/>
            /// </summary>
            /// <param name="x$1"><see cref="int"/></param>
            /// <returns><see cref="string"/></returns>
            public string ProductElementName(int x_1)
            {
                return IExecute<string>("productElementName", x_1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region ResultWithPartitions<R>
        public partial class ResultWithPartitions<R>
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators
            /// <summary>
            /// Converter from <see cref="Kafka.Server.AbstractFetcherThread.ResultWithPartitions{R}"/> to <see cref="Java.Io.Serializable"/>
            /// </summary>
            public static implicit operator Java.Io.Serializable(Kafka.Server.AbstractFetcherThread.ResultWithPartitions<R> t) => t.Cast<Java.Io.Serializable>();
            /// <summary>
            /// Converter from <see cref="Kafka.Server.AbstractFetcherThread.ResultWithPartitions{R}"/> to <see cref="Kafka.Server.AbstractFetcherThread.ResultWithPartitions"/>
            /// </summary>
            public static implicit operator Kafka.Server.AbstractFetcherThread.ResultWithPartitions(Kafka.Server.AbstractFetcherThread.ResultWithPartitions<R> t) => t.Cast<Kafka.Server.AbstractFetcherThread.ResultWithPartitions>();

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/AbstractFetcherThread.ResultWithPartitions.html#productArity()"/> 
            /// </summary>
            public int ProductArity
            {
                get { return IExecute<int>("productArity"); }
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/AbstractFetcherThread.ResultWithPartitions.html#productPrefix()"/> 
            /// </summary>
            public string ProductPrefix
            {
                get { return IExecute<string>("productPrefix"); }
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/AbstractFetcherThread.ResultWithPartitions.html#result()"/> 
            /// </summary>
            public R Result
            {
                get { return IExecute<R>("result"); }
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/AbstractFetcherThread.ResultWithPartitions.html#canEqual(java.lang.Object)"/>
            /// </summary>
            /// <param name="x$1"><see cref="object"/></param>
            /// <returns><see cref="bool"/></returns>
            public bool CanEqual(object x_1)
            {
                return IExecute<bool>("canEqual", x_1);
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/AbstractFetcherThread.ResultWithPartitions.html#productElement(int)"/>
            /// </summary>
            /// <param name="x$1"><see cref="int"/></param>
            /// <returns><see cref="object"/></returns>
            public object ProductElement(int x_1)
            {
                return IExecute("productElement", x_1);
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/AbstractFetcherThread.ResultWithPartitions.html#productElementName(int)"/>
            /// </summary>
            /// <param name="x$1"><see cref="int"/></param>
            /// <returns><see cref="string"/></returns>
            public string ProductElementName(int x_1)
            {
                return IExecute<string>("productElementName", x_1);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}