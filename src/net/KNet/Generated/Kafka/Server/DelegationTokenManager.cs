/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka_2.13-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Kafka.Server
{
    #region DelegationTokenManager
    public partial class DelegationTokenManager
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/DelegationTokenManager.html#%3Cinit%3E(kafka.server.KafkaConfig,org.apache.kafka.common.security.token.delegation.internals.DelegationTokenCache,org.apache.kafka.common.utils.Time,kafka.zk.KafkaZkClient)"/>
        /// </summary>
        /// <param name="config"><see cref="Kafka.Server.KafkaConfig"/></param>
        /// <param name="tokenCache"><see cref="Org.Apache.Kafka.Common.Security.Token.Delegation.Internals.DelegationTokenCache"/></param>
        /// <param name="time"><see cref="Org.Apache.Kafka.Common.Utils.Time"/></param>
        /// <param name="zkClient"><see cref="Kafka.Zk.KafkaZkClient"/></param>
        public DelegationTokenManager(Kafka.Server.KafkaConfig config, Org.Apache.Kafka.Common.Security.Token.Delegation.Internals.DelegationTokenCache tokenCache, Org.Apache.Kafka.Common.Utils.Time time, Kafka.Zk.KafkaZkClient zkClient)
            : base(config, tokenCache, time, zkClient)
        {
        }

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Kafka.Server.DelegationTokenManager"/> to <see cref="Kafka.Metrics.KafkaMetricsGroup"/>
        /// </summary>
        public static implicit operator Kafka.Metrics.KafkaMetricsGroup(Kafka.Server.DelegationTokenManager t) => t.Cast<Kafka.Metrics.KafkaMetricsGroup>();

        #endregion

        #region Fields

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/DelegationTokenManager.html#CurrentVersion()"/> 
        /// </summary>
        public static int CurrentVersion
        {
            get { return SExecute<int>(LocalBridgeClazz, "CurrentVersion"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/DelegationTokenManager.html#DefaultHmacAlgorithm()"/> 
        /// </summary>
        public static string DefaultHmacAlgorithm
        {
            get { return SExecute<string>(LocalBridgeClazz, "DefaultHmacAlgorithm"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/DelegationTokenManager.html#ErrorTimestamp()"/> 
        /// </summary>
        public static int ErrorTimestamp
        {
            get { return SExecute<int>(LocalBridgeClazz, "ErrorTimestamp"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/DelegationTokenManager.html#ExpiryTimestampKey()"/> 
        /// </summary>
        public static string ExpiryTimestampKey
        {
            get { return SExecute<string>(LocalBridgeClazz, "ExpiryTimestampKey"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/DelegationTokenManager.html#IssueTimestampKey()"/> 
        /// </summary>
        public static string IssueTimestampKey
        {
            get { return SExecute<string>(LocalBridgeClazz, "IssueTimestampKey"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/DelegationTokenManager.html#MaxTimestampKey()"/> 
        /// </summary>
        public static string MaxTimestampKey
        {
            get { return SExecute<string>(LocalBridgeClazz, "MaxTimestampKey"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/DelegationTokenManager.html#OwnerKey()"/> 
        /// </summary>
        public static string OwnerKey
        {
            get { return SExecute<string>(LocalBridgeClazz, "OwnerKey"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/DelegationTokenManager.html#RenewersKey()"/> 
        /// </summary>
        public static string RenewersKey
        {
            get { return SExecute<string>(LocalBridgeClazz, "RenewersKey"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/DelegationTokenManager.html#TokenIdKey()"/> 
        /// </summary>
        public static string TokenIdKey
        {
            get { return SExecute<string>(LocalBridgeClazz, "TokenIdKey"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/DelegationTokenManager.html#TokenRequesterKey()"/> 
        /// </summary>
        public static string TokenRequesterKey
        {
            get { return SExecute<string>(LocalBridgeClazz, "TokenRequesterKey"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/DelegationTokenManager.html#VersionKey()"/> 
        /// </summary>
        public static string VersionKey
        {
            get { return SExecute<string>(LocalBridgeClazz, "VersionKey"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/DelegationTokenManager.html#createHmac(java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="tokenId"><see cref="string"/></param>
        /// <param name="secretKey"><see cref="string"/></param>
        /// <returns><see cref="byte"/></returns>
        public static byte[] CreateHmac(string tokenId, string secretKey)
        {
            return SExecuteArray<byte>(LocalBridgeClazz, "createHmac", tokenId, secretKey);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/DelegationTokenManager.html#createHmac(java.lang.String,javax.crypto.SecretKey)"/>
        /// </summary>
        /// <param name="tokenId"><see cref="string"/></param>
        /// <param name="secretKey"><see cref="Javax.Crypto.SecretKey"/></param>
        /// <returns><see cref="byte"/></returns>
        public static byte[] CreateHmac(string tokenId, Javax.Crypto.SecretKey secretKey)
        {
            return SExecuteArray<byte>(LocalBridgeClazz, "createHmac", tokenId, secretKey);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/DelegationTokenManager.html#createBase64HMAC(java.lang.String,javax.crypto.SecretKey)"/>
        /// </summary>
        /// <param name="tokenId"><see cref="string"/></param>
        /// <param name="secretKey"><see cref="Javax.Crypto.SecretKey"/></param>
        /// <returns><see cref="string"/></returns>
        public static string CreateBase64HMAC(string tokenId, Javax.Crypto.SecretKey secretKey)
        {
            return SExecute<string>(LocalBridgeClazz, "createBase64HMAC", tokenId, secretKey);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/DelegationTokenManager.html#createSecretKey(byte[])"/>
        /// </summary>
        /// <param name="keybytes"><see cref="byte"/></param>
        /// <returns><see cref="Javax.Crypto.SecretKey"/></returns>
        public static Javax.Crypto.SecretKey CreateSecretKey(byte[] keybytes)
        {
            return SExecute<Javax.Crypto.SecretKey>(LocalBridgeClazz, "createSecretKey", new object[] { keybytes });
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/DelegationTokenManager.html#config()"/> 
        /// </summary>
        public Kafka.Server.KafkaConfig Config
        {
            get { return IExecute<Kafka.Server.KafkaConfig>("config"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/DelegationTokenManager.html#defaultTokenRenewTime()"/> 
        /// </summary>
        public long DefaultTokenRenewTime
        {
            get { return IExecute<long>("defaultTokenRenewTime"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/DelegationTokenManager.html#isDebugEnabled()"/> 
        /// </summary>
        public bool IsDebugEnabled
        {
            get { return IExecute<bool>("isDebugEnabled"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/DelegationTokenManager.html#isTraceEnabled()"/> 
        /// </summary>
        public bool IsTraceEnabled
        {
            get { return IExecute<bool>("isTraceEnabled"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/DelegationTokenManager.html#logger()"/> 
        /// </summary>
        public Com.Typesafe.Scalalogging.Logger Logger
        {
            get { return IExecute<Com.Typesafe.Scalalogging.Logger>("logger"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/DelegationTokenManager.html#loggerName()"/> 
        /// </summary>
        public string LoggerName
        {
            get { return IExecute<string>("loggerName"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/DelegationTokenManager.html#logIdent()"/> 
        /// </summary>
        public string LogIdent
        {
            get { return IExecute<string>("logIdent"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/DelegationTokenManager.html#secretKey()"/> 
        /// </summary>
        public Javax.Crypto.SecretKey SecretKey
        {
            get { return IExecute<Javax.Crypto.SecretKey>("secretKey"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/DelegationTokenManager.html#time()"/> 
        /// </summary>
        public Org.Apache.Kafka.Common.Utils.Time Time
        {
            get { return IExecute<Org.Apache.Kafka.Common.Utils.Time>("time"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/DelegationTokenManager.html#tokenCache()"/> 
        /// </summary>
        public Org.Apache.Kafka.Common.Security.Token.Delegation.Internals.DelegationTokenCache TokenCache
        {
            get { return IExecute<Org.Apache.Kafka.Common.Security.Token.Delegation.Internals.DelegationTokenCache>("tokenCache"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/DelegationTokenManager.html#TokenChangedNotificationHandler()"/> 
        /// </summary>
        public Kafka.Server.DelegationTokenManager.TokenChangedNotificationHandler. TokenChangedNotificationHandler
        {
            get { return IExecute<Kafka.Server.DelegationTokenManager.TokenChangedNotificationHandler.>("TokenChangedNotificationHandler"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/DelegationTokenManager.html#tokenMaxLifetime()"/> 
        /// </summary>
        public long TokenMaxLifetime
        {
            get { return IExecute<long>("tokenMaxLifetime"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/DelegationTokenManager.html#tokenRemoverScanInterval()"/> 
        /// </summary>
        public long TokenRemoverScanInterval
        {
            get { return IExecute<long>("tokenRemoverScanInterval"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/DelegationTokenManager.html#zkClient()"/> 
        /// </summary>
        public Kafka.Zk.KafkaZkClient ZkClient
        {
            get { return IExecute<Kafka.Zk.KafkaZkClient>("zkClient"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/DelegationTokenManager.html#newMeter(com.yammer.metrics.core.MetricName,java.lang.String,java.util.concurrent.TimeUnit)"/>
        /// </summary>
        /// <param name="metricName"><see cref="Com.Yammer.Metrics.Core.MetricName"/></param>
        /// <param name="eventType"><see cref="string"/></param>
        /// <param name="timeUnit"><see cref="Java.Util.Concurrent.TimeUnit"/></param>
        /// <returns><see cref="Com.Yammer.Metrics.Core.Meter"/></returns>
        public Com.Yammer.Metrics.Core.Meter NewMeter(Com.Yammer.Metrics.Core.MetricName metricName, string eventType, Java.Util.Concurrent.TimeUnit timeUnit)
        {
            return IExecute<Com.Yammer.Metrics.Core.Meter>("newMeter", metricName, eventType, timeUnit);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/DelegationTokenManager.html#msgWithLogIdent(java.lang.String)"/>
        /// </summary>
        /// <param name="msg"><see cref="string"/></param>
        /// <returns><see cref="string"/></returns>
        public string MsgWithLogIdent(string msg)
        {
            return IExecute<string>("msgWithLogIdent", msg);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/DelegationTokenManager.html#expireTokens()"/>
        /// </summary>
        public void ExpireTokens()
        {
            IExecute("expireTokens");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/DelegationTokenManager.html#shutdown()"/>
        /// </summary>
        public void Shutdown()
        {
            IExecute("shutdown");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/DelegationTokenManager.html#startup()"/>
        /// </summary>
        public void Startup()
        {
            IExecute("startup");
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}