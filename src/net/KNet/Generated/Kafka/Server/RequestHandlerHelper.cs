/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka_2.13-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Kafka.Server
{
    #region RequestHandlerHelper
    public partial class RequestHandlerHelper
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/RequestHandlerHelper.html#%3Cinit%3E(kafka.network.RequestChannel,kafka.server.QuotaFactory.QuotaManagers,org.apache.kafka.common.utils.Time)"/>
        /// </summary>
        /// <param name="requestChannel"><see cref="Kafka.Network.RequestChannel"/></param>
        /// <param name="quotas"><see cref="Kafka.Server.QuotaFactory.QuotaManagers"/></param>
        /// <param name="time"><see cref="Org.Apache.Kafka.Common.Utils.Time"/></param>
        public RequestHandlerHelper(Kafka.Network.RequestChannel requestChannel, Kafka.Server.QuotaFactory.QuotaManagers quotas, Org.Apache.Kafka.Common.Utils.Time time)
            : base(requestChannel, quotas, time)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/RequestHandlerHelper.html#kafka$server$RequestHandlerHelper$$requestChannel"/>
        /// </summary>
        public Kafka.Network.RequestChannel kafka$server$RequestHandlerHelper$$requestChannel { get { return IGetField<Kafka.Network.RequestChannel>("kafka$server$RequestHandlerHelper$$requestChannel"); } }

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/RequestHandlerHelper.html#maybeRecordAndGetThrottleTimeMs(kafka.network.RequestChannel.Request)"/>
        /// </summary>
        /// <param name="request"><see cref="Kafka.Network.RequestChannel.Request"/></param>
        /// <returns><see cref="int"/></returns>
        public int MaybeRecordAndGetThrottleTimeMs(Kafka.Network.RequestChannel.Request request)
        {
            return IExecute<int>("maybeRecordAndGetThrottleTimeMs", request);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/RequestHandlerHelper.html#handleError(kafka.network.RequestChannel.Request,java.lang.Throwable)"/>
        /// </summary>
        /// <param name="request"><see cref="Kafka.Network.RequestChannel.Request"/></param>
        /// <param name="e"><see cref="Java.Lang.Throwable"/></param>
        public void HandleError(Kafka.Network.RequestChannel.Request request, Java.Lang.Throwable e)
        {
            IExecute("handleError", request, e);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/RequestHandlerHelper.html#sendErrorOrCloseConnection(kafka.network.RequestChannel.Request,java.lang.Throwable,int)"/>
        /// </summary>
        /// <param name="request"><see cref="Kafka.Network.RequestChannel.Request"/></param>
        /// <param name="error"><see cref="Java.Lang.Throwable"/></param>
        /// <param name="throttleMs"><see cref="int"/></param>
        public void SendErrorOrCloseConnection(Kafka.Network.RequestChannel.Request request, Java.Lang.Throwable error, int throttleMs)
        {
            IExecute("sendErrorOrCloseConnection", request, error, throttleMs);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/RequestHandlerHelper.html#sendErrorResponseExemptThrottle(kafka.network.RequestChannel.Request,java.lang.Throwable)"/>
        /// </summary>
        /// <param name="request"><see cref="Kafka.Network.RequestChannel.Request"/></param>
        /// <param name="error"><see cref="Java.Lang.Throwable"/></param>
        public void SendErrorResponseExemptThrottle(Kafka.Network.RequestChannel.Request request, Java.Lang.Throwable error)
        {
            IExecute("sendErrorResponseExemptThrottle", request, error);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/RequestHandlerHelper.html#sendErrorResponseMaybeThrottle(kafka.network.RequestChannel.Request,java.lang.Throwable)"/>
        /// </summary>
        /// <param name="request"><see cref="Kafka.Network.RequestChannel.Request"/></param>
        /// <param name="error"><see cref="Java.Lang.Throwable"/></param>
        public void SendErrorResponseMaybeThrottle(Kafka.Network.RequestChannel.Request request, Java.Lang.Throwable error)
        {
            IExecute("sendErrorResponseMaybeThrottle", request, error);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/RequestHandlerHelper.html#sendForwardedResponse(kafka.network.RequestChannel.Request,org.apache.kafka.common.requests.AbstractResponse)"/>
        /// </summary>
        /// <param name="request"><see cref="Kafka.Network.RequestChannel.Request"/></param>
        /// <param name="response"><see cref="Org.Apache.Kafka.Common.Requests.AbstractResponse"/></param>
        public void SendForwardedResponse(Kafka.Network.RequestChannel.Request request, Org.Apache.Kafka.Common.Requests.AbstractResponse response)
        {
            IExecute("sendForwardedResponse", request, response);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/RequestHandlerHelper.html#sendMaybeThrottle(kafka.network.RequestChannel.Request,org.apache.kafka.common.requests.AbstractResponse)"/>
        /// </summary>
        /// <param name="request"><see cref="Kafka.Network.RequestChannel.Request"/></param>
        /// <param name="response"><see cref="Org.Apache.Kafka.Common.Requests.AbstractResponse"/></param>
        public void SendMaybeThrottle(Kafka.Network.RequestChannel.Request request, Org.Apache.Kafka.Common.Requests.AbstractResponse response)
        {
            IExecute("sendMaybeThrottle", request, response);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/RequestHandlerHelper.html#sendNoOpResponseExemptThrottle(kafka.network.RequestChannel.Request)"/>
        /// </summary>
        /// <param name="request"><see cref="Kafka.Network.RequestChannel.Request"/></param>
        public void SendNoOpResponseExemptThrottle(Kafka.Network.RequestChannel.Request request)
        {
            IExecute("sendNoOpResponseExemptThrottle", request);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/RequestHandlerHelper.html#throttle(kafka.server.ClientQuotaManager,kafka.network.RequestChannel.Request,int)"/>
        /// </summary>
        /// <param name="quotaManager"><see cref="Kafka.Server.ClientQuotaManager"/></param>
        /// <param name="request"><see cref="Kafka.Network.RequestChannel.Request"/></param>
        /// <param name="throttleTimeMs"><see cref="int"/></param>
        public void Throttle(Kafka.Server.ClientQuotaManager quotaManager, Kafka.Network.RequestChannel.Request request, int throttleTimeMs)
        {
            IExecute("throttle", quotaManager, request, throttleTimeMs);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}