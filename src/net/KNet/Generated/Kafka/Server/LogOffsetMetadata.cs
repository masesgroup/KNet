/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka_2.13-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Kafka.Server
{
    #region LogOffsetMetadata
    public partial class LogOffsetMetadata
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/LogOffsetMetadata.html#%3Cinit%3E(long,long,int)"/>
        /// </summary>
        /// <param name="messageOffset"><see cref="long"/></param>
        /// <param name="segmentBaseOffset"><see cref="long"/></param>
        /// <param name="relativePositionInSegment"><see cref="int"/></param>
        public LogOffsetMetadata(long messageOffset, long segmentBaseOffset, int relativePositionInSegment)
            : base(messageOffset, segmentBaseOffset, relativePositionInSegment)
        {
        }

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Kafka.Server.LogOffsetMetadata"/> to <see cref="Java.Io.Serializable"/>
        /// </summary>
        public static implicit operator Java.Io.Serializable(Kafka.Server.LogOffsetMetadata t) => t.Cast<Java.Io.Serializable>();

        #endregion

        #region Fields

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/LogOffsetMetadata.html#UnknownFilePosition()"/> 
        /// </summary>
        public static int UnknownFilePosition
        {
            get { return SExecute<int>(LocalBridgeClazz, "UnknownFilePosition"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/LogOffsetMetadata.html#UnknownOffsetMetadata()"/> 
        /// </summary>
        public static Kafka.Server.LogOffsetMetadata UnknownOffsetMetadata
        {
            get { return SExecute<Kafka.Server.LogOffsetMetadata>(LocalBridgeClazz, "UnknownOffsetMetadata"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/LogOffsetMetadata.html#apply(long,long,int)"/>
        /// </summary>
        /// <param name="messageOffset"><see cref="long"/></param>
        /// <param name="segmentBaseOffset"><see cref="long"/></param>
        /// <param name="relativePositionInSegment"><see cref="int"/></param>
        /// <returns><see cref="Kafka.Server.LogOffsetMetadata"/></returns>
        public static Kafka.Server.LogOffsetMetadata Apply(long messageOffset, long segmentBaseOffset, int relativePositionInSegment)
        {
            return SExecute<Kafka.Server.LogOffsetMetadata>(LocalBridgeClazz, "apply", messageOffset, segmentBaseOffset, relativePositionInSegment);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/LogOffsetMetadata.html#messageOffset()"/> 
        /// </summary>
        public long MessageOffset
        {
            get { return IExecute<long>("messageOffset"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/LogOffsetMetadata.html#messageOffsetOnly()"/> 
        /// </summary>
        public bool MessageOffsetOnly
        {
            get { return IExecute<bool>("messageOffsetOnly"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/LogOffsetMetadata.html#productArity()"/> 
        /// </summary>
        public int ProductArity
        {
            get { return IExecute<int>("productArity"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/LogOffsetMetadata.html#productPrefix()"/> 
        /// </summary>
        public string ProductPrefix
        {
            get { return IExecute<string>("productPrefix"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/LogOffsetMetadata.html#relativePositionInSegment()"/> 
        /// </summary>
        public int RelativePositionInSegment
        {
            get { return IExecute<int>("relativePositionInSegment"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/LogOffsetMetadata.html#segmentBaseOffset()"/> 
        /// </summary>
        public long SegmentBaseOffset
        {
            get { return IExecute<long>("segmentBaseOffset"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/LogOffsetMetadata.html#canEqual(java.lang.Object)"/>
        /// </summary>
        /// <param name="x$1"><see cref="object"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool CanEqual(object x_1)
        {
            return IExecute<bool>("canEqual", x_1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/LogOffsetMetadata.html#onOlderSegment(kafka.server.LogOffsetMetadata)"/>
        /// </summary>
        /// <param name="that"><see cref="Kafka.Server.LogOffsetMetadata"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool OnOlderSegment(Kafka.Server.LogOffsetMetadata that)
        {
            return IExecute<bool>("onOlderSegment", that);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/LogOffsetMetadata.html#onSameSegment(kafka.server.LogOffsetMetadata)"/>
        /// </summary>
        /// <param name="that"><see cref="Kafka.Server.LogOffsetMetadata"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool OnSameSegment(Kafka.Server.LogOffsetMetadata that)
        {
            return IExecute<bool>("onSameSegment", that);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/LogOffsetMetadata.html#positionDiff(kafka.server.LogOffsetMetadata)"/>
        /// </summary>
        /// <param name="that"><see cref="Kafka.Server.LogOffsetMetadata"/></param>
        /// <returns><see cref="int"/></returns>
        public int PositionDiff(Kafka.Server.LogOffsetMetadata that)
        {
            return IExecute<int>("positionDiff", that);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/LogOffsetMetadata.html#productElement(int)"/>
        /// </summary>
        /// <param name="x$1"><see cref="int"/></param>
        /// <returns><see cref="object"/></returns>
        public object ProductElement(int x_1)
        {
            return IExecute("productElement", x_1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/LogOffsetMetadata.html#productElementName(int)"/>
        /// </summary>
        /// <param name="x$1"><see cref="int"/></param>
        /// <returns><see cref="string"/></returns>
        public string ProductElementName(int x_1)
        {
            return IExecute<string>("productElementName", x_1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/LogOffsetMetadata.html#copy(long,long,int)"/>
        /// </summary>
        /// <param name="messageOffset"><see cref="long"/></param>
        /// <param name="segmentBaseOffset"><see cref="long"/></param>
        /// <param name="relativePositionInSegment"><see cref="int"/></param>
        /// <returns><see cref="Kafka.Server.LogOffsetMetadata"/></returns>
        public Kafka.Server.LogOffsetMetadata Copy(long messageOffset, long segmentBaseOffset, int relativePositionInSegment)
        {
            return IExecute<Kafka.Server.LogOffsetMetadata>("copy", messageOffset, segmentBaseOffset, relativePositionInSegment);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/LogOffsetMetadata.html#offsetDiff(kafka.server.LogOffsetMetadata)"/>
        /// </summary>
        /// <param name="that"><see cref="Kafka.Server.LogOffsetMetadata"/></param>
        /// <returns><see cref="long"/></returns>
        public long OffsetDiff(Kafka.Server.LogOffsetMetadata that)
        {
            return IExecute<long>("offsetDiff", that);
        }

        #endregion

        #region Nested classes
        #region OffsetOrdering
        public partial class OffsetOrdering
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/LogOffsetMetadata.OffsetOrdering.html#equiv(java.lang.Object,java.lang.Object)"/>
            /// </summary>
            /// <param name="x"><see cref="object"/></param>
            /// <param name="y"><see cref="object"/></param>
            /// <returns><see cref="bool"/></returns>
            public bool Equiv(object x, object y)
            {
                return IExecute<bool>("equiv", x, y);
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/LogOffsetMetadata.OffsetOrdering.html#gt(java.lang.Object,java.lang.Object)"/>
            /// </summary>
            /// <param name="x"><see cref="object"/></param>
            /// <param name="y"><see cref="object"/></param>
            /// <returns><see cref="bool"/></returns>
            public bool Gt(object x, object y)
            {
                return IExecute<bool>("gt", x, y);
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/LogOffsetMetadata.OffsetOrdering.html#gteq(java.lang.Object,java.lang.Object)"/>
            /// </summary>
            /// <param name="x"><see cref="object"/></param>
            /// <param name="y"><see cref="object"/></param>
            /// <returns><see cref="bool"/></returns>
            public bool Gteq(object x, object y)
            {
                return IExecute<bool>("gteq", x, y);
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/LogOffsetMetadata.OffsetOrdering.html#lt(java.lang.Object,java.lang.Object)"/>
            /// </summary>
            /// <param name="x"><see cref="object"/></param>
            /// <param name="y"><see cref="object"/></param>
            /// <returns><see cref="bool"/></returns>
            public bool Lt(object x, object y)
            {
                return IExecute<bool>("lt", x, y);
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/LogOffsetMetadata.OffsetOrdering.html#lteq(java.lang.Object,java.lang.Object)"/>
            /// </summary>
            /// <param name="x"><see cref="object"/></param>
            /// <param name="y"><see cref="object"/></param>
            /// <returns><see cref="bool"/></returns>
            public bool Lteq(object x, object y)
            {
                return IExecute<bool>("lteq", x, y);
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/LogOffsetMetadata.OffsetOrdering.html#compare(java.lang.Object,java.lang.Object)"/>
            /// </summary>
            /// <param name="x"><see cref="object"/></param>
            /// <param name="y"><see cref="object"/></param>
            /// <returns><see cref="int"/></returns>
            public int Compare(object x, object y)
            {
                return IExecute<int>("compare", x, y);
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/LogOffsetMetadata.OffsetOrdering.html#compare(kafka.server.LogOffsetMetadata,kafka.server.LogOffsetMetadata)"/>
            /// </summary>
            /// <param name="x"><see cref="Kafka.Server.LogOffsetMetadata"/></param>
            /// <param name="y"><see cref="Kafka.Server.LogOffsetMetadata"/></param>
            /// <returns><see cref="int"/></returns>
            public int Compare(Kafka.Server.LogOffsetMetadata x, Kafka.Server.LogOffsetMetadata y)
            {
                return IExecute<int>("compare", x, y);
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/LogOffsetMetadata.OffsetOrdering.html#max(java.lang.Object,java.lang.Object)"/>
            /// </summary>
            /// <param name="x"><see cref="object"/></param>
            /// <param name="y"><see cref="object"/></param>
            /// <returns><see cref="object"/></returns>
            public object Max(object x, object y)
            {
                return IExecute("max", x, y);
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/LogOffsetMetadata.OffsetOrdering.html#min(java.lang.Object,java.lang.Object)"/>
            /// </summary>
            /// <param name="x"><see cref="object"/></param>
            /// <param name="y"><see cref="object"/></param>
            /// <returns><see cref="object"/></returns>
            public object Min(object x, object y)
            {
                return IExecute("min", x, y);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}