/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka_2.13-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Kafka.Server
{
    #region SharedServer
    public partial class SharedServer
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Kafka.Server.SharedServer"/> to <see cref="Kafka.Utils.Logging"/>
        /// </summary>
        public static implicit operator Kafka.Utils.Logging(Kafka.Server.SharedServer t) => t.Cast<Kafka.Utils.Logging>();

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/SharedServer.html#brokerConfig()"/> 
        /// </summary>
        public Kafka.Server.KafkaConfig BrokerConfig
        {
            get { return IExecute<Kafka.Server.KafkaConfig>("brokerConfig"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/SharedServer.html#brokerMetrics()"/> 
        /// </summary>
        public Kafka.Server.Metadata.BrokerServerMetrics BrokerMetrics
        {
            get { return IExecute<Kafka.Server.Metadata.BrokerServerMetrics>("brokerMetrics"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/SharedServer.html#controllerConfig()"/> 
        /// </summary>
        public Kafka.Server.KafkaConfig ControllerConfig
        {
            get { return IExecute<Kafka.Server.KafkaConfig>("controllerConfig"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/SharedServer.html#controllerMetrics()"/> 
        /// </summary>
        public Org.Apache.Kafka.Controller.QuorumControllerMetrics ControllerMetrics
        {
            get { return IExecute<Org.Apache.Kafka.Controller.QuorumControllerMetrics>("controllerMetrics"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/SharedServer.html#controllerQuorumVotersFuture()"/> 
        /// </summary>
        public Java.Util.Concurrent.CompletableFuture<Java.Util.Map<int?, Org.Apache.Kafka.Raft.RaftConfig.AddressSpec>> ControllerQuorumVotersFuture
        {
            get { return IExecute<Java.Util.Concurrent.CompletableFuture<Java.Util.Map<int?, Org.Apache.Kafka.Raft.RaftConfig.AddressSpec>>>("controllerQuorumVotersFuture"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/SharedServer.html#faultHandlerFactory()"/> 
        /// </summary>
        public Kafka.Server.FaultHandlerFactory FaultHandlerFactory
        {
            get { return IExecute<Kafka.Server.FaultHandlerFactory>("faultHandlerFactory"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/SharedServer.html#initialBrokerMetadataLoadFaultHandler()"/> 
        /// </summary>
        public Org.Apache.Kafka.Server.Fault.FaultHandler InitialBrokerMetadataLoadFaultHandler
        {
            get { return IExecute<Org.Apache.Kafka.Server.Fault.FaultHandler>("initialBrokerMetadataLoadFaultHandler"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/SharedServer.html#isDebugEnabled()"/> 
        /// </summary>
        public bool IsDebugEnabled
        {
            get { return IExecute<bool>("isDebugEnabled"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/SharedServer.html#isTraceEnabled()"/> 
        /// </summary>
        public bool IsTraceEnabled
        {
            get { return IExecute<bool>("isTraceEnabled"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/SharedServer.html#isUsed()"/> 
        /// </summary>
        public bool IsUsed
        {
            get { return IExecute<bool>("isUsed"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/SharedServer.html#loader()"/> 
        /// </summary>
        public Org.Apache.Kafka.Image.Loader.MetadataLoader Loader
        {
            get { return IExecute<Org.Apache.Kafka.Image.Loader.MetadataLoader>("loader"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/SharedServer.html#logger()"/> 
        /// </summary>
        public Com.Typesafe.Scalalogging.Logger Logger
        {
            get { return IExecute<Com.Typesafe.Scalalogging.Logger>("logger"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/SharedServer.html#loggerName()"/> 
        /// </summary>
        public string LoggerName
        {
            get { return IExecute<string>("loggerName"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/SharedServer.html#logIdent()"/> 
        /// </summary>
        public string LogIdent
        {
            get { return IExecute<string>("logIdent"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/SharedServer.html#metadataLoaderFaultHandler()"/> 
        /// </summary>
        public Org.Apache.Kafka.Server.Fault.FaultHandler MetadataLoaderFaultHandler
        {
            get { return IExecute<Org.Apache.Kafka.Server.Fault.FaultHandler>("metadataLoaderFaultHandler"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/SharedServer.html#metadataPublishingFaultHandler()"/> 
        /// </summary>
        public Org.Apache.Kafka.Server.Fault.FaultHandler MetadataPublishingFaultHandler
        {
            get { return IExecute<Org.Apache.Kafka.Server.Fault.FaultHandler>("metadataPublishingFaultHandler"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/SharedServer.html#metaProps()"/> 
        /// </summary>
        public Kafka.Server.MetaProperties MetaProps
        {
            get { return IExecute<Kafka.Server.MetaProperties>("metaProps"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/SharedServer.html#metrics()"/> 
        /// </summary>
        public Org.Apache.Kafka.Common.Metrics.Metrics Metrics
        {
            get { return IExecute<Org.Apache.Kafka.Common.Metrics.Metrics>("metrics"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/SharedServer.html#quorumControllerFaultHandler()"/> 
        /// </summary>
        public Org.Apache.Kafka.Server.Fault.FaultHandler QuorumControllerFaultHandler
        {
            get { return IExecute<Org.Apache.Kafka.Server.Fault.FaultHandler>("quorumControllerFaultHandler"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/SharedServer.html#raftManager()"/> 
        /// </summary>
        public Kafka.Raft.KafkaRaftManager<Org.Apache.Kafka.Server.Common.ApiMessageAndVersion> RaftManager
        {
            get { return IExecute<Kafka.Raft.KafkaRaftManager<Org.Apache.Kafka.Server.Common.ApiMessageAndVersion>>("raftManager"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/SharedServer.html#snapshotEmitter()"/> 
        /// </summary>
        public Org.Apache.Kafka.Image.Publisher.SnapshotEmitter SnapshotEmitter
        {
            get { return IExecute<Org.Apache.Kafka.Image.Publisher.SnapshotEmitter>("snapshotEmitter"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/SharedServer.html#snapshotGenerator()"/> 
        /// </summary>
        public Org.Apache.Kafka.Image.Publisher.SnapshotGenerator SnapshotGenerator
        {
            get { return IExecute<Org.Apache.Kafka.Image.Publisher.SnapshotGenerator>("snapshotGenerator"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/SharedServer.html#snapshotsDiabledReason()"/> 
        /// </summary>
        public Java.Util.Concurrent.Atomic.AtomicReference<string> SnapshotsDiabledReason
        {
            get { return IExecute<Java.Util.Concurrent.Atomic.AtomicReference<string>>("snapshotsDiabledReason"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/SharedServer.html#time()"/> 
        /// </summary>
        public Org.Apache.Kafka.Common.Utils.Time Time
        {
            get { return IExecute<Org.Apache.Kafka.Common.Utils.Time>("time"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/SharedServer.html#msgWithLogIdent(java.lang.String)"/>
        /// </summary>
        /// <param name="msg"><see cref="string"/></param>
        /// <returns><see cref="string"/></returns>
        public string MsgWithLogIdent(string msg)
        {
            return IExecute<string>("msgWithLogIdent", msg);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/SharedServer.html#ensureNotRaftLeader()"/>
        /// </summary>
        public void EnsureNotRaftLeader()
        {
            IExecute("ensureNotRaftLeader");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/SharedServer.html#startForBroker()"/>
        /// </summary>
        public void StartForBroker()
        {
            IExecute("startForBroker");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/SharedServer.html#startForController()"/>
        /// </summary>
        public void StartForController()
        {
            IExecute("startForController");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/SharedServer.html#stopForBroker()"/>
        /// </summary>
        public void StopForBroker()
        {
            IExecute("stopForBroker");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/SharedServer.html#stopForController()"/>
        /// </summary>
        public void StopForController()
        {
            IExecute("stopForController");
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}