/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka_2.13-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Kafka.Server
{
    #region ReplicaManager
    public partial class ReplicaManager
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Kafka.Server.ReplicaManager"/> to <see cref="Kafka.Metrics.KafkaMetricsGroup"/>
        /// </summary>
        public static implicit operator Kafka.Metrics.KafkaMetricsGroup(Kafka.Server.ReplicaManager t) => t.Cast<Kafka.Metrics.KafkaMetricsGroup>();

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ReplicaManager.html#kafka$server$ReplicaManager$$logDirFailureChannel"/>
        /// </summary>
        public Kafka.Server.LogDirFailureChannel kafka$server$ReplicaManager$$logDirFailureChannel { get { return IGetField<Kafka.Server.LogDirFailureChannel>("kafka$server$ReplicaManager$$logDirFailureChannel"); } }

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ReplicaManager.html#HighWatermarkFilename()"/> 
        /// </summary>
        public static string HighWatermarkFilename
        {
            get { return SExecute<string>(LocalBridgeClazz, "HighWatermarkFilename"); }
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ReplicaManager.html#allPartitions()"/> 
        /// </summary>
        public Kafka.Utils.Pool<Org.Apache.Kafka.Common.TopicPartition, Kafka.Server.HostedPartition> AllPartitions
        {
            get { return IExecute<Kafka.Utils.Pool<Org.Apache.Kafka.Common.TopicPartition, Kafka.Server.HostedPartition>>("allPartitions"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ReplicaManager.html#alterPartitionManager()"/> 
        /// </summary>
        public Kafka.Server.AlterPartitionManager AlterPartitionManager
        {
            get { return IExecute<Kafka.Server.AlterPartitionManager>("alterPartitionManager"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ReplicaManager.html#brokerTopicStats()"/> 
        /// </summary>
        public Kafka.Server.BrokerTopicStats BrokerTopicStats
        {
            get { return IExecute<Kafka.Server.BrokerTopicStats>("brokerTopicStats"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ReplicaManager.html#config()"/> 
        /// </summary>
        public Kafka.Server.KafkaConfig Config
        {
            get { return IExecute<Kafka.Server.KafkaConfig>("config"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ReplicaManager.html#controllerEpoch()"/> 
        /// </summary>
        public int ControllerEpoch
        {
            get { return IExecute<int>("controllerEpoch"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ReplicaManager.html#delayedDeleteRecordsPurgatory()"/> 
        /// </summary>
        public Kafka.Server.DelayedOperationPurgatory<Kafka.Server.DelayedDeleteRecords> DelayedDeleteRecordsPurgatory
        {
            get { return IExecute<Kafka.Server.DelayedOperationPurgatory<Kafka.Server.DelayedDeleteRecords>>("delayedDeleteRecordsPurgatory"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ReplicaManager.html#delayedElectLeaderPurgatory()"/> 
        /// </summary>
        public Kafka.Server.DelayedOperationPurgatory<Kafka.Server.DelayedElectLeader> DelayedElectLeaderPurgatory
        {
            get { return IExecute<Kafka.Server.DelayedOperationPurgatory<Kafka.Server.DelayedElectLeader>>("delayedElectLeaderPurgatory"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ReplicaManager.html#delayedFetchPurgatory()"/> 
        /// </summary>
        public Kafka.Server.DelayedOperationPurgatory<Kafka.Server.DelayedFetch> DelayedFetchPurgatory
        {
            get { return IExecute<Kafka.Server.DelayedOperationPurgatory<Kafka.Server.DelayedFetch>>("delayedFetchPurgatory"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ReplicaManager.html#delayedProducePurgatory()"/> 
        /// </summary>
        public Kafka.Server.DelayedOperationPurgatory<Kafka.Server.DelayedProduce> DelayedProducePurgatory
        {
            get { return IExecute<Kafka.Server.DelayedOperationPurgatory<Kafka.Server.DelayedProduce>>("delayedProducePurgatory"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ReplicaManager.html#failedIsrUpdatesRate()"/> 
        /// </summary>
        public Com.Yammer.Metrics.Core.Meter FailedIsrUpdatesRate
        {
            get { return IExecute<Com.Yammer.Metrics.Core.Meter>("failedIsrUpdatesRate"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ReplicaManager.html#hasDelayedElectionOperations()"/> 
        /// </summary>
        public bool HasDelayedElectionOperations
        {
            get { return IExecute<bool>("hasDelayedElectionOperations"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ReplicaManager.html#isDebugEnabled()"/> 
        /// </summary>
        public bool IsDebugEnabled
        {
            get { return IExecute<bool>("isDebugEnabled"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ReplicaManager.html#isrExpandRate()"/> 
        /// </summary>
        public Com.Yammer.Metrics.Core.Meter IsrExpandRate
        {
            get { return IExecute<Com.Yammer.Metrics.Core.Meter>("isrExpandRate"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ReplicaManager.html#isrShrinkRate()"/> 
        /// </summary>
        public Com.Yammer.Metrics.Core.Meter IsrShrinkRate
        {
            get { return IExecute<Com.Yammer.Metrics.Core.Meter>("isrShrinkRate"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ReplicaManager.html#isShuttingDown()"/> 
        /// </summary>
        public Java.Util.Concurrent.Atomic.AtomicBoolean IsShuttingDown
        {
            get { return IExecute<Java.Util.Concurrent.Atomic.AtomicBoolean>("isShuttingDown"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ReplicaManager.html#isTraceEnabled()"/> 
        /// </summary>
        public bool IsTraceEnabled
        {
            get { return IExecute<bool>("isTraceEnabled"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ReplicaManager.html#localBrokerId()"/> 
        /// </summary>
        public int LocalBrokerId
        {
            get { return IExecute<int>("localBrokerId"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ReplicaManager.html#logger()"/> 
        /// </summary>
        public Com.Typesafe.Scalalogging.Logger Logger
        {
            get { return IExecute<Com.Typesafe.Scalalogging.Logger>("logger"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ReplicaManager.html#loggerName()"/> 
        /// </summary>
        public string LoggerName
        {
            get { return IExecute<string>("loggerName"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ReplicaManager.html#logIdent()"/> 
        /// </summary>
        public string LogIdent
        {
            get { return IExecute<string>("logIdent"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ReplicaManager.html#logManager()"/> 
        /// </summary>
        public Kafka.Log.LogManager LogManager
        {
            get { return IExecute<Kafka.Log.LogManager>("logManager"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ReplicaManager.html#metadataCache()"/> 
        /// </summary>
        public Kafka.Server.MetadataCache MetadataCache
        {
            get { return IExecute<Kafka.Server.MetadataCache>("metadataCache"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ReplicaManager.html#partitionCount()"/> 
        /// </summary>
        public Com.Yammer.Metrics.Core.Gauge<object> PartitionCount
        {
            get { return IExecute<Com.Yammer.Metrics.Core.Gauge<object>>("partitionCount"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ReplicaManager.html#reassigningPartitionsCount()"/> 
        /// </summary>
        public int ReassigningPartitionsCount
        {
            get { return IExecute<int>("reassigningPartitionsCount"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ReplicaManager.html#replicaAlterLogDirsManager()"/> 
        /// </summary>
        public Kafka.Server.ReplicaAlterLogDirsManager ReplicaAlterLogDirsManager
        {
            get { return IExecute<Kafka.Server.ReplicaAlterLogDirsManager>("replicaAlterLogDirsManager"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ReplicaManager.html#replicaFetcherManager()"/> 
        /// </summary>
        public Kafka.Server.ReplicaFetcherManager ReplicaFetcherManager
        {
            get { return IExecute<Kafka.Server.ReplicaFetcherManager>("replicaFetcherManager"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ReplicaManager.html#replicaStateChangeLock()"/> 
        /// </summary>
        public object ReplicaStateChangeLock
        {
            get { return IExecute("replicaStateChangeLock"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ReplicaManager.html#stateChangeLogger()"/> 
        /// </summary>
        public Kafka.Controller.StateChangeLogger StateChangeLogger
        {
            get { return IExecute<Kafka.Controller.StateChangeLogger>("stateChangeLogger"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ReplicaManager.html#underReplicatedPartitionCount()"/> 
        /// </summary>
        public int UnderReplicatedPartitionCount
        {
            get { return IExecute<int>("underReplicatedPartitionCount"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ReplicaManager.html#futureLogExists(org.apache.kafka.common.TopicPartition)"/>
        /// </summary>
        /// <param name="topicPartition"><see cref="Org.Apache.Kafka.Common.TopicPartition"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool FutureLogExists(Org.Apache.Kafka.Common.TopicPartition topicPartition)
        {
            return IExecute<bool>("futureLogExists", topicPartition);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ReplicaManager.html#isAddingReplica(org.apache.kafka.common.TopicPartition,int)"/>
        /// </summary>
        /// <param name="topicPartition"><see cref="Org.Apache.Kafka.Common.TopicPartition"/></param>
        /// <param name="replicaId"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsAddingReplica(Org.Apache.Kafka.Common.TopicPartition topicPartition, int replicaId)
        {
            return IExecute<bool>("isAddingReplica", topicPartition, replicaId);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ReplicaManager.html#shouldLeaderThrottle(kafka.server.ReplicaQuota,kafka.cluster.Partition,int)"/>
        /// </summary>
        /// <param name="quota"><see cref="Kafka.Server.ReplicaQuota"/></param>
        /// <param name="partition"><see cref="Kafka.Cluster.Partition"/></param>
        /// <param name="replicaId"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool ShouldLeaderThrottle(Kafka.Server.ReplicaQuota quota, Kafka.Cluster.Partition partition, int replicaId)
        {
            return IExecute<bool>("shouldLeaderThrottle", quota, partition, replicaId);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ReplicaManager.html#newMeter(com.yammer.metrics.core.MetricName,java.lang.String,java.util.concurrent.TimeUnit)"/>
        /// </summary>
        /// <param name="metricName"><see cref="Com.Yammer.Metrics.Core.MetricName"/></param>
        /// <param name="eventType"><see cref="string"/></param>
        /// <param name="timeUnit"><see cref="Java.Util.Concurrent.TimeUnit"/></param>
        /// <returns><see cref="Com.Yammer.Metrics.Core.Meter"/></returns>
        public Com.Yammer.Metrics.Core.Meter NewMeter(Com.Yammer.Metrics.Core.MetricName metricName, string eventType, Java.Util.Concurrent.TimeUnit timeUnit)
        {
            return IExecute<Com.Yammer.Metrics.Core.Meter>("newMeter", metricName, eventType, timeUnit);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ReplicaManager.html#msgWithLogIdent(java.lang.String)"/>
        /// </summary>
        /// <param name="msg"><see cref="string"/></param>
        /// <returns><see cref="string"/></returns>
        public string MsgWithLogIdent(string msg)
        {
            return IExecute<string>("msgWithLogIdent", msg);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ReplicaManager.html#createPartition(org.apache.kafka.common.TopicPartition)"/>
        /// </summary>
        /// <param name="topicPartition"><see cref="Org.Apache.Kafka.Common.TopicPartition"/></param>
        /// <returns><see cref="Kafka.Cluster.Partition"/></returns>
        public Kafka.Cluster.Partition CreatePartition(Org.Apache.Kafka.Common.TopicPartition topicPartition)
        {
            return IExecute<Kafka.Cluster.Partition>("createPartition", topicPartition);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ReplicaManager.html#getPartitionOrException(org.apache.kafka.common.TopicPartition)"/>
        /// </summary>
        /// <param name="topicPartition"><see cref="Org.Apache.Kafka.Common.TopicPartition"/></param>
        /// <returns><see cref="Kafka.Cluster.Partition"/></returns>
        public Kafka.Cluster.Partition GetPartitionOrException(Org.Apache.Kafka.Common.TopicPartition topicPartition)
        {
            return IExecute<Kafka.Cluster.Partition>("getPartitionOrException", topicPartition);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ReplicaManager.html#futureLocalLogOrException(org.apache.kafka.common.TopicPartition)"/>
        /// </summary>
        /// <param name="topicPartition"><see cref="Org.Apache.Kafka.Common.TopicPartition"/></param>
        /// <returns><see cref="Kafka.Log.UnifiedLog"/></returns>
        public Kafka.Log.UnifiedLog FutureLocalLogOrException(Org.Apache.Kafka.Common.TopicPartition topicPartition)
        {
            return IExecute<Kafka.Log.UnifiedLog>("futureLocalLogOrException", topicPartition);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ReplicaManager.html#localLogOrException(org.apache.kafka.common.TopicPartition)"/>
        /// </summary>
        /// <param name="topicPartition"><see cref="Org.Apache.Kafka.Common.TopicPartition"/></param>
        /// <returns><see cref="Kafka.Log.UnifiedLog"/></returns>
        public Kafka.Log.UnifiedLog LocalLogOrException(Org.Apache.Kafka.Common.TopicPartition topicPartition)
        {
            return IExecute<Kafka.Log.UnifiedLog>("localLogOrException", topicPartition);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ReplicaManager.html#getPartition(org.apache.kafka.common.TopicPartition)"/>
        /// </summary>
        /// <param name="topicPartition"><see cref="Org.Apache.Kafka.Common.TopicPartition"/></param>
        /// <returns><see cref="Kafka.Server.HostedPartition"/></returns>
        public Kafka.Server.HostedPartition GetPartition(Org.Apache.Kafka.Common.TopicPartition topicPartition)
        {
            return IExecute<Kafka.Server.HostedPartition>("getPartition", topicPartition);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ReplicaManager.html#createReplicaAlterLogDirsManager(kafka.server.ReplicationQuotaManager,kafka.server.BrokerTopicStats)"/>
        /// </summary>
        /// <param name="quotaManager"><see cref="Kafka.Server.ReplicationQuotaManager"/></param>
        /// <param name="brokerTopicStats"><see cref="Kafka.Server.BrokerTopicStats"/></param>
        /// <returns><see cref="Kafka.Server.ReplicaAlterLogDirsManager"/></returns>
        public Kafka.Server.ReplicaAlterLogDirsManager CreateReplicaAlterLogDirsManager(Kafka.Server.ReplicationQuotaManager quotaManager, Kafka.Server.BrokerTopicStats brokerTopicStats)
        {
            return IExecute<Kafka.Server.ReplicaAlterLogDirsManager>("createReplicaAlterLogDirsManager", quotaManager, brokerTopicStats);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ReplicaManager.html#adjustForLargeFileSystems(long)"/>
        /// </summary>
        /// <param name="space"><see cref="long"/></param>
        /// <returns><see cref="long"/></returns>
        public long AdjustForLargeFileSystems(long space)
        {
            return IExecute<long>("adjustForLargeFileSystems", space);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ReplicaManager.html#getLogEndOffsetLag(org.apache.kafka.common.TopicPartition,long,boolean)"/>
        /// </summary>
        /// <param name="topicPartition"><see cref="Org.Apache.Kafka.Common.TopicPartition"/></param>
        /// <param name="logEndOffset"><see cref="long"/></param>
        /// <param name="isFuture"><see cref="bool"/></param>
        /// <returns><see cref="long"/></returns>
        public long GetLogEndOffsetLag(Org.Apache.Kafka.Common.TopicPartition topicPartition, long logEndOffset, bool isFuture)
        {
            return IExecute<long>("getLogEndOffsetLag", topicPartition, logEndOffset, isFuture);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ReplicaManager.html#initialFetchOffset(kafka.log.UnifiedLog)"/>
        /// </summary>
        /// <param name="log"><see cref="Kafka.Log.UnifiedLog"/></param>
        /// <returns><see cref="long"/></returns>
        public long InitialFetchOffset(Kafka.Log.UnifiedLog log)
        {
            return IExecute<long>("initialFetchOffset", log);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ReplicaManager.html#activeProducerState(org.apache.kafka.common.TopicPartition)"/>
        /// </summary>
        /// <param name="requestPartition"><see cref="Org.Apache.Kafka.Common.TopicPartition"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Message.DescribeProducersResponseData.PartitionResponse"/></returns>
        public Org.Apache.Kafka.Common.Message.DescribeProducersResponseData.PartitionResponse ActiveProducerState(Org.Apache.Kafka.Common.TopicPartition requestPartition)
        {
            return IExecute<Org.Apache.Kafka.Common.Message.DescribeProducersResponseData.PartitionResponse>("activeProducerState", requestPartition);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ReplicaManager.html#applyDelta(org.apache.kafka.image.TopicsDelta,org.apache.kafka.image.MetadataImage)"/>
        /// </summary>
        /// <param name="delta"><see cref="Org.Apache.Kafka.Image.TopicsDelta"/></param>
        /// <param name="newImage"><see cref="Org.Apache.Kafka.Image.MetadataImage"/></param>
        public void ApplyDelta(Org.Apache.Kafka.Image.TopicsDelta delta, Org.Apache.Kafka.Image.MetadataImage newImage)
        {
            IExecute("applyDelta", delta, newImage);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ReplicaManager.html#beginControlledShutdown()"/>
        /// </summary>
        public void BeginControlledShutdown()
        {
            IExecute("beginControlledShutdown");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ReplicaManager.html#checkpointHighWatermarks()"/>
        /// </summary>
        public void CheckpointHighWatermarks()
        {
            IExecute("checkpointHighWatermarks");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ReplicaManager.html#completeDelayedFetchOrProduceRequests(org.apache.kafka.common.TopicPartition)"/>
        /// </summary>
        /// <param name="topicPartition"><see cref="Org.Apache.Kafka.Common.TopicPartition"/></param>
        public void CompleteDelayedFetchOrProduceRequests(Org.Apache.Kafka.Common.TopicPartition topicPartition)
        {
            IExecute("completeDelayedFetchOrProduceRequests", topicPartition);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ReplicaManager.html#handleLogDirFailure(java.lang.String,boolean)"/>
        /// </summary>
        /// <param name="dir"><see cref="string"/></param>
        /// <param name="sendZkNotification"><see cref="bool"/></param>
        public void HandleLogDirFailure(string dir, bool sendZkNotification)
        {
            IExecute("handleLogDirFailure", dir, sendZkNotification);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ReplicaManager.html#markPartitionOffline(org.apache.kafka.common.TopicPartition)"/>
        /// </summary>
        /// <param name="tp"><see cref="Org.Apache.Kafka.Common.TopicPartition"/></param>
        public void MarkPartitionOffline(Org.Apache.Kafka.Common.TopicPartition tp)
        {
            IExecute("markPartitionOffline", tp);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ReplicaManager.html#removeMetrics()"/>
        /// </summary>
        public void RemoveMetrics()
        {
            IExecute("removeMetrics");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ReplicaManager.html#resizeFetcherThreadPool(int)"/>
        /// </summary>
        /// <param name="newSize"><see cref="int"/></param>
        public void ResizeFetcherThreadPool(int newSize)
        {
            IExecute("resizeFetcherThreadPool", newSize);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ReplicaManager.html#shutdown(boolean)"/>
        /// </summary>
        /// <param name="checkpointHW"><see cref="bool"/></param>
        public void Shutdown(bool checkpointHW)
        {
            IExecute("shutdown", checkpointHW);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ReplicaManager.html#shutdownIdleReplicaAlterLogDirsThread()"/>
        /// </summary>
        public void ShutdownIdleReplicaAlterLogDirsThread()
        {
            IExecute("shutdownIdleReplicaAlterLogDirsThread");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ReplicaManager.html#startHighWatermarkCheckPointThread()"/>
        /// </summary>
        public void StartHighWatermarkCheckPointThread()
        {
            IExecute("startHighWatermarkCheckPointThread");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ReplicaManager.html#startup()"/>
        /// </summary>
        public void Startup()
        {
            IExecute("startup");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ReplicaManager.html#tryCompleteActions()"/>
        /// </summary>
        public void TryCompleteActions()
        {
            IExecute("tryCompleteActions");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/ReplicaManager.html#tryCompleteElection(kafka.server.DelayedOperationKey)"/>
        /// </summary>
        /// <param name="key"><see cref="Kafka.Server.DelayedOperationKey"/></param>
        public void TryCompleteElection(Kafka.Server.DelayedOperationKey key)
        {
            IExecute("tryCompleteElection", key);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}