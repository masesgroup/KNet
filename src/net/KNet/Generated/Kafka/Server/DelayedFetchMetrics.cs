/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka_2.13-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Kafka.Server
{
    #region DelayedFetchMetrics
    public partial class DelayedFetchMetrics
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/DelayedFetchMetrics.html#consumerExpiredRequestMeter()"/> 
        /// </summary>
        public static Com.Yammer.Metrics.Core.Meter ConsumerExpiredRequestMeter
        {
            get { return SExecute<Com.Yammer.Metrics.Core.Meter>(LocalBridgeClazz, "consumerExpiredRequestMeter"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/DelayedFetchMetrics.html#followerExpiredRequestMeter()"/> 
        /// </summary>
        public static Com.Yammer.Metrics.Core.Meter FollowerExpiredRequestMeter
        {
            get { return SExecute<Com.Yammer.Metrics.Core.Meter>(LocalBridgeClazz, "followerExpiredRequestMeter"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/DelayedFetchMetrics.html#isDebugEnabled()"/> 
        /// </summary>
        public static bool IsDebugEnabled
        {
            get { return SExecute<bool>(LocalBridgeClazz, "isDebugEnabled"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/DelayedFetchMetrics.html#isTraceEnabled()"/> 
        /// </summary>
        public static bool IsTraceEnabled
        {
            get { return SExecute<bool>(LocalBridgeClazz, "isTraceEnabled"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/server/DelayedFetchMetrics.html#newMeter(com.yammer.metrics.core.MetricName,java.lang.String,java.util.concurrent.TimeUnit)"/>
        /// </summary>
        /// <param name="metricName"><see cref="Com.Yammer.Metrics.Core.MetricName"/></param>
        /// <param name="eventType"><see cref="string"/></param>
        /// <param name="timeUnit"><see cref="Java.Util.Concurrent.TimeUnit"/></param>
        /// <returns><see cref="Com.Yammer.Metrics.Core.Meter"/></returns>
        public static Com.Yammer.Metrics.Core.Meter NewMeter(Com.Yammer.Metrics.Core.MetricName metricName, string eventType, Java.Util.Concurrent.TimeUnit timeUnit)
        {
            return SExecute<Com.Yammer.Metrics.Core.Meter>(LocalBridgeClazz, "newMeter", metricName, eventType, timeUnit);
        }

        #endregion

        #region Instance methods

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}