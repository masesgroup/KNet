/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka_2.13-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Kafka.Log
{
    #region LogManager
    public partial class LogManager
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Kafka.Log.LogManager"/> to <see cref="Kafka.Metrics.KafkaMetricsGroup"/>
        /// </summary>
        public static implicit operator Kafka.Metrics.KafkaMetricsGroup(Kafka.Log.LogManager t) => t.Cast<Kafka.Metrics.KafkaMetricsGroup>();

        #endregion

        #region Fields

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogManager.html#LockFileName()"/> 
        /// </summary>
        public static string LockFileName
        {
            get { return SExecute<string>(LocalBridgeClazz, "LockFileName"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogManager.html#LogStartOffsetCheckpointFile()"/> 
        /// </summary>
        public static string LogStartOffsetCheckpointFile
        {
            get { return SExecute<string>(LocalBridgeClazz, "LogStartOffsetCheckpointFile"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogManager.html#RecoveryPointCheckpointFile()"/> 
        /// </summary>
        public static string RecoveryPointCheckpointFile
        {
            get { return SExecute<string>(LocalBridgeClazz, "RecoveryPointCheckpointFile"); }
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogManager.html#cleaner()"/> 
        /// </summary>
        public Kafka.Log.LogCleaner Cleaner
        {
            get { return IExecute<Kafka.Log.LogCleaner>("cleaner"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogManager.html#cleanerConfig()"/> 
        /// </summary>
        public Kafka.Log.CleanerConfig CleanerConfig
        {
            get { return IExecute<Kafka.Log.CleanerConfig>("cleanerConfig"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogManager.html#currentDefaultConfig()"/> 
        /// </summary>
        public Kafka.Log.LogConfig CurrentDefaultConfig
        {
            get { return IExecute<Kafka.Log.LogConfig>("currentDefaultConfig"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogManager.html#flushCheckMs()"/> 
        /// </summary>
        public long FlushCheckMs
        {
            get { return IExecute<long>("flushCheckMs"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogManager.html#flushRecoveryOffsetCheckpointMs()"/> 
        /// </summary>
        public long FlushRecoveryOffsetCheckpointMs
        {
            get { return IExecute<long>("flushRecoveryOffsetCheckpointMs"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogManager.html#flushStartOffsetCheckpointMs()"/> 
        /// </summary>
        public long FlushStartOffsetCheckpointMs
        {
            get { return IExecute<long>("flushStartOffsetCheckpointMs"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogManager.html#hasLogsToBeDeleted()"/> 
        /// </summary>
        public bool HasLogsToBeDeleted
        {
            get { return IExecute<bool>("hasLogsToBeDeleted"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogManager.html#initialDefaultConfig()"/> 
        /// </summary>
        public Kafka.Log.LogConfig InitialDefaultConfig
        {
            get { return IExecute<Kafka.Log.LogConfig>("initialDefaultConfig"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogManager.html#InitialTaskDelayMs()"/> 
        /// </summary>
        public int InitialTaskDelayMs
        {
            get { return IExecute<int>("InitialTaskDelayMs"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogManager.html#isDebugEnabled()"/> 
        /// </summary>
        public bool IsDebugEnabled
        {
            get { return IExecute<bool>("isDebugEnabled"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogManager.html#isTraceEnabled()"/> 
        /// </summary>
        public bool IsTraceEnabled
        {
            get { return IExecute<bool>("isTraceEnabled"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogManager.html#keepPartitionMetadataFile()"/> 
        /// </summary>
        public bool KeepPartitionMetadataFile
        {
            get { return IExecute<bool>("keepPartitionMetadataFile"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogManager.html#logger()"/> 
        /// </summary>
        public Com.Typesafe.Scalalogging.Logger Logger
        {
            get { return IExecute<Com.Typesafe.Scalalogging.Logger>("logger"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogManager.html#loggerName()"/> 
        /// </summary>
        public string LoggerName
        {
            get { return IExecute<string>("loggerName"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogManager.html#logIdent()"/> 
        /// </summary>
        public string LogIdent
        {
            get { return IExecute<string>("logIdent"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogManager.html#maxTransactionTimeoutMs()"/> 
        /// </summary>
        public int MaxTransactionTimeoutMs
        {
            get { return IExecute<int>("maxTransactionTimeoutMs"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogManager.html#producerIdExpirationCheckIntervalMs()"/> 
        /// </summary>
        public int ProducerIdExpirationCheckIntervalMs
        {
            get { return IExecute<int>("producerIdExpirationCheckIntervalMs"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogManager.html#producerStateManagerConfig()"/> 
        /// </summary>
        public Kafka.Log.ProducerStateManagerConfig ProducerStateManagerConfig
        {
            get { return IExecute<Kafka.Log.ProducerStateManagerConfig>("producerStateManagerConfig"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogManager.html#retentionCheckMs()"/> 
        /// </summary>
        public long RetentionCheckMs
        {
            get { return IExecute<long>("retentionCheckMs"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogManager.html#isLogDirOnline(java.lang.String)"/>
        /// </summary>
        /// <param name="logDir"><see cref="string"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsLogDirOnline(string logDir)
        {
            return IExecute<bool>("isLogDirOnline", logDir);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogManager.html#newMeter(com.yammer.metrics.core.MetricName,java.lang.String,java.util.concurrent.TimeUnit)"/>
        /// </summary>
        /// <param name="metricName"><see cref="Com.Yammer.Metrics.Core.MetricName"/></param>
        /// <param name="eventType"><see cref="string"/></param>
        /// <param name="timeUnit"><see cref="Java.Util.Concurrent.TimeUnit"/></param>
        /// <returns><see cref="Com.Yammer.Metrics.Core.Meter"/></returns>
        public Com.Yammer.Metrics.Core.Meter NewMeter(Com.Yammer.Metrics.Core.MetricName metricName, string eventType, Java.Util.Concurrent.TimeUnit timeUnit)
        {
            return IExecute<Com.Yammer.Metrics.Core.Meter>("newMeter", metricName, eventType, timeUnit);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogManager.html#decNumRemainingLogs(java.util.concurrent.ConcurrentMap,java.lang.String)"/>
        /// </summary>
        /// <param name="numRemainingLogs"><see cref="Java.Util.Concurrent.ConcurrentMap"/></param>
        /// <param name="path"><see cref="string"/></param>
        /// <returns><see cref="int"/></returns>
        public int DecNumRemainingLogs(Java.Util.Concurrent.ConcurrentMap<string, object> numRemainingLogs, string path)
        {
            return IExecute<int>("decNumRemainingLogs", numRemainingLogs, path);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogManager.html#msgWithLogIdent(java.lang.String)"/>
        /// </summary>
        /// <param name="msg"><see cref="string"/></param>
        /// <returns><see cref="string"/></returns>
        public string MsgWithLogIdent(string msg)
        {
            return IExecute<string>("msgWithLogIdent", msg);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogManager.html#abortAndPauseCleaning(org.apache.kafka.common.TopicPartition)"/>
        /// </summary>
        /// <param name="topicPartition"><see cref="Org.Apache.Kafka.Common.TopicPartition"/></param>
        public void AbortAndPauseCleaning(Org.Apache.Kafka.Common.TopicPartition topicPartition)
        {
            IExecute("abortAndPauseCleaning", topicPartition);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogManager.html#abortCleaning(org.apache.kafka.common.TopicPartition)"/>
        /// </summary>
        /// <param name="topicPartition"><see cref="Org.Apache.Kafka.Common.TopicPartition"/></param>
        public void AbortCleaning(Org.Apache.Kafka.Common.TopicPartition topicPartition)
        {
            IExecute("abortCleaning", topicPartition);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogManager.html#addLogRecoveryMetrics(java.util.concurrent.ConcurrentMap,java.util.concurrent.ConcurrentMap)"/>
        /// </summary>
        /// <param name="numRemainingLogs"><see cref="Java.Util.Concurrent.ConcurrentMap"/></param>
        /// <param name="numRemainingSegments"><see cref="Java.Util.Concurrent.ConcurrentMap"/></param>
        public void AddLogRecoveryMetrics(Java.Util.Concurrent.ConcurrentMap<string, object> numRemainingLogs, Java.Util.Concurrent.ConcurrentMap<string, object> numRemainingSegments)
        {
            IExecute("addLogRecoveryMetrics", numRemainingLogs, numRemainingSegments);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogManager.html#brokerConfigUpdated()"/>
        /// </summary>
        public void BrokerConfigUpdated()
        {
            IExecute("brokerConfigUpdated");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogManager.html#checkpointLogRecoveryOffsets()"/>
        /// </summary>
        public void CheckpointLogRecoveryOffsets()
        {
            IExecute("checkpointLogRecoveryOffsets");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogManager.html#checkpointLogStartOffsets()"/>
        /// </summary>
        public void CheckpointLogStartOffsets()
        {
            IExecute("checkpointLogStartOffsets");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogManager.html#checkpointRecoveryOffsetsInDir(java.io.File)"/>
        /// </summary>
        /// <param name="logDir"><see cref="Java.Io.File"/></param>
        public void CheckpointRecoveryOffsetsInDir(Java.Io.File logDir)
        {
            IExecute("checkpointRecoveryOffsetsInDir", logDir);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogManager.html#cleanupLogs()"/>
        /// </summary>
        public void CleanupLogs()
        {
            IExecute("cleanupLogs");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogManager.html#handleLogDirFailure(java.lang.String)"/>
        /// </summary>
        /// <param name="dir"><see cref="string"/></param>
        public void HandleLogDirFailure(string dir)
        {
            IExecute("handleLogDirFailure", dir);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogManager.html#initializingLog(org.apache.kafka.common.TopicPartition)"/>
        /// </summary>
        /// <param name="topicPartition"><see cref="Org.Apache.Kafka.Common.TopicPartition"/></param>
        public void InitializingLog(Org.Apache.Kafka.Common.TopicPartition topicPartition)
        {
            IExecute("initializingLog", topicPartition);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogManager.html#maybeUpdatePreferredLogDir(org.apache.kafka.common.TopicPartition,java.lang.String)"/>
        /// </summary>
        /// <param name="topicPartition"><see cref="Org.Apache.Kafka.Common.TopicPartition"/></param>
        /// <param name="logDir"><see cref="string"/></param>
        public void MaybeUpdatePreferredLogDir(Org.Apache.Kafka.Common.TopicPartition topicPartition, string logDir)
        {
            IExecute("maybeUpdatePreferredLogDir", topicPartition, logDir);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogManager.html#reconfigureDefaultLogConfig(kafka.log.LogConfig)"/>
        /// </summary>
        /// <param name="logConfig"><see cref="Kafka.Log.LogConfig"/></param>
        public void ReconfigureDefaultLogConfig(Kafka.Log.LogConfig logConfig)
        {
            IExecute("reconfigureDefaultLogConfig", logConfig);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogManager.html#removeLogRecoveryMetrics()"/>
        /// </summary>
        public void RemoveLogRecoveryMetrics()
        {
            IExecute("removeLogRecoveryMetrics");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogManager.html#replaceCurrentWithFutureLog(org.apache.kafka.common.TopicPartition)"/>
        /// </summary>
        /// <param name="topicPartition"><see cref="Org.Apache.Kafka.Common.TopicPartition"/></param>
        public void ReplaceCurrentWithFutureLog(Org.Apache.Kafka.Common.TopicPartition topicPartition)
        {
            IExecute("replaceCurrentWithFutureLog", topicPartition);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogManager.html#resizeRecoveryThreadPool(int)"/>
        /// </summary>
        /// <param name="newSize"><see cref="int"/></param>
        public void ResizeRecoveryThreadPool(int newSize)
        {
            IExecute("resizeRecoveryThreadPool", newSize);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogManager.html#shutdown()"/>
        /// </summary>
        public void Shutdown()
        {
            IExecute("shutdown");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogManager.html#topicConfigUpdated(java.lang.String)"/>
        /// </summary>
        /// <param name="topic"><see cref="string"/></param>
        public void TopicConfigUpdated(string topic)
        {
            IExecute("topicConfigUpdated", topic);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogManager.html#truncateFullyAndStartAt(org.apache.kafka.common.TopicPartition,long,boolean)"/>
        /// </summary>
        /// <param name="topicPartition"><see cref="Org.Apache.Kafka.Common.TopicPartition"/></param>
        /// <param name="newOffset"><see cref="long"/></param>
        /// <param name="isFuture"><see cref="bool"/></param>
        public void TruncateFullyAndStartAt(Org.Apache.Kafka.Common.TopicPartition topicPartition, long newOffset, bool isFuture)
        {
            IExecute("truncateFullyAndStartAt", topicPartition, newOffset, isFuture);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogManager.html#updateTopicConfig(java.lang.String,java.util.Properties)"/>
        /// </summary>
        /// <param name="topic"><see cref="string"/></param>
        /// <param name="newTopicConfig"><see cref="Java.Util.Properties"/></param>
        public void UpdateTopicConfig(string topic, Java.Util.Properties newTopicConfig)
        {
            IExecute("updateTopicConfig", topic, newTopicConfig);
        }

        #endregion

        #region Nested classes
        #region LogRecoveryThreadFactory
        public partial class LogRecoveryThreadFactory
        {
            #region Constructors
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogManager.LogRecoveryThreadFactory.html#%3Cinit%3E(kafka.log.LogManager,java.lang.String)"/>
            /// </summary>
            /// <param name="$outer"><see cref="Kafka.Log.LogManager"/></param>
            /// <param name="dirPath"><see cref="string"/></param>
            public LogRecoveryThreadFactory(Kafka.Log.LogManager _outer, string dirPath)
                : base(_outer, dirPath)
            {
            }

            #endregion

            #region Class/Interface conversion operators
            /// <summary>
            /// Converter from <see cref="Kafka.Log.LogManager.LogRecoveryThreadFactory"/> to <see cref="Java.Util.Concurrent.ThreadFactory"/>
            /// </summary>
            public static implicit operator Java.Util.Concurrent.ThreadFactory(Kafka.Log.LogManager.LogRecoveryThreadFactory t) => t.Cast<Java.Util.Concurrent.ThreadFactory>();

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogManager.LogRecoveryThreadFactory.html#$outer"/>
            /// </summary>
            public Kafka.Log.LogManager $outer { get { return IGetField<Kafka.Log.LogManager>("$outer"); } }

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogManager.LogRecoveryThreadFactory.html#dirPath()"/> 
            /// </summary>
            public string DirPath
            {
                get { return IExecute<string>("dirPath"); }
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogManager.LogRecoveryThreadFactory.html#threadNum()"/> 
            /// </summary>
            public Java.Util.Concurrent.Atomic.AtomicInteger ThreadNum
            {
                get { return IExecute<Java.Util.Concurrent.Atomic.AtomicInteger>("threadNum"); }
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogManager.LogRecoveryThreadFactory.html#newThread(java.lang.Runnable)"/>
            /// </summary>
            /// <param name="runnable"><see cref="Java.Lang.Runnable"/></param>
            /// <returns><see cref="Java.Lang.Thread"/></returns>
            public Java.Lang.Thread NewThread(Java.Lang.Runnable runnable)
            {
                return IExecute<Java.Lang.Thread>("newThread", runnable);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}