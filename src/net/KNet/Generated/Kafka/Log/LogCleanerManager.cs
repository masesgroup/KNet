/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka_2.13-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Kafka.Log
{
    #region LogCleanerManager
    public partial class LogCleanerManager
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Kafka.Log.LogCleanerManager"/> to <see cref="Kafka.Metrics.KafkaMetricsGroup"/>
        /// </summary>
        public static implicit operator Kafka.Metrics.KafkaMetricsGroup(Kafka.Log.LogCleanerManager t) => t.Cast<Kafka.Metrics.KafkaMetricsGroup>();

        #endregion

        #region Fields

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogCleanerManager.html#isCompactAndDelete(kafka.log.UnifiedLog)"/>
        /// </summary>
        /// <param name="log"><see cref="Kafka.Log.UnifiedLog"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool IsCompactAndDelete(Kafka.Log.UnifiedLog log)
        {
            return SExecute<bool>(LocalBridgeClazz, "isCompactAndDelete", log);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogCleanerManager.html#maxCompactionDelay(kafka.log.UnifiedLog,long,long)"/>
        /// </summary>
        /// <param name="log"><see cref="Kafka.Log.UnifiedLog"/></param>
        /// <param name="firstDirtyOffset"><see cref="long"/></param>
        /// <param name="now"><see cref="long"/></param>
        /// <returns><see cref="long"/></returns>
        public static long MaxCompactionDelay(Kafka.Log.UnifiedLog log, long firstDirtyOffset, long now)
        {
            return SExecute<long>(LocalBridgeClazz, "maxCompactionDelay", log, firstDirtyOffset, now);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogCleanerManager.html#isDebugEnabled()"/> 
        /// </summary>
        public bool IsDebugEnabled
        {
            get { return IExecute<bool>("isDebugEnabled"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogCleanerManager.html#isTraceEnabled()"/> 
        /// </summary>
        public bool IsTraceEnabled
        {
            get { return IExecute<bool>("isTraceEnabled"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogCleanerManager.html#logDirFailureChannel()"/> 
        /// </summary>
        public Kafka.Server.LogDirFailureChannel LogDirFailureChannel
        {
            get { return IExecute<Kafka.Server.LogDirFailureChannel>("logDirFailureChannel"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogCleanerManager.html#logger()"/> 
        /// </summary>
        public Com.Typesafe.Scalalogging.Logger Logger
        {
            get { return IExecute<Com.Typesafe.Scalalogging.Logger>("logger"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogCleanerManager.html#loggerName()"/> 
        /// </summary>
        public string LoggerName
        {
            get { return IExecute<string>("loggerName"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogCleanerManager.html#logIdent()"/> 
        /// </summary>
        public string LogIdent
        {
            get { return IExecute<string>("logIdent"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogCleanerManager.html#logs()"/> 
        /// </summary>
        public Kafka.Utils.Pool<Org.Apache.Kafka.Common.TopicPartition, Kafka.Log.UnifiedLog> Logs
        {
            get { return IExecute<Kafka.Utils.Pool<Org.Apache.Kafka.Common.TopicPartition, Kafka.Log.UnifiedLog>>("logs"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogCleanerManager.html#offsetCheckpointFile()"/> 
        /// </summary>
        public string OffsetCheckpointFile
        {
            get { return IExecute<string>("offsetCheckpointFile"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogCleanerManager.html#newMeter(com.yammer.metrics.core.MetricName,java.lang.String,java.util.concurrent.TimeUnit)"/>
        /// </summary>
        /// <param name="metricName"><see cref="Com.Yammer.Metrics.Core.MetricName"/></param>
        /// <param name="eventType"><see cref="string"/></param>
        /// <param name="timeUnit"><see cref="Java.Util.Concurrent.TimeUnit"/></param>
        /// <returns><see cref="Com.Yammer.Metrics.Core.Meter"/></returns>
        public Com.Yammer.Metrics.Core.Meter NewMeter(Com.Yammer.Metrics.Core.MetricName metricName, string eventType, Java.Util.Concurrent.TimeUnit timeUnit)
        {
            return IExecute<Com.Yammer.Metrics.Core.Meter>("newMeter", metricName, eventType, timeUnit);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogCleanerManager.html#msgWithLogIdent(java.lang.String)"/>
        /// </summary>
        /// <param name="msg"><see cref="string"/></param>
        /// <returns><see cref="string"/></returns>
        public string MsgWithLogIdent(string msg)
        {
            return IExecute<string>("msgWithLogIdent", msg);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogCleanerManager.html#abortAndPauseCleaning(org.apache.kafka.common.TopicPartition)"/>
        /// </summary>
        /// <param name="topicPartition"><see cref="Org.Apache.Kafka.Common.TopicPartition"/></param>
        public void AbortAndPauseCleaning(Org.Apache.Kafka.Common.TopicPartition topicPartition)
        {
            IExecute("abortAndPauseCleaning", topicPartition);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogCleanerManager.html#abortCleaning(org.apache.kafka.common.TopicPartition)"/>
        /// </summary>
        /// <param name="topicPartition"><see cref="Org.Apache.Kafka.Common.TopicPartition"/></param>
        public void AbortCleaning(Org.Apache.Kafka.Common.TopicPartition topicPartition)
        {
            IExecute("abortCleaning", topicPartition);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogCleanerManager.html#alterCheckpointDir(org.apache.kafka.common.TopicPartition,java.io.File,java.io.File)"/>
        /// </summary>
        /// <param name="topicPartition"><see cref="Org.Apache.Kafka.Common.TopicPartition"/></param>
        /// <param name="sourceLogDir"><see cref="Java.Io.File"/></param>
        /// <param name="destLogDir"><see cref="Java.Io.File"/></param>
        public void AlterCheckpointDir(Org.Apache.Kafka.Common.TopicPartition topicPartition, Java.Io.File sourceLogDir, Java.Io.File destLogDir)
        {
            IExecute("alterCheckpointDir", topicPartition, sourceLogDir, destLogDir);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogCleanerManager.html#checkCleaningAborted(org.apache.kafka.common.TopicPartition)"/>
        /// </summary>
        /// <param name="topicPartition"><see cref="Org.Apache.Kafka.Common.TopicPartition"/></param>
        public void CheckCleaningAborted(Org.Apache.Kafka.Common.TopicPartition topicPartition)
        {
            IExecute("checkCleaningAborted", topicPartition);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogCleanerManager.html#doneCleaning(org.apache.kafka.common.TopicPartition,java.io.File,long)"/>
        /// </summary>
        /// <param name="topicPartition"><see cref="Org.Apache.Kafka.Common.TopicPartition"/></param>
        /// <param name="dataDir"><see cref="Java.Io.File"/></param>
        /// <param name="endOffset"><see cref="long"/></param>
        public void DoneCleaning(Org.Apache.Kafka.Common.TopicPartition topicPartition, Java.Io.File dataDir, long endOffset)
        {
            IExecute("doneCleaning", topicPartition, dataDir, endOffset);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogCleanerManager.html#handleLogDirFailure(java.lang.String)"/>
        /// </summary>
        /// <param name="dir"><see cref="string"/></param>
        public void HandleLogDirFailure(string dir)
        {
            IExecute("handleLogDirFailure", dir);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogCleanerManager.html#maintainUncleanablePartitions()"/>
        /// </summary>
        public void MaintainUncleanablePartitions()
        {
            IExecute("maintainUncleanablePartitions");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogCleanerManager.html#markPartitionUncleanable(java.lang.String,org.apache.kafka.common.TopicPartition)"/>
        /// </summary>
        /// <param name="logDir"><see cref="string"/></param>
        /// <param name="partition"><see cref="Org.Apache.Kafka.Common.TopicPartition"/></param>
        public void MarkPartitionUncleanable(string logDir, Org.Apache.Kafka.Common.TopicPartition partition)
        {
            IExecute("markPartitionUncleanable", logDir, partition);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogCleanerManager.html#maybeTruncateCheckpoint(java.io.File,org.apache.kafka.common.TopicPartition,long)"/>
        /// </summary>
        /// <param name="dataDir"><see cref="Java.Io.File"/></param>
        /// <param name="topicPartition"><see cref="Org.Apache.Kafka.Common.TopicPartition"/></param>
        /// <param name="offset"><see cref="long"/></param>
        public void MaybeTruncateCheckpoint(Java.Io.File dataDir, Org.Apache.Kafka.Common.TopicPartition topicPartition, long offset)
        {
            IExecute("maybeTruncateCheckpoint", dataDir, topicPartition, offset);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogCleanerManager.html#setCleaningState(org.apache.kafka.common.TopicPartition,kafka.log.LogCleaningState)"/>
        /// </summary>
        /// <param name="tp"><see cref="Org.Apache.Kafka.Common.TopicPartition"/></param>
        /// <param name="state"><see cref="Kafka.Log.LogCleaningState"/></param>
        public void SetCleaningState(Org.Apache.Kafka.Common.TopicPartition tp, Kafka.Log.LogCleaningState state)
        {
            IExecute("setCleaningState", tp, state);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}