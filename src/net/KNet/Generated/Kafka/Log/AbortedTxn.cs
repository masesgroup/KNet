/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka_2.13-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Kafka.Log
{
    #region AbortedTxn
    public partial class AbortedTxn
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/AbortedTxn.html#%3Cinit%3E(java.nio.ByteBuffer)"/>
        /// </summary>
        /// <param name="buffer"><see cref="Java.Nio.ByteBuffer"/></param>
        public AbortedTxn(Java.Nio.ByteBuffer buffer)
            : base(buffer)
        {
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/AbortedTxn.html#%3Cinit%3E(kafka.log.CompletedTxn,long)"/>
        /// </summary>
        /// <param name="completedTxn"><see cref="Kafka.Log.CompletedTxn"/></param>
        /// <param name="lastStableOffset"><see cref="long"/></param>
        public AbortedTxn(Kafka.Log.CompletedTxn completedTxn, long lastStableOffset)
            : base(completedTxn, lastStableOffset)
        {
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/AbortedTxn.html#%3Cinit%3E(long,long,long,long)"/>
        /// </summary>
        /// <param name="producerId"><see cref="long"/></param>
        /// <param name="firstOffset"><see cref="long"/></param>
        /// <param name="lastOffset"><see cref="long"/></param>
        /// <param name="lastStableOffset"><see cref="long"/></param>
        public AbortedTxn(long producerId, long firstOffset, long lastOffset, long lastStableOffset)
            : base(producerId, firstOffset, lastOffset, lastStableOffset)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/AbortedTxn.html#CurrentVersion()"/> 
        /// </summary>
        public static short CurrentVersion
        {
            get { return SExecute<short>(LocalBridgeClazz, "CurrentVersion"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/AbortedTxn.html#FirstOffsetOffset()"/> 
        /// </summary>
        public static int FirstOffsetOffset
        {
            get { return SExecute<int>(LocalBridgeClazz, "FirstOffsetOffset"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/AbortedTxn.html#FirstOffsetSize()"/> 
        /// </summary>
        public static int FirstOffsetSize
        {
            get { return SExecute<int>(LocalBridgeClazz, "FirstOffsetSize"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/AbortedTxn.html#LastOffsetOffset()"/> 
        /// </summary>
        public static int LastOffsetOffset
        {
            get { return SExecute<int>(LocalBridgeClazz, "LastOffsetOffset"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/AbortedTxn.html#LastOffsetSize()"/> 
        /// </summary>
        public static int LastOffsetSize
        {
            get { return SExecute<int>(LocalBridgeClazz, "LastOffsetSize"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/AbortedTxn.html#LastStableOffsetOffset()"/> 
        /// </summary>
        public static int LastStableOffsetOffset
        {
            get { return SExecute<int>(LocalBridgeClazz, "LastStableOffsetOffset"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/AbortedTxn.html#LastStableOffsetSize()"/> 
        /// </summary>
        public static int LastStableOffsetSize
        {
            get { return SExecute<int>(LocalBridgeClazz, "LastStableOffsetSize"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/AbortedTxn.html#ProducerIdOffset()"/> 
        /// </summary>
        public static int ProducerIdOffset
        {
            get { return SExecute<int>(LocalBridgeClazz, "ProducerIdOffset"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/AbortedTxn.html#ProducerIdSize()"/> 
        /// </summary>
        public static int ProducerIdSize
        {
            get { return SExecute<int>(LocalBridgeClazz, "ProducerIdSize"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/AbortedTxn.html#TotalSize()"/> 
        /// </summary>
        public static int TotalSize
        {
            get { return SExecute<int>(LocalBridgeClazz, "TotalSize"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/AbortedTxn.html#VersionOffset()"/> 
        /// </summary>
        public static int VersionOffset
        {
            get { return SExecute<int>(LocalBridgeClazz, "VersionOffset"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/AbortedTxn.html#VersionSize()"/> 
        /// </summary>
        public static int VersionSize
        {
            get { return SExecute<int>(LocalBridgeClazz, "VersionSize"); }
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/AbortedTxn.html#asAbortedTransaction()"/> 
        /// </summary>
        public Org.Apache.Kafka.Common.Message.FetchResponseData.AbortedTransaction AsAbortedTransaction
        {
            get { return IExecute<Org.Apache.Kafka.Common.Message.FetchResponseData.AbortedTransaction>("asAbortedTransaction"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/AbortedTxn.html#buffer()"/> 
        /// </summary>
        public Java.Nio.ByteBuffer Buffer
        {
            get { return IExecute<Java.Nio.ByteBuffer>("buffer"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/AbortedTxn.html#firstOffset()"/> 
        /// </summary>
        public long FirstOffset
        {
            get { return IExecute<long>("firstOffset"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/AbortedTxn.html#lastOffset()"/> 
        /// </summary>
        public long LastOffset
        {
            get { return IExecute<long>("lastOffset"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/AbortedTxn.html#lastStableOffset()"/> 
        /// </summary>
        public long LastStableOffset
        {
            get { return IExecute<long>("lastStableOffset"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/AbortedTxn.html#producerId()"/> 
        /// </summary>
        public long ProducerId
        {
            get { return IExecute<long>("producerId"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/AbortedTxn.html#version()"/> 
        /// </summary>
        public short Version
        {
            get { return IExecute<short>("version"); }
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}