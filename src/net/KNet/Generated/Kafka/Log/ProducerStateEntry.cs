/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka_2.13-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Kafka.Log
{
    #region ProducerStateEntry
    public partial class ProducerStateEntry
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/ProducerStateEntry.html#empty(long)"/>
        /// </summary>
        /// <param name="producerId"><see cref="long"/></param>
        /// <returns><see cref="Kafka.Log.ProducerStateEntry"/></returns>
        public static Kafka.Log.ProducerStateEntry Empty(long producerId)
        {
            return SExecute<Kafka.Log.ProducerStateEntry>(LocalBridgeClazz, "empty", producerId);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/ProducerStateEntry.html#coordinatorEpoch()"/> 
        /// </summary>
        public int CoordinatorEpoch
        {
            get { return IExecute<int>("coordinatorEpoch"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/ProducerStateEntry.html#firstDataOffset()"/> 
        /// </summary>
        public long FirstDataOffset
        {
            get { return IExecute<long>("firstDataOffset"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/ProducerStateEntry.html#firstSeq()"/> 
        /// </summary>
        public int FirstSeq
        {
            get { return IExecute<int>("firstSeq"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/ProducerStateEntry.html#isEmpty()"/> 
        /// </summary>
        public bool IsEmpty
        {
            get { return IExecute<bool>("isEmpty"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/ProducerStateEntry.html#lastDataOffset()"/> 
        /// </summary>
        public long LastDataOffset
        {
            get { return IExecute<long>("lastDataOffset"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/ProducerStateEntry.html#lastOffsetDelta()"/> 
        /// </summary>
        public int LastOffsetDelta
        {
            get { return IExecute<int>("lastOffsetDelta"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/ProducerStateEntry.html#lastSeq()"/> 
        /// </summary>
        public int LastSeq
        {
            get { return IExecute<int>("lastSeq"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/ProducerStateEntry.html#lastTimestamp()"/> 
        /// </summary>
        public long LastTimestamp
        {
            get { return IExecute<long>("lastTimestamp"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/ProducerStateEntry.html#producerEpoch()"/> 
        /// </summary>
        public short ProducerEpoch
        {
            get { return IExecute<short>("producerEpoch"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/ProducerStateEntry.html#producerId()"/> 
        /// </summary>
        public long ProducerId
        {
            get { return IExecute<long>("producerId"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/ProducerStateEntry.html#maybeUpdateProducerEpoch(short)"/>
        /// </summary>
        /// <param name="producerEpoch"><see cref="short"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool MaybeUpdateProducerEpoch(short producerEpoch)
        {
            return IExecute<bool>("maybeUpdateProducerEpoch", producerEpoch);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/ProducerStateEntry.html#addBatch(short,int,long,int,long)"/>
        /// </summary>
        /// <param name="producerEpoch"><see cref="short"/></param>
        /// <param name="lastSeq"><see cref="int"/></param>
        /// <param name="lastOffset"><see cref="long"/></param>
        /// <param name="offsetDelta"><see cref="int"/></param>
        /// <param name="timestamp"><see cref="long"/></param>
        public void AddBatch(short producerEpoch, int lastSeq, long lastOffset, int offsetDelta, long timestamp)
        {
            IExecute("addBatch", producerEpoch, lastSeq, lastOffset, offsetDelta, timestamp);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/ProducerStateEntry.html#update(kafka.log.ProducerStateEntry)"/>
        /// </summary>
        /// <param name="nextEntry"><see cref="Kafka.Log.ProducerStateEntry"/></param>
        public void Update(Kafka.Log.ProducerStateEntry nextEntry)
        {
            IExecute("update", nextEntry);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}