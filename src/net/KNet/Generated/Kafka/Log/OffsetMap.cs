/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka_2.13-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Kafka.Log
{
    #region OffsetMap
    public partial class OffsetMap
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/OffsetMap.html#latestOffset()"/> 
        /// </summary>
        public long LatestOffset
        {
            get { return IExecute<long>("latestOffset"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/OffsetMap.html#size()"/> 
        /// </summary>
        public int Size
        {
            get { return IExecute<int>("size"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/OffsetMap.html#slots()"/> 
        /// </summary>
        public int Slots
        {
            get { return IExecute<int>("slots"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/OffsetMap.html#utilization()"/> 
        /// </summary>
        public double Utilization
        {
            get { return IExecute<double>("utilization"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/OffsetMap.html#get(java.nio.ByteBuffer)"/>
        /// </summary>
        /// <param name="key"><see cref="Java.Nio.ByteBuffer"/></param>
        /// <returns><see cref="long"/></returns>
        public long Get(Java.Nio.ByteBuffer key)
        {
            return IExecute<long>("get", key);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/OffsetMap.html#clear()"/>
        /// </summary>
        public void Clear()
        {
            IExecute("clear");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/OffsetMap.html#put(java.nio.ByteBuffer,long)"/>
        /// </summary>
        /// <param name="key"><see cref="Java.Nio.ByteBuffer"/></param>
        /// <param name="offset"><see cref="long"/></param>
        public void Put(Java.Nio.ByteBuffer key, long offset)
        {
            IExecute("put", key, offset);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/OffsetMap.html#updateLatestOffset(long)"/>
        /// </summary>
        /// <param name="offset"><see cref="long"/></param>
        public void UpdateLatestOffset(long offset)
        {
            IExecute("updateLatestOffset", offset);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}