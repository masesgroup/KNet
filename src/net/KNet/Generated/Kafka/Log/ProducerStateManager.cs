/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka_2.13-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Kafka.Log
{
    #region ProducerStateManager
    public partial class ProducerStateManager
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/ProducerStateManager.html#%3Cinit%3E(org.apache.kafka.common.TopicPartition,java.io.File,int,kafka.log.ProducerStateManagerConfig,org.apache.kafka.common.utils.Time)"/>
        /// </summary>
        /// <param name="topicPartition"><see cref="Org.Apache.Kafka.Common.TopicPartition"/></param>
        /// <param name="_logDir"><see cref="Java.Io.File"/></param>
        /// <param name="maxTransactionTimeoutMs"><see cref="int"/></param>
        /// <param name="producerStateManagerConfig"><see cref="Kafka.Log.ProducerStateManagerConfig"/></param>
        /// <param name="time"><see cref="Org.Apache.Kafka.Common.Utils.Time"/></param>
        public ProducerStateManager(Org.Apache.Kafka.Common.TopicPartition topicPartition, Java.Io.File _logDir, int maxTransactionTimeoutMs, Kafka.Log.ProducerStateManagerConfig producerStateManagerConfig, Org.Apache.Kafka.Common.Utils.Time time)
            : base(topicPartition, _logDir, maxTransactionTimeoutMs, producerStateManagerConfig, time)
        {
        }

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Kafka.Log.ProducerStateManager"/> to <see cref="Kafka.Utils.Logging"/>
        /// </summary>
        public static implicit operator Kafka.Utils.Logging(Kafka.Log.ProducerStateManager t) => t.Cast<Kafka.Utils.Logging>();

        #endregion

        #region Fields

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/ProducerStateManager.html#LateTransactionBufferMs()"/> 
        /// </summary>
        public static int LateTransactionBufferMs
        {
            get { return SExecute<int>(LocalBridgeClazz, "LateTransactionBufferMs"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/ProducerStateManager.html#PidSnapshotMapSchema()"/> 
        /// </summary>
        public static Org.Apache.Kafka.Common.Protocol.Types.Schema PidSnapshotMapSchema
        {
            get { return SExecute<Org.Apache.Kafka.Common.Protocol.Types.Schema>(LocalBridgeClazz, "PidSnapshotMapSchema"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/ProducerStateManager.html#ProducerSnapshotEntrySchema()"/> 
        /// </summary>
        public static Org.Apache.Kafka.Common.Protocol.Types.Schema ProducerSnapshotEntrySchema
        {
            get { return SExecute<Org.Apache.Kafka.Common.Protocol.Types.Schema>(LocalBridgeClazz, "ProducerSnapshotEntrySchema"); }
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/ProducerStateManager.html#_logDir()"/> 
        /// </summary>
        public Java.Io.File _logDir
        {
            get { return IExecute<Java.Io.File>("_logDir"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/ProducerStateManager.html#isDebugEnabled()"/> 
        /// </summary>
        public bool IsDebugEnabled
        {
            get { return IExecute<bool>("isDebugEnabled"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/ProducerStateManager.html#isEmpty()"/> 
        /// </summary>
        public bool IsEmpty
        {
            get { return IExecute<bool>("isEmpty"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/ProducerStateManager.html#isTraceEnabled()"/> 
        /// </summary>
        public bool IsTraceEnabled
        {
            get { return IExecute<bool>("isTraceEnabled"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/ProducerStateManager.html#logger()"/> 
        /// </summary>
        public Com.Typesafe.Scalalogging.Logger Logger
        {
            get { return IExecute<Com.Typesafe.Scalalogging.Logger>("logger"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/ProducerStateManager.html#loggerName()"/> 
        /// </summary>
        public string LoggerName
        {
            get { return IExecute<string>("loggerName"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/ProducerStateManager.html#logIdent()"/> 
        /// </summary>
        public string LogIdent
        {
            get { return IExecute<string>("logIdent"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/ProducerStateManager.html#mapEndOffset()"/> 
        /// </summary>
        public long MapEndOffset
        {
            get { return IExecute<long>("mapEndOffset"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/ProducerStateManager.html#maxTransactionTimeoutMs()"/> 
        /// </summary>
        public int MaxTransactionTimeoutMs
        {
            get { return IExecute<int>("maxTransactionTimeoutMs"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/ProducerStateManager.html#producerStateManagerConfig()"/> 
        /// </summary>
        public Kafka.Log.ProducerStateManagerConfig ProducerStateManagerConfig
        {
            get { return IExecute<Kafka.Log.ProducerStateManagerConfig>("producerStateManagerConfig"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/ProducerStateManager.html#time()"/> 
        /// </summary>
        public Org.Apache.Kafka.Common.Utils.Time Time
        {
            get { return IExecute<Org.Apache.Kafka.Common.Utils.Time>("time"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/ProducerStateManager.html#topicPartition()"/> 
        /// </summary>
        public Org.Apache.Kafka.Common.TopicPartition TopicPartition
        {
            get { return IExecute<Org.Apache.Kafka.Common.TopicPartition>("topicPartition"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/ProducerStateManager.html#hasLateTransaction(long)"/>
        /// </summary>
        /// <param name="currentTimeMs"><see cref="long"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool HasLateTransaction(long currentTimeMs)
        {
            return IExecute<bool>("hasLateTransaction", currentTimeMs);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/ProducerStateManager.html#msgWithLogIdent(java.lang.String)"/>
        /// </summary>
        /// <param name="msg"><see cref="string"/></param>
        /// <returns><see cref="string"/></returns>
        public string MsgWithLogIdent(string msg)
        {
            return IExecute<string>("msgWithLogIdent", msg);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/ProducerStateManager.html#prepareUpdate(long,kafka.log.AppendOrigin)"/>
        /// </summary>
        /// <param name="producerId"><see cref="long"/></param>
        /// <param name="origin"><see cref="Kafka.Log.AppendOrigin"/></param>
        /// <returns><see cref="Kafka.Log.ProducerAppendInfo"/></returns>
        public Kafka.Log.ProducerAppendInfo PrepareUpdate(long producerId, Kafka.Log.AppendOrigin origin)
        {
            return IExecute<Kafka.Log.ProducerAppendInfo>("prepareUpdate", producerId, origin);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/ProducerStateManager.html#lastStableOffset(kafka.log.CompletedTxn)"/>
        /// </summary>
        /// <param name="completedTxn"><see cref="Kafka.Log.CompletedTxn"/></param>
        /// <returns><see cref="long"/></returns>
        public long LastStableOffset(Kafka.Log.CompletedTxn completedTxn)
        {
            return IExecute<long>("lastStableOffset", completedTxn);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/ProducerStateManager.html#completeTxn(kafka.log.CompletedTxn)"/>
        /// </summary>
        /// <param name="completedTxn"><see cref="Kafka.Log.CompletedTxn"/></param>
        public void CompleteTxn(Kafka.Log.CompletedTxn completedTxn)
        {
            IExecute("completeTxn", completedTxn);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/ProducerStateManager.html#deleteSnapshotsBefore(long)"/>
        /// </summary>
        /// <param name="offset"><see cref="long"/></param>
        public void DeleteSnapshotsBefore(long offset)
        {
            IExecute("deleteSnapshotsBefore", offset);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/ProducerStateManager.html#loadProducerEntry(kafka.log.ProducerStateEntry)"/>
        /// </summary>
        /// <param name="entry"><see cref="Kafka.Log.ProducerStateEntry"/></param>
        public void LoadProducerEntry(Kafka.Log.ProducerStateEntry entry)
        {
            IExecute("loadProducerEntry", entry);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/ProducerStateManager.html#onHighWatermarkUpdated(long)"/>
        /// </summary>
        /// <param name="highWatermark"><see cref="long"/></param>
        public void OnHighWatermarkUpdated(long highWatermark)
        {
            IExecute("onHighWatermarkUpdated", highWatermark);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/ProducerStateManager.html#onLogStartOffsetIncremented(long)"/>
        /// </summary>
        /// <param name="logStartOffset"><see cref="long"/></param>
        public void OnLogStartOffsetIncremented(long logStartOffset)
        {
            IExecute("onLogStartOffsetIncremented", logStartOffset);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/ProducerStateManager.html#removeExpiredProducers(long)"/>
        /// </summary>
        /// <param name="currentTimeMs"><see cref="long"/></param>
        public void RemoveExpiredProducers(long currentTimeMs)
        {
            IExecute("removeExpiredProducers", currentTimeMs);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/ProducerStateManager.html#takeSnapshot()"/>
        /// </summary>
        public void TakeSnapshot()
        {
            IExecute("takeSnapshot");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/ProducerStateManager.html#truncateAndReload(long,long,long)"/>
        /// </summary>
        /// <param name="logStartOffset"><see cref="long"/></param>
        /// <param name="logEndOffset"><see cref="long"/></param>
        /// <param name="currentTimeMs"><see cref="long"/></param>
        public void TruncateAndReload(long logStartOffset, long logEndOffset, long currentTimeMs)
        {
            IExecute("truncateAndReload", logStartOffset, logEndOffset, currentTimeMs);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/ProducerStateManager.html#truncateFullyAndStartAt(long)"/>
        /// </summary>
        /// <param name="offset"><see cref="long"/></param>
        public void TruncateFullyAndStartAt(long offset)
        {
            IExecute("truncateFullyAndStartAt", offset);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/ProducerStateManager.html#update(kafka.log.ProducerAppendInfo)"/>
        /// </summary>
        /// <param name="appendInfo"><see cref="Kafka.Log.ProducerAppendInfo"/></param>
        public void Update(Kafka.Log.ProducerAppendInfo appendInfo)
        {
            IExecute("update", appendInfo);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/ProducerStateManager.html#updateMapEndOffset(long)"/>
        /// </summary>
        /// <param name="lastOffset"><see cref="long"/></param>
        public void UpdateMapEndOffset(long lastOffset)
        {
            IExecute("updateMapEndOffset", lastOffset);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/ProducerStateManager.html#updateParentDir(java.io.File)"/>
        /// </summary>
        /// <param name="parentDir"><see cref="Java.Io.File"/></param>
        public void UpdateParentDir(Java.Io.File parentDir)
        {
            IExecute("updateParentDir", parentDir);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}