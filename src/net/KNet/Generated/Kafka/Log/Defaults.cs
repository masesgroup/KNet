/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka_2.13-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Kafka.Log
{
    #region Defaults
    public partial class Defaults
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/Defaults.html#CleanupPolicy()"/> 
        /// </summary>
        public static string CleanupPolicy
        {
            get { return SExecute<string>(LocalBridgeClazz, "CleanupPolicy"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/Defaults.html#CompressionType()"/> 
        /// </summary>
        public static string CompressionType
        {
            get { return SExecute<string>(LocalBridgeClazz, "CompressionType"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/Defaults.html#DeleteRetentionMs()"/> 
        /// </summary>
        public static long DeleteRetentionMs
        {
            get { return SExecute<long>(LocalBridgeClazz, "DeleteRetentionMs"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/Defaults.html#FileDeleteDelayMs()"/> 
        /// </summary>
        public static int FileDeleteDelayMs
        {
            get { return SExecute<int>(LocalBridgeClazz, "FileDeleteDelayMs"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/Defaults.html#FlushInterval()"/> 
        /// </summary>
        public static long FlushInterval
        {
            get { return SExecute<long>(LocalBridgeClazz, "FlushInterval"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/Defaults.html#FlushMs()"/> 
        /// </summary>
        public static long FlushMs
        {
            get { return SExecute<long>(LocalBridgeClazz, "FlushMs"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/Defaults.html#FollowerReplicationThrottledReplicas()"/> 
        /// </summary>
        public static Java.Util.List<string> FollowerReplicationThrottledReplicas
        {
            get { return SExecute<Java.Util.List<string>>(LocalBridgeClazz, "FollowerReplicationThrottledReplicas"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/Defaults.html#IndexInterval()"/> 
        /// </summary>
        public static int IndexInterval
        {
            get { return SExecute<int>(LocalBridgeClazz, "IndexInterval"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/Defaults.html#LeaderReplicationThrottledReplicas()"/> 
        /// </summary>
        public static Java.Util.List<string> LeaderReplicationThrottledReplicas
        {
            get { return SExecute<Java.Util.List<string>>(LocalBridgeClazz, "LeaderReplicationThrottledReplicas"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/Defaults.html#LocalRetentionBytes()"/> 
        /// </summary>
        public static int LocalRetentionBytes
        {
            get { return SExecute<int>(LocalBridgeClazz, "LocalRetentionBytes"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/Defaults.html#LocalRetentionMs()"/> 
        /// </summary>
        public static int LocalRetentionMs
        {
            get { return SExecute<int>(LocalBridgeClazz, "LocalRetentionMs"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/Defaults.html#MaxCompactionLagMs()"/> 
        /// </summary>
        public static long MaxCompactionLagMs
        {
            get { return SExecute<long>(LocalBridgeClazz, "MaxCompactionLagMs"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/Defaults.html#MaxIdMapSnapshots()"/> 
        /// </summary>
        public static int MaxIdMapSnapshots
        {
            get { return SExecute<int>(LocalBridgeClazz, "MaxIdMapSnapshots"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/Defaults.html#MaxIndexSize()"/> 
        /// </summary>
        public static int MaxIndexSize
        {
            get { return SExecute<int>(LocalBridgeClazz, "MaxIndexSize"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/Defaults.html#MaxMessageSize()"/> 
        /// </summary>
        public static int MaxMessageSize
        {
            get { return SExecute<int>(LocalBridgeClazz, "MaxMessageSize"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/Defaults.html#MessageDownConversionEnable()"/> 
        /// </summary>
        public static bool MessageDownConversionEnable
        {
            get { return SExecute<bool>(LocalBridgeClazz, "MessageDownConversionEnable"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/Defaults.html#MessageFormatVersion()"/> 
        /// </summary>
        public static string MessageFormatVersion
        {
            get { return SExecute<string>(LocalBridgeClazz, "MessageFormatVersion"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/Defaults.html#MessageTimestampDifferenceMaxMs()"/> 
        /// </summary>
        public static long MessageTimestampDifferenceMaxMs
        {
            get { return SExecute<long>(LocalBridgeClazz, "MessageTimestampDifferenceMaxMs"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/Defaults.html#MessageTimestampType()"/> 
        /// </summary>
        public static string MessageTimestampType
        {
            get { return SExecute<string>(LocalBridgeClazz, "MessageTimestampType"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/Defaults.html#MinCleanableDirtyRatio()"/> 
        /// </summary>
        public static double MinCleanableDirtyRatio
        {
            get { return SExecute<double>(LocalBridgeClazz, "MinCleanableDirtyRatio"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/Defaults.html#MinCompactionLagMs()"/> 
        /// </summary>
        public static long MinCompactionLagMs
        {
            get { return SExecute<long>(LocalBridgeClazz, "MinCompactionLagMs"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/Defaults.html#MinInSyncReplicas()"/> 
        /// </summary>
        public static int MinInSyncReplicas
        {
            get { return SExecute<int>(LocalBridgeClazz, "MinInSyncReplicas"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/Defaults.html#PreAllocateEnable()"/> 
        /// </summary>
        public static bool PreAllocateEnable
        {
            get { return SExecute<bool>(LocalBridgeClazz, "PreAllocateEnable"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/Defaults.html#RemoteLogStorageEnable()"/> 
        /// </summary>
        public static bool RemoteLogStorageEnable
        {
            get { return SExecute<bool>(LocalBridgeClazz, "RemoteLogStorageEnable"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/Defaults.html#RetentionMs()"/> 
        /// </summary>
        public static long RetentionMs
        {
            get { return SExecute<long>(LocalBridgeClazz, "RetentionMs"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/Defaults.html#RetentionSize()"/> 
        /// </summary>
        public static long RetentionSize
        {
            get { return SExecute<long>(LocalBridgeClazz, "RetentionSize"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/Defaults.html#SegmentJitterMs()"/> 
        /// </summary>
        public static long SegmentJitterMs
        {
            get { return SExecute<long>(LocalBridgeClazz, "SegmentJitterMs"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/Defaults.html#SegmentMs()"/> 
        /// </summary>
        public static long SegmentMs
        {
            get { return SExecute<long>(LocalBridgeClazz, "SegmentMs"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/Defaults.html#SegmentSize()"/> 
        /// </summary>
        public static int SegmentSize
        {
            get { return SExecute<int>(LocalBridgeClazz, "SegmentSize"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/Defaults.html#UncleanLeaderElectionEnable()"/> 
        /// </summary>
        public static bool UncleanLeaderElectionEnable
        {
            get { return SExecute<bool>(LocalBridgeClazz, "UncleanLeaderElectionEnable"); }
        }

        #endregion

        #region Instance methods

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}