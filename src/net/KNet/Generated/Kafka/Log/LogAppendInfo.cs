/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka_2.13-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Kafka.Log
{
    #region LogAppendInfo
    public partial class LogAppendInfo
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Kafka.Log.LogAppendInfo"/> to <see cref="Java.Io.Serializable"/>
        /// </summary>
        public static implicit operator Java.Io.Serializable(Kafka.Log.LogAppendInfo t) => t.Cast<Java.Io.Serializable>();

        #endregion

        #region Fields

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogAppendInfo.html#UnknownLogAppendInfo()"/> 
        /// </summary>
        public static Kafka.Log.LogAppendInfo UnknownLogAppendInfo
        {
            get { return SExecute<Kafka.Log.LogAppendInfo>(LocalBridgeClazz, "UnknownLogAppendInfo"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogAppendInfo.html#unknownLogAppendInfoWithLogStartOffset(long)"/>
        /// </summary>
        /// <param name="logStartOffset"><see cref="long"/></param>
        /// <returns><see cref="Kafka.Log.LogAppendInfo"/></returns>
        public static Kafka.Log.LogAppendInfo UnknownLogAppendInfoWithLogStartOffset(long logStartOffset)
        {
            return SExecute<Kafka.Log.LogAppendInfo>(LocalBridgeClazz, "unknownLogAppendInfoWithLogStartOffset", logStartOffset);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogAppendInfo.html#errorMessage()"/> 
        /// </summary>
        public string ErrorMessage
        {
            get { return IExecute<string>("errorMessage"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogAppendInfo.html#firstOrLastOffsetOfFirstBatch()"/> 
        /// </summary>
        public long FirstOrLastOffsetOfFirstBatch
        {
            get { return IExecute<long>("firstOrLastOffsetOfFirstBatch"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogAppendInfo.html#lastOffset()"/> 
        /// </summary>
        public long LastOffset
        {
            get { return IExecute<long>("lastOffset"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogAppendInfo.html#lastOffsetOfFirstBatch()"/> 
        /// </summary>
        public long LastOffsetOfFirstBatch
        {
            get { return IExecute<long>("lastOffsetOfFirstBatch"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogAppendInfo.html#leaderHwChange()"/> 
        /// </summary>
        public Kafka.Log.LeaderHwChange LeaderHwChange
        {
            get { return IExecute<Kafka.Log.LeaderHwChange>("leaderHwChange"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogAppendInfo.html#logAppendTime()"/> 
        /// </summary>
        public long LogAppendTime
        {
            get { return IExecute<long>("logAppendTime"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogAppendInfo.html#logStartOffset()"/> 
        /// </summary>
        public long LogStartOffset
        {
            get { return IExecute<long>("logStartOffset"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogAppendInfo.html#maxTimestamp()"/> 
        /// </summary>
        public long MaxTimestamp
        {
            get { return IExecute<long>("maxTimestamp"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogAppendInfo.html#numMessages()"/> 
        /// </summary>
        public long NumMessages
        {
            get { return IExecute<long>("numMessages"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogAppendInfo.html#offsetOfMaxTimestamp()"/> 
        /// </summary>
        public long OffsetOfMaxTimestamp
        {
            get { return IExecute<long>("offsetOfMaxTimestamp"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogAppendInfo.html#offsetsMonotonic()"/> 
        /// </summary>
        public bool OffsetsMonotonic
        {
            get { return IExecute<bool>("offsetsMonotonic"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogAppendInfo.html#productArity()"/> 
        /// </summary>
        public int ProductArity
        {
            get { return IExecute<int>("productArity"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogAppendInfo.html#productPrefix()"/> 
        /// </summary>
        public string ProductPrefix
        {
            get { return IExecute<string>("productPrefix"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogAppendInfo.html#recordConversionStats()"/> 
        /// </summary>
        public Org.Apache.Kafka.Common.Record.RecordConversionStats RecordConversionStats
        {
            get { return IExecute<Org.Apache.Kafka.Common.Record.RecordConversionStats>("recordConversionStats"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogAppendInfo.html#shallowCount()"/> 
        /// </summary>
        public int ShallowCount
        {
            get { return IExecute<int>("shallowCount"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogAppendInfo.html#sourceCodec()"/> 
        /// </summary>
        public Kafka.Message.CompressionCodec SourceCodec
        {
            get { return IExecute<Kafka.Message.CompressionCodec>("sourceCodec"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogAppendInfo.html#targetCodec()"/> 
        /// </summary>
        public Kafka.Message.CompressionCodec TargetCodec
        {
            get { return IExecute<Kafka.Message.CompressionCodec>("targetCodec"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogAppendInfo.html#validBytes()"/> 
        /// </summary>
        public int ValidBytes
        {
            get { return IExecute<int>("validBytes"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogAppendInfo.html#canEqual(java.lang.Object)"/>
        /// </summary>
        /// <param name="x$1"><see cref="object"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool CanEqual(object x_1)
        {
            return IExecute<bool>("canEqual", x_1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogAppendInfo.html#productElement(int)"/>
        /// </summary>
        /// <param name="x$1"><see cref="int"/></param>
        /// <returns><see cref="object"/></returns>
        public object ProductElement(int x_1)
        {
            return IExecute("productElement", x_1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogAppendInfo.html#productElementName(int)"/>
        /// </summary>
        /// <param name="x$1"><see cref="int"/></param>
        /// <returns><see cref="string"/></returns>
        public string ProductElementName(int x_1)
        {
            return IExecute<string>("productElementName", x_1);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}