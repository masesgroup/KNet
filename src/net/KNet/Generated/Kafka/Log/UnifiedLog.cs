/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka_2.13-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Kafka.Log
{
    #region UnifiedLog
    public partial class UnifiedLog
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Kafka.Log.UnifiedLog"/> to <see cref="Kafka.Metrics.KafkaMetricsGroup"/>
        /// </summary>
        public static implicit operator Kafka.Metrics.KafkaMetricsGroup(Kafka.Log.UnifiedLog t) => t.Cast<Kafka.Metrics.KafkaMetricsGroup>();

        #endregion

        #region Fields

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/UnifiedLog.html#CleanedFileSuffix()"/> 
        /// </summary>
        public static string CleanedFileSuffix
        {
            get { return SExecute<string>(LocalBridgeClazz, "CleanedFileSuffix"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/UnifiedLog.html#DeletedFileSuffix()"/> 
        /// </summary>
        public static string DeletedFileSuffix
        {
            get { return SExecute<string>(LocalBridgeClazz, "DeletedFileSuffix"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/UnifiedLog.html#DeleteDirSuffix()"/> 
        /// </summary>
        public static string DeleteDirSuffix
        {
            get { return SExecute<string>(LocalBridgeClazz, "DeleteDirSuffix"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/UnifiedLog.html#FutureDirSuffix()"/> 
        /// </summary>
        public static string FutureDirSuffix
        {
            get { return SExecute<string>(LocalBridgeClazz, "FutureDirSuffix"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/UnifiedLog.html#IndexFileSuffix()"/> 
        /// </summary>
        public static string IndexFileSuffix
        {
            get { return SExecute<string>(LocalBridgeClazz, "IndexFileSuffix"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/UnifiedLog.html#LogFileSuffix()"/> 
        /// </summary>
        public static string LogFileSuffix
        {
            get { return SExecute<string>(LocalBridgeClazz, "LogFileSuffix"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/UnifiedLog.html#ProducerSnapshotFileSuffix()"/> 
        /// </summary>
        public static string ProducerSnapshotFileSuffix
        {
            get { return SExecute<string>(LocalBridgeClazz, "ProducerSnapshotFileSuffix"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/UnifiedLog.html#SwapFileSuffix()"/> 
        /// </summary>
        public static string SwapFileSuffix
        {
            get { return SExecute<string>(LocalBridgeClazz, "SwapFileSuffix"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/UnifiedLog.html#TimeIndexFileSuffix()"/> 
        /// </summary>
        public static string TimeIndexFileSuffix
        {
            get { return SExecute<string>(LocalBridgeClazz, "TimeIndexFileSuffix"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/UnifiedLog.html#TxnIndexFileSuffix()"/> 
        /// </summary>
        public static string TxnIndexFileSuffix
        {
            get { return SExecute<string>(LocalBridgeClazz, "TxnIndexFileSuffix"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/UnifiedLog.html#UnknownOffset()"/> 
        /// </summary>
        public static long UnknownOffset
        {
            get { return SExecute<long>(LocalBridgeClazz, "UnknownOffset"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/UnifiedLog.html#logFile(java.io.File,long,java.lang.String)"/>
        /// </summary>
        /// <param name="dir"><see cref="Java.Io.File"/></param>
        /// <param name="offset"><see cref="long"/></param>
        /// <param name="suffix"><see cref="string"/></param>
        /// <returns><see cref="Java.Io.File"/></returns>
        public static Java.Io.File LogFile(Java.Io.File dir, long offset, string suffix)
        {
            return SExecute<Java.Io.File>(LocalBridgeClazz, "logFile", dir, offset, suffix);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/UnifiedLog.html#offsetIndexFile(java.io.File,long,java.lang.String)"/>
        /// </summary>
        /// <param name="dir"><see cref="Java.Io.File"/></param>
        /// <param name="offset"><see cref="long"/></param>
        /// <param name="suffix"><see cref="string"/></param>
        /// <returns><see cref="Java.Io.File"/></returns>
        public static Java.Io.File OffsetIndexFile(Java.Io.File dir, long offset, string suffix)
        {
            return SExecute<Java.Io.File>(LocalBridgeClazz, "offsetIndexFile", dir, offset, suffix);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/UnifiedLog.html#producerSnapshotFile(java.io.File,long)"/>
        /// </summary>
        /// <param name="dir"><see cref="Java.Io.File"/></param>
        /// <param name="offset"><see cref="long"/></param>
        /// <returns><see cref="Java.Io.File"/></returns>
        public static Java.Io.File ProducerSnapshotFile(Java.Io.File dir, long offset)
        {
            return SExecute<Java.Io.File>(LocalBridgeClazz, "producerSnapshotFile", dir, offset);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/UnifiedLog.html#timeIndexFile(java.io.File,long,java.lang.String)"/>
        /// </summary>
        /// <param name="dir"><see cref="Java.Io.File"/></param>
        /// <param name="offset"><see cref="long"/></param>
        /// <param name="suffix"><see cref="string"/></param>
        /// <returns><see cref="Java.Io.File"/></returns>
        public static Java.Io.File TimeIndexFile(Java.Io.File dir, long offset, string suffix)
        {
            return SExecute<Java.Io.File>(LocalBridgeClazz, "timeIndexFile", dir, offset, suffix);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/UnifiedLog.html#transactionIndexFile(java.io.File,long,java.lang.String)"/>
        /// </summary>
        /// <param name="dir"><see cref="Java.Io.File"/></param>
        /// <param name="offset"><see cref="long"/></param>
        /// <param name="suffix"><see cref="string"/></param>
        /// <returns><see cref="Java.Io.File"/></returns>
        public static Java.Io.File TransactionIndexFile(Java.Io.File dir, long offset, string suffix)
        {
            return SExecute<Java.Io.File>(LocalBridgeClazz, "transactionIndexFile", dir, offset, suffix);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/UnifiedLog.html#logDeleteDirName(org.apache.kafka.common.TopicPartition)"/>
        /// </summary>
        /// <param name="topicPartition"><see cref="Org.Apache.Kafka.Common.TopicPartition"/></param>
        /// <returns><see cref="string"/></returns>
        public static string LogDeleteDirName(Org.Apache.Kafka.Common.TopicPartition topicPartition)
        {
            return SExecute<string>(LocalBridgeClazz, "logDeleteDirName", topicPartition);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/UnifiedLog.html#logDirName(org.apache.kafka.common.TopicPartition)"/>
        /// </summary>
        /// <param name="topicPartition"><see cref="Org.Apache.Kafka.Common.TopicPartition"/></param>
        /// <returns><see cref="string"/></returns>
        public static string LogDirName(Org.Apache.Kafka.Common.TopicPartition topicPartition)
        {
            return SExecute<string>(LocalBridgeClazz, "logDirName", topicPartition);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/UnifiedLog.html#logFutureDirName(org.apache.kafka.common.TopicPartition)"/>
        /// </summary>
        /// <param name="topicPartition"><see cref="Org.Apache.Kafka.Common.TopicPartition"/></param>
        /// <returns><see cref="string"/></returns>
        public static string LogFutureDirName(Org.Apache.Kafka.Common.TopicPartition topicPartition)
        {
            return SExecute<string>(LocalBridgeClazz, "logFutureDirName", topicPartition);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/UnifiedLog.html#offsetFromFile(java.io.File)"/>
        /// </summary>
        /// <param name="file"><see cref="Java.Io.File"/></param>
        /// <returns><see cref="long"/></returns>
        public static long OffsetFromFile(Java.Io.File file)
        {
            return SExecute<long>(LocalBridgeClazz, "offsetFromFile", file);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/UnifiedLog.html#offsetFromFileName(java.lang.String)"/>
        /// </summary>
        /// <param name="filename"><see cref="string"/></param>
        /// <returns><see cref="long"/></returns>
        public static long OffsetFromFileName(string filename)
        {
            return SExecute<long>(LocalBridgeClazz, "offsetFromFileName", filename);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/UnifiedLog.html#parseTopicPartitionName(java.io.File)"/>
        /// </summary>
        /// <param name="dir"><see cref="Java.Io.File"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.TopicPartition"/></returns>
        public static Org.Apache.Kafka.Common.TopicPartition ParseTopicPartitionName(Java.Io.File dir)
        {
            return SExecute<Org.Apache.Kafka.Common.TopicPartition>(LocalBridgeClazz, "parseTopicPartitionName", dir);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/UnifiedLog.html#deleteFileIfExists(java.io.File,java.lang.String)"/>
        /// </summary>
        /// <param name="file"><see cref="Java.Io.File"/></param>
        /// <param name="suffix"><see cref="string"/></param>
        public static void DeleteFileIfExists(Java.Io.File file, string suffix)
        {
            SExecute(LocalBridgeClazz, "deleteFileIfExists", file, suffix);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/UnifiedLog.html#activeSegment()"/> 
        /// </summary>
        public Kafka.Log.LogSegment ActiveSegment
        {
            get { return IExecute<Kafka.Log.LogSegment>("activeSegment"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/UnifiedLog.html#config()"/> 
        /// </summary>
        public Kafka.Log.LogConfig Config
        {
            get { return IExecute<Kafka.Log.LogConfig>("config"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/UnifiedLog.html#deleteOldSegments()"/> 
        /// </summary>
        public int DeleteOldSegments
        {
            get { return IExecute<int>("deleteOldSegments"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/UnifiedLog.html#dir()"/> 
        /// </summary>
        public Java.Io.File Dir
        {
            get { return IExecute<Java.Io.File>("dir"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/UnifiedLog.html#fetchOffsetSnapshot()"/> 
        /// </summary>
        public Kafka.Log.LogOffsetSnapshot FetchOffsetSnapshot
        {
            get { return IExecute<Kafka.Log.LogOffsetSnapshot>("fetchOffsetSnapshot"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/UnifiedLog.html#highWatermark()"/> 
        /// </summary>
        public long HighWatermark
        {
            get { return IExecute<long>("highWatermark"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/UnifiedLog.html#isDebugEnabled()"/> 
        /// </summary>
        public bool IsDebugEnabled
        {
            get { return IExecute<bool>("isDebugEnabled"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/UnifiedLog.html#isFuture()"/> 
        /// </summary>
        public bool IsFuture
        {
            get { return IExecute<bool>("isFuture"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/UnifiedLog.html#isTraceEnabled()"/> 
        /// </summary>
        public bool IsTraceEnabled
        {
            get { return IExecute<bool>("isTraceEnabled"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/UnifiedLog.html#keepPartitionMetadataFile()"/> 
        /// </summary>
        public bool KeepPartitionMetadataFile
        {
            get { return IExecute<bool>("keepPartitionMetadataFile"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/UnifiedLog.html#lastFlushTime()"/> 
        /// </summary>
        public long LastFlushTime
        {
            get { return IExecute<long>("lastFlushTime"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/UnifiedLog.html#lastStableOffset()"/> 
        /// </summary>
        public long LastStableOffset
        {
            get { return IExecute<long>("lastStableOffset"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/UnifiedLog.html#lastStableOffsetLag()"/> 
        /// </summary>
        public long LastStableOffsetLag
        {
            get { return IExecute<long>("lastStableOffsetLag"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/UnifiedLog.html#latestProducerStateEndOffset()"/> 
        /// </summary>
        public long LatestProducerStateEndOffset
        {
            get { return IExecute<long>("latestProducerStateEndOffset"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/UnifiedLog.html#logDirFailureChannel()"/> 
        /// </summary>
        public Kafka.Server.LogDirFailureChannel LogDirFailureChannel
        {
            get { return IExecute<Kafka.Server.LogDirFailureChannel>("logDirFailureChannel"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/UnifiedLog.html#logEndOffset()"/> 
        /// </summary>
        public long LogEndOffset
        {
            get { return IExecute<long>("logEndOffset"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/UnifiedLog.html#logEndOffsetMetadata()"/> 
        /// </summary>
        public Kafka.Server.LogOffsetMetadata LogEndOffsetMetadata
        {
            get { return IExecute<Kafka.Server.LogOffsetMetadata>("logEndOffsetMetadata"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/UnifiedLog.html#logger()"/> 
        /// </summary>
        public Com.Typesafe.Scalalogging.Logger Logger
        {
            get { return IExecute<Com.Typesafe.Scalalogging.Logger>("logger"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/UnifiedLog.html#loggerName()"/> 
        /// </summary>
        public string LoggerName
        {
            get { return IExecute<string>("loggerName"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/UnifiedLog.html#logIdent()"/> 
        /// </summary>
        public string LogIdent
        {
            get { return IExecute<string>("logIdent"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/UnifiedLog.html#logStartOffset()"/> 
        /// </summary>
        public long LogStartOffset
        {
            get { return IExecute<long>("logStartOffset"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/UnifiedLog.html#name()"/> 
        /// </summary>
        public string Name
        {
            get { return IExecute<string>("name"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/UnifiedLog.html#numberOfSegments()"/> 
        /// </summary>
        public int NumberOfSegments
        {
            get { return IExecute<int>("numberOfSegments"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/UnifiedLog.html#parentDir()"/> 
        /// </summary>
        public string ParentDir
        {
            get { return IExecute<string>("parentDir"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/UnifiedLog.html#parentDirFile()"/> 
        /// </summary>
        public Java.Io.File ParentDirFile
        {
            get { return IExecute<Java.Io.File>("parentDirFile"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/UnifiedLog.html#producerExpireCheck()"/> 
        /// </summary>
        public Java.Util.Concurrent.ScheduledFuture ProducerExpireCheck
        {
            get { return IExecute<Java.Util.Concurrent.ScheduledFuture>("producerExpireCheck"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/UnifiedLog.html#producerIdExpirationCheckIntervalMs()"/> 
        /// </summary>
        public int ProducerIdExpirationCheckIntervalMs
        {
            get { return IExecute<int>("producerIdExpirationCheckIntervalMs"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/UnifiedLog.html#producerStateManager()"/> 
        /// </summary>
        public Kafka.Log.ProducerStateManager ProducerStateManager
        {
            get { return IExecute<Kafka.Log.ProducerStateManager>("producerStateManager"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/UnifiedLog.html#recoveryPoint()"/> 
        /// </summary>
        public long RecoveryPoint
        {
            get { return IExecute<long>("recoveryPoint"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/UnifiedLog.html#scheduler()"/> 
        /// </summary>
        public Kafka.Utils.Scheduler Scheduler
        {
            get { return IExecute<Kafka.Utils.Scheduler>("scheduler"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/UnifiedLog.html#size()"/> 
        /// </summary>
        public long Size
        {
            get { return IExecute<long>("size"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/UnifiedLog.html#time()"/> 
        /// </summary>
        public Org.Apache.Kafka.Common.Utils.Time Time
        {
            get { return IExecute<Org.Apache.Kafka.Common.Utils.Time>("time"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/UnifiedLog.html#topicPartition()"/> 
        /// </summary>
        public Org.Apache.Kafka.Common.TopicPartition TopicPartition
        {
            get { return IExecute<Org.Apache.Kafka.Common.TopicPartition>("topicPartition"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/UnifiedLog.html#hasLateTransaction(long)"/>
        /// </summary>
        /// <param name="currentTimeMs"><see cref="long"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool HasLateTransaction(long currentTimeMs)
        {
            return IExecute<bool>("hasLateTransaction", currentTimeMs);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/UnifiedLog.html#maybeIncrementLogStartOffset(long,kafka.log.LogStartOffsetIncrementReason)"/>
        /// </summary>
        /// <param name="newLogStartOffset"><see cref="long"/></param>
        /// <param name="reason"><see cref="Kafka.Log.LogStartOffsetIncrementReason"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool MaybeIncrementLogStartOffset(long newLogStartOffset, Kafka.Log.LogStartOffsetIncrementReason reason)
        {
            return IExecute<bool>("maybeIncrementLogStartOffset", newLogStartOffset, reason);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/UnifiedLog.html#truncateTo(long)"/>
        /// </summary>
        /// <param name="targetOffset"><see cref="long"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool TruncateTo(long targetOffset)
        {
            return IExecute<bool>("truncateTo", targetOffset);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/UnifiedLog.html#newMeter(com.yammer.metrics.core.MetricName,java.lang.String,java.util.concurrent.TimeUnit)"/>
        /// </summary>
        /// <param name="metricName"><see cref="Com.Yammer.Metrics.Core.MetricName"/></param>
        /// <param name="eventType"><see cref="string"/></param>
        /// <param name="timeUnit"><see cref="Java.Util.Concurrent.TimeUnit"/></param>
        /// <returns><see cref="Com.Yammer.Metrics.Core.Meter"/></returns>
        public Com.Yammer.Metrics.Core.Meter NewMeter(Com.Yammer.Metrics.Core.MetricName metricName, string eventType, Java.Util.Concurrent.TimeUnit timeUnit)
        {
            return IExecute<Com.Yammer.Metrics.Core.Meter>("newMeter", metricName, eventType, timeUnit);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/UnifiedLog.html#msgWithLogIdent(java.lang.String)"/>
        /// </summary>
        /// <param name="msg"><see cref="string"/></param>
        /// <returns><see cref="string"/></returns>
        public string MsgWithLogIdent(string msg)
        {
            return IExecute<string>("msgWithLogIdent", msg);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/UnifiedLog.html#appendAsFollower(org.apache.kafka.common.record.MemoryRecords)"/>
        /// </summary>
        /// <param name="records"><see cref="Org.Apache.Kafka.Common.Record.MemoryRecords"/></param>
        /// <returns><see cref="Kafka.Log.LogAppendInfo"/></returns>
        public Kafka.Log.LogAppendInfo AppendAsFollower(Org.Apache.Kafka.Common.Record.MemoryRecords records)
        {
            return IExecute<Kafka.Log.LogAppendInfo>("appendAsFollower", records);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/UnifiedLog.html#appendAsLeader(org.apache.kafka.common.record.MemoryRecords,int,kafka.log.AppendOrigin,org.apache.kafka.server.common.MetadataVersion,kafka.server.RequestLocal)"/>
        /// </summary>
        /// <param name="records"><see cref="Org.Apache.Kafka.Common.Record.MemoryRecords"/></param>
        /// <param name="leaderEpoch"><see cref="int"/></param>
        /// <param name="origin"><see cref="Kafka.Log.AppendOrigin"/></param>
        /// <param name="interBrokerProtocolVersion"><see cref="Org.Apache.Kafka.Server.Common.MetadataVersion"/></param>
        /// <param name="requestLocal"><see cref="Kafka.Server.RequestLocal"/></param>
        /// <returns><see cref="Kafka.Log.LogAppendInfo"/></returns>
        public Kafka.Log.LogAppendInfo AppendAsLeader(Org.Apache.Kafka.Common.Record.MemoryRecords records, int leaderEpoch, Kafka.Log.AppendOrigin origin, Org.Apache.Kafka.Server.Common.MetadataVersion interBrokerProtocolVersion, Kafka.Server.RequestLocal requestLocal)
        {
            return IExecute<Kafka.Log.LogAppendInfo>("appendAsLeader", records, leaderEpoch, origin, interBrokerProtocolVersion, requestLocal);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/UnifiedLog.html#updateConfig(kafka.log.LogConfig)"/>
        /// </summary>
        /// <param name="newConfig"><see cref="Kafka.Log.LogConfig"/></param>
        /// <returns><see cref="Kafka.Log.LogConfig"/></returns>
        public Kafka.Log.LogConfig UpdateConfig(Kafka.Log.LogConfig newConfig)
        {
            return IExecute<Kafka.Log.LogConfig>("updateConfig", newConfig);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/UnifiedLog.html#addSegment(kafka.log.LogSegment)"/>
        /// </summary>
        /// <param name="segment"><see cref="Kafka.Log.LogSegment"/></param>
        /// <returns><see cref="Kafka.Log.LogSegment"/></returns>
        public Kafka.Log.LogSegment AddSegment(Kafka.Log.LogSegment segment)
        {
            return IExecute<Kafka.Log.LogSegment>("addSegment", segment);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/UnifiedLog.html#read(long,int,kafka.server.FetchIsolation,boolean)"/>
        /// </summary>
        /// <param name="startOffset"><see cref="long"/></param>
        /// <param name="maxLength"><see cref="int"/></param>
        /// <param name="isolation"><see cref="Kafka.Server.FetchIsolation"/></param>
        /// <param name="minOneMessage"><see cref="bool"/></param>
        /// <returns><see cref="Kafka.Server.FetchDataInfo"/></returns>
        public Kafka.Server.FetchDataInfo Read(long startOffset, int maxLength, Kafka.Server.FetchIsolation isolation, bool minOneMessage)
        {
            return IExecute<Kafka.Server.FetchDataInfo>("read", startOffset, maxLength, isolation, minOneMessage);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/UnifiedLog.html#updateHighWatermark(kafka.server.LogOffsetMetadata)"/>
        /// </summary>
        /// <param name="highWatermarkMetadata"><see cref="Kafka.Server.LogOffsetMetadata"/></param>
        /// <returns><see cref="long"/></returns>
        public long UpdateHighWatermark(Kafka.Server.LogOffsetMetadata highWatermarkMetadata)
        {
            return IExecute<long>("updateHighWatermark", highWatermarkMetadata);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/UnifiedLog.html#updateHighWatermark(long)"/>
        /// </summary>
        /// <param name="hw"><see cref="long"/></param>
        /// <returns><see cref="long"/></returns>
        public long UpdateHighWatermark(long hw)
        {
            return IExecute<long>("updateHighWatermark", hw);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/UnifiedLog.html#assignTopicId(org.apache.kafka.common.Uuid)"/>
        /// </summary>
        /// <param name="topicId"><see cref="Org.Apache.Kafka.Common.Uuid"/></param>
        public void AssignTopicId(Org.Apache.Kafka.Common.Uuid topicId)
        {
            IExecute("assignTopicId", topicId);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/UnifiedLog.html#close()"/>
        /// </summary>
        public void Close()
        {
            IExecute("close");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/UnifiedLog.html#closeHandlers()"/>
        /// </summary>
        public void CloseHandlers()
        {
            IExecute("closeHandlers");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/UnifiedLog.html#delete()"/>
        /// </summary>
        public void Delete()
        {
            IExecute("delete");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/UnifiedLog.html#flush(boolean)"/>
        /// </summary>
        /// <param name="forceFlushActiveSegment"><see cref="bool"/></param>
        public void Flush(bool forceFlushActiveSegment)
        {
            IExecute("flush", forceFlushActiveSegment);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/UnifiedLog.html#flushUptoOffsetExclusive(long)"/>
        /// </summary>
        /// <param name="offset"><see cref="long"/></param>
        public void FlushUptoOffsetExclusive(long offset)
        {
            IExecute("flushUptoOffsetExclusive", offset);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/UnifiedLog.html#initializeTopicId()"/>
        /// </summary>
        public void InitializeTopicId()
        {
            IExecute("initializeTopicId");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/UnifiedLog.html#maybeAssignEpochStartOffset(int,long)"/>
        /// </summary>
        /// <param name="leaderEpoch"><see cref="int"/></param>
        /// <param name="startOffset"><see cref="long"/></param>
        public void MaybeAssignEpochStartOffset(int leaderEpoch, long startOffset)
        {
            IExecute("maybeAssignEpochStartOffset", leaderEpoch, startOffset);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/UnifiedLog.html#removeLogMetrics()"/>
        /// </summary>
        public void RemoveLogMetrics()
        {
            IExecute("removeLogMetrics");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/UnifiedLog.html#renameDir(java.lang.String,boolean)"/>
        /// </summary>
        /// <param name="name"><see cref="string"/></param>
        /// <param name="shouldReinitialize"><see cref="bool"/></param>
        public void RenameDir(string name, bool shouldReinitialize)
        {
            IExecute("renameDir", name, shouldReinitialize);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/UnifiedLog.html#takeProducerSnapshot()"/>
        /// </summary>
        public void TakeProducerSnapshot()
        {
            IExecute("takeProducerSnapshot");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/UnifiedLog.html#truncateFullyAndStartAt(long)"/>
        /// </summary>
        /// <param name="newOffset"><see cref="long"/></param>
        public void TruncateFullyAndStartAt(long newOffset)
        {
            IExecute("truncateFullyAndStartAt", newOffset);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}