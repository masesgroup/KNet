/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka_2.13-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Kafka.Log
{
    #region AbstractIndex
    public partial class AbstractIndex
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/AbstractIndex.html#%3Cinit%3E(java.io.File,long,int,boolean)"/>
        /// </summary>
        /// <param name="_file"><see cref="Java.Io.File"/></param>
        /// <param name="baseOffset"><see cref="long"/></param>
        /// <param name="maxIndexSize"><see cref="int"/></param>
        /// <param name="writable"><see cref="bool"/></param>
        public AbstractIndex(Java.Io.File _file, long baseOffset, int maxIndexSize, bool writable)
            : base(_file, baseOffset, maxIndexSize, writable)
        {
        }

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Kafka.Log.AbstractIndex"/> to <see cref="Java.Io.Closeable"/>
        /// </summary>
        public static implicit operator Java.Io.Closeable(Kafka.Log.AbstractIndex t) => t.Cast<Java.Io.Closeable>();

        #endregion

        #region Fields

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/AbstractIndex.html#isDebugEnabled()"/> 
        /// </summary>
        public static bool IsDebugEnabled
        {
            get { return SExecute<bool>(LocalBridgeClazz, "isDebugEnabled"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/AbstractIndex.html#isTraceEnabled()"/> 
        /// </summary>
        public static bool IsTraceEnabled
        {
            get { return SExecute<bool>(LocalBridgeClazz, "isTraceEnabled"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/AbstractIndex.html#loggerName()"/> 
        /// </summary>
        public static string LoggerName
        {
            get { return SExecute<string>(LocalBridgeClazz, "loggerName"); }
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/AbstractIndex.html#_entries()"/> 
        /// </summary>
        public int _entries
        {
            get { return IExecute<int>("_entries"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/AbstractIndex.html#_warmEntries()"/> 
        /// </summary>
        public int _warmEntries
        {
            get { return IExecute<int>("_warmEntries"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/AbstractIndex.html#baseOffset()"/> 
        /// </summary>
        public long BaseOffset
        {
            get { return IExecute<long>("baseOffset"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/AbstractIndex.html#deleteIfExists()"/> 
        /// </summary>
        public bool DeleteIfExists
        {
            get { return IExecute<bool>("deleteIfExists"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/AbstractIndex.html#entries()"/> 
        /// </summary>
        public int Entries
        {
            get { return IExecute<int>("entries"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/AbstractIndex.html#entrySize()"/> 
        /// </summary>
        public int EntrySize
        {
            get { return IExecute<int>("entrySize"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/AbstractIndex.html#file()"/> 
        /// </summary>
        public Java.Io.File File
        {
            get { return IExecute<Java.Io.File>("file"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/AbstractIndex.html#isFull()"/> 
        /// </summary>
        public bool IsFull
        {
            get { return IExecute<bool>("isFull"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/AbstractIndex.html#length()"/> 
        /// </summary>
        public long Length
        {
            get { return IExecute<long>("length"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/AbstractIndex.html#lock()"/> 
        /// </summary>
        public Java.Util.Concurrent.Locks.ReentrantLock Lock
        {
            get { return IExecute<Java.Util.Concurrent.Locks.ReentrantLock>("lock"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/AbstractIndex.html#maxEntries()"/> 
        /// </summary>
        public int MaxEntries
        {
            get { return IExecute<int>("maxEntries"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/AbstractIndex.html#maxIndexSize()"/> 
        /// </summary>
        public int MaxIndexSize
        {
            get { return IExecute<int>("maxIndexSize"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/AbstractIndex.html#mmap()"/> 
        /// </summary>
        public Java.Nio.MappedByteBuffer Mmap
        {
            get { return IExecute<Java.Nio.MappedByteBuffer>("mmap"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/AbstractIndex.html#sizeInBytes()"/> 
        /// </summary>
        public int SizeInBytes
        {
            get { return IExecute<int>("sizeInBytes"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/AbstractIndex.html#writable()"/> 
        /// </summary>
        public bool Writable
        {
            get { return IExecute<bool>("writable"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/AbstractIndex.html#parseEntry(java.nio.ByteBuffer,int)"/>
        /// </summary>
        /// <param name="buffer"><see cref="Java.Nio.ByteBuffer"/></param>
        /// <param name="n"><see cref="int"/></param>
        /// <returns><see cref="Kafka.Log.IndexEntry"/></returns>
        public Kafka.Log.IndexEntry ParseEntry(Java.Nio.ByteBuffer buffer, int n)
        {
            return IExecute<Kafka.Log.IndexEntry>("parseEntry", buffer, n);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/AbstractIndex.html#sanityCheck()"/>
        /// </summary>
        public void SanityCheck()
        {
            IExecute("sanityCheck");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/AbstractIndex.html#truncate()"/>
        /// </summary>
        public void Truncate()
        {
            IExecute("truncate");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/AbstractIndex.html#truncateTo(long)"/>
        /// </summary>
        /// <param name="offset"><see cref="long"/></param>
        public void TruncateTo(long offset)
        {
            IExecute("truncateTo", offset);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/AbstractIndex.html#canAppendOffset(long)"/>
        /// </summary>
        /// <param name="offset"><see cref="long"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool CanAppendOffset(long offset)
        {
            return IExecute<bool>("canAppendOffset", offset);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/AbstractIndex.html#resize(int)"/>
        /// </summary>
        /// <param name="newSize"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool Resize(int newSize)
        {
            return IExecute<bool>("resize", newSize);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/AbstractIndex.html#largestLowerBoundSlotFor(java.nio.ByteBuffer,long,kafka.log.IndexSearchType)"/>
        /// </summary>
        /// <param name="idx"><see cref="Java.Nio.ByteBuffer"/></param>
        /// <param name="target"><see cref="long"/></param>
        /// <param name="searchEntity"><see cref="Kafka.Log.IndexSearchType"/></param>
        /// <returns><see cref="int"/></returns>
        public int LargestLowerBoundSlotFor(Java.Nio.ByteBuffer idx, long target, Kafka.Log.IndexSearchType searchEntity)
        {
            return IExecute<int>("largestLowerBoundSlotFor", idx, target, searchEntity);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/AbstractIndex.html#relativeOffset(long)"/>
        /// </summary>
        /// <param name="offset"><see cref="long"/></param>
        /// <returns><see cref="int"/></returns>
        public int RelativeOffset(long offset)
        {
            return IExecute<int>("relativeOffset", offset);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/AbstractIndex.html#smallestUpperBoundSlotFor(java.nio.ByteBuffer,long,kafka.log.IndexSearchType)"/>
        /// </summary>
        /// <param name="idx"><see cref="Java.Nio.ByteBuffer"/></param>
        /// <param name="target"><see cref="long"/></param>
        /// <param name="searchEntity"><see cref="Kafka.Log.IndexSearchType"/></param>
        /// <returns><see cref="int"/></returns>
        public int SmallestUpperBoundSlotFor(Java.Nio.ByteBuffer idx, long target, Kafka.Log.IndexSearchType searchEntity)
        {
            return IExecute<int>("smallestUpperBoundSlotFor", idx, target, searchEntity);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/AbstractIndex.html#close()"/>
        /// </summary>
        public void Close()
        {
            IExecute("close");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/AbstractIndex.html#closeHandler()"/>
        /// </summary>
        public void CloseHandler()
        {
            IExecute("closeHandler");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/AbstractIndex.html#flush()"/>
        /// </summary>
        public void Flush()
        {
            IExecute("flush");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/AbstractIndex.html#forceUnmap()"/>
        /// </summary>
        public void ForceUnmap()
        {
            IExecute("forceUnmap");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/AbstractIndex.html#renameTo(java.io.File)"/>
        /// </summary>
        /// <param name="f"><see cref="Java.Io.File"/></param>
        public void RenameTo(Java.Io.File f)
        {
            IExecute("renameTo", f);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/AbstractIndex.html#reset()"/>
        /// </summary>
        public void Reset()
        {
            IExecute("reset");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/AbstractIndex.html#safeForceUnmap()"/>
        /// </summary>
        public void SafeForceUnmap()
        {
            IExecute("safeForceUnmap");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/AbstractIndex.html#trimToValidSize()"/>
        /// </summary>
        public void TrimToValidSize()
        {
            IExecute("trimToValidSize");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/AbstractIndex.html#updateParentDir(java.io.File)"/>
        /// </summary>
        /// <param name="parentDir"><see cref="Java.Io.File"/></param>
        public void UpdateParentDir(Java.Io.File parentDir)
        {
            IExecute("updateParentDir", parentDir);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}