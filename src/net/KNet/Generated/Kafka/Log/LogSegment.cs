/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka_2.13-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Kafka.Log
{
    #region LogSegment
    public partial class LogSegment
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogSegment.html#%3Cinit%3E(org.apache.kafka.common.record.FileRecords,kafka.log.LazyIndex,kafka.log.LazyIndex,kafka.log.TransactionIndex,long,int,long,org.apache.kafka.common.utils.Time)"/>
        /// </summary>
        /// <param name="log"><see cref="Org.Apache.Kafka.Common.Record.FileRecords"/></param>
        /// <param name="lazyOffsetIndex"><see cref="Kafka.Log.LazyIndex"/></param>
        /// <param name="lazyTimeIndex"><see cref="Kafka.Log.LazyIndex"/></param>
        /// <param name="txnIndex"><see cref="Kafka.Log.TransactionIndex"/></param>
        /// <param name="baseOffset"><see cref="long"/></param>
        /// <param name="indexIntervalBytes"><see cref="int"/></param>
        /// <param name="rollJitterMs"><see cref="long"/></param>
        /// <param name="time"><see cref="Org.Apache.Kafka.Common.Utils.Time"/></param>
        public LogSegment(Org.Apache.Kafka.Common.Record.FileRecords log, Kafka.Log.LazyIndex lazyOffsetIndex, Kafka.Log.LazyIndex lazyTimeIndex, Kafka.Log.TransactionIndex txnIndex, long baseOffset, int indexIntervalBytes, long rollJitterMs, Org.Apache.Kafka.Common.Utils.Time time)
            : base(log, lazyOffsetIndex, lazyTimeIndex, txnIndex, baseOffset, indexIntervalBytes, rollJitterMs, time)
        {
        }

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Kafka.Log.LogSegment"/> to <see cref="Kafka.Utils.Logging"/>
        /// </summary>
        public static implicit operator Kafka.Utils.Logging(Kafka.Log.LogSegment t) => t.Cast<Kafka.Utils.Logging>();

        #endregion

        #region Fields

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogSegment.html#open(java.io.File,long,kafka.log.LogConfig,org.apache.kafka.common.utils.Time,boolean,int,boolean,java.lang.String)"/>
        /// </summary>
        /// <param name="dir"><see cref="Java.Io.File"/></param>
        /// <param name="baseOffset"><see cref="long"/></param>
        /// <param name="config"><see cref="Kafka.Log.LogConfig"/></param>
        /// <param name="time"><see cref="Org.Apache.Kafka.Common.Utils.Time"/></param>
        /// <param name="fileAlreadyExists"><see cref="bool"/></param>
        /// <param name="initFileSize"><see cref="int"/></param>
        /// <param name="preallocate"><see cref="bool"/></param>
        /// <param name="fileSuffix"><see cref="string"/></param>
        /// <returns><see cref="Kafka.Log.LogSegment"/></returns>
        public static Kafka.Log.LogSegment Open(Java.Io.File dir, long baseOffset, Kafka.Log.LogConfig config, Org.Apache.Kafka.Common.Utils.Time time, bool fileAlreadyExists, int initFileSize, bool preallocate, string fileSuffix)
        {
            return SExecute<Kafka.Log.LogSegment>(LocalBridgeClazz, "open", dir, baseOffset, config, time, fileAlreadyExists, initFileSize, preallocate, fileSuffix);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogSegment.html#baseOffset()"/> 
        /// </summary>
        public long BaseOffset
        {
            get { return IExecute<long>("baseOffset"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogSegment.html#deleted()"/> 
        /// </summary>
        public bool Deleted
        {
            get { return IExecute<bool>("deleted"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogSegment.html#getFirstBatchTimestamp()"/> 
        /// </summary>
        public long FirstBatchTimestamp
        {
            get { return IExecute<long>("getFirstBatchTimestamp"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogSegment.html#hasOverflow()"/> 
        /// </summary>
        public bool HasOverflow
        {
            get { return IExecute<bool>("hasOverflow"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogSegment.html#indexIntervalBytes()"/> 
        /// </summary>
        public int IndexIntervalBytes
        {
            get { return IExecute<int>("indexIntervalBytes"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogSegment.html#isDebugEnabled()"/> 
        /// </summary>
        public bool IsDebugEnabled
        {
            get { return IExecute<bool>("isDebugEnabled"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogSegment.html#isTraceEnabled()"/> 
        /// </summary>
        public bool IsTraceEnabled
        {
            get { return IExecute<bool>("isTraceEnabled"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogSegment.html#largestTimestamp()"/> 
        /// </summary>
        public long LargestTimestamp
        {
            get { return IExecute<long>("largestTimestamp"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogSegment.html#lastModified()"/> 
        /// </summary>
        public long LastModified
        {
            get { return IExecute<long>("lastModified"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogSegment.html#lazyOffsetIndex()"/> 
        /// </summary>
        public Kafka.Log.LazyIndex<Kafka.Log.OffsetIndex> LazyOffsetIndex
        {
            get { return IExecute<Kafka.Log.LazyIndex<Kafka.Log.OffsetIndex>>("lazyOffsetIndex"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogSegment.html#lazyTimeIndex()"/> 
        /// </summary>
        public Kafka.Log.LazyIndex<Kafka.Log.TimeIndex> LazyTimeIndex
        {
            get { return IExecute<Kafka.Log.LazyIndex<Kafka.Log.TimeIndex>>("lazyTimeIndex"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogSegment.html#log()"/> 
        /// </summary>
        public Org.Apache.Kafka.Common.Record.FileRecords Log
        {
            get { return IExecute<Org.Apache.Kafka.Common.Record.FileRecords>("log"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogSegment.html#logger()"/> 
        /// </summary>
        public Com.Typesafe.Scalalogging.Logger Logger
        {
            get { return IExecute<Com.Typesafe.Scalalogging.Logger>("logger"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogSegment.html#loggerName()"/> 
        /// </summary>
        public string LoggerName
        {
            get { return IExecute<string>("loggerName"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogSegment.html#logIdent()"/> 
        /// </summary>
        public string LogIdent
        {
            get { return IExecute<string>("logIdent"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogSegment.html#maxTimestampAndOffsetSoFar()"/> 
        /// </summary>
        public Kafka.Log.TimestampOffset MaxTimestampAndOffsetSoFar
        {
            get { return IExecute<Kafka.Log.TimestampOffset>("maxTimestampAndOffsetSoFar"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogSegment.html#maxTimestampSoFar()"/> 
        /// </summary>
        public long MaxTimestampSoFar
        {
            get { return IExecute<long>("maxTimestampSoFar"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogSegment.html#offsetIndex()"/> 
        /// </summary>
        public Kafka.Log.OffsetIndex OffsetIndex
        {
            get { return IExecute<Kafka.Log.OffsetIndex>("offsetIndex"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogSegment.html#offsetOfMaxTimestampSoFar()"/> 
        /// </summary>
        public long OffsetOfMaxTimestampSoFar
        {
            get { return IExecute<long>("offsetOfMaxTimestampSoFar"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogSegment.html#readNextOffset()"/> 
        /// </summary>
        public long ReadNextOffset
        {
            get { return IExecute<long>("readNextOffset"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogSegment.html#rollJitterMs()"/> 
        /// </summary>
        public long RollJitterMs
        {
            get { return IExecute<long>("rollJitterMs"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogSegment.html#size()"/> 
        /// </summary>
        public int Size
        {
            get { return IExecute<int>("size"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogSegment.html#time()"/> 
        /// </summary>
        public Org.Apache.Kafka.Common.Utils.Time Time
        {
            get { return IExecute<Org.Apache.Kafka.Common.Utils.Time>("time"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogSegment.html#timeIndex()"/> 
        /// </summary>
        public Kafka.Log.TimeIndex TimeIndex
        {
            get { return IExecute<Kafka.Log.TimeIndex>("timeIndex"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogSegment.html#txnIndex()"/> 
        /// </summary>
        public Kafka.Log.TransactionIndex TxnIndex
        {
            get { return IExecute<Kafka.Log.TransactionIndex>("txnIndex"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogSegment.html#canConvertToRelativeOffset(long)"/>
        /// </summary>
        /// <param name="offset"><see cref="long"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool CanConvertToRelativeOffset(long offset)
        {
            return IExecute<bool>("canConvertToRelativeOffset", offset);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogSegment.html#hasSuffix(java.lang.String)"/>
        /// </summary>
        /// <param name="suffix"><see cref="string"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool HasSuffix(string suffix)
        {
            return IExecute<bool>("hasSuffix", suffix);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogSegment.html#shouldRoll(kafka.log.RollParams)"/>
        /// </summary>
        /// <param name="rollParams"><see cref="Kafka.Log.RollParams"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool ShouldRoll(Kafka.Log.RollParams rollParams)
        {
            return IExecute<bool>("shouldRoll", rollParams);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogSegment.html#appendFromFile(org.apache.kafka.common.record.FileRecords,int)"/>
        /// </summary>
        /// <param name="records"><see cref="Org.Apache.Kafka.Common.Record.FileRecords"/></param>
        /// <param name="start"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public int AppendFromFile(Org.Apache.Kafka.Common.Record.FileRecords records, int start)
        {
            return IExecute<int>("appendFromFile", records, start);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogSegment.html#truncateTo(long)"/>
        /// </summary>
        /// <param name="offset"><see cref="long"/></param>
        /// <returns><see cref="int"/></returns>
        public int TruncateTo(long offset)
        {
            return IExecute<int>("truncateTo", offset);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogSegment.html#msgWithLogIdent(java.lang.String)"/>
        /// </summary>
        /// <param name="msg"><see cref="string"/></param>
        /// <returns><see cref="string"/></returns>
        public string MsgWithLogIdent(string msg)
        {
            return IExecute<string>("msgWithLogIdent", msg);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogSegment.html#collectAbortedTxns(long,long)"/>
        /// </summary>
        /// <param name="fetchOffset"><see cref="long"/></param>
        /// <param name="upperBoundOffset"><see cref="long"/></param>
        /// <returns><see cref="Kafka.Log.TxnIndexSearchResult"/></returns>
        public Kafka.Log.TxnIndexSearchResult CollectAbortedTxns(long fetchOffset, long upperBoundOffset)
        {
            return IExecute<Kafka.Log.TxnIndexSearchResult>("collectAbortedTxns", fetchOffset, upperBoundOffset);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogSegment.html#read(long,int,long,boolean)"/>
        /// </summary>
        /// <param name="startOffset"><see cref="long"/></param>
        /// <param name="maxSize"><see cref="int"/></param>
        /// <param name="maxPosition"><see cref="long"/></param>
        /// <param name="minOneMessage"><see cref="bool"/></param>
        /// <returns><see cref="Kafka.Server.FetchDataInfo"/></returns>
        public Kafka.Server.FetchDataInfo Read(long startOffset, int maxSize, long maxPosition, bool minOneMessage)
        {
            return IExecute<Kafka.Server.FetchDataInfo>("read", startOffset, maxSize, maxPosition, minOneMessage);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogSegment.html#timeWaitedForRoll(long,long)"/>
        /// </summary>
        /// <param name="now"><see cref="long"/></param>
        /// <param name="messageTimestamp"><see cref="long"/></param>
        /// <returns><see cref="long"/></returns>
        public long TimeWaitedForRoll(long now, long messageTimestamp)
        {
            return IExecute<long>("timeWaitedForRoll", now, messageTimestamp);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogSegment.html#translateOffset(long,int)"/>
        /// </summary>
        /// <param name="offset"><see cref="long"/></param>
        /// <param name="startingFilePosition"><see cref="int"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Record.FileRecords.LogOffsetPosition"/></returns>
        public Org.Apache.Kafka.Common.Record.FileRecords.LogOffsetPosition TranslateOffset(long offset, int startingFilePosition)
        {
            return IExecute<Org.Apache.Kafka.Common.Record.FileRecords.LogOffsetPosition>("translateOffset", offset, startingFilePosition);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogSegment.html#append(long,long,long,org.apache.kafka.common.record.MemoryRecords)"/>
        /// </summary>
        /// <param name="largestOffset"><see cref="long"/></param>
        /// <param name="largestTimestamp"><see cref="long"/></param>
        /// <param name="shallowOffsetOfMaxTimestamp"><see cref="long"/></param>
        /// <param name="records"><see cref="Org.Apache.Kafka.Common.Record.MemoryRecords"/></param>
        public void Append(long largestOffset, long largestTimestamp, long shallowOffsetOfMaxTimestamp, Org.Apache.Kafka.Common.Record.MemoryRecords records)
        {
            IExecute("append", largestOffset, largestTimestamp, shallowOffsetOfMaxTimestamp, records);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogSegment.html#changeFileSuffixes(java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="oldSuffix"><see cref="string"/></param>
        /// <param name="newSuffix"><see cref="string"/></param>
        public void ChangeFileSuffixes(string oldSuffix, string newSuffix)
        {
            IExecute("changeFileSuffixes", oldSuffix, newSuffix);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogSegment.html#close()"/>
        /// </summary>
        public void Close()
        {
            IExecute("close");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogSegment.html#closeHandlers()"/>
        /// </summary>
        public void CloseHandlers()
        {
            IExecute("closeHandlers");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogSegment.html#deleteIfExists()"/>
        /// </summary>
        public void DeleteIfExists()
        {
            IExecute("deleteIfExists");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogSegment.html#flush()"/>
        /// </summary>
        public void Flush()
        {
            IExecute("flush");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogSegment.html#onBecomeInactiveSegment()"/>
        /// </summary>
        public void OnBecomeInactiveSegment()
        {
            IExecute("onBecomeInactiveSegment");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogSegment.html#resizeIndexes(int)"/>
        /// </summary>
        /// <param name="size"><see cref="int"/></param>
        public void ResizeIndexes(int size)
        {
            IExecute("resizeIndexes", size);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogSegment.html#sanityCheck(boolean)"/>
        /// </summary>
        /// <param name="timeIndexFileNewlyCreated"><see cref="bool"/></param>
        public void SanityCheck(bool timeIndexFileNewlyCreated)
        {
            IExecute("sanityCheck", timeIndexFileNewlyCreated);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogSegment.html#updateParentDir(java.io.File)"/>
        /// </summary>
        /// <param name="dir"><see cref="Java.Io.File"/></param>
        public void UpdateParentDir(Java.Io.File dir)
        {
            IExecute("updateParentDir", dir);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogSegment.html#updateTxnIndex(kafka.log.CompletedTxn,long)"/>
        /// </summary>
        /// <param name="completedTxn"><see cref="Kafka.Log.CompletedTxn"/></param>
        /// <param name="lastStableOffset"><see cref="long"/></param>
        public void UpdateTxnIndex(Kafka.Log.CompletedTxn completedTxn, long lastStableOffset)
        {
            IExecute("updateTxnIndex", completedTxn, lastStableOffset);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}