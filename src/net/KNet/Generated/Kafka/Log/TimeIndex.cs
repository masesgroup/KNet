/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka_2.13-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Kafka.Log
{
    #region TimeIndex
    public partial class TimeIndex
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/TimeIndex.html#%3Cinit%3E(java.io.File,long,int,boolean)"/>
        /// </summary>
        /// <param name="_file"><see cref="Java.Io.File"/></param>
        /// <param name="baseOffset"><see cref="long"/></param>
        /// <param name="maxIndexSize"><see cref="int"/></param>
        /// <param name="writable"><see cref="bool"/></param>
        public TimeIndex(Java.Io.File _file, long baseOffset, int maxIndexSize, bool writable)
            : base(_file, baseOffset, maxIndexSize, writable)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/TimeIndex.html#lastEntry()"/> 
        /// </summary>
        public Kafka.Log.TimestampOffset LastEntry
        {
            get { return IExecute<Kafka.Log.TimestampOffset>("lastEntry"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/TimeIndex.html#entry(int)"/>
        /// </summary>
        /// <param name="n"><see cref="int"/></param>
        /// <returns><see cref="Kafka.Log.TimestampOffset"/></returns>
        public Kafka.Log.TimestampOffset Entry(int n)
        {
            return IExecute<Kafka.Log.TimestampOffset>("entry", n);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/TimeIndex.html#lookup(long)"/>
        /// </summary>
        /// <param name="targetTimestamp"><see cref="long"/></param>
        /// <returns><see cref="Kafka.Log.TimestampOffset"/></returns>
        public Kafka.Log.TimestampOffset Lookup(long targetTimestamp)
        {
            return IExecute<Kafka.Log.TimestampOffset>("lookup", targetTimestamp);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/TimeIndex.html#maybeAppend(long,long,boolean)"/>
        /// </summary>
        /// <param name="timestamp"><see cref="long"/></param>
        /// <param name="offset"><see cref="long"/></param>
        /// <param name="skipFullCheck"><see cref="bool"/></param>
        public void MaybeAppend(long timestamp, long offset, bool skipFullCheck)
        {
            IExecute("maybeAppend", timestamp, offset, skipFullCheck);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}