/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka_2.13-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Kafka.Log
{
    #region LogSegments
    public partial class LogSegments
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogSegments.html#%3Cinit%3E(org.apache.kafka.common.TopicPartition)"/>
        /// </summary>
        /// <param name="topicPartition"><see cref="Org.Apache.Kafka.Common.TopicPartition"/></param>
        public LogSegments(Org.Apache.Kafka.Common.TopicPartition topicPartition)
            : base(topicPartition)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogSegments.html#activeSegment()"/> 
        /// </summary>
        public Kafka.Log.LogSegment ActiveSegment
        {
            get { return IExecute<Kafka.Log.LogSegment>("activeSegment"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogSegments.html#isEmpty()"/> 
        /// </summary>
        public bool IsEmpty
        {
            get { return IExecute<bool>("isEmpty"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogSegments.html#nonEmpty()"/> 
        /// </summary>
        public bool NonEmpty
        {
            get { return IExecute<bool>("nonEmpty"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogSegments.html#numberOfSegments()"/> 
        /// </summary>
        public int NumberOfSegments
        {
            get { return IExecute<int>("numberOfSegments"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogSegments.html#sizeInBytes()"/> 
        /// </summary>
        public long SizeInBytes
        {
            get { return IExecute<long>("sizeInBytes"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogSegments.html#contains(long)"/>
        /// </summary>
        /// <param name="offset"><see cref="long"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool Contains(long offset)
        {
            return IExecute<bool>("contains", offset);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogSegments.html#add(kafka.log.LogSegment)"/>
        /// </summary>
        /// <param name="segment"><see cref="Kafka.Log.LogSegment"/></param>
        /// <returns><see cref="Kafka.Log.LogSegment"/></returns>
        public Kafka.Log.LogSegment Add(Kafka.Log.LogSegment segment)
        {
            return IExecute<Kafka.Log.LogSegment>("add", segment);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogSegments.html#clear()"/>
        /// </summary>
        public void Clear()
        {
            IExecute("clear");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogSegments.html#close()"/>
        /// </summary>
        public void Close()
        {
            IExecute("close");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogSegments.html#closeHandlers()"/>
        /// </summary>
        public void CloseHandlers()
        {
            IExecute("closeHandlers");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogSegments.html#remove(long)"/>
        /// </summary>
        /// <param name="offset"><see cref="long"/></param>
        public void Remove(long offset)
        {
            IExecute("remove", offset);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogSegments.html#updateParentDir(java.io.File)"/>
        /// </summary>
        /// <param name="dir"><see cref="Java.Io.File"/></param>
        public void UpdateParentDir(Java.Io.File dir)
        {
            IExecute("updateParentDir", dir);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}