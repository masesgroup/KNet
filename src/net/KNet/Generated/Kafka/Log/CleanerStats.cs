/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka_2.13-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Kafka.Log
{
    #region CleanerStats
    public partial class CleanerStats
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/CleanerStats.html#%3Cinit%3E(org.apache.kafka.common.utils.Time)"/>
        /// </summary>
        /// <param name="time"><see cref="Org.Apache.Kafka.Common.Utils.Time"/></param>
        public CleanerStats(Org.Apache.Kafka.Common.Utils.Time time)
            : base(time)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/CleanerStats.html#bufferUtilization()"/> 
        /// </summary>
        public double BufferUtilization
        {
            get { return IExecute<double>("bufferUtilization"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/CleanerStats.html#bytesRead()"/> 
        /// </summary>
        public long BytesRead
        {
            get { return IExecute<long>("bytesRead"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/CleanerStats.html#bytesWritten()"/> 
        /// </summary>
        public long BytesWritten
        {
            get { return IExecute<long>("bytesWritten"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/CleanerStats.html#elapsedIndexSecs()"/> 
        /// </summary>
        public double ElapsedIndexSecs
        {
            get { return IExecute<double>("elapsedIndexSecs"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/CleanerStats.html#elapsedSecs()"/> 
        /// </summary>
        public double ElapsedSecs
        {
            get { return IExecute<double>("elapsedSecs"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/CleanerStats.html#endTime()"/> 
        /// </summary>
        public long EndTime
        {
            get { return IExecute<long>("endTime"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/CleanerStats.html#invalidMessagesRead()"/> 
        /// </summary>
        public long InvalidMessagesRead
        {
            get { return IExecute<long>("invalidMessagesRead"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/CleanerStats.html#mapBytesRead()"/> 
        /// </summary>
        public long MapBytesRead
        {
            get { return IExecute<long>("mapBytesRead"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/CleanerStats.html#mapCompleteTime()"/> 
        /// </summary>
        public long MapCompleteTime
        {
            get { return IExecute<long>("mapCompleteTime"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/CleanerStats.html#mapMessagesRead()"/> 
        /// </summary>
        public long MapMessagesRead
        {
            get { return IExecute<long>("mapMessagesRead"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/CleanerStats.html#messagesRead()"/> 
        /// </summary>
        public long MessagesRead
        {
            get { return IExecute<long>("messagesRead"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/CleanerStats.html#messagesWritten()"/> 
        /// </summary>
        public long MessagesWritten
        {
            get { return IExecute<long>("messagesWritten"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/CleanerStats.html#startTime()"/> 
        /// </summary>
        public long StartTime
        {
            get { return IExecute<long>("startTime"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/CleanerStats.html#allDone()"/>
        /// </summary>
        public void AllDone()
        {
            IExecute("allDone");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/CleanerStats.html#indexBytesRead(int)"/>
        /// </summary>
        /// <param name="size"><see cref="int"/></param>
        public void IndexBytesRead(int size)
        {
            IExecute("indexBytesRead", size);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/CleanerStats.html#indexDone()"/>
        /// </summary>
        public void IndexDone()
        {
            IExecute("indexDone");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/CleanerStats.html#indexMessagesRead(int)"/>
        /// </summary>
        /// <param name="size"><see cref="int"/></param>
        public void IndexMessagesRead(int size)
        {
            IExecute("indexMessagesRead", size);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/CleanerStats.html#invalidMessage()"/>
        /// </summary>
        public void InvalidMessage()
        {
            IExecute("invalidMessage");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/CleanerStats.html#readMessages(int,int)"/>
        /// </summary>
        /// <param name="messagesRead"><see cref="int"/></param>
        /// <param name="bytesRead"><see cref="int"/></param>
        public void ReadMessages(int messagesRead, int bytesRead)
        {
            IExecute("readMessages", messagesRead, bytesRead);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/CleanerStats.html#recopyMessages(int,int)"/>
        /// </summary>
        /// <param name="messagesWritten"><see cref="int"/></param>
        /// <param name="bytesWritten"><see cref="int"/></param>
        public void RecopyMessages(int messagesWritten, int bytesWritten)
        {
            IExecute("recopyMessages", messagesWritten, bytesWritten);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}