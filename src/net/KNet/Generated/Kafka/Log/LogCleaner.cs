/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka_2.13-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Kafka.Log
{
    #region LogCleaner
    public partial class LogCleaner
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Kafka.Log.LogCleaner"/> to <see cref="Kafka.Metrics.KafkaMetricsGroup"/>
        /// </summary>
        public static implicit operator Kafka.Metrics.KafkaMetricsGroup(Kafka.Log.LogCleaner t) => t.Cast<Kafka.Metrics.KafkaMetricsGroup>();
        /// <summary>
        /// Converter from <see cref="Kafka.Log.LogCleaner"/> to <see cref="Kafka.Server.BrokerReconfigurable"/>
        /// </summary>
        public static implicit operator Kafka.Server.BrokerReconfigurable(Kafka.Log.LogCleaner t) => t.Cast<Kafka.Server.BrokerReconfigurable>();

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogCleaner.html#kafka$log$LogCleaner$$time"/>
        /// </summary>
        public Org.Apache.Kafka.Common.Utils.Time kafka$log$LogCleaner$$time { get { return IGetField<Org.Apache.Kafka.Common.Utils.Time>("kafka$log$LogCleaner$$time"); } }

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogCleaner.html#cleanerConfig(kafka.server.KafkaConfig)"/>
        /// </summary>
        /// <param name="config"><see cref="Kafka.Server.KafkaConfig"/></param>
        /// <returns><see cref="Kafka.Log.CleanerConfig"/></returns>
        public static Kafka.Log.CleanerConfig CleanerConfig(Kafka.Server.KafkaConfig config)
        {
            return SExecute<Kafka.Log.CleanerConfig>(LocalBridgeClazz, "cleanerConfig", config);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogCleaner.html#cleanerCount()"/> 
        /// </summary>
        public int CleanerCount
        {
            get { return IExecute<int>("cleanerCount"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogCleaner.html#cleanerManager()"/> 
        /// </summary>
        public Kafka.Log.LogCleanerManager CleanerManager
        {
            get { return IExecute<Kafka.Log.LogCleanerManager>("cleanerManager"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogCleaner.html#currentConfig()"/> 
        /// </summary>
        public Kafka.Log.CleanerConfig CurrentConfig
        {
            get { return IExecute<Kafka.Log.CleanerConfig>("currentConfig"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogCleaner.html#deadThreadCount()"/> 
        /// </summary>
        public int DeadThreadCount
        {
            get { return IExecute<int>("deadThreadCount"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogCleaner.html#isDebugEnabled()"/> 
        /// </summary>
        public bool IsDebugEnabled
        {
            get { return IExecute<bool>("isDebugEnabled"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogCleaner.html#isTraceEnabled()"/> 
        /// </summary>
        public bool IsTraceEnabled
        {
            get { return IExecute<bool>("isTraceEnabled"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogCleaner.html#logDirFailureChannel()"/> 
        /// </summary>
        public Kafka.Server.LogDirFailureChannel LogDirFailureChannel
        {
            get { return IExecute<Kafka.Server.LogDirFailureChannel>("logDirFailureChannel"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogCleaner.html#logger()"/> 
        /// </summary>
        public Com.Typesafe.Scalalogging.Logger Logger
        {
            get { return IExecute<Com.Typesafe.Scalalogging.Logger>("logger"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogCleaner.html#loggerName()"/> 
        /// </summary>
        public string LoggerName
        {
            get { return IExecute<string>("loggerName"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogCleaner.html#logIdent()"/> 
        /// </summary>
        public string LogIdent
        {
            get { return IExecute<string>("logIdent"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogCleaner.html#logs()"/> 
        /// </summary>
        public Kafka.Utils.Pool<Org.Apache.Kafka.Common.TopicPartition, Kafka.Log.UnifiedLog> Logs
        {
            get { return IExecute<Kafka.Utils.Pool<Org.Apache.Kafka.Common.TopicPartition, Kafka.Log.UnifiedLog>>("logs"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogCleaner.html#throttler()"/> 
        /// </summary>
        public Kafka.Utils.Throttler Throttler
        {
            get { return IExecute<Kafka.Utils.Throttler>("throttler"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogCleaner.html#awaitCleaned(org.apache.kafka.common.TopicPartition,long,long)"/>
        /// </summary>
        /// <param name="topicPartition"><see cref="Org.Apache.Kafka.Common.TopicPartition"/></param>
        /// <param name="offset"><see cref="long"/></param>
        /// <param name="maxWaitMs"><see cref="long"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool AwaitCleaned(Org.Apache.Kafka.Common.TopicPartition topicPartition, long offset, long maxWaitMs)
        {
            return IExecute<bool>("awaitCleaned", topicPartition, offset, maxWaitMs);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogCleaner.html#newMeter(com.yammer.metrics.core.MetricName,java.lang.String,java.util.concurrent.TimeUnit)"/>
        /// </summary>
        /// <param name="metricName"><see cref="Com.Yammer.Metrics.Core.MetricName"/></param>
        /// <param name="eventType"><see cref="string"/></param>
        /// <param name="timeUnit"><see cref="Java.Util.Concurrent.TimeUnit"/></param>
        /// <returns><see cref="Com.Yammer.Metrics.Core.Meter"/></returns>
        public Com.Yammer.Metrics.Core.Meter NewMeter(Com.Yammer.Metrics.Core.MetricName metricName, string eventType, Java.Util.Concurrent.TimeUnit timeUnit)
        {
            return IExecute<Com.Yammer.Metrics.Core.Meter>("newMeter", metricName, eventType, timeUnit);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogCleaner.html#msgWithLogIdent(java.lang.String)"/>
        /// </summary>
        /// <param name="msg"><see cref="string"/></param>
        /// <returns><see cref="string"/></returns>
        public string MsgWithLogIdent(string msg)
        {
            return IExecute<string>("msgWithLogIdent", msg);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogCleaner.html#abortAndPauseCleaning(org.apache.kafka.common.TopicPartition)"/>
        /// </summary>
        /// <param name="topicPartition"><see cref="Org.Apache.Kafka.Common.TopicPartition"/></param>
        public void AbortAndPauseCleaning(Org.Apache.Kafka.Common.TopicPartition topicPartition)
        {
            IExecute("abortAndPauseCleaning", topicPartition);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogCleaner.html#abortCleaning(org.apache.kafka.common.TopicPartition)"/>
        /// </summary>
        /// <param name="topicPartition"><see cref="Org.Apache.Kafka.Common.TopicPartition"/></param>
        public void AbortCleaning(Org.Apache.Kafka.Common.TopicPartition topicPartition)
        {
            IExecute("abortCleaning", topicPartition);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogCleaner.html#alterCheckpointDir(org.apache.kafka.common.TopicPartition,java.io.File,java.io.File)"/>
        /// </summary>
        /// <param name="topicPartition"><see cref="Org.Apache.Kafka.Common.TopicPartition"/></param>
        /// <param name="sourceLogDir"><see cref="Java.Io.File"/></param>
        /// <param name="destLogDir"><see cref="Java.Io.File"/></param>
        public void AlterCheckpointDir(Org.Apache.Kafka.Common.TopicPartition topicPartition, Java.Io.File sourceLogDir, Java.Io.File destLogDir)
        {
            IExecute("alterCheckpointDir", topicPartition, sourceLogDir, destLogDir);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogCleaner.html#handleLogDirFailure(java.lang.String)"/>
        /// </summary>
        /// <param name="dir"><see cref="string"/></param>
        public void HandleLogDirFailure(string dir)
        {
            IExecute("handleLogDirFailure", dir);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogCleaner.html#maybeTruncateCheckpoint(java.io.File,org.apache.kafka.common.TopicPartition,long)"/>
        /// </summary>
        /// <param name="dataDir"><see cref="Java.Io.File"/></param>
        /// <param name="topicPartition"><see cref="Org.Apache.Kafka.Common.TopicPartition"/></param>
        /// <param name="offset"><see cref="long"/></param>
        public void MaybeTruncateCheckpoint(Java.Io.File dataDir, Org.Apache.Kafka.Common.TopicPartition topicPartition, long offset)
        {
            IExecute("maybeTruncateCheckpoint", dataDir, topicPartition, offset);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogCleaner.html#reconfigure(kafka.server.KafkaConfig,kafka.server.KafkaConfig)"/>
        /// </summary>
        /// <param name="oldConfig"><see cref="Kafka.Server.KafkaConfig"/></param>
        /// <param name="newConfig"><see cref="Kafka.Server.KafkaConfig"/></param>
        public void Reconfigure(Kafka.Server.KafkaConfig oldConfig, Kafka.Server.KafkaConfig newConfig)
        {
            IExecute("reconfigure", oldConfig, newConfig);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogCleaner.html#shutdown()"/>
        /// </summary>
        public void Shutdown()
        {
            IExecute("shutdown");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogCleaner.html#startup()"/>
        /// </summary>
        public void Startup()
        {
            IExecute("startup");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogCleaner.html#validateReconfiguration(kafka.server.KafkaConfig)"/>
        /// </summary>
        /// <param name="newConfig"><see cref="Kafka.Server.KafkaConfig"/></param>
        public void ValidateReconfiguration(Kafka.Server.KafkaConfig newConfig)
        {
            IExecute("validateReconfiguration", newConfig);
        }

        #endregion

        #region Nested classes
        #region CleanerThread
        public partial class CleanerThread
        {
            #region Constructors
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogCleaner.CleanerThread.html#%3Cinit%3E(kafka.log.LogCleaner,int)"/>
            /// </summary>
            /// <param name="$outer"><see cref="Kafka.Log.LogCleaner"/></param>
            /// <param name="threadId"><see cref="int"/></param>
            public CleanerThread(Kafka.Log.LogCleaner _outer, int threadId)
                : base(_outer, threadId)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogCleaner.CleanerThread.html#$outer"/>
            /// </summary>
            public Kafka.Log.LogCleaner $outer { get { return IGetField<Kafka.Log.LogCleaner>("$outer"); } }

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogCleaner.CleanerThread.html#cleaner()"/> 
            /// </summary>
            public Kafka.Log.Cleaner Cleaner
            {
                get { return IExecute<Kafka.Log.Cleaner>("cleaner"); }
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogCleaner.CleanerThread.html#lastPreCleanStats()"/> 
            /// </summary>
            public Kafka.Log.PreCleanStats LastPreCleanStats
            {
                get { return IExecute<Kafka.Log.PreCleanStats>("lastPreCleanStats"); }
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogCleaner.CleanerThread.html#lastStats()"/> 
            /// </summary>
            public Kafka.Log.CleanerStats LastStats
            {
                get { return IExecute<Kafka.Log.CleanerStats>("lastStats"); }
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LogCleaner.CleanerThread.html#recordStats(int,java.lang.String,long,long,kafka.log.CleanerStats)"/>
            /// </summary>
            /// <param name="id"><see cref="int"/></param>
            /// <param name="name"><see cref="string"/></param>
            /// <param name="from"><see cref="long"/></param>
            /// <param name="to"><see cref="long"/></param>
            /// <param name="stats"><see cref="Kafka.Log.CleanerStats"/></param>
            public void RecordStats(int id, string name, long from, long to, Kafka.Log.CleanerStats stats)
            {
                IExecute("recordStats", id, name, from, to, stats);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}