/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka_2.13-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Kafka.Log
{
    #region LocalLog
    public partial class LocalLog
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LocalLog.html#%3Cinit%3E(java.io.File,kafka.log.LogConfig,kafka.log.LogSegments,long,kafka.server.LogOffsetMetadata,kafka.utils.Scheduler,org.apache.kafka.common.utils.Time,org.apache.kafka.common.TopicPartition,kafka.server.LogDirFailureChannel)"/>
        /// </summary>
        /// <param name="_dir"><see cref="Java.Io.File"/></param>
        /// <param name="config"><see cref="Kafka.Log.LogConfig"/></param>
        /// <param name="segments"><see cref="Kafka.Log.LogSegments"/></param>
        /// <param name="recoveryPoint"><see cref="long"/></param>
        /// <param name="nextOffsetMetadata"><see cref="Kafka.Server.LogOffsetMetadata"/></param>
        /// <param name="scheduler"><see cref="Kafka.Utils.Scheduler"/></param>
        /// <param name="time"><see cref="Org.Apache.Kafka.Common.Utils.Time"/></param>
        /// <param name="topicPartition"><see cref="Org.Apache.Kafka.Common.TopicPartition"/></param>
        /// <param name="logDirFailureChannel"><see cref="Kafka.Server.LogDirFailureChannel"/></param>
        public LocalLog(Java.Io.File _dir, Kafka.Log.LogConfig config, Kafka.Log.LogSegments segments, long recoveryPoint, Kafka.Server.LogOffsetMetadata nextOffsetMetadata, Kafka.Utils.Scheduler scheduler, Org.Apache.Kafka.Common.Utils.Time time, Org.Apache.Kafka.Common.TopicPartition topicPartition, Kafka.Server.LogDirFailureChannel logDirFailureChannel)
            : base(_dir, config, segments, recoveryPoint, nextOffsetMetadata, scheduler, time, topicPartition, logDirFailureChannel)
        {
        }

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Kafka.Log.LocalLog"/> to <see cref="Kafka.Metrics.KafkaMetricsGroup"/>
        /// </summary>
        public static implicit operator Kafka.Metrics.KafkaMetricsGroup(Kafka.Log.LocalLog t) => t.Cast<Kafka.Metrics.KafkaMetricsGroup>();

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LocalLog.html#config()"/> 
        /// </summary>
        public Kafka.Log.LogConfig Config
        {
            get { return IExecute<Kafka.Log.LogConfig>("config"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LocalLog.html#dir()"/> 
        /// </summary>
        public Java.Io.File Dir
        {
            get { return IExecute<Java.Io.File>("dir"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LocalLog.html#isDebugEnabled()"/> 
        /// </summary>
        public bool IsDebugEnabled
        {
            get { return IExecute<bool>("isDebugEnabled"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LocalLog.html#isFuture()"/> 
        /// </summary>
        public bool IsFuture
        {
            get { return IExecute<bool>("isFuture"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LocalLog.html#isMemoryMappedBufferClosed()"/> 
        /// </summary>
        public bool IsMemoryMappedBufferClosed
        {
            get { return IExecute<bool>("isMemoryMappedBufferClosed"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LocalLog.html#isTraceEnabled()"/> 
        /// </summary>
        public bool IsTraceEnabled
        {
            get { return IExecute<bool>("isTraceEnabled"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LocalLog.html#lastFlushTime()"/> 
        /// </summary>
        public long LastFlushTime
        {
            get { return IExecute<long>("lastFlushTime"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LocalLog.html#logDirFailureChannel()"/> 
        /// </summary>
        public Kafka.Server.LogDirFailureChannel LogDirFailureChannel
        {
            get { return IExecute<Kafka.Server.LogDirFailureChannel>("logDirFailureChannel"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LocalLog.html#logEndOffset()"/> 
        /// </summary>
        public long LogEndOffset
        {
            get { return IExecute<long>("logEndOffset"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LocalLog.html#logEndOffsetMetadata()"/> 
        /// </summary>
        public Kafka.Server.LogOffsetMetadata LogEndOffsetMetadata
        {
            get { return IExecute<Kafka.Server.LogOffsetMetadata>("logEndOffsetMetadata"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LocalLog.html#logger()"/> 
        /// </summary>
        public Com.Typesafe.Scalalogging.Logger Logger
        {
            get { return IExecute<Com.Typesafe.Scalalogging.Logger>("logger"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LocalLog.html#loggerName()"/> 
        /// </summary>
        public string LoggerName
        {
            get { return IExecute<string>("loggerName"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LocalLog.html#logIdent()"/> 
        /// </summary>
        public string LogIdent
        {
            get { return IExecute<string>("logIdent"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LocalLog.html#name()"/> 
        /// </summary>
        public string Name
        {
            get { return IExecute<string>("name"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LocalLog.html#parentDir()"/> 
        /// </summary>
        public string ParentDir
        {
            get { return IExecute<string>("parentDir"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LocalLog.html#parentDirFile()"/> 
        /// </summary>
        public Java.Io.File ParentDirFile
        {
            get { return IExecute<Java.Io.File>("parentDirFile"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LocalLog.html#recoveryPoint()"/> 
        /// </summary>
        public long RecoveryPoint
        {
            get { return IExecute<long>("recoveryPoint"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LocalLog.html#scheduler()"/> 
        /// </summary>
        public Kafka.Utils.Scheduler Scheduler
        {
            get { return IExecute<Kafka.Utils.Scheduler>("scheduler"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LocalLog.html#segments()"/> 
        /// </summary>
        public Kafka.Log.LogSegments Segments
        {
            get { return IExecute<Kafka.Log.LogSegments>("segments"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LocalLog.html#time()"/> 
        /// </summary>
        public Org.Apache.Kafka.Common.Utils.Time Time
        {
            get { return IExecute<Org.Apache.Kafka.Common.Utils.Time>("time"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LocalLog.html#topicPartition()"/> 
        /// </summary>
        public Org.Apache.Kafka.Common.TopicPartition TopicPartition
        {
            get { return IExecute<Org.Apache.Kafka.Common.TopicPartition>("topicPartition"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LocalLog.html#unflushedMessages()"/> 
        /// </summary>
        public long UnflushedMessages
        {
            get { return IExecute<long>("unflushedMessages"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LocalLog.html#renameDir(java.lang.String)"/>
        /// </summary>
        /// <param name="name"><see cref="string"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool RenameDir(string name)
        {
            return IExecute<bool>("renameDir", name);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LocalLog.html#newMeter(com.yammer.metrics.core.MetricName,java.lang.String,java.util.concurrent.TimeUnit)"/>
        /// </summary>
        /// <param name="metricName"><see cref="Com.Yammer.Metrics.Core.MetricName"/></param>
        /// <param name="eventType"><see cref="string"/></param>
        /// <param name="timeUnit"><see cref="Java.Util.Concurrent.TimeUnit"/></param>
        /// <returns><see cref="Com.Yammer.Metrics.Core.Meter"/></returns>
        public Com.Yammer.Metrics.Core.Meter NewMeter(Com.Yammer.Metrics.Core.MetricName metricName, string eventType, Java.Util.Concurrent.TimeUnit timeUnit)
        {
            return IExecute<Com.Yammer.Metrics.Core.Meter>("newMeter", metricName, eventType, timeUnit);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LocalLog.html#msgWithLogIdent(java.lang.String)"/>
        /// </summary>
        /// <param name="msg"><see cref="string"/></param>
        /// <returns><see cref="string"/></returns>
        public string MsgWithLogIdent(string msg)
        {
            return IExecute<string>("msgWithLogIdent", msg);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LocalLog.html#createAndDeleteSegment(long,kafka.log.LogSegment,boolean,kafka.log.SegmentDeletionReason)"/>
        /// </summary>
        /// <param name="newOffset"><see cref="long"/></param>
        /// <param name="segmentToDelete"><see cref="Kafka.Log.LogSegment"/></param>
        /// <param name="asyncDelete"><see cref="bool"/></param>
        /// <param name="reason"><see cref="Kafka.Log.SegmentDeletionReason"/></param>
        /// <returns><see cref="Kafka.Log.LogSegment"/></returns>
        public Kafka.Log.LogSegment CreateAndDeleteSegment(long newOffset, Kafka.Log.LogSegment segmentToDelete, bool asyncDelete, Kafka.Log.SegmentDeletionReason reason)
        {
            return IExecute<Kafka.Log.LogSegment>("createAndDeleteSegment", newOffset, segmentToDelete, asyncDelete, reason);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LocalLog.html#read(long,int,boolean,kafka.server.LogOffsetMetadata,boolean)"/>
        /// </summary>
        /// <param name="startOffset"><see cref="long"/></param>
        /// <param name="maxLength"><see cref="int"/></param>
        /// <param name="minOneMessage"><see cref="bool"/></param>
        /// <param name="maxOffsetMetadata"><see cref="Kafka.Server.LogOffsetMetadata"/></param>
        /// <param name="includeAbortedTxns"><see cref="bool"/></param>
        /// <returns><see cref="Kafka.Server.FetchDataInfo"/></returns>
        public Kafka.Server.FetchDataInfo Read(long startOffset, int maxLength, bool minOneMessage, Kafka.Server.LogOffsetMetadata maxOffsetMetadata, bool includeAbortedTxns)
        {
            return IExecute<Kafka.Server.FetchDataInfo>("read", startOffset, maxLength, minOneMessage, maxOffsetMetadata, includeAbortedTxns);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LocalLog.html#convertToOffsetMetadataOrThrow(long)"/>
        /// </summary>
        /// <param name="offset"><see cref="long"/></param>
        /// <returns><see cref="Kafka.Server.LogOffsetMetadata"/></returns>
        public Kafka.Server.LogOffsetMetadata ConvertToOffsetMetadataOrThrow(long offset)
        {
            return IExecute<Kafka.Server.LogOffsetMetadata>("convertToOffsetMetadataOrThrow", offset);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LocalLog.html#append(long,long,long,org.apache.kafka.common.record.MemoryRecords)"/>
        /// </summary>
        /// <param name="lastOffset"><see cref="long"/></param>
        /// <param name="largestTimestamp"><see cref="long"/></param>
        /// <param name="shallowOffsetOfMaxTimestamp"><see cref="long"/></param>
        /// <param name="records"><see cref="Org.Apache.Kafka.Common.Record.MemoryRecords"/></param>
        public void Append(long lastOffset, long largestTimestamp, long shallowOffsetOfMaxTimestamp, Org.Apache.Kafka.Common.Record.MemoryRecords records)
        {
            IExecute("append", lastOffset, largestTimestamp, shallowOffsetOfMaxTimestamp, records);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LocalLog.html#checkIfMemoryMappedBufferClosed()"/>
        /// </summary>
        public void CheckIfMemoryMappedBufferClosed()
        {
            IExecute("checkIfMemoryMappedBufferClosed");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LocalLog.html#close()"/>
        /// </summary>
        public void Close()
        {
            IExecute("close");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LocalLog.html#closeHandlers()"/>
        /// </summary>
        public void CloseHandlers()
        {
            IExecute("closeHandlers");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LocalLog.html#deleteEmptyDir()"/>
        /// </summary>
        public void DeleteEmptyDir()
        {
            IExecute("deleteEmptyDir");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LocalLog.html#flush(long)"/>
        /// </summary>
        /// <param name="offset"><see cref="long"/></param>
        public void Flush(long offset)
        {
            IExecute("flush", offset);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LocalLog.html#markFlushed(long)"/>
        /// </summary>
        /// <param name="offset"><see cref="long"/></param>
        public void MarkFlushed(long offset)
        {
            IExecute("markFlushed", offset);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LocalLog.html#updateConfig(kafka.log.LogConfig)"/>
        /// </summary>
        /// <param name="newConfig"><see cref="Kafka.Log.LogConfig"/></param>
        public void UpdateConfig(Kafka.Log.LogConfig newConfig)
        {
            IExecute("updateConfig", newConfig);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LocalLog.html#updateLogEndOffset(long)"/>
        /// </summary>
        /// <param name="endOffset"><see cref="long"/></param>
        public void UpdateLogEndOffset(long endOffset)
        {
            IExecute("updateLogEndOffset", endOffset);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/log/LocalLog.html#updateRecoveryPoint(long)"/>
        /// </summary>
        /// <param name="newRecoveryPoint"><see cref="long"/></param>
        public void UpdateRecoveryPoint(long newRecoveryPoint)
        {
            IExecute("updateRecoveryPoint", newRecoveryPoint);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}