/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka_2.13-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Kafka.Metrics
{
    #region LinuxIoMetricsCollector
    public partial class LinuxIoMetricsCollector
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/metrics/LinuxIoMetricsCollector.html#%3Cinit%3E(java.lang.String,org.apache.kafka.common.utils.Time,org.slf4j.Logger)"/>
        /// </summary>
        /// <param name="procRoot"><see cref="string"/></param>
        /// <param name="time"><see cref="Org.Apache.Kafka.Common.Utils.Time"/></param>
        /// <param name="logger"><see cref="Org.Slf4j.Logger"/></param>
        public LinuxIoMetricsCollector(string procRoot, Org.Apache.Kafka.Common.Utils.Time time, Org.Slf4j.Logger logger)
            : base(procRoot, time, logger)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/metrics/LinuxIoMetricsCollector.html#READ_BYTES_PREFIX()"/> 
        /// </summary>
        public static string READ_BYTES_PREFIX
        {
            get { return SExecute<string>(LocalBridgeClazz, "READ_BYTES_PREFIX"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/metrics/LinuxIoMetricsCollector.html#WRITE_BYTES_PREFIX()"/> 
        /// </summary>
        public static string WRITE_BYTES_PREFIX
        {
            get { return SExecute<string>(LocalBridgeClazz, "WRITE_BYTES_PREFIX"); }
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/metrics/LinuxIoMetricsCollector.html#cachedReadBytes()"/> 
        /// </summary>
        public long CachedReadBytes
        {
            get { return IExecute<long>("cachedReadBytes"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/metrics/LinuxIoMetricsCollector.html#cachedWriteBytes()"/> 
        /// </summary>
        public long CachedWriteBytes
        {
            get { return IExecute<long>("cachedWriteBytes"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/metrics/LinuxIoMetricsCollector.html#lastUpdateMs()"/> 
        /// </summary>
        public long LastUpdateMs
        {
            get { return IExecute<long>("lastUpdateMs"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/metrics/LinuxIoMetricsCollector.html#logger()"/> 
        /// </summary>
        public Org.Slf4j.Logger Logger
        {
            get { return IExecute<Org.Slf4j.Logger>("logger"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/metrics/LinuxIoMetricsCollector.html#path()"/> 
        /// </summary>
        public Java.Nio.File.Path Path
        {
            get { return IExecute<Java.Nio.File.Path>("path"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/metrics/LinuxIoMetricsCollector.html#readBytes()"/> 
        /// </summary>
        public long ReadBytes
        {
            get { return IExecute<long>("readBytes"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/metrics/LinuxIoMetricsCollector.html#time()"/> 
        /// </summary>
        public Org.Apache.Kafka.Common.Utils.Time Time
        {
            get { return IExecute<Org.Apache.Kafka.Common.Utils.Time>("time"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/metrics/LinuxIoMetricsCollector.html#usable()"/> 
        /// </summary>
        public bool Usable
        {
            get { return IExecute<bool>("usable"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/metrics/LinuxIoMetricsCollector.html#writeBytes()"/> 
        /// </summary>
        public long WriteBytes
        {
            get { return IExecute<long>("writeBytes"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/metrics/LinuxIoMetricsCollector.html#updateValues(long)"/>
        /// </summary>
        /// <param name="now"><see cref="long"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool UpdateValues(long now)
        {
            return IExecute<bool>("updateValues", now);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}