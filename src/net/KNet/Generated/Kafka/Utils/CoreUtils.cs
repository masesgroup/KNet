/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka_2.13-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Kafka.Utils
{
    #region CoreUtils
    public partial class CoreUtils
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/CoreUtils.html#generateUuidAsBase64()"/> 
        /// </summary>
        public static string GenerateUuidAsBase64
        {
            get { return SExecute<string>(LocalBridgeClazz, "generateUuidAsBase64"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/CoreUtils.html#registerMBean(java.lang.Object,java.lang.String)"/>
        /// </summary>
        /// <param name="mbean"><see cref="object"/></param>
        /// <param name="name"><see cref="string"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool RegisterMBean(object mbean, string name)
        {
            return SExecute<bool>(LocalBridgeClazz, "registerMBean", mbean, name);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/CoreUtils.html#getBytesFromUuid(java.util.UUID)"/>
        /// </summary>
        /// <param name="uuid"><see cref="Java.Util.UUID"/></param>
        /// <returns><see cref="byte"/></returns>
        public static byte[] GetBytesFromUuid(Java.Util.UUID uuid)
        {
            return SExecuteArray<byte>(LocalBridgeClazz, "getBytesFromUuid", uuid);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/CoreUtils.html#read(java.nio.channels.ReadableByteChannel,java.nio.ByteBuffer)"/>
        /// </summary>
        /// <param name="channel"><see cref="Java.Nio.Channels.ReadableByteChannel"/></param>
        /// <param name="buffer"><see cref="Java.Nio.ByteBuffer"/></param>
        /// <returns><see cref="int"/></returns>
        public static int Read(Java.Nio.Channels.ReadableByteChannel channel, Java.Nio.ByteBuffer buffer)
        {
            return SExecute<int>(LocalBridgeClazz, "read", channel, buffer);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/CoreUtils.html#readInt(byte[],int)"/>
        /// </summary>
        /// <param name="bytes"><see cref="byte"/></param>
        /// <param name="offset"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public static int ReadInt(byte[] bytes, int offset)
        {
            return SExecute<int>(LocalBridgeClazz, "readInt", bytes, offset);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/CoreUtils.html#replaceSuffix(java.lang.String,java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="s"><see cref="string"/></param>
        /// <param name="oldSuffix"><see cref="string"/></param>
        /// <param name="newSuffix"><see cref="string"/></param>
        /// <returns><see cref="string"/></returns>
        public static string ReplaceSuffix(string s, string oldSuffix, string newSuffix)
        {
            return SExecute<string>(LocalBridgeClazz, "replaceSuffix", s, oldSuffix, newSuffix);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/CoreUtils.html#propsWith(java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="key"><see cref="string"/></param>
        /// <param name="value"><see cref="string"/></param>
        /// <returns><see cref="Java.Util.Properties"/></returns>
        public static Java.Util.Properties PropsWith(string key, string value)
        {
            return SExecute<Java.Util.Properties>(LocalBridgeClazz, "propsWith", key, value);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/CoreUtils.html#unregisterMBean(java.lang.String)"/>
        /// </summary>
        /// <param name="name"><see cref="string"/></param>
        public static void UnregisterMBean(string name)
        {
            SExecute(LocalBridgeClazz, "unregisterMBean", name);
        }

        #endregion

        #region Instance methods

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}