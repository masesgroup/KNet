/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka_2.13-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Kafka.Utils
{
    #region NoOpScheduledFutureTask
    public partial class NoOpScheduledFutureTask
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Kafka.Utils.NoOpScheduledFutureTask"/> to <see cref="Java.Util.Concurrent.ScheduledFuture"/>
        /// </summary>
        public static implicit operator Java.Util.Concurrent.ScheduledFuture(Kafka.Utils.NoOpScheduledFutureTask t) => t.Cast<Java.Util.Concurrent.ScheduledFuture>();

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/NoOpScheduledFutureTask.html#isCancelled()"/> 
        /// </summary>
        public bool IsCancelled
        {
            get { return IExecute<bool>("isCancelled"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/NoOpScheduledFutureTask.html#isDone()"/> 
        /// </summary>
        public bool IsDone
        {
            get { return IExecute<bool>("isDone"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/NoOpScheduledFutureTask.html#cancel(boolean)"/>
        /// </summary>
        /// <param name="mayInterruptIfRunning"><see cref="bool"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool Cancel(bool mayInterruptIfRunning)
        {
            return IExecute<bool>("cancel", mayInterruptIfRunning);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/NoOpScheduledFutureTask.html#compareTo(java.lang.Object)"/>
        /// </summary>
        /// <param name="x$1"><see cref="object"/></param>
        /// <returns><see cref="int"/></returns>
        public int CompareTo(object x_1)
        {
            return IExecute<int>("compareTo", x_1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/NoOpScheduledFutureTask.html#compareTo(java.util.concurrent.Delayed)"/>
        /// </summary>
        /// <param name="o"><see cref="Java.Util.Concurrent.Delayed"/></param>
        /// <returns><see cref="int"/></returns>
        public int CompareTo(Java.Util.Concurrent.Delayed o)
        {
            return IExecute<int>("compareTo", o);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/NoOpScheduledFutureTask.html#get()"/>
        /// </summary>

        /// <returns><see cref="object"/></returns>
        public object Get()
        {
            return IExecute("get");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/NoOpScheduledFutureTask.html#get(long,java.util.concurrent.TimeUnit)"/>
        /// </summary>
        /// <param name="x$1"><see cref="long"/></param>
        /// <param name="x$2"><see cref="Java.Util.Concurrent.TimeUnit"/></param>
        /// <returns><see cref="object"/></returns>
        public object Get(long x_1, Java.Util.Concurrent.TimeUnit x_2)
        {
            return IExecute("get", x_1, x_2);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/NoOpScheduledFutureTask.html#getDelay(java.util.concurrent.TimeUnit)"/>
        /// </summary>
        /// <param name="unit"><see cref="Java.Util.Concurrent.TimeUnit"/></param>
        /// <returns><see cref="long"/></returns>
        public long GetDelay(Java.Util.Concurrent.TimeUnit unit)
        {
            return IExecute<long>("getDelay", unit);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}