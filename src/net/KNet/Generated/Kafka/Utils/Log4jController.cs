/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka_2.13-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Kafka.Utils
{
    #region Log4jController
    public partial class Log4jController
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Kafka.Utils.Log4jController"/> to <see cref="Kafka.Utils.Log4jControllerMBean"/>
        /// </summary>
        public static implicit operator Kafka.Utils.Log4jControllerMBean(Kafka.Utils.Log4jController t) => t.Cast<Kafka.Utils.Log4jControllerMBean>();

        #endregion

        #region Fields

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/Log4jController.html#ROOT_LOGGER()"/> 
        /// </summary>
        public static string ROOT_LOGGER
        {
            get { return SExecute<string>(LocalBridgeClazz, "ROOT_LOGGER"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/Log4jController.html#loggerExists(java.lang.String)"/>
        /// </summary>
        /// <param name="loggerName"><see cref="string"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool LoggerExists(string loggerName)
        {
            return SExecute<bool>(LocalBridgeClazz, "loggerExists", loggerName);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/Log4jController.html#logLevel(java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="loggerName"><see cref="string"/></param>
        /// <param name="logLevel"><see cref="string"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool LogLevel(string loggerName, string logLevel)
        {
            return SExecute<bool>(LocalBridgeClazz, "logLevel", loggerName, logLevel);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/Log4jController.html#unsetLogLevel(java.lang.String)"/>
        /// </summary>
        /// <param name="loggerName"><see cref="string"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool UnsetLogLevel(string loggerName)
        {
            return SExecute<bool>(LocalBridgeClazz, "unsetLogLevel", loggerName);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/Log4jController.html#getLoggers()"/> 
        /// </summary>
        public Java.Util.List<string> Loggers
        {
            get { return IExecute<Java.Util.List<string>>("getLoggers"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/Log4jController.html#setLogLevel(java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="loggerName"><see cref="string"/></param>
        /// <param name="level"><see cref="string"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool SetLogLevel(string loggerName, string level)
        {
            return IExecute<bool>("setLogLevel", loggerName, level);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/Log4jController.html#getLogLevel(java.lang.String)"/>
        /// </summary>
        /// <param name="loggerName"><see cref="string"/></param>
        /// <returns><see cref="string"/></returns>
        public string GetLogLevel(string loggerName)
        {
            return IExecute<string>("getLogLevel", loggerName);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}