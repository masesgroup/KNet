/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka_2.13-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Kafka.Utils
{
    #region Implicits
    public partial class Implicits
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/Implicits.html#PropertiesOps(java.util.Properties)"/>
        /// </summary>
        /// <param name="properties"><see cref="Java.Util.Properties"/></param>
        /// <returns><see cref="Kafka.Utils.Implicits.PropertiesOps"/></returns>
        public static Kafka.Utils.Implicits.PropertiesOps PropertiesOpsMethod(Java.Util.Properties properties)
        {
            return SExecute<Kafka.Utils.Implicits.PropertiesOps>(LocalBridgeClazz, "PropertiesOps", properties);
        }

        #endregion

        #region Instance methods

        #endregion

        #region Nested classes
        #region MapExtensionMethods
        public partial class MapExtensionMethods
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region MapExtensionMethods<K, V>
        public partial class MapExtensionMethods<K, V>
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators
            /// <summary>
            /// Converter from <see cref="Kafka.Utils.Implicits.MapExtensionMethods{K, V}"/> to <see cref="Kafka.Utils.Implicits.MapExtensionMethods"/>
            /// </summary>
            public static implicit operator Kafka.Utils.Implicits.MapExtensionMethods(Kafka.Utils.Implicits.MapExtensionMethods<K, V> t) => t.Cast<Kafka.Utils.Implicits.MapExtensionMethods>();

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region PropertiesOps
        public partial class PropertiesOps
        {
            #region Constructors
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/Implicits.PropertiesOps.html#%3Cinit%3E(java.util.Properties)"/>
            /// </summary>
            /// <param name="properties"><see cref="Java.Util.Properties"/></param>
            public PropertiesOps(Java.Util.Properties properties)
                : base(properties)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}