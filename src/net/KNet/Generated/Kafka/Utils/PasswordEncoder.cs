/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka_2.13-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Kafka.Utils
{
    #region PasswordEncoder
    public partial class PasswordEncoder
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/PasswordEncoder.html#CipherAlgorithmProp()"/> 
        /// </summary>
        public static string CipherAlgorithmProp
        {
            get { return SExecute<string>(LocalBridgeClazz, "CipherAlgorithmProp"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/PasswordEncoder.html#EncyrptedPasswordProp()"/> 
        /// </summary>
        public static string EncyrptedPasswordProp
        {
            get { return SExecute<string>(LocalBridgeClazz, "EncyrptedPasswordProp"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/PasswordEncoder.html#InitializationVectorProp()"/> 
        /// </summary>
        public static string InitializationVectorProp
        {
            get { return SExecute<string>(LocalBridgeClazz, "InitializationVectorProp"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/PasswordEncoder.html#IterationsProp()"/> 
        /// </summary>
        public static string IterationsProp
        {
            get { return SExecute<string>(LocalBridgeClazz, "IterationsProp"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/PasswordEncoder.html#KeyFactoryAlgorithmProp()"/> 
        /// </summary>
        public static string KeyFactoryAlgorithmProp
        {
            get { return SExecute<string>(LocalBridgeClazz, "KeyFactoryAlgorithmProp"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/PasswordEncoder.html#KeyLengthProp()"/> 
        /// </summary>
        public static string KeyLengthProp
        {
            get { return SExecute<string>(LocalBridgeClazz, "KeyLengthProp"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/PasswordEncoder.html#noop()"/> 
        /// </summary>
        public static Kafka.Utils.NoOpPasswordEncoder Noop
        {
            get { return SExecute<Kafka.Utils.NoOpPasswordEncoder>(LocalBridgeClazz, "noop"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/PasswordEncoder.html#PasswordLengthProp()"/> 
        /// </summary>
        public static string PasswordLengthProp
        {
            get { return SExecute<string>(LocalBridgeClazz, "PasswordLengthProp"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/PasswordEncoder.html#SaltProp()"/> 
        /// </summary>
        public static string SaltProp
        {
            get { return SExecute<string>(LocalBridgeClazz, "SaltProp"); }
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/PasswordEncoder.html#encode(org.apache.kafka.common.config.types.Password)"/>
        /// </summary>
        /// <param name="password"><see cref="Org.Apache.Kafka.Common.Config.Types.Password"/></param>
        /// <returns><see cref="string"/></returns>
        public string Encode(Org.Apache.Kafka.Common.Config.Types.Password password)
        {
            return IExecute<string>("encode", password);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/PasswordEncoder.html#decode(java.lang.String)"/>
        /// </summary>
        /// <param name="encodedPassword"><see cref="string"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Config.Types.Password"/></returns>
        public Org.Apache.Kafka.Common.Config.Types.Password Decode(string encodedPassword)
        {
            return IExecute<Org.Apache.Kafka.Common.Config.Types.Password>("decode", encodedPassword);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/PasswordEncoder.html#base64Decode(java.lang.String)"/>
        /// </summary>
        /// <param name="encoded"><see cref="string"/></param>
        /// <returns><see cref="byte"/></returns>
        public byte[] Base64Decode(string encoded)
        {
            return IExecuteArray<byte>("base64Decode", encoded);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}