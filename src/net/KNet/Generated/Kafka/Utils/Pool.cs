/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka_2.13-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Kafka.Utils
{
    #region Pool
    public partial class Pool
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/Pool.html#className()"/> 
        /// </summary>
        public string ClassName
        {
            get { return IExecute<string>("className"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/Pool.html#collectionClassName()"/> 
        /// </summary>
        public string CollectionClassName
        {
            get { return IExecute<string>("collectionClassName"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/Pool.html#hasDefiniteSize()"/> 
        /// </summary>
        public bool HasDefiniteSize
        {
            get { return IExecute<bool>("hasDefiniteSize"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/Pool.html#head()"/> 
        /// </summary>
        public object Head
        {
            get { return IExecute("head"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/Pool.html#init()"/> 
        /// </summary>
        public object Init
        {
            get { return IExecute("init"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/Pool.html#isEmpty()"/> 
        /// </summary>
        public bool IsEmpty
        {
            get { return IExecute<bool>("isEmpty"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/Pool.html#isTraversableAgain()"/> 
        /// </summary>
        public bool IsTraversableAgain
        {
            get { return IExecute<bool>("isTraversableAgain"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/Pool.html#knownSize()"/> 
        /// </summary>
        public int KnownSize
        {
            get { return IExecute<int>("knownSize"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/Pool.html#last()"/> 
        /// </summary>
        public object Last
        {
            get { return IExecute("last"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/Pool.html#nonEmpty()"/> 
        /// </summary>
        public bool NonEmpty
        {
            get { return IExecute<bool>("nonEmpty"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/Pool.html#repr()"/> 
        /// </summary>
        public object Repr
        {
            get { return IExecute("repr"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/Pool.html#size()"/> 
        /// </summary>
        public int Size
        {
            get { return IExecute<int>("size"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/Pool.html#stringPrefix()"/> 
        /// </summary>
        public string StringPrefix
        {
            get { return IExecute<string>("stringPrefix"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/Pool.html#tail()"/> 
        /// </summary>
        public object Tail
        {
            get { return IExecute("tail"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/Pool.html#zipWithIndex()"/> 
        /// </summary>
        public object ZipWithIndex
        {
            get { return IExecute("zipWithIndex"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/Pool.html#copyToArray(java.lang.Object,int,int)"/>
        /// </summary>
        /// <param name="xs"><see cref="object"/></param>
        /// <param name="start"><see cref="int"/></param>
        /// <param name="len"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public int CopyToArray(object xs, int start, int len)
        {
            return IExecute<int>("copyToArray", xs, start, len);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/Pool.html#copyToArray(java.lang.Object,int)"/>
        /// </summary>
        /// <param name="xs"><see cref="object"/></param>
        /// <param name="start"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public int CopyToArray(object xs, int start)
        {
            return IExecute<int>("copyToArray", xs, start);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/Pool.html#copyToArray(java.lang.Object)"/>
        /// </summary>
        /// <param name="xs"><see cref="object"/></param>
        /// <returns><see cref="int"/></returns>
        public int CopyToArray(object xs)
        {
            return IExecute<int>("copyToArray", xs);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/Pool.html#contains(java.lang.Object)"/>
        /// </summary>
        /// <param name="id"><see cref="object"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool Contains(object id)
        {
            return IExecute<bool>("contains", id);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/Pool.html#remove(java.lang.Object,java.lang.Object)"/>
        /// </summary>
        /// <param name="key"><see cref="object"/></param>
        /// <param name="value"><see cref="object"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool Remove(object key, object value)
        {
            return IExecute<bool>("remove", key, value);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/Pool.html#mkString()"/>
        /// </summary>

        /// <returns><see cref="string"/></returns>
        public string MkString()
        {
            return IExecute<string>("mkString");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/Pool.html#mkString(java.lang.String,java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="start"><see cref="string"/></param>
        /// <param name="sep"><see cref="string"/></param>
        /// <param name="end"><see cref="string"/></param>
        /// <returns><see cref="string"/></returns>
        public string MkString(string start, string sep, string end)
        {
            return IExecute<string>("mkString", start, sep, end);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/Pool.html#mkString(java.lang.String)"/>
        /// </summary>
        /// <param name="sep"><see cref="string"/></param>
        /// <returns><see cref="string"/></returns>
        public string MkString(string sep)
        {
            return IExecute<string>("mkString", sep);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/Pool.html#sizeCompare(int)"/>
        /// </summary>
        /// <param name="otherSize"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public int SizeCompare(int otherSize)
        {
            return IExecute<int>("sizeCompare", otherSize);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/Pool.html#drop(int)"/>
        /// </summary>
        /// <param name="n"><see cref="int"/></param>
        /// <returns><see cref="object"/></returns>
        public object Drop(int n)
        {
            return IExecute("drop", n);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/Pool.html#dropRight(int)"/>
        /// </summary>
        /// <param name="n"><see cref="int"/></param>
        /// <returns><see cref="object"/></returns>
        public object DropRight(int n)
        {
            return IExecute("dropRight", n);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/Pool.html#slice(int,int)"/>
        /// </summary>
        /// <param name="from"><see cref="int"/></param>
        /// <param name="until"><see cref="int"/></param>
        /// <returns><see cref="object"/></returns>
        public object Slice(int from, int until)
        {
            return IExecute("slice", from, until);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/Pool.html#take(int)"/>
        /// </summary>
        /// <param name="n"><see cref="int"/></param>
        /// <returns><see cref="object"/></returns>
        public object Take(int n)
        {
            return IExecute("take", n);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/Pool.html#takeRight(int)"/>
        /// </summary>
        /// <param name="n"><see cref="int"/></param>
        /// <returns><see cref="object"/></returns>
        public object TakeRight(int n)
        {
            return IExecute("takeRight", n);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/Pool.html#get(java.lang.Object)"/>
        /// </summary>
        /// <param name="key"><see cref="object"/></param>
        /// <returns><see cref="object"/></returns>
        public object Get(object key)
        {
            return IExecute("get", key);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/Pool.html#getAndMaybePut(java.lang.Object)"/>
        /// </summary>
        /// <param name="key"><see cref="object"/></param>
        /// <returns><see cref="object"/></returns>
        public object GetAndMaybePut(object key)
        {
            return IExecute("getAndMaybePut", key);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/Pool.html#put(java.lang.Object,java.lang.Object)"/>
        /// </summary>
        /// <param name="k"><see cref="object"/></param>
        /// <param name="v"><see cref="object"/></param>
        /// <returns><see cref="object"/></returns>
        public object Put(object k, object v)
        {
            return IExecute("put", k, v);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/Pool.html#putIfNotExists(java.lang.Object,java.lang.Object)"/>
        /// </summary>
        /// <param name="k"><see cref="object"/></param>
        /// <param name="v"><see cref="object"/></param>
        /// <returns><see cref="object"/></returns>
        public object PutIfNotExists(object k, object v)
        {
            return IExecute("putIfNotExists", k, v);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/Pool.html#remove(java.lang.Object)"/>
        /// </summary>
        /// <param name="key"><see cref="object"/></param>
        /// <returns><see cref="object"/></returns>
        public object Remove(object key)
        {
            return IExecute("remove", key);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/Pool.html#clear()"/>
        /// </summary>
        public void Clear()
        {
            IExecute("clear");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/Pool.html#putAll(java.util.Map)"/>
        /// </summary>
        /// <param name="map"><see cref="Java.Util.Map"/></param>
        public void PutAll(Java.Util.Map map)
        {
            IExecute("putAll", map);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion

    #region Pool<K, V>
    public partial class Pool<K, V>
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Kafka.Utils.Pool{K, V}"/> to <see cref="Kafka.Utils.Pool"/>
        /// </summary>
        public static implicit operator Kafka.Utils.Pool(Kafka.Utils.Pool<K, V> t) => t.Cast<Kafka.Utils.Pool>();

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/Pool.html#className()"/> 
        /// </summary>
        public string ClassName
        {
            get { return IExecute<string>("className"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/Pool.html#collectionClassName()"/> 
        /// </summary>
        public string CollectionClassName
        {
            get { return IExecute<string>("collectionClassName"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/Pool.html#hasDefiniteSize()"/> 
        /// </summary>
        public bool HasDefiniteSize
        {
            get { return IExecute<bool>("hasDefiniteSize"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/Pool.html#head()"/> 
        /// </summary>
        public object Head
        {
            get { return IExecute("head"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/Pool.html#init()"/> 
        /// </summary>
        public object Init
        {
            get { return IExecute("init"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/Pool.html#isEmpty()"/> 
        /// </summary>
        public bool IsEmpty
        {
            get { return IExecute<bool>("isEmpty"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/Pool.html#isTraversableAgain()"/> 
        /// </summary>
        public bool IsTraversableAgain
        {
            get { return IExecute<bool>("isTraversableAgain"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/Pool.html#knownSize()"/> 
        /// </summary>
        public int KnownSize
        {
            get { return IExecute<int>("knownSize"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/Pool.html#last()"/> 
        /// </summary>
        public object Last
        {
            get { return IExecute("last"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/Pool.html#nonEmpty()"/> 
        /// </summary>
        public bool NonEmpty
        {
            get { return IExecute<bool>("nonEmpty"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/Pool.html#repr()"/> 
        /// </summary>
        public object Repr
        {
            get { return IExecute("repr"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/Pool.html#size()"/> 
        /// </summary>
        public int Size
        {
            get { return IExecute<int>("size"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/Pool.html#stringPrefix()"/> 
        /// </summary>
        public string StringPrefix
        {
            get { return IExecute<string>("stringPrefix"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/Pool.html#tail()"/> 
        /// </summary>
        public object Tail
        {
            get { return IExecute("tail"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/Pool.html#zipWithIndex()"/> 
        /// </summary>
        public object ZipWithIndex
        {
            get { return IExecute("zipWithIndex"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/Pool.html#copyToArray(java.lang.Object,int,int)"/>
        /// </summary>
        /// <param name="xs"><see cref="object"/></param>
        /// <param name="start"><see cref="int"/></param>
        /// <param name="len"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public int CopyToArray(object xs, int start, int len)
        {
            return IExecute<int>("copyToArray", xs, start, len);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/Pool.html#copyToArray(java.lang.Object,int)"/>
        /// </summary>
        /// <param name="xs"><see cref="object"/></param>
        /// <param name="start"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public int CopyToArray(object xs, int start)
        {
            return IExecute<int>("copyToArray", xs, start);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/Pool.html#copyToArray(java.lang.Object)"/>
        /// </summary>
        /// <param name="xs"><see cref="object"/></param>
        /// <returns><see cref="int"/></returns>
        public int CopyToArray(object xs)
        {
            return IExecute<int>("copyToArray", xs);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/Pool.html#contains(java.lang.Object)"/>
        /// </summary>
        /// <param name="id"><typeparamref name="K"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool Contains(K id)
        {
            return IExecute<bool>("contains", id);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/Pool.html#remove(java.lang.Object,java.lang.Object)"/>
        /// </summary>
        /// <param name="key"><typeparamref name="K"/></param>
        /// <param name="value"><typeparamref name="V"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool Remove(K key, V value)
        {
            return IExecute<bool>("remove", key, value);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/Pool.html#mkString()"/>
        /// </summary>

        /// <returns><see cref="string"/></returns>
        public string MkString()
        {
            return IExecute<string>("mkString");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/Pool.html#mkString(java.lang.String,java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="start"><see cref="string"/></param>
        /// <param name="sep"><see cref="string"/></param>
        /// <param name="end"><see cref="string"/></param>
        /// <returns><see cref="string"/></returns>
        public string MkString(string start, string sep, string end)
        {
            return IExecute<string>("mkString", start, sep, end);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/Pool.html#mkString(java.lang.String)"/>
        /// </summary>
        /// <param name="sep"><see cref="string"/></param>
        /// <returns><see cref="string"/></returns>
        public string MkString(string sep)
        {
            return IExecute<string>("mkString", sep);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/Pool.html#sizeCompare(int)"/>
        /// </summary>
        /// <param name="otherSize"><see cref="int"/></param>
        /// <returns><see cref="int"/></returns>
        public int SizeCompare(int otherSize)
        {
            return IExecute<int>("sizeCompare", otherSize);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/Pool.html#drop(int)"/>
        /// </summary>
        /// <param name="n"><see cref="int"/></param>
        /// <returns><see cref="object"/></returns>
        public object Drop(int n)
        {
            return IExecute("drop", n);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/Pool.html#dropRight(int)"/>
        /// </summary>
        /// <param name="n"><see cref="int"/></param>
        /// <returns><see cref="object"/></returns>
        public object DropRight(int n)
        {
            return IExecute("dropRight", n);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/Pool.html#slice(int,int)"/>
        /// </summary>
        /// <param name="from"><see cref="int"/></param>
        /// <param name="until"><see cref="int"/></param>
        /// <returns><see cref="object"/></returns>
        public object Slice(int from, int until)
        {
            return IExecute("slice", from, until);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/Pool.html#take(int)"/>
        /// </summary>
        /// <param name="n"><see cref="int"/></param>
        /// <returns><see cref="object"/></returns>
        public object Take(int n)
        {
            return IExecute("take", n);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/Pool.html#takeRight(int)"/>
        /// </summary>
        /// <param name="n"><see cref="int"/></param>
        /// <returns><see cref="object"/></returns>
        public object TakeRight(int n)
        {
            return IExecute("takeRight", n);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/Pool.html#get(java.lang.Object)"/>
        /// </summary>
        /// <param name="key"><typeparamref name="K"/></param>
        /// <returns><typeparamref name="V"/></returns>
        public V Get(K key)
        {
            return IExecute<V>("get", key);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/Pool.html#getAndMaybePut(java.lang.Object)"/>
        /// </summary>
        /// <param name="key"><typeparamref name="K"/></param>
        /// <returns><typeparamref name="V"/></returns>
        public V GetAndMaybePut(K key)
        {
            return IExecute<V>("getAndMaybePut", key);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/Pool.html#put(java.lang.Object,java.lang.Object)"/>
        /// </summary>
        /// <param name="k"><typeparamref name="K"/></param>
        /// <param name="v"><typeparamref name="V"/></param>
        /// <returns><typeparamref name="V"/></returns>
        public V Put(K k, V v)
        {
            return IExecute<V>("put", k, v);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/Pool.html#putIfNotExists(java.lang.Object,java.lang.Object)"/>
        /// </summary>
        /// <param name="k"><typeparamref name="K"/></param>
        /// <param name="v"><typeparamref name="V"/></param>
        /// <returns><typeparamref name="V"/></returns>
        public V PutIfNotExists(K k, V v)
        {
            return IExecute<V>("putIfNotExists", k, v);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/Pool.html#remove(java.lang.Object)"/>
        /// </summary>
        /// <param name="key"><typeparamref name="K"/></param>
        /// <returns><typeparamref name="V"/></returns>
        public V Remove(K key)
        {
            return IExecute<V>("remove", key);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/Pool.html#clear()"/>
        /// </summary>
        public void Clear()
        {
            IExecute("clear");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/utils/Pool.html#putAll(java.util.Map)"/>
        /// </summary>
        /// <param name="map"><see cref="Java.Util.Map"/></param>
        public void PutAll(Java.Util.Map<K, V> map)
        {
            IExecute("putAll", map);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}