/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka_2.13-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Kafka.Raft
{
    #region KafkaNetworkChannel
    public partial class KafkaNetworkChannel
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/KafkaNetworkChannel.html#%3Cinit%3E(org.apache.kafka.common.utils.Time,org.apache.kafka.clients.KafkaClient,int,java.lang.String)"/>
        /// </summary>
        /// <param name="time"><see cref="Org.Apache.Kafka.Common.Utils.Time"/></param>
        /// <param name="client"><see cref="Org.Apache.Kafka.Clients.KafkaClient"/></param>
        /// <param name="requestTimeoutMs"><see cref="int"/></param>
        /// <param name="threadNamePrefix"><see cref="string"/></param>
        public KafkaNetworkChannel(Org.Apache.Kafka.Common.Utils.Time time, Org.Apache.Kafka.Clients.KafkaClient client, int requestTimeoutMs, string threadNamePrefix)
            : base(time, client, requestTimeoutMs, threadNamePrefix)
        {
        }

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Kafka.Raft.KafkaNetworkChannel"/> to <see cref="Org.Apache.Kafka.Raft.NetworkChannel"/>
        /// </summary>
        public static implicit operator Org.Apache.Kafka.Raft.NetworkChannel(Kafka.Raft.KafkaNetworkChannel t) => t.Cast<Org.Apache.Kafka.Raft.NetworkChannel>();
        /// <summary>
        /// Converter from <see cref="Kafka.Raft.KafkaNetworkChannel"/> to <see cref="Kafka.Utils.Logging"/>
        /// </summary>
        public static implicit operator Kafka.Utils.Logging(Kafka.Raft.KafkaNetworkChannel t) => t.Cast<Kafka.Utils.Logging>();

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/KafkaNetworkChannel.html#isDebugEnabled()"/> 
        /// </summary>
        public bool IsDebugEnabled
        {
            get { return IExecute<bool>("isDebugEnabled"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/KafkaNetworkChannel.html#isTraceEnabled()"/> 
        /// </summary>
        public bool IsTraceEnabled
        {
            get { return IExecute<bool>("isTraceEnabled"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/KafkaNetworkChannel.html#logger()"/> 
        /// </summary>
        public Com.Typesafe.Scalalogging.Logger Logger
        {
            get { return IExecute<Com.Typesafe.Scalalogging.Logger>("logger"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/KafkaNetworkChannel.html#loggerName()"/> 
        /// </summary>
        public string LoggerName
        {
            get { return IExecute<string>("loggerName"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/KafkaNetworkChannel.html#logIdent()"/> 
        /// </summary>
        public string LogIdent
        {
            get { return IExecute<string>("logIdent"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/KafkaNetworkChannel.html#newCorrelationId()"/> 
        /// </summary>
        public int NewCorrelationId
        {
            get { return IExecute<int>("newCorrelationId"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/KafkaNetworkChannel.html#msgWithLogIdent(java.lang.String)"/>
        /// </summary>
        /// <param name="msg"><see cref="string"/></param>
        /// <returns><see cref="string"/></returns>
        public string MsgWithLogIdent(string msg)
        {
            return IExecute<string>("msgWithLogIdent", msg);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/KafkaNetworkChannel.html#close()"/>
        /// </summary>
        public void Close()
        {
            IExecute("close");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/KafkaNetworkChannel.html#initiateShutdown()"/>
        /// </summary>
        public void InitiateShutdown()
        {
            IExecute("initiateShutdown");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/KafkaNetworkChannel.html#pollOnce()"/>
        /// </summary>
        public void PollOnce()
        {
            IExecute("pollOnce");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/KafkaNetworkChannel.html#send(org.apache.kafka.raft.RaftRequest.Outbound)"/>
        /// </summary>
        /// <param name="request"><see cref="Org.Apache.Kafka.Raft.RaftRequest.Outbound"/></param>
        public void Send(Org.Apache.Kafka.Raft.RaftRequest.Outbound request)
        {
            IExecute("send", request);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/KafkaNetworkChannel.html#start()"/>
        /// </summary>
        public void Start()
        {
            IExecute("start");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/KafkaNetworkChannel.html#updateEndpoint(int,org.apache.kafka.raft.RaftConfig.InetAddressSpec)"/>
        /// </summary>
        /// <param name="id"><see cref="int"/></param>
        /// <param name="spec"><see cref="Org.Apache.Kafka.Raft.RaftConfig.InetAddressSpec"/></param>
        public void UpdateEndpoint(int id, Org.Apache.Kafka.Raft.RaftConfig.InetAddressSpec spec)
        {
            IExecute("updateEndpoint", id, spec);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}