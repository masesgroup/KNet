/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka_2.13-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Kafka.Raft
{
    #region KafkaRaftManager
    public partial class KafkaRaftManager
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Kafka.Raft.KafkaRaftManager"/> to <see cref="Kafka.Raft.RaftManager"/>
        /// </summary>
        public static implicit operator Kafka.Raft.RaftManager(Kafka.Raft.KafkaRaftManager t) => t.Cast<Kafka.Raft.RaftManager>();
        /// <summary>
        /// Converter from <see cref="Kafka.Raft.KafkaRaftManager"/> to <see cref="Kafka.Utils.Logging"/>
        /// </summary>
        public static implicit operator Kafka.Utils.Logging(Kafka.Raft.KafkaRaftManager t) => t.Cast<Kafka.Utils.Logging>();

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/KafkaRaftManager.html#apiVersions()"/> 
        /// </summary>
        public Org.Apache.Kafka.Clients.ApiVersions ApiVersions
        {
            get { return IExecute<Org.Apache.Kafka.Clients.ApiVersions>("apiVersions"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/KafkaRaftManager.html#client()"/> 
        /// </summary>
        public Org.Apache.Kafka.Raft.RaftClient Client
        {
            get { return IExecute<Org.Apache.Kafka.Raft.RaftClient>("client"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/KafkaRaftManager.html#controllerQuorumVotersFuture()"/> 
        /// </summary>
        public Java.Util.Concurrent.CompletableFuture ControllerQuorumVotersFuture
        {
            get { return IExecute<Java.Util.Concurrent.CompletableFuture>("controllerQuorumVotersFuture"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/KafkaRaftManager.html#isDebugEnabled()"/> 
        /// </summary>
        public bool IsDebugEnabled
        {
            get { return IExecute<bool>("isDebugEnabled"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/KafkaRaftManager.html#isTraceEnabled()"/> 
        /// </summary>
        public bool IsTraceEnabled
        {
            get { return IExecute<bool>("isTraceEnabled"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/KafkaRaftManager.html#leaderAndEpoch()"/> 
        /// </summary>
        public Org.Apache.Kafka.Raft.LeaderAndEpoch LeaderAndEpoch
        {
            get { return IExecute<Org.Apache.Kafka.Raft.LeaderAndEpoch>("leaderAndEpoch"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/KafkaRaftManager.html#logger()"/> 
        /// </summary>
        public Com.Typesafe.Scalalogging.Logger Logger
        {
            get { return IExecute<Com.Typesafe.Scalalogging.Logger>("logger"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/KafkaRaftManager.html#loggerName()"/> 
        /// </summary>
        public string LoggerName
        {
            get { return IExecute<string>("loggerName"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/KafkaRaftManager.html#logIdent()"/> 
        /// </summary>
        public string LogIdent
        {
            get { return IExecute<string>("logIdent"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/KafkaRaftManager.html#replicatedLog()"/> 
        /// </summary>
        public Org.Apache.Kafka.Raft.ReplicatedLog ReplicatedLog
        {
            get { return IExecute<Org.Apache.Kafka.Raft.ReplicatedLog>("replicatedLog"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/KafkaRaftManager.html#msgWithLogIdent(java.lang.String)"/>
        /// </summary>
        /// <param name="msg"><see cref="string"/></param>
        /// <returns><see cref="string"/></returns>
        public string MsgWithLogIdent(string msg)
        {
            return IExecute<string>("msgWithLogIdent", msg);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/KafkaRaftManager.html#handleRequest(org.apache.kafka.common.requests.RequestHeader,org.apache.kafka.common.protocol.ApiMessage,long)"/>
        /// </summary>
        /// <param name="header"><see cref="Org.Apache.Kafka.Common.Requests.RequestHeader"/></param>
        /// <param name="request"><see cref="Org.Apache.Kafka.Common.Protocol.ApiMessage"/></param>
        /// <param name="createdTimeMs"><see cref="long"/></param>
        /// <returns><see cref="Java.Util.Concurrent.CompletableFuture"/></returns>
        public Java.Util.Concurrent.CompletableFuture HandleRequest(Org.Apache.Kafka.Common.Requests.RequestHeader header, Org.Apache.Kafka.Common.Protocol.ApiMessage request, long createdTimeMs)
        {
            return IExecute<Java.Util.Concurrent.CompletableFuture>("handleRequest", header, request, createdTimeMs);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/KafkaRaftManager.html#register(org.apache.kafka.raft.RaftClient.Listener)"/>
        /// </summary>
        /// <param name="listener"><see cref="Org.Apache.Kafka.Raft.RaftClient.Listener"/></param>
        public void Register(Org.Apache.Kafka.Raft.RaftClient.Listener listener)
        {
            IExecute("register", listener);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/KafkaRaftManager.html#shutdown()"/>
        /// </summary>
        public void Shutdown()
        {
            IExecute("shutdown");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/KafkaRaftManager.html#startup()"/>
        /// </summary>
        public void Startup()
        {
            IExecute("startup");
        }

        #endregion

        #region Nested classes
        #region RaftIoThread
        public partial class RaftIoThread
        {
            #region Constructors
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/KafkaRaftManager.RaftIoThread.html#%3Cinit%3E(org.apache.kafka.raft.KafkaRaftClient,java.lang.String)"/>
            /// </summary>
            /// <param name="client"><see cref="Org.Apache.Kafka.Raft.KafkaRaftClient"/></param>
            /// <param name="threadNamePrefix"><see cref="string"/></param>
            public RaftIoThread(Org.Apache.Kafka.Raft.KafkaRaftClient client, string threadNamePrefix)
                : base(client, threadNamePrefix)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion

    #region KafkaRaftManager<T>
    public partial class KafkaRaftManager<T>
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Kafka.Raft.KafkaRaftManager{T}"/> to <see cref="Kafka.Raft.RaftManager{T}"/>
        /// </summary>
        public static implicit operator Kafka.Raft.RaftManager<T>(Kafka.Raft.KafkaRaftManager<T> t) => t.Cast<Kafka.Raft.RaftManager<T>>();
        /// <summary>
        /// Converter from <see cref="Kafka.Raft.KafkaRaftManager{T}"/> to <see cref="Kafka.Utils.Logging"/>
        /// </summary>
        public static implicit operator Kafka.Utils.Logging(Kafka.Raft.KafkaRaftManager<T> t) => t.Cast<Kafka.Utils.Logging>();
        /// <summary>
        /// Converter from <see cref="Kafka.Raft.KafkaRaftManager{T}"/> to <see cref="Kafka.Raft.KafkaRaftManager"/>
        /// </summary>
        public static implicit operator Kafka.Raft.KafkaRaftManager(Kafka.Raft.KafkaRaftManager<T> t) => t.Cast<Kafka.Raft.KafkaRaftManager>();

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/KafkaRaftManager.html#apiVersions()"/> 
        /// </summary>
        public Org.Apache.Kafka.Clients.ApiVersions ApiVersions
        {
            get { return IExecute<Org.Apache.Kafka.Clients.ApiVersions>("apiVersions"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/KafkaRaftManager.html#client()"/> 
        /// </summary>
        public Org.Apache.Kafka.Raft.RaftClient Client
        {
            get { return IExecute<Org.Apache.Kafka.Raft.RaftClient>("client"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/KafkaRaftManager.html#controllerQuorumVotersFuture()"/> 
        /// </summary>
        public Java.Util.Concurrent.CompletableFuture<Java.Util.Map<int?, Org.Apache.Kafka.Raft.RaftConfig.AddressSpec>> ControllerQuorumVotersFuture
        {
            get { return IExecute<Java.Util.Concurrent.CompletableFuture<Java.Util.Map<int?, Org.Apache.Kafka.Raft.RaftConfig.AddressSpec>>>("controllerQuorumVotersFuture"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/KafkaRaftManager.html#isDebugEnabled()"/> 
        /// </summary>
        public bool IsDebugEnabled
        {
            get { return IExecute<bool>("isDebugEnabled"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/KafkaRaftManager.html#isTraceEnabled()"/> 
        /// </summary>
        public bool IsTraceEnabled
        {
            get { return IExecute<bool>("isTraceEnabled"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/KafkaRaftManager.html#leaderAndEpoch()"/> 
        /// </summary>
        public Org.Apache.Kafka.Raft.LeaderAndEpoch LeaderAndEpoch
        {
            get { return IExecute<Org.Apache.Kafka.Raft.LeaderAndEpoch>("leaderAndEpoch"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/KafkaRaftManager.html#logger()"/> 
        /// </summary>
        public Com.Typesafe.Scalalogging.Logger Logger
        {
            get { return IExecute<Com.Typesafe.Scalalogging.Logger>("logger"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/KafkaRaftManager.html#loggerName()"/> 
        /// </summary>
        public string LoggerName
        {
            get { return IExecute<string>("loggerName"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/KafkaRaftManager.html#logIdent()"/> 
        /// </summary>
        public string LogIdent
        {
            get { return IExecute<string>("logIdent"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/KafkaRaftManager.html#replicatedLog()"/> 
        /// </summary>
        public Org.Apache.Kafka.Raft.ReplicatedLog ReplicatedLog
        {
            get { return IExecute<Org.Apache.Kafka.Raft.ReplicatedLog>("replicatedLog"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/KafkaRaftManager.html#msgWithLogIdent(java.lang.String)"/>
        /// </summary>
        /// <param name="msg"><see cref="string"/></param>
        /// <returns><see cref="string"/></returns>
        public string MsgWithLogIdent(string msg)
        {
            return IExecute<string>("msgWithLogIdent", msg);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/KafkaRaftManager.html#handleRequest(org.apache.kafka.common.requests.RequestHeader,org.apache.kafka.common.protocol.ApiMessage,long)"/>
        /// </summary>
        /// <param name="header"><see cref="Org.Apache.Kafka.Common.Requests.RequestHeader"/></param>
        /// <param name="request"><see cref="Org.Apache.Kafka.Common.Protocol.ApiMessage"/></param>
        /// <param name="createdTimeMs"><see cref="long"/></param>
        /// <returns><see cref="Java.Util.Concurrent.CompletableFuture"/></returns>
        public Java.Util.Concurrent.CompletableFuture<Org.Apache.Kafka.Common.Protocol.ApiMessage> HandleRequest(Org.Apache.Kafka.Common.Requests.RequestHeader header, Org.Apache.Kafka.Common.Protocol.ApiMessage request, long createdTimeMs)
        {
            return IExecute<Java.Util.Concurrent.CompletableFuture<Org.Apache.Kafka.Common.Protocol.ApiMessage>>("handleRequest", header, request, createdTimeMs);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/KafkaRaftManager.html#register(org.apache.kafka.raft.RaftClient.Listener)"/>
        /// </summary>
        /// <param name="listener"><see cref="Org.Apache.Kafka.Raft.RaftClient.Listener"/></param>
        public void Register(Org.Apache.Kafka.Raft.RaftClient.Listener<T> listener)
        {
            IExecute("register", listener);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/KafkaRaftManager.html#shutdown()"/>
        /// </summary>
        public void Shutdown()
        {
            IExecute("shutdown");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/KafkaRaftManager.html#startup()"/>
        /// </summary>
        public void Startup()
        {
            IExecute("startup");
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}