/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka_2.13-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Kafka.Raft
{
    #region MetadataLogConfig
    public partial class MetadataLogConfig
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/MetadataLogConfig.html#%3Cinit%3E(int,int,long,long,long,int,int,int,int)"/>
        /// </summary>
        /// <param name="logSegmentBytes"><see cref="int"/></param>
        /// <param name="logSegmentMinBytes"><see cref="int"/></param>
        /// <param name="logSegmentMillis"><see cref="long"/></param>
        /// <param name="retentionMaxBytes"><see cref="long"/></param>
        /// <param name="retentionMillis"><see cref="long"/></param>
        /// <param name="maxBatchSizeInBytes"><see cref="int"/></param>
        /// <param name="maxFetchSizeInBytes"><see cref="int"/></param>
        /// <param name="fileDeleteDelayMs"><see cref="int"/></param>
        /// <param name="nodeId"><see cref="int"/></param>
        public MetadataLogConfig(int logSegmentBytes, int logSegmentMinBytes, long logSegmentMillis, long retentionMaxBytes, long retentionMillis, int maxBatchSizeInBytes, int maxFetchSizeInBytes, int fileDeleteDelayMs, int nodeId)
            : base(logSegmentBytes, logSegmentMinBytes, logSegmentMillis, retentionMaxBytes, retentionMillis, maxBatchSizeInBytes, maxFetchSizeInBytes, fileDeleteDelayMs, nodeId)
        {
        }

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Kafka.Raft.MetadataLogConfig"/> to <see cref="Java.Io.Serializable"/>
        /// </summary>
        public static implicit operator Java.Io.Serializable(Kafka.Raft.MetadataLogConfig t) => t.Cast<Java.Io.Serializable>();

        #endregion

        #region Fields

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/MetadataLogConfig.html#apply(int,int,long,long,long,int,int,int,int)"/>
        /// </summary>
        /// <param name="logSegmentBytes"><see cref="int"/></param>
        /// <param name="logSegmentMinBytes"><see cref="int"/></param>
        /// <param name="logSegmentMillis"><see cref="long"/></param>
        /// <param name="retentionMaxBytes"><see cref="long"/></param>
        /// <param name="retentionMillis"><see cref="long"/></param>
        /// <param name="maxBatchSizeInBytes"><see cref="int"/></param>
        /// <param name="maxFetchSizeInBytes"><see cref="int"/></param>
        /// <param name="fileDeleteDelayMs"><see cref="int"/></param>
        /// <param name="nodeId"><see cref="int"/></param>
        /// <returns><see cref="Kafka.Raft.MetadataLogConfig"/></returns>
        public static Kafka.Raft.MetadataLogConfig Apply(int logSegmentBytes, int logSegmentMinBytes, long logSegmentMillis, long retentionMaxBytes, long retentionMillis, int maxBatchSizeInBytes, int maxFetchSizeInBytes, int fileDeleteDelayMs, int nodeId)
        {
            return SExecute<Kafka.Raft.MetadataLogConfig>(LocalBridgeClazz, "apply", logSegmentBytes, logSegmentMinBytes, logSegmentMillis, retentionMaxBytes, retentionMillis, maxBatchSizeInBytes, maxFetchSizeInBytes, fileDeleteDelayMs, nodeId);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/MetadataLogConfig.html#apply(org.apache.kafka.common.config.AbstractConfig,int,int)"/>
        /// </summary>
        /// <param name="config"><see cref="Org.Apache.Kafka.Common.Config.AbstractConfig"/></param>
        /// <param name="maxBatchSizeInBytes"><see cref="int"/></param>
        /// <param name="maxFetchSizeInBytes"><see cref="int"/></param>
        /// <returns><see cref="Kafka.Raft.MetadataLogConfig"/></returns>
        public static Kafka.Raft.MetadataLogConfig Apply(Org.Apache.Kafka.Common.Config.AbstractConfig config, int maxBatchSizeInBytes, int maxFetchSizeInBytes)
        {
            return SExecute<Kafka.Raft.MetadataLogConfig>(LocalBridgeClazz, "apply", config, maxBatchSizeInBytes, maxFetchSizeInBytes);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/MetadataLogConfig.html#fileDeleteDelayMs()"/> 
        /// </summary>
        public int FileDeleteDelayMs
        {
            get { return IExecute<int>("fileDeleteDelayMs"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/MetadataLogConfig.html#logSegmentBytes()"/> 
        /// </summary>
        public int LogSegmentBytes
        {
            get { return IExecute<int>("logSegmentBytes"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/MetadataLogConfig.html#logSegmentMillis()"/> 
        /// </summary>
        public long LogSegmentMillis
        {
            get { return IExecute<long>("logSegmentMillis"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/MetadataLogConfig.html#logSegmentMinBytes()"/> 
        /// </summary>
        public int LogSegmentMinBytes
        {
            get { return IExecute<int>("logSegmentMinBytes"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/MetadataLogConfig.html#maxBatchSizeInBytes()"/> 
        /// </summary>
        public int MaxBatchSizeInBytes
        {
            get { return IExecute<int>("maxBatchSizeInBytes"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/MetadataLogConfig.html#maxFetchSizeInBytes()"/> 
        /// </summary>
        public int MaxFetchSizeInBytes
        {
            get { return IExecute<int>("maxFetchSizeInBytes"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/MetadataLogConfig.html#nodeId()"/> 
        /// </summary>
        public int NodeId
        {
            get { return IExecute<int>("nodeId"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/MetadataLogConfig.html#productArity()"/> 
        /// </summary>
        public int ProductArity
        {
            get { return IExecute<int>("productArity"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/MetadataLogConfig.html#productPrefix()"/> 
        /// </summary>
        public string ProductPrefix
        {
            get { return IExecute<string>("productPrefix"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/MetadataLogConfig.html#retentionMaxBytes()"/> 
        /// </summary>
        public long RetentionMaxBytes
        {
            get { return IExecute<long>("retentionMaxBytes"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/MetadataLogConfig.html#retentionMillis()"/> 
        /// </summary>
        public long RetentionMillis
        {
            get { return IExecute<long>("retentionMillis"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/MetadataLogConfig.html#canEqual(java.lang.Object)"/>
        /// </summary>
        /// <param name="x$1"><see cref="object"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool CanEqual(object x_1)
        {
            return IExecute<bool>("canEqual", x_1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/MetadataLogConfig.html#productElement(int)"/>
        /// </summary>
        /// <param name="x$1"><see cref="int"/></param>
        /// <returns><see cref="object"/></returns>
        public object ProductElement(int x_1)
        {
            return IExecute("productElement", x_1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/MetadataLogConfig.html#productElementName(int)"/>
        /// </summary>
        /// <param name="x$1"><see cref="int"/></param>
        /// <returns><see cref="string"/></returns>
        public string ProductElementName(int x_1)
        {
            return IExecute<string>("productElementName", x_1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/MetadataLogConfig.html#copy(int,int,long,long,long,int,int,int,int)"/>
        /// </summary>
        /// <param name="logSegmentBytes"><see cref="int"/></param>
        /// <param name="logSegmentMinBytes"><see cref="int"/></param>
        /// <param name="logSegmentMillis"><see cref="long"/></param>
        /// <param name="retentionMaxBytes"><see cref="long"/></param>
        /// <param name="retentionMillis"><see cref="long"/></param>
        /// <param name="maxBatchSizeInBytes"><see cref="int"/></param>
        /// <param name="maxFetchSizeInBytes"><see cref="int"/></param>
        /// <param name="fileDeleteDelayMs"><see cref="int"/></param>
        /// <param name="nodeId"><see cref="int"/></param>
        /// <returns><see cref="Kafka.Raft.MetadataLogConfig"/></returns>
        public Kafka.Raft.MetadataLogConfig Copy(int logSegmentBytes, int logSegmentMinBytes, long logSegmentMillis, long retentionMaxBytes, long retentionMillis, int maxBatchSizeInBytes, int maxFetchSizeInBytes, int fileDeleteDelayMs, int nodeId)
        {
            return IExecute<Kafka.Raft.MetadataLogConfig>("copy", logSegmentBytes, logSegmentMinBytes, logSegmentMillis, retentionMaxBytes, retentionMillis, maxBatchSizeInBytes, maxFetchSizeInBytes, fileDeleteDelayMs, nodeId);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}