/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka_2.13-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Kafka.Raft
{
    #region TimingWheelExpirationService
    public partial class TimingWheelExpirationService
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/TimingWheelExpirationService.html#%3Cinit%3E(kafka.utils.timer.Timer)"/>
        /// </summary>
        /// <param name="timer"><see cref="Kafka.Utils.Timer.Timer"/></param>
        public TimingWheelExpirationService(Kafka.Utils.Timer.Timer timer)
            : base(timer)
        {
        }

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Kafka.Raft.TimingWheelExpirationService"/> to <see cref="Org.Apache.Kafka.Raft.ExpirationService"/>
        /// </summary>
        public static implicit operator Org.Apache.Kafka.Raft.ExpirationService(Kafka.Raft.TimingWheelExpirationService t) => t.Cast<Org.Apache.Kafka.Raft.ExpirationService>();

        #endregion

        #region Fields
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/TimingWheelExpirationService.html#kafka$raft$TimingWheelExpirationService$$timer"/>
        /// </summary>
        public Kafka.Utils.Timer.Timer kafka$raft$TimingWheelExpirationService$$timer { get { return IGetField<Kafka.Utils.Timer.Timer>("kafka$raft$TimingWheelExpirationService$$timer"); } }

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/TimingWheelExpirationService.html#failAfter(long)"/>
        /// </summary>
        /// <param name="timeoutMs"><see cref="long"/></param>
        /// <typeparam name="T"></typeparam>
        /// <returns><see cref="Java.Util.Concurrent.CompletableFuture"/></returns>
        public Java.Util.Concurrent.CompletableFuture<T> FailAfter<T>(long timeoutMs)
        {
            return IExecute<Java.Util.Concurrent.CompletableFuture<T>>("failAfter", timeoutMs);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/TimingWheelExpirationService.html#shutdown()"/>
        /// </summary>
        public void Shutdown()
        {
            IExecute("shutdown");
        }

        #endregion

        #region Nested classes
        #region TimerTaskCompletableFuture
        public partial class TimerTaskCompletableFuture
        {
            #region Constructors
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/TimingWheelExpirationService.TimerTaskCompletableFuture.html#%3Cinit%3E(long)"/>
            /// </summary>
            /// <param name="delayMs"><see cref="long"/></param>
            public TimerTaskCompletableFuture(long delayMs)
                : base(delayMs)
            {
            }

            #endregion

            #region Class/Interface conversion operators
            /// <summary>
            /// Converter from <see cref="Kafka.Raft.TimingWheelExpirationService.TimerTaskCompletableFuture"/> to <see cref="Kafka.Utils.Timer.TimerTask"/>
            /// </summary>
            public static implicit operator Kafka.Utils.Timer.TimerTask(Kafka.Raft.TimingWheelExpirationService.TimerTaskCompletableFuture t) => t.Cast<Kafka.Utils.Timer.TimerTask>();

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/TimingWheelExpirationService.TimerTaskCompletableFuture.html#delayMs()"/> 
            /// </summary>
            public long DelayMs
            {
                get { return IExecute<long>("delayMs"); }
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/TimingWheelExpirationService.TimerTaskCompletableFuture.html#getTimerTaskEntry()"/> <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/TimingWheelExpirationService.TimerTaskCompletableFuture.html#setTimerTaskEntry(kafka.utils.timer.TimerTaskEntry)"/>
            /// </summary>
            public Kafka.Utils.Timer.TimerTaskEntry TimerTaskEntry
            {
                get { return IExecute<Kafka.Utils.Timer.TimerTaskEntry>("getTimerTaskEntry"); } set { IExecute("setTimerTaskEntry", value); }
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/TimingWheelExpirationService.TimerTaskCompletableFuture.html#cancel()"/>
            /// </summary>
            public void Cancel()
            {
                IExecute("cancel");
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/TimingWheelExpirationService.TimerTaskCompletableFuture.html#run()"/>
            /// </summary>
            public void Run()
            {
                IExecute("run");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region TimerTaskCompletableFuture<T>
        public partial class TimerTaskCompletableFuture<T>
        {
            #region Constructors
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/TimingWheelExpirationService.TimerTaskCompletableFuture.html#%3Cinit%3E(long)"/>
            /// </summary>
            /// <param name="delayMs"><see cref="long"/></param>
            public TimerTaskCompletableFuture(long delayMs)
                : base(delayMs)
            {
            }

            #endregion

            #region Class/Interface conversion operators
            /// <summary>
            /// Converter from <see cref="Kafka.Raft.TimingWheelExpirationService.TimerTaskCompletableFuture{T}"/> to <see cref="Kafka.Utils.Timer.TimerTask"/>
            /// </summary>
            public static implicit operator Kafka.Utils.Timer.TimerTask(Kafka.Raft.TimingWheelExpirationService.TimerTaskCompletableFuture<T> t) => t.Cast<Kafka.Utils.Timer.TimerTask>();
            /// <summary>
            /// Converter from <see cref="Kafka.Raft.TimingWheelExpirationService.TimerTaskCompletableFuture{T}"/> to <see cref="Kafka.Raft.TimingWheelExpirationService.TimerTaskCompletableFuture"/>
            /// </summary>
            public static implicit operator Kafka.Raft.TimingWheelExpirationService.TimerTaskCompletableFuture(Kafka.Raft.TimingWheelExpirationService.TimerTaskCompletableFuture<T> t) => t.Cast<Kafka.Raft.TimingWheelExpirationService.TimerTaskCompletableFuture>();

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/TimingWheelExpirationService.TimerTaskCompletableFuture.html#delayMs()"/> 
            /// </summary>
            public long DelayMs
            {
                get { return IExecute<long>("delayMs"); }
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/TimingWheelExpirationService.TimerTaskCompletableFuture.html#getTimerTaskEntry()"/> <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/TimingWheelExpirationService.TimerTaskCompletableFuture.html#setTimerTaskEntry(kafka.utils.timer.TimerTaskEntry)"/>
            /// </summary>
            public Kafka.Utils.Timer.TimerTaskEntry TimerTaskEntry
            {
                get { return IExecute<Kafka.Utils.Timer.TimerTaskEntry>("getTimerTaskEntry"); } set { IExecute("setTimerTaskEntry", value); }
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/TimingWheelExpirationService.TimerTaskCompletableFuture.html#cancel()"/>
            /// </summary>
            public void Cancel()
            {
                IExecute("cancel");
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/TimingWheelExpirationService.TimerTaskCompletableFuture.html#run()"/>
            /// </summary>
            public void Run()
            {
                IExecute("run");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}