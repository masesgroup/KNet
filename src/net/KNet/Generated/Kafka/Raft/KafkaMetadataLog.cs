/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka_2.13-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Kafka.Raft
{
    #region KafkaMetadataLog
    public partial class KafkaMetadataLog
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Kafka.Raft.KafkaMetadataLog"/> to <see cref="Org.Apache.Kafka.Raft.ReplicatedLog"/>
        /// </summary>
        public static implicit operator Org.Apache.Kafka.Raft.ReplicatedLog(Kafka.Raft.KafkaMetadataLog t) => t.Cast<Org.Apache.Kafka.Raft.ReplicatedLog>();
        /// <summary>
        /// Converter from <see cref="Kafka.Raft.KafkaMetadataLog"/> to <see cref="Kafka.Utils.Logging"/>
        /// </summary>
        public static implicit operator Kafka.Utils.Logging(Kafka.Raft.KafkaMetadataLog t) => t.Cast<Kafka.Utils.Logging>();

        #endregion

        #region Fields

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/KafkaMetadataLog.html#apply(org.apache.kafka.common.TopicPartition,org.apache.kafka.common.Uuid,java.io.File,org.apache.kafka.common.utils.Time,kafka.utils.Scheduler,kafka.raft.MetadataLogConfig)"/>
        /// </summary>
        /// <param name="topicPartition"><see cref="Org.Apache.Kafka.Common.TopicPartition"/></param>
        /// <param name="topicId"><see cref="Org.Apache.Kafka.Common.Uuid"/></param>
        /// <param name="dataDir"><see cref="Java.Io.File"/></param>
        /// <param name="time"><see cref="Org.Apache.Kafka.Common.Utils.Time"/></param>
        /// <param name="scheduler"><see cref="Kafka.Utils.Scheduler"/></param>
        /// <param name="config"><see cref="Kafka.Raft.MetadataLogConfig"/></param>
        /// <returns><see cref="Kafka.Raft.KafkaMetadataLog"/></returns>
        public static Kafka.Raft.KafkaMetadataLog Apply(Org.Apache.Kafka.Common.TopicPartition topicPartition, Org.Apache.Kafka.Common.Uuid topicId, Java.Io.File dataDir, Org.Apache.Kafka.Common.Utils.Time time, Kafka.Utils.Scheduler scheduler, Kafka.Raft.MetadataLogConfig config)
        {
            return SExecute<Kafka.Raft.KafkaMetadataLog>(LocalBridgeClazz, "apply", topicPartition, topicId, dataDir, time, scheduler, config);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/KafkaMetadataLog.html#earliestSnapshotId()"/> 
        /// </summary>
        public Java.Util.Optional<Org.Apache.Kafka.Raft.OffsetAndEpoch> EarliestSnapshotId
        {
            get { return IExecute<Java.Util.Optional<Org.Apache.Kafka.Raft.OffsetAndEpoch>>("earliestSnapshotId"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/KafkaMetadataLog.html#endOffset()"/> 
        /// </summary>
        public Org.Apache.Kafka.Raft.LogOffsetMetadata EndOffset
        {
            get { return IExecute<Org.Apache.Kafka.Raft.LogOffsetMetadata>("endOffset"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/KafkaMetadataLog.html#highWatermark()"/> 
        /// </summary>
        public Org.Apache.Kafka.Raft.LogOffsetMetadata HighWatermark
        {
            get { return IExecute<Org.Apache.Kafka.Raft.LogOffsetMetadata>("highWatermark"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/KafkaMetadataLog.html#isDebugEnabled()"/> 
        /// </summary>
        public bool IsDebugEnabled
        {
            get { return IExecute<bool>("isDebugEnabled"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/KafkaMetadataLog.html#isTraceEnabled()"/> 
        /// </summary>
        public bool IsTraceEnabled
        {
            get { return IExecute<bool>("isTraceEnabled"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/KafkaMetadataLog.html#lastFetchedEpoch()"/> 
        /// </summary>
        public int LastFetchedEpoch
        {
            get { return IExecute<int>("lastFetchedEpoch"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/KafkaMetadataLog.html#lastFlushedOffset()"/> 
        /// </summary>
        public long LastFlushedOffset
        {
            get { return IExecute<long>("lastFlushedOffset"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/KafkaMetadataLog.html#latestSnapshot()"/> 
        /// </summary>
        public Java.Util.Optional<Org.Apache.Kafka.Snapshot.RawSnapshotReader> LatestSnapshot
        {
            get { return IExecute<Java.Util.Optional<Org.Apache.Kafka.Snapshot.RawSnapshotReader>>("latestSnapshot"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/KafkaMetadataLog.html#latestSnapshotId()"/> 
        /// </summary>
        public Java.Util.Optional<Org.Apache.Kafka.Raft.OffsetAndEpoch> LatestSnapshotId
        {
            get { return IExecute<Java.Util.Optional<Org.Apache.Kafka.Raft.OffsetAndEpoch>>("latestSnapshotId"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/KafkaMetadataLog.html#log()"/> 
        /// </summary>
        public Kafka.Log.UnifiedLog Log
        {
            get { return IExecute<Kafka.Log.UnifiedLog>("log"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/KafkaMetadataLog.html#logger()"/> 
        /// </summary>
        public Com.Typesafe.Scalalogging.Logger Logger
        {
            get { return IExecute<Com.Typesafe.Scalalogging.Logger>("logger"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/KafkaMetadataLog.html#loggerName()"/> 
        /// </summary>
        public string LoggerName
        {
            get { return IExecute<string>("loggerName"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/KafkaMetadataLog.html#logIdent()"/> 
        /// </summary>
        public string LogIdent
        {
            get { return IExecute<string>("logIdent"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/KafkaMetadataLog.html#maybeClean()"/> 
        /// </summary>
        public bool MaybeClean
        {
            get { return IExecute<bool>("maybeClean"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/KafkaMetadataLog.html#snapshotCount()"/> 
        /// </summary>
        public int SnapshotCount
        {
            get { return IExecute<int>("snapshotCount"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/KafkaMetadataLog.html#startOffset()"/> 
        /// </summary>
        public long StartOffset
        {
            get { return IExecute<long>("startOffset"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/KafkaMetadataLog.html#topicId()"/> 
        /// </summary>
        public Org.Apache.Kafka.Common.Uuid TopicId
        {
            get { return IExecute<Org.Apache.Kafka.Common.Uuid>("topicId"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/KafkaMetadataLog.html#topicPartition()"/> 
        /// </summary>
        public Org.Apache.Kafka.Common.TopicPartition TopicPartition
        {
            get { return IExecute<Org.Apache.Kafka.Common.TopicPartition>("topicPartition"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/KafkaMetadataLog.html#truncateToLatestSnapshot()"/> 
        /// </summary>
        public bool TruncateToLatestSnapshot
        {
            get { return IExecute<bool>("truncateToLatestSnapshot"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/KafkaMetadataLog.html#deleteBeforeSnapshot(org.apache.kafka.raft.OffsetAndEpoch)"/>
        /// </summary>
        /// <param name="snapshotId"><see cref="Org.Apache.Kafka.Raft.OffsetAndEpoch"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool DeleteBeforeSnapshot(Org.Apache.Kafka.Raft.OffsetAndEpoch snapshotId)
        {
            return IExecute<bool>("deleteBeforeSnapshot", snapshotId);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/KafkaMetadataLog.html#msgWithLogIdent(java.lang.String)"/>
        /// </summary>
        /// <param name="msg"><see cref="string"/></param>
        /// <returns><see cref="string"/></returns>
        public string MsgWithLogIdent(string msg)
        {
            return IExecute<string>("msgWithLogIdent", msg);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/KafkaMetadataLog.html#readSnapshot(org.apache.kafka.raft.OffsetAndEpoch)"/>
        /// </summary>
        /// <param name="snapshotId"><see cref="Org.Apache.Kafka.Raft.OffsetAndEpoch"/></param>
        /// <returns><see cref="Java.Util.Optional"/></returns>
        public Java.Util.Optional<Org.Apache.Kafka.Snapshot.RawSnapshotReader> ReadSnapshot(Org.Apache.Kafka.Raft.OffsetAndEpoch snapshotId)
        {
            return IExecute<Java.Util.Optional<Org.Apache.Kafka.Snapshot.RawSnapshotReader>>("readSnapshot", snapshotId);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/KafkaMetadataLog.html#createNewSnapshot(org.apache.kafka.raft.OffsetAndEpoch)"/>
        /// </summary>
        /// <param name="snapshotId"><see cref="Org.Apache.Kafka.Raft.OffsetAndEpoch"/></param>
        /// <returns><see cref="Java.Util.Optional"/></returns>
        public Java.Util.Optional<Org.Apache.Kafka.Snapshot.RawSnapshotWriter> CreateNewSnapshot(Org.Apache.Kafka.Raft.OffsetAndEpoch snapshotId)
        {
            return IExecute<Java.Util.Optional<Org.Apache.Kafka.Snapshot.RawSnapshotWriter>>("createNewSnapshot", snapshotId);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/KafkaMetadataLog.html#storeSnapshot(org.apache.kafka.raft.OffsetAndEpoch)"/>
        /// </summary>
        /// <param name="snapshotId"><see cref="Org.Apache.Kafka.Raft.OffsetAndEpoch"/></param>
        /// <returns><see cref="Java.Util.Optional"/></returns>
        public Java.Util.Optional<Org.Apache.Kafka.Snapshot.RawSnapshotWriter> StoreSnapshot(Org.Apache.Kafka.Raft.OffsetAndEpoch snapshotId)
        {
            return IExecute<Java.Util.Optional<Org.Apache.Kafka.Snapshot.RawSnapshotWriter>>("storeSnapshot", snapshotId);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/KafkaMetadataLog.html#truncateToEndOffset(org.apache.kafka.raft.OffsetAndEpoch)"/>
        /// </summary>
        /// <param name="x$1"><see cref="Org.Apache.Kafka.Raft.OffsetAndEpoch"/></param>
        /// <returns><see cref="long"/></returns>
        public long TruncateToEndOffset(Org.Apache.Kafka.Raft.OffsetAndEpoch x_1)
        {
            return IExecute<long>("truncateToEndOffset", x_1);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/KafkaMetadataLog.html#appendAsFollower(org.apache.kafka.common.record.Records)"/>
        /// </summary>
        /// <param name="records"><see cref="Org.Apache.Kafka.Common.Record.Records"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Raft.LogAppendInfo"/></returns>
        public Org.Apache.Kafka.Raft.LogAppendInfo AppendAsFollower(Org.Apache.Kafka.Common.Record.Records records)
        {
            return IExecute<Org.Apache.Kafka.Raft.LogAppendInfo>("appendAsFollower", records);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/KafkaMetadataLog.html#appendAsLeader(org.apache.kafka.common.record.Records,int)"/>
        /// </summary>
        /// <param name="records"><see cref="Org.Apache.Kafka.Common.Record.Records"/></param>
        /// <param name="epoch"><see cref="int"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Raft.LogAppendInfo"/></returns>
        public Org.Apache.Kafka.Raft.LogAppendInfo AppendAsLeader(Org.Apache.Kafka.Common.Record.Records records, int epoch)
        {
            return IExecute<Org.Apache.Kafka.Raft.LogAppendInfo>("appendAsLeader", records, epoch);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/KafkaMetadataLog.html#read(long,org.apache.kafka.raft.Isolation)"/>
        /// </summary>
        /// <param name="startOffset"><see cref="long"/></param>
        /// <param name="readIsolation"><see cref="Org.Apache.Kafka.Raft.Isolation"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Raft.LogFetchInfo"/></returns>
        public Org.Apache.Kafka.Raft.LogFetchInfo Read(long startOffset, Org.Apache.Kafka.Raft.Isolation readIsolation)
        {
            return IExecute<Org.Apache.Kafka.Raft.LogFetchInfo>("read", startOffset, readIsolation);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/KafkaMetadataLog.html#endOffsetForEpoch(int)"/>
        /// </summary>
        /// <param name="epoch"><see cref="int"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Raft.OffsetAndEpoch"/></returns>
        public Org.Apache.Kafka.Raft.OffsetAndEpoch EndOffsetForEpoch(int epoch)
        {
            return IExecute<Org.Apache.Kafka.Raft.OffsetAndEpoch>("endOffsetForEpoch", epoch);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/KafkaMetadataLog.html#validateOffsetAndEpoch(long,int)"/>
        /// </summary>
        /// <param name="x$1"><see cref="long"/></param>
        /// <param name="x$2"><see cref="int"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Raft.ValidOffsetAndEpoch"/></returns>
        public Org.Apache.Kafka.Raft.ValidOffsetAndEpoch ValidateOffsetAndEpoch(long x_1, int x_2)
        {
            return IExecute<Org.Apache.Kafka.Raft.ValidOffsetAndEpoch>("validateOffsetAndEpoch", x_1, x_2);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/KafkaMetadataLog.html#close()"/>
        /// </summary>
        public void Close()
        {
            IExecute("close");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/KafkaMetadataLog.html#flush(boolean)"/>
        /// </summary>
        /// <param name="forceFlushActiveSegment"><see cref="bool"/></param>
        public void Flush(bool forceFlushActiveSegment)
        {
            IExecute("flush", forceFlushActiveSegment);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/KafkaMetadataLog.html#initializeLeaderEpoch(int)"/>
        /// </summary>
        /// <param name="epoch"><see cref="int"/></param>
        public void InitializeLeaderEpoch(int epoch)
        {
            IExecute("initializeLeaderEpoch", epoch);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/KafkaMetadataLog.html#onSnapshotFrozen(org.apache.kafka.raft.OffsetAndEpoch)"/>
        /// </summary>
        /// <param name="snapshotId"><see cref="Org.Apache.Kafka.Raft.OffsetAndEpoch"/></param>
        public void OnSnapshotFrozen(Org.Apache.Kafka.Raft.OffsetAndEpoch snapshotId)
        {
            IExecute("onSnapshotFrozen", snapshotId);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/KafkaMetadataLog.html#truncateTo(long)"/>
        /// </summary>
        /// <param name="offset"><see cref="long"/></param>
        public void TruncateTo(long offset)
        {
            IExecute("truncateTo", offset);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/raft/KafkaMetadataLog.html#updateHighWatermark(org.apache.kafka.raft.LogOffsetMetadata)"/>
        /// </summary>
        /// <param name="offsetMetadata"><see cref="Org.Apache.Kafka.Raft.LogOffsetMetadata"/></param>
        public void UpdateHighWatermark(Org.Apache.Kafka.Raft.LogOffsetMetadata offsetMetadata)
        {
            IExecute("updateHighWatermark", offsetMetadata);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}