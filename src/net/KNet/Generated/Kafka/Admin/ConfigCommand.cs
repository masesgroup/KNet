/*
*  Copyright (c) 2021-2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.6.3.0)
*  using kafka_2.13-4.0.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Kafka.Admin
{
    #region ConfigCommand declaration
    /// <summary>
    /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka_2.13/4.0.0/kafka/admin/ConfigCommand.html"/>
    /// </summary>
    public partial class ConfigCommand : MASES.JCOBridge.C2JBridge.JVMBridgeBase<ConfigCommand>, MASES.JCOBridge.C2JBridge.IJVMBridgeMain
    {
        const string _bridgeClassName = "kafka.admin.ConfigCommand";
        /// <summary>
        /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
        /// </summary>
        public ConfigCommand() { }
        /// <summary>
        /// Internal constructor: used internally from JCOBridge
        /// </summary>
        [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
        public ConfigCommand(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
        /// <summary>
        /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
        /// </summary>
        public ConfigCommand(params object[] args) : base(args) { }

        private static readonly global::System.Exception _LocalBridgeClazzException = null;
        private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
        private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

        /// <inheritdoc/>
        public override string BridgeClassName => _bridgeClassName;
        /// <inheritdoc/>
        public override bool IsBridgeAbstract => false;
        /// <inheritdoc/>
        public override bool IsBridgeCloseable => false;
        /// <inheritdoc/>
        public override bool IsBridgeInterface => false;
        /// <inheritdoc/>
        public override bool IsBridgeStatic => false;

        // TODO: complete the class
        #region ConfigCommandOptions declaration
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka_2.13/4.0.0/kafka/admin/ConfigCommand.ConfigCommandOptions.html"/>
        /// </summary>
        public partial class ConfigCommandOptions : MASES.JCOBridge.C2JBridge.JVMBridgeBase<ConfigCommandOptions>
        {
            const string _bridgeClassName = "kafka.admin.ConfigCommand$ConfigCommandOptions";
            /// <summary>
            /// Default constructor: even if the corresponding Java class does not have one, it is mandatory for JCOBridge
            /// </summary>
            public ConfigCommandOptions() { }
            /// <summary>
            /// Internal constructor: used internally from JCOBridge
            /// </summary>
            [global::System.Obsolete("This public initializer is needed for JCOBridge internal use, other uses can produce unidentible behaviors.")]
            public ConfigCommandOptions(IJVMBridgeBaseInitializer initializer) : base(initializer) { }
            /// <summary>
            /// Generic constructor: it is useful for JCOBridge when there is a derived class which needs to pass arguments to the highest JVMBridgeBase class
            /// </summary>
            public ConfigCommandOptions(params object[] args) : base(args) { }

            private static readonly global::System.Exception _LocalBridgeClazzException = null;
            private static readonly MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType _LocalBridgeClazz = JVMBridgeBase.ClazzOf(_bridgeClassName, out _LocalBridgeClazzException, false);
            private static MASES.JCOBridge.C2JBridge.JVMInterop.IJavaType LocalBridgeClazz => _LocalBridgeClazz ?? throw _LocalBridgeClazzException ?? new global::System.InvalidOperationException($"Class {_bridgeClassName} was not found.");

            /// <inheritdoc/>
            public override string BridgeClassName => _bridgeClassName;
            /// <inheritdoc/>
            public override bool IsBridgeAbstract => false;
            /// <inheritdoc/>
            public override bool IsBridgeCloseable => false;
            /// <inheritdoc/>
            public override bool IsBridgeInterface => false;
            /// <inheritdoc/>
            public override bool IsBridgeStatic => true;

            // TODO: complete the class

        }
        #endregion

    
    }
    #endregion

    #region ConfigCommand implementation
    public partial class ConfigCommand
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka_2.13/4.0.0/kafka/admin/ConfigCommand.html#isDebugEnabled()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public static bool IsDebugEnabled()
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "isDebugEnabled", "()Z");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka_2.13/4.0.0/kafka/admin/ConfigCommand.html#isTraceEnabled()"/>
        /// </summary>
        /// <returns><see cref="bool"/></returns>
        public static bool IsTraceEnabled()
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "isTraceEnabled", "()Z");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka_2.13/4.0.0/kafka/admin/ConfigCommand.html#isValidIpEntity(java.lang.String)"/>
        /// </summary>
        /// <param name="ip"><see cref="Java.Lang.String"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool IsValidIpEntity(Java.Lang.String ip)
        {
            return SExecuteWithSignature<bool>(LocalBridgeClazz, "isValidIpEntity", "(Ljava/lang/String;)Z", ip);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka_2.13/4.0.0/kafka/admin/ConfigCommand.html#BrokerLoggerConfigType()"/>
        /// </summary>
        /// <returns><see cref="Java.Lang.String"/></returns>
        public static Java.Lang.String BrokerLoggerConfigType()
        {
            return SExecuteWithSignature<Java.Lang.String>(LocalBridgeClazz, "BrokerLoggerConfigType", "()Ljava/lang/String;");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka_2.13/4.0.0/kafka/admin/ConfigCommand.html#parseConfigsToBeAdded(kafka.admin.ConfigCommand.ConfigCommandOptions)"/>
        /// </summary>
        /// <param name="opts"><see cref="Kafka.Admin.ConfigCommand.ConfigCommandOptions"/></param>
        /// <returns><see cref="Java.Util.Properties"/></returns>
        public static Java.Util.Properties ParseConfigsToBeAdded(Kafka.Admin.ConfigCommand.ConfigCommandOptions opts)
        {
            return SExecuteWithSignature<Java.Util.Properties>(LocalBridgeClazz, "parseConfigsToBeAdded", "(Lkafka/admin/ConfigCommand$ConfigCommandOptions;)Ljava/util/Properties;", opts);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka_2.13/4.0.0/kafka/admin/ConfigCommand.html#alterConfig(org.apache.kafka.clients.admin.Admin,kafka.admin.ConfigCommand.ConfigCommandOptions)"/>
        /// </summary>
        /// <param name="adminClient"><see cref="Org.Apache.Kafka.Clients.Admin.Admin"/></param>
        /// <param name="opts"><see cref="Kafka.Admin.ConfigCommand.ConfigCommandOptions"/></param>
        public static void AlterConfig(Org.Apache.Kafka.Clients.Admin.Admin adminClient, Kafka.Admin.ConfigCommand.ConfigCommandOptions opts)
        {
            SExecuteWithSignature(LocalBridgeClazz, "alterConfig", "(Lorg/apache/kafka/clients/admin/Admin;Lkafka/admin/ConfigCommand$ConfigCommandOptions;)V", adminClient, opts);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka_2.13/4.0.0/kafka/admin/ConfigCommand.html#describeConfig(org.apache.kafka.clients.admin.Admin,kafka.admin.ConfigCommand.ConfigCommandOptions)"/>
        /// </summary>
        /// <param name="adminClient"><see cref="Org.Apache.Kafka.Clients.Admin.Admin"/></param>
        /// <param name="opts"><see cref="Kafka.Admin.ConfigCommand.ConfigCommandOptions"/></param>
        public static void DescribeConfig(Org.Apache.Kafka.Clients.Admin.Admin adminClient, Kafka.Admin.ConfigCommand.ConfigCommandOptions opts)
        {
            SExecuteWithSignature(LocalBridgeClazz, "describeConfig", "(Lorg/apache/kafka/clients/admin/Admin;Lkafka/admin/ConfigCommand$ConfigCommandOptions;)V", adminClient, opts);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka_2.13/4.0.0/kafka/admin/ConfigCommand.html#main(java.lang.String[])"/>
        /// </summary>
        /// <param name="args"><see cref="Java.Lang.String"/></param>
        public static void Main(Java.Lang.String[] args)
        {
            SExecuteWithSignature(LocalBridgeClazz, "main", "([Ljava/lang/String;)V", new object[] { args });
        }

        #endregion

        #region Instance methods

        #endregion

        #region Nested classes
        #region ConfigCommandOptions implementation
        public partial class ConfigCommandOptions
        {
            #region Constructors
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka_2.13/4.0.0/kafka/admin/ConfigCommand.ConfigCommandOptions.html#%3Cinit%3E(java.lang.String[])"/>
            /// </summary>
            /// <param name="args"><see cref="Java.Lang.String"/></param>
            public ConfigCommandOptions(Java.Lang.String[] args)
                : base(args)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://www.javadoc.io/doc/org.apache.kafka/kafka_2.13/4.0.0/kafka/admin/ConfigCommand.ConfigCommandOptions.html#checkArgs()"/>
            /// </summary>
            public void CheckArgs()
            {
                IExecuteWithSignature("checkArgs", "()V");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}