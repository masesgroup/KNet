/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka_2.13-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Kafka.Coordinator.Transaction
{
    #region TransactionStateManager
    public partial class TransactionStateManager
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/transaction/TransactionStateManager.html#%3Cinit%3E(int,kafka.utils.Scheduler,kafka.server.ReplicaManager,kafka.coordinator.transaction.TransactionConfig,org.apache.kafka.common.utils.Time,org.apache.kafka.common.metrics.Metrics)"/>
        /// </summary>
        /// <param name="brokerId"><see cref="int"/></param>
        /// <param name="scheduler"><see cref="Kafka.Utils.Scheduler"/></param>
        /// <param name="replicaManager"><see cref="Kafka.Server.ReplicaManager"/></param>
        /// <param name="config"><see cref="Kafka.Coordinator.Transaction.TransactionConfig"/></param>
        /// <param name="time"><see cref="Org.Apache.Kafka.Common.Utils.Time"/></param>
        /// <param name="metrics"><see cref="Org.Apache.Kafka.Common.Metrics.Metrics"/></param>
        public TransactionStateManager(int brokerId, Kafka.Utils.Scheduler scheduler, Kafka.Server.ReplicaManager replicaManager, Kafka.Coordinator.Transaction.TransactionConfig config, Org.Apache.Kafka.Common.Utils.Time time, Org.Apache.Kafka.Common.Metrics.Metrics metrics)
            : base(brokerId, scheduler, replicaManager, config, time, metrics)
        {
        }

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Kafka.Coordinator.Transaction.TransactionStateManager"/> to <see cref="Kafka.Utils.Logging"/>
        /// </summary>
        public static implicit operator Kafka.Utils.Logging(Kafka.Coordinator.Transaction.TransactionStateManager t) => t.Cast<Kafka.Utils.Logging>();

        #endregion

        #region Fields

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/transaction/TransactionStateManager.html#DefaultAbortTimedOutTransactionsIntervalMs()"/> 
        /// </summary>
        public static int DefaultAbortTimedOutTransactionsIntervalMs
        {
            get { return SExecute<int>(LocalBridgeClazz, "DefaultAbortTimedOutTransactionsIntervalMs"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/transaction/TransactionStateManager.html#DefaultRemoveExpiredTransactionalIdsIntervalMs()"/> 
        /// </summary>
        public static int DefaultRemoveExpiredTransactionalIdsIntervalMs
        {
            get { return SExecute<int>(LocalBridgeClazz, "DefaultRemoveExpiredTransactionalIdsIntervalMs"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/transaction/TransactionStateManager.html#DefaultTransactionalIdExpirationMs()"/> 
        /// </summary>
        public static int DefaultTransactionalIdExpirationMs
        {
            get { return SExecute<int>(LocalBridgeClazz, "DefaultTransactionalIdExpirationMs"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/transaction/TransactionStateManager.html#DefaultTransactionsMaxTimeoutMs()"/> 
        /// </summary>
        public static int DefaultTransactionsMaxTimeoutMs
        {
            get { return SExecute<int>(LocalBridgeClazz, "DefaultTransactionsMaxTimeoutMs"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/transaction/TransactionStateManager.html#LoadTimeSensor()"/> 
        /// </summary>
        public static string LoadTimeSensor
        {
            get { return SExecute<string>(LocalBridgeClazz, "LoadTimeSensor"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/transaction/TransactionStateManager.html#MetricsGroup()"/> 
        /// </summary>
        public static string MetricsGroup
        {
            get { return SExecute<string>(LocalBridgeClazz, "MetricsGroup"); }
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/transaction/TransactionStateManager.html#isDebugEnabled()"/> 
        /// </summary>
        public bool IsDebugEnabled
        {
            get { return IExecute<bool>("isDebugEnabled"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/transaction/TransactionStateManager.html#isTraceEnabled()"/> 
        /// </summary>
        public bool IsTraceEnabled
        {
            get { return IExecute<bool>("isTraceEnabled"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/transaction/TransactionStateManager.html#logger()"/> 
        /// </summary>
        public Com.Typesafe.Scalalogging.Logger Logger
        {
            get { return IExecute<Com.Typesafe.Scalalogging.Logger>("logger"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/transaction/TransactionStateManager.html#loggerName()"/> 
        /// </summary>
        public string LoggerName
        {
            get { return IExecute<string>("loggerName"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/transaction/TransactionStateManager.html#logIdent()"/> 
        /// </summary>
        public string LogIdent
        {
            get { return IExecute<string>("logIdent"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/transaction/TransactionStateManager.html#transactionTopicConfigs()"/> 
        /// </summary>
        public Java.Util.Properties TransactionTopicConfigs
        {
            get { return IExecute<Java.Util.Properties>("transactionTopicConfigs"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/transaction/TransactionStateManager.html#validateTransactionTimeoutMs(int)"/>
        /// </summary>
        /// <param name="txnTimeoutMs"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool ValidateTransactionTimeoutMs(int txnTimeoutMs)
        {
            return IExecute<bool>("validateTransactionTimeoutMs", txnTimeoutMs);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/transaction/TransactionStateManager.html#partitionFor(java.lang.String)"/>
        /// </summary>
        /// <param name="transactionalId"><see cref="string"/></param>
        /// <returns><see cref="int"/></returns>
        public int PartitionFor(string transactionalId)
        {
            return IExecute<int>("partitionFor", transactionalId);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/transaction/TransactionStateManager.html#msgWithLogIdent(java.lang.String)"/>
        /// </summary>
        /// <param name="msg"><see cref="string"/></param>
        /// <returns><see cref="string"/></returns>
        public string MsgWithLogIdent(string msg)
        {
            return IExecute<string>("msgWithLogIdent", msg);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/transaction/TransactionStateManager.html#addLoadedTransactionsToCache(int,int,kafka.utils.Pool)"/>
        /// </summary>
        /// <param name="txnTopicPartition"><see cref="int"/></param>
        /// <param name="coordinatorEpoch"><see cref="int"/></param>
        /// <param name="loadedTransactions"><see cref="Kafka.Utils.Pool"/></param>
        public void AddLoadedTransactionsToCache(int txnTopicPartition, int coordinatorEpoch, Kafka.Utils.Pool<string, Kafka.Coordinator.Transaction.TransactionMetadata> loadedTransactions)
        {
            IExecute("addLoadedTransactionsToCache", txnTopicPartition, coordinatorEpoch, loadedTransactions);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/transaction/TransactionStateManager.html#addLoadingPartition(int,int)"/>
        /// </summary>
        /// <param name="partitionId"><see cref="int"/></param>
        /// <param name="coordinatorEpoch"><see cref="int"/></param>
        public void AddLoadingPartition(int partitionId, int coordinatorEpoch)
        {
            IExecute("addLoadingPartition", partitionId, coordinatorEpoch);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/transaction/TransactionStateManager.html#enableTransactionalIdExpiration()"/>
        /// </summary>
        public void EnableTransactionalIdExpiration()
        {
            IExecute("enableTransactionalIdExpiration");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/transaction/TransactionStateManager.html#removeExpiredTransactionalIds()"/>
        /// </summary>
        public void RemoveExpiredTransactionalIds()
        {
            IExecute("removeExpiredTransactionalIds");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/transaction/TransactionStateManager.html#removeTransactionsForTxnTopicPartition(int,int)"/>
        /// </summary>
        /// <param name="partitionId"><see cref="int"/></param>
        /// <param name="coordinatorEpoch"><see cref="int"/></param>
        public void RemoveTransactionsForTxnTopicPartition(int partitionId, int coordinatorEpoch)
        {
            IExecute("removeTransactionsForTxnTopicPartition", partitionId, coordinatorEpoch);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/transaction/TransactionStateManager.html#removeTransactionsForTxnTopicPartition(int)"/>
        /// </summary>
        /// <param name="partitionId"><see cref="int"/></param>
        public void RemoveTransactionsForTxnTopicPartition(int partitionId)
        {
            IExecute("removeTransactionsForTxnTopicPartition", partitionId);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/transaction/TransactionStateManager.html#shutdown()"/>
        /// </summary>
        public void Shutdown()
        {
            IExecute("shutdown");
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}