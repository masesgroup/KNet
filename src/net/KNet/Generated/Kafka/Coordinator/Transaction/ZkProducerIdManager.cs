/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka_2.13-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Kafka.Coordinator.Transaction
{
    #region ZkProducerIdManager
    public partial class ZkProducerIdManager
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/transaction/ZkProducerIdManager.html#%3Cinit%3E(int,kafka.zk.KafkaZkClient)"/>
        /// </summary>
        /// <param name="brokerId"><see cref="int"/></param>
        /// <param name="zkClient"><see cref="Kafka.Zk.KafkaZkClient"/></param>
        public ZkProducerIdManager(int brokerId, Kafka.Zk.KafkaZkClient zkClient)
            : base(brokerId, zkClient)
        {
        }

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Kafka.Coordinator.Transaction.ZkProducerIdManager"/> to <see cref="Kafka.Coordinator.Transaction.ProducerIdManager"/>
        /// </summary>
        public static implicit operator Kafka.Coordinator.Transaction.ProducerIdManager(Kafka.Coordinator.Transaction.ZkProducerIdManager t) => t.Cast<Kafka.Coordinator.Transaction.ProducerIdManager>();
        /// <summary>
        /// Converter from <see cref="Kafka.Coordinator.Transaction.ZkProducerIdManager"/> to <see cref="Kafka.Utils.Logging"/>
        /// </summary>
        public static implicit operator Kafka.Utils.Logging(Kafka.Coordinator.Transaction.ZkProducerIdManager t) => t.Cast<Kafka.Utils.Logging>();

        #endregion

        #region Fields

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/transaction/ZkProducerIdManager.html#getNewProducerIdBlock(int,kafka.zk.KafkaZkClient,kafka.utils.Logging)"/>
        /// </summary>
        /// <param name="brokerId"><see cref="int"/></param>
        /// <param name="zkClient"><see cref="Kafka.Zk.KafkaZkClient"/></param>
        /// <param name="logger"><see cref="Kafka.Utils.Logging"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Server.Common.ProducerIdsBlock"/></returns>
        public static Org.Apache.Kafka.Server.Common.ProducerIdsBlock GetNewProducerIdBlock(int brokerId, Kafka.Zk.KafkaZkClient zkClient, Kafka.Utils.Logging logger)
        {
            return SExecute<Org.Apache.Kafka.Server.Common.ProducerIdsBlock>(LocalBridgeClazz, "getNewProducerIdBlock", brokerId, zkClient, logger);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/transaction/ZkProducerIdManager.html#generateProducerId()"/> 
        /// </summary>
        public long GenerateProducerId
        {
            get { return IExecute<long>("generateProducerId"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/transaction/ZkProducerIdManager.html#isDebugEnabled()"/> 
        /// </summary>
        public bool IsDebugEnabled
        {
            get { return IExecute<bool>("isDebugEnabled"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/transaction/ZkProducerIdManager.html#isTraceEnabled()"/> 
        /// </summary>
        public bool IsTraceEnabled
        {
            get { return IExecute<bool>("isTraceEnabled"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/transaction/ZkProducerIdManager.html#logger()"/> 
        /// </summary>
        public Com.Typesafe.Scalalogging.Logger Logger
        {
            get { return IExecute<Com.Typesafe.Scalalogging.Logger>("logger"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/transaction/ZkProducerIdManager.html#loggerName()"/> 
        /// </summary>
        public string LoggerName
        {
            get { return IExecute<string>("loggerName"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/transaction/ZkProducerIdManager.html#logIdent()"/> 
        /// </summary>
        public string LogIdent
        {
            get { return IExecute<string>("logIdent"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/transaction/ZkProducerIdManager.html#msgWithLogIdent(java.lang.String)"/>
        /// </summary>
        /// <param name="msg"><see cref="string"/></param>
        /// <returns><see cref="string"/></returns>
        public string MsgWithLogIdent(string msg)
        {
            return IExecute<string>("msgWithLogIdent", msg);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/transaction/ZkProducerIdManager.html#shutdown()"/>
        /// </summary>
        public void Shutdown()
        {
            IExecute("shutdown");
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}