/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka_2.13-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Kafka.Coordinator.Transaction
{
    #region TransactionMarkerChannelManager
    public partial class TransactionMarkerChannelManager
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/transaction/TransactionMarkerChannelManager.html#%3Cinit%3E(kafka.server.KafkaConfig,kafka.server.MetadataCache,org.apache.kafka.clients.NetworkClient,kafka.coordinator.transaction.TransactionStateManager,org.apache.kafka.common.utils.Time)"/>
        /// </summary>
        /// <param name="config"><see cref="Kafka.Server.KafkaConfig"/></param>
        /// <param name="metadataCache"><see cref="Kafka.Server.MetadataCache"/></param>
        /// <param name="networkClient"><see cref="Org.Apache.Kafka.Clients.NetworkClient"/></param>
        /// <param name="txnStateManager"><see cref="Kafka.Coordinator.Transaction.TransactionStateManager"/></param>
        /// <param name="time"><see cref="Org.Apache.Kafka.Common.Utils.Time"/></param>
        public TransactionMarkerChannelManager(Kafka.Server.KafkaConfig config, Kafka.Server.MetadataCache metadataCache, Org.Apache.Kafka.Clients.NetworkClient networkClient, Kafka.Coordinator.Transaction.TransactionStateManager txnStateManager, Org.Apache.Kafka.Common.Utils.Time time)
            : base(config, metadataCache, networkClient, txnStateManager, time)
        {
        }

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Kafka.Coordinator.Transaction.TransactionMarkerChannelManager"/> to <see cref="Kafka.Metrics.KafkaMetricsGroup"/>
        /// </summary>
        public static implicit operator Kafka.Metrics.KafkaMetricsGroup(Kafka.Coordinator.Transaction.TransactionMarkerChannelManager t) => t.Cast<Kafka.Metrics.KafkaMetricsGroup>();

        #endregion

        #region Fields

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/transaction/TransactionMarkerChannelManager.html#apply(kafka.server.KafkaConfig,org.apache.kafka.common.metrics.Metrics,kafka.server.MetadataCache,kafka.coordinator.transaction.TransactionStateManager,org.apache.kafka.common.utils.Time,org.apache.kafka.common.utils.LogContext)"/>
        /// </summary>
        /// <param name="config"><see cref="Kafka.Server.KafkaConfig"/></param>
        /// <param name="metrics"><see cref="Org.Apache.Kafka.Common.Metrics.Metrics"/></param>
        /// <param name="metadataCache"><see cref="Kafka.Server.MetadataCache"/></param>
        /// <param name="txnStateManager"><see cref="Kafka.Coordinator.Transaction.TransactionStateManager"/></param>
        /// <param name="time"><see cref="Org.Apache.Kafka.Common.Utils.Time"/></param>
        /// <param name="logContext"><see cref="Org.Apache.Kafka.Common.Utils.LogContext"/></param>
        /// <returns><see cref="Kafka.Coordinator.Transaction.TransactionMarkerChannelManager"/></returns>
        public static Kafka.Coordinator.Transaction.TransactionMarkerChannelManager Apply(Kafka.Server.KafkaConfig config, Org.Apache.Kafka.Common.Metrics.Metrics metrics, Kafka.Server.MetadataCache metadataCache, Kafka.Coordinator.Transaction.TransactionStateManager txnStateManager, Org.Apache.Kafka.Common.Utils.Time time, Org.Apache.Kafka.Common.Utils.LogContext logContext)
        {
            return SExecute<Kafka.Coordinator.Transaction.TransactionMarkerChannelManager>(LocalBridgeClazz, "apply", config, metrics, metadataCache, txnStateManager, time, logContext);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/transaction/TransactionMarkerChannelManager.html#numTxnsWithPendingMarkers()"/> 
        /// </summary>
        public int NumTxnsWithPendingMarkers
        {
            get { return IExecute<int>("numTxnsWithPendingMarkers"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/transaction/TransactionMarkerChannelManager.html#queueForUnknownBroker()"/> 
        /// </summary>
        public Kafka.Coordinator.Transaction.TxnMarkerQueue QueueForUnknownBroker
        {
            get { return IExecute<Kafka.Coordinator.Transaction.TxnMarkerQueue>("queueForUnknownBroker"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/transaction/TransactionMarkerChannelManager.html#writeTxnMarkersRequestVersion()"/> 
        /// </summary>
        public short WriteTxnMarkersRequestVersion
        {
            get { return IExecute<short>("writeTxnMarkersRequestVersion"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/transaction/TransactionMarkerChannelManager.html#newMeter(com.yammer.metrics.core.MetricName,java.lang.String,java.util.concurrent.TimeUnit)"/>
        /// </summary>
        /// <param name="metricName"><see cref="Com.Yammer.Metrics.Core.MetricName"/></param>
        /// <param name="eventType"><see cref="string"/></param>
        /// <param name="timeUnit"><see cref="Java.Util.Concurrent.TimeUnit"/></param>
        /// <returns><see cref="Com.Yammer.Metrics.Core.Meter"/></returns>
        public Com.Yammer.Metrics.Core.Meter NewMeter(Com.Yammer.Metrics.Core.MetricName metricName, string eventType, Java.Util.Concurrent.TimeUnit timeUnit)
        {
            return IExecute<Com.Yammer.Metrics.Core.Meter>("newMeter", metricName, eventType, timeUnit);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/transaction/TransactionMarkerChannelManager.html#addMarkersForBroker(org.apache.kafka.common.Node,int,kafka.coordinator.transaction.TxnIdAndMarkerEntry)"/>
        /// </summary>
        /// <param name="broker"><see cref="Org.Apache.Kafka.Common.Node"/></param>
        /// <param name="txnTopicPartition"><see cref="int"/></param>
        /// <param name="txnIdAndMarker"><see cref="Kafka.Coordinator.Transaction.TxnIdAndMarkerEntry"/></param>
        public void AddMarkersForBroker(Org.Apache.Kafka.Common.Node broker, int txnTopicPartition, Kafka.Coordinator.Transaction.TxnIdAndMarkerEntry txnIdAndMarker)
        {
            IExecute("addMarkersForBroker", broker, txnTopicPartition, txnIdAndMarker);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/transaction/TransactionMarkerChannelManager.html#addTxnMarkersToSend(int,org.apache.kafka.common.requests.TransactionResult,kafka.coordinator.transaction.TransactionMetadata,kafka.coordinator.transaction.TxnTransitMetadata)"/>
        /// </summary>
        /// <param name="coordinatorEpoch"><see cref="int"/></param>
        /// <param name="txnResult"><see cref="Org.Apache.Kafka.Common.Requests.TransactionResult"/></param>
        /// <param name="txnMetadata"><see cref="Kafka.Coordinator.Transaction.TransactionMetadata"/></param>
        /// <param name="newMetadata"><see cref="Kafka.Coordinator.Transaction.TxnTransitMetadata"/></param>
        public void AddTxnMarkersToSend(int coordinatorEpoch, Org.Apache.Kafka.Common.Requests.TransactionResult txnResult, Kafka.Coordinator.Transaction.TransactionMetadata txnMetadata, Kafka.Coordinator.Transaction.TxnTransitMetadata newMetadata)
        {
            IExecute("addTxnMarkersToSend", coordinatorEpoch, txnResult, txnMetadata, newMetadata);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/transaction/TransactionMarkerChannelManager.html#maybeWriteTxnCompletion(java.lang.String)"/>
        /// </summary>
        /// <param name="transactionalId"><see cref="string"/></param>
        public void MaybeWriteTxnCompletion(string transactionalId)
        {
            IExecute("maybeWriteTxnCompletion", transactionalId);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/transaction/TransactionMarkerChannelManager.html#removeMarkersForTxnId(java.lang.String)"/>
        /// </summary>
        /// <param name="transactionalId"><see cref="string"/></param>
        public void RemoveMarkersForTxnId(string transactionalId)
        {
            IExecute("removeMarkersForTxnId", transactionalId);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/transaction/TransactionMarkerChannelManager.html#removeMarkersForTxnTopicPartition(int)"/>
        /// </summary>
        /// <param name="txnTopicPartitionId"><see cref="int"/></param>
        public void RemoveMarkersForTxnTopicPartition(int txnTopicPartitionId)
        {
            IExecute("removeMarkersForTxnTopicPartition", txnTopicPartitionId);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/transaction/TransactionMarkerChannelManager.html#retryLogAppends()"/>
        /// </summary>
        public void RetryLogAppends()
        {
            IExecute("retryLogAppends");
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}