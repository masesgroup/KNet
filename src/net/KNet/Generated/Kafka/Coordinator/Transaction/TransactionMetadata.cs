/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka_2.13-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Kafka.Coordinator.Transaction
{
    #region TransactionMetadata
    public partial class TransactionMetadata
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Kafka.Coordinator.Transaction.TransactionMetadata"/> to <see cref="Kafka.Utils.Logging"/>
        /// </summary>
        public static implicit operator Kafka.Utils.Logging(Kafka.Coordinator.Transaction.TransactionMetadata t) => t.Cast<Kafka.Utils.Logging>();

        #endregion

        #region Fields

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/transaction/TransactionMetadata.html#isEpochExhausted(short)"/>
        /// </summary>
        /// <param name="producerEpoch"><see cref="short"/></param>
        /// <returns><see cref="bool"/></returns>
        public static bool IsEpochExhausted(short producerEpoch)
        {
            return SExecute<bool>(LocalBridgeClazz, "isEpochExhausted", producerEpoch);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/transaction/TransactionMetadata.html#apply(java.lang.String,long,long,short,short,int,kafka.coordinator.transaction.TransactionState,long)"/>
        /// </summary>
        /// <param name="transactionalId"><see cref="string"/></param>
        /// <param name="producerId"><see cref="long"/></param>
        /// <param name="lastProducerId"><see cref="long"/></param>
        /// <param name="producerEpoch"><see cref="short"/></param>
        /// <param name="lastProducerEpoch"><see cref="short"/></param>
        /// <param name="txnTimeoutMs"><see cref="int"/></param>
        /// <param name="state"><see cref="Kafka.Coordinator.Transaction.TransactionState"/></param>
        /// <param name="timestamp"><see cref="long"/></param>
        /// <returns><see cref="Kafka.Coordinator.Transaction.TransactionMetadata"/></returns>
        public static Kafka.Coordinator.Transaction.TransactionMetadata Apply(string transactionalId, long producerId, long lastProducerId, short producerEpoch, short lastProducerEpoch, int txnTimeoutMs, Kafka.Coordinator.Transaction.TransactionState state, long timestamp)
        {
            return SExecute<Kafka.Coordinator.Transaction.TransactionMetadata>(LocalBridgeClazz, "apply", transactionalId, producerId, lastProducerId, producerEpoch, lastProducerEpoch, txnTimeoutMs, state, timestamp);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/transaction/TransactionMetadata.html#apply(java.lang.String,long,short,int,kafka.coordinator.transaction.TransactionState,long)"/>
        /// </summary>
        /// <param name="transactionalId"><see cref="string"/></param>
        /// <param name="producerId"><see cref="long"/></param>
        /// <param name="producerEpoch"><see cref="short"/></param>
        /// <param name="txnTimeoutMs"><see cref="int"/></param>
        /// <param name="state"><see cref="Kafka.Coordinator.Transaction.TransactionState"/></param>
        /// <param name="timestamp"><see cref="long"/></param>
        /// <returns><see cref="Kafka.Coordinator.Transaction.TransactionMetadata"/></returns>
        public static Kafka.Coordinator.Transaction.TransactionMetadata Apply(string transactionalId, long producerId, short producerEpoch, int txnTimeoutMs, Kafka.Coordinator.Transaction.TransactionState state, long timestamp)
        {
            return SExecute<Kafka.Coordinator.Transaction.TransactionMetadata>(LocalBridgeClazz, "apply", transactionalId, producerId, producerEpoch, txnTimeoutMs, state, timestamp);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/transaction/TransactionMetadata.html#apply(java.lang.String,long,short,int,long)"/>
        /// </summary>
        /// <param name="transactionalId"><see cref="string"/></param>
        /// <param name="producerId"><see cref="long"/></param>
        /// <param name="producerEpoch"><see cref="short"/></param>
        /// <param name="txnTimeoutMs"><see cref="int"/></param>
        /// <param name="timestamp"><see cref="long"/></param>
        /// <returns><see cref="Kafka.Coordinator.Transaction.TransactionMetadata"/></returns>
        public static Kafka.Coordinator.Transaction.TransactionMetadata Apply(string transactionalId, long producerId, short producerEpoch, int txnTimeoutMs, long timestamp)
        {
            return SExecute<Kafka.Coordinator.Transaction.TransactionMetadata>(LocalBridgeClazz, "apply", transactionalId, producerId, producerEpoch, txnTimeoutMs, timestamp);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/transaction/TransactionMetadata.html#hasFailedEpochFence()"/> 
        /// </summary>
        public bool HasFailedEpochFence
        {
            get { return IExecute<bool>("hasFailedEpochFence"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/transaction/TransactionMetadata.html#isDebugEnabled()"/> 
        /// </summary>
        public bool IsDebugEnabled
        {
            get { return IExecute<bool>("isDebugEnabled"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/transaction/TransactionMetadata.html#isProducerEpochExhausted()"/> 
        /// </summary>
        public bool IsProducerEpochExhausted
        {
            get { return IExecute<bool>("isProducerEpochExhausted"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/transaction/TransactionMetadata.html#isTraceEnabled()"/> 
        /// </summary>
        public bool IsTraceEnabled
        {
            get { return IExecute<bool>("isTraceEnabled"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/transaction/TransactionMetadata.html#lastProducerEpoch()"/> 
        /// </summary>
        public short LastProducerEpoch
        {
            get { return IExecute<short>("lastProducerEpoch"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/transaction/TransactionMetadata.html#lastProducerId()"/> 
        /// </summary>
        public long LastProducerId
        {
            get { return IExecute<long>("lastProducerId"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/transaction/TransactionMetadata.html#lock()"/> 
        /// </summary>
        public Java.Util.Concurrent.Locks.ReentrantLock Lock
        {
            get { return IExecute<Java.Util.Concurrent.Locks.ReentrantLock>("lock"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/transaction/TransactionMetadata.html#logger()"/> 
        /// </summary>
        public Com.Typesafe.Scalalogging.Logger Logger
        {
            get { return IExecute<Com.Typesafe.Scalalogging.Logger>("logger"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/transaction/TransactionMetadata.html#loggerName()"/> 
        /// </summary>
        public string LoggerName
        {
            get { return IExecute<string>("loggerName"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/transaction/TransactionMetadata.html#logIdent()"/> 
        /// </summary>
        public string LogIdent
        {
            get { return IExecute<string>("logIdent"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/transaction/TransactionMetadata.html#pendingTransitionInProgress()"/> 
        /// </summary>
        public bool PendingTransitionInProgress
        {
            get { return IExecute<bool>("pendingTransitionInProgress"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/transaction/TransactionMetadata.html#prepareDead()"/> 
        /// </summary>
        public Kafka.Coordinator.Transaction.TxnTransitMetadata PrepareDead
        {
            get { return IExecute<Kafka.Coordinator.Transaction.TxnTransitMetadata>("prepareDead"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/transaction/TransactionMetadata.html#prepareFenceProducerEpoch()"/> 
        /// </summary>
        public Kafka.Coordinator.Transaction.TxnTransitMetadata PrepareFenceProducerEpoch
        {
            get { return IExecute<Kafka.Coordinator.Transaction.TxnTransitMetadata>("prepareFenceProducerEpoch"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/transaction/TransactionMetadata.html#prepareNoTransit()"/> 
        /// </summary>
        public Kafka.Coordinator.Transaction.TxnTransitMetadata PrepareNoTransit
        {
            get { return IExecute<Kafka.Coordinator.Transaction.TxnTransitMetadata>("prepareNoTransit"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/transaction/TransactionMetadata.html#producerEpoch()"/> 
        /// </summary>
        public short ProducerEpoch
        {
            get { return IExecute<short>("producerEpoch"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/transaction/TransactionMetadata.html#producerId()"/> 
        /// </summary>
        public long ProducerId
        {
            get { return IExecute<long>("producerId"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/transaction/TransactionMetadata.html#state()"/> 
        /// </summary>
        public Kafka.Coordinator.Transaction.TransactionState State
        {
            get { return IExecute<Kafka.Coordinator.Transaction.TransactionState>("state"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/transaction/TransactionMetadata.html#transactionalId()"/> 
        /// </summary>
        public string TransactionalId
        {
            get { return IExecute<string>("transactionalId"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/transaction/TransactionMetadata.html#txnLastUpdateTimestamp()"/> 
        /// </summary>
        public long TxnLastUpdateTimestamp
        {
            get { return IExecute<long>("txnLastUpdateTimestamp"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/transaction/TransactionMetadata.html#txnStartTimestamp()"/> 
        /// </summary>
        public long TxnStartTimestamp
        {
            get { return IExecute<long>("txnStartTimestamp"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/transaction/TransactionMetadata.html#txnTimeoutMs()"/> 
        /// </summary>
        public int TxnTimeoutMs
        {
            get { return IExecute<int>("txnTimeoutMs"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/transaction/TransactionMetadata.html#msgWithLogIdent(java.lang.String)"/>
        /// </summary>
        /// <param name="msg"><see cref="string"/></param>
        /// <returns><see cref="string"/></returns>
        public string MsgWithLogIdent(string msg)
        {
            return IExecute<string>("msgWithLogIdent", msg);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/transaction/TransactionMetadata.html#prepareAbortOrCommit(kafka.coordinator.transaction.TransactionState,long)"/>
        /// </summary>
        /// <param name="newState"><see cref="Kafka.Coordinator.Transaction.TransactionState"/></param>
        /// <param name="updateTimestamp"><see cref="long"/></param>
        /// <returns><see cref="Kafka.Coordinator.Transaction.TxnTransitMetadata"/></returns>
        public Kafka.Coordinator.Transaction.TxnTransitMetadata PrepareAbortOrCommit(Kafka.Coordinator.Transaction.TransactionState newState, long updateTimestamp)
        {
            return IExecute<Kafka.Coordinator.Transaction.TxnTransitMetadata>("prepareAbortOrCommit", newState, updateTimestamp);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/transaction/TransactionMetadata.html#prepareComplete(long)"/>
        /// </summary>
        /// <param name="updateTimestamp"><see cref="long"/></param>
        /// <returns><see cref="Kafka.Coordinator.Transaction.TxnTransitMetadata"/></returns>
        public Kafka.Coordinator.Transaction.TxnTransitMetadata PrepareComplete(long updateTimestamp)
        {
            return IExecute<Kafka.Coordinator.Transaction.TxnTransitMetadata>("prepareComplete", updateTimestamp);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/transaction/TransactionMetadata.html#prepareProducerIdRotation(long,int,long,boolean)"/>
        /// </summary>
        /// <param name="newProducerId"><see cref="long"/></param>
        /// <param name="newTxnTimeoutMs"><see cref="int"/></param>
        /// <param name="updateTimestamp"><see cref="long"/></param>
        /// <param name="recordLastEpoch"><see cref="bool"/></param>
        /// <returns><see cref="Kafka.Coordinator.Transaction.TxnTransitMetadata"/></returns>
        public Kafka.Coordinator.Transaction.TxnTransitMetadata PrepareProducerIdRotation(long newProducerId, int newTxnTimeoutMs, long updateTimestamp, bool recordLastEpoch)
        {
            return IExecute<Kafka.Coordinator.Transaction.TxnTransitMetadata>("prepareProducerIdRotation", newProducerId, newTxnTimeoutMs, updateTimestamp, recordLastEpoch);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/transaction/TransactionMetadata.html#completeTransitionTo(kafka.coordinator.transaction.TxnTransitMetadata)"/>
        /// </summary>
        /// <param name="transitMetadata"><see cref="Kafka.Coordinator.Transaction.TxnTransitMetadata"/></param>
        public void CompleteTransitionTo(Kafka.Coordinator.Transaction.TxnTransitMetadata transitMetadata)
        {
            IExecute("completeTransitionTo", transitMetadata);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/transaction/TransactionMetadata.html#removePartition(org.apache.kafka.common.TopicPartition)"/>
        /// </summary>
        /// <param name="topicPartition"><see cref="Org.Apache.Kafka.Common.TopicPartition"/></param>
        public void RemovePartition(Org.Apache.Kafka.Common.TopicPartition topicPartition)
        {
            IExecute("removePartition", topicPartition);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}