/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka_2.13-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Kafka.Coordinator.Transaction
{
    #region TransactionLog
    public partial class TransactionLog
    {
        #region Constructors

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/transaction/TransactionLog.html#DefaultLoadBufferSize()"/> 
        /// </summary>
        public static int DefaultLoadBufferSize
        {
            get { return SExecute<int>(LocalBridgeClazz, "DefaultLoadBufferSize"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/transaction/TransactionLog.html#DefaultMinInSyncReplicas()"/> 
        /// </summary>
        public static int DefaultMinInSyncReplicas
        {
            get { return SExecute<int>(LocalBridgeClazz, "DefaultMinInSyncReplicas"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/transaction/TransactionLog.html#DefaultNumPartitions()"/> 
        /// </summary>
        public static int DefaultNumPartitions
        {
            get { return SExecute<int>(LocalBridgeClazz, "DefaultNumPartitions"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/transaction/TransactionLog.html#DefaultReplicationFactor()"/> 
        /// </summary>
        public static short DefaultReplicationFactor
        {
            get { return SExecute<short>(LocalBridgeClazz, "DefaultReplicationFactor"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/transaction/TransactionLog.html#DefaultSegmentBytes()"/> 
        /// </summary>
        public static int DefaultSegmentBytes
        {
            get { return SExecute<int>(LocalBridgeClazz, "DefaultSegmentBytes"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/transaction/TransactionLog.html#EnforcedCompressionType()"/> 
        /// </summary>
        public static Org.Apache.Kafka.Common.Record.CompressionType EnforcedCompressionType
        {
            get { return SExecute<Org.Apache.Kafka.Common.Record.CompressionType>(LocalBridgeClazz, "EnforcedCompressionType"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/transaction/TransactionLog.html#EnforcedRequiredAcks()"/> 
        /// </summary>
        public static short EnforcedRequiredAcks
        {
            get { return SExecute<short>(LocalBridgeClazz, "EnforcedRequiredAcks"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/transaction/TransactionLog.html#readTxnRecordKey(java.nio.ByteBuffer)"/>
        /// </summary>
        /// <param name="buffer"><see cref="Java.Nio.ByteBuffer"/></param>
        /// <returns><see cref="Kafka.Coordinator.Transaction.TxnKey"/></returns>
        public static Kafka.Coordinator.Transaction.TxnKey ReadTxnRecordKey(Java.Nio.ByteBuffer buffer)
        {
            return SExecute<Kafka.Coordinator.Transaction.TxnKey>(LocalBridgeClazz, "readTxnRecordKey", buffer);
        }

        #endregion

        #region Instance methods

        #endregion

        #region Nested classes
        #region TransactionLogMessageFormatter
        public partial class TransactionLogMessageFormatter
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators
            /// <summary>
            /// Converter from <see cref="Kafka.Coordinator.Transaction.TransactionLog.TransactionLogMessageFormatter"/> to <see cref="Org.Apache.Kafka.Common.MessageFormatter"/>
            /// </summary>
            public static implicit operator Org.Apache.Kafka.Common.MessageFormatter(Kafka.Coordinator.Transaction.TransactionLog.TransactionLogMessageFormatter t) => t.Cast<Org.Apache.Kafka.Common.MessageFormatter>();

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/transaction/TransactionLog.TransactionLogMessageFormatter.html#close()"/>
            /// </summary>
            public void Close()
            {
                IExecute("close");
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/transaction/TransactionLog.TransactionLogMessageFormatter.html#configure(java.util.Map)"/>
            /// </summary>
            /// <param name="x$1"><see cref="Java.Util.Map"/></param>
            /// <typeparam name="X_1Extendsobject"></typeparam>
            public void Configure<X_1Extendsobject>(Java.Util.Map<string, X_1Extendsobject> x_1)
            {
                IExecute("configure", x_1);
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/transaction/TransactionLog.TransactionLogMessageFormatter.html#writeTo(org.apache.kafka.clients.consumer.ConsumerRecord,java.io.PrintStream)"/>
            /// </summary>
            /// <param name="consumerRecord"><see cref="Org.Apache.Kafka.Clients.Consumer.ConsumerRecord"/></param>
            /// <param name="output"><see cref="Java.Io.PrintStream"/></param>
            public void WriteTo(Org.Apache.Kafka.Clients.Consumer.ConsumerRecord<byte[], byte[]> consumerRecord, Java.Io.PrintStream output)
            {
                IExecute("writeTo", consumerRecord, output);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}