/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka_2.13-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Kafka.Coordinator.Group
{
    #region InitialDelayedJoin
    public partial class InitialDelayedJoin
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/InitialDelayedJoin.html#%3Cinit%3E(kafka.coordinator.group.GroupCoordinator,kafka.server.DelayedOperationPurgatory,kafka.coordinator.group.GroupMetadata,int,int,int)"/>
        /// </summary>
        /// <param name="coordinator"><see cref="Kafka.Coordinator.Group.GroupCoordinator"/></param>
        /// <param name="purgatory"><see cref="Kafka.Server.DelayedOperationPurgatory"/></param>
        /// <param name="group"><see cref="Kafka.Coordinator.Group.GroupMetadata"/></param>
        /// <param name="configuredRebalanceDelay"><see cref="int"/></param>
        /// <param name="delayMs"><see cref="int"/></param>
        /// <param name="remainingMs"><see cref="int"/></param>
        public InitialDelayedJoin(Kafka.Coordinator.Group.GroupCoordinator coordinator, Kafka.Server.DelayedOperationPurgatory purgatory, Kafka.Coordinator.Group.GroupMetadata group, int configuredRebalanceDelay, int delayMs, int remainingMs)
            : base(coordinator, purgatory, group, configuredRebalanceDelay, delayMs, remainingMs)
        {
        }

        #endregion

        #region Class/Interface conversion operators

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}