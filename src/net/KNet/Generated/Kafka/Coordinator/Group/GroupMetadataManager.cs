/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka_2.13-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Kafka.Coordinator.Group
{
    #region GroupMetadataManager
    public partial class GroupMetadataManager
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupMetadataManager.html#%3Cinit%3E(int,org.apache.kafka.server.common.MetadataVersion,kafka.coordinator.group.OffsetConfig,kafka.server.ReplicaManager,org.apache.kafka.common.utils.Time,org.apache.kafka.common.metrics.Metrics)"/>
        /// </summary>
        /// <param name="brokerId"><see cref="int"/></param>
        /// <param name="interBrokerProtocolVersion"><see cref="Org.Apache.Kafka.Server.Common.MetadataVersion"/></param>
        /// <param name="config"><see cref="Kafka.Coordinator.Group.OffsetConfig"/></param>
        /// <param name="replicaManager"><see cref="Kafka.Server.ReplicaManager"/></param>
        /// <param name="time"><see cref="Org.Apache.Kafka.Common.Utils.Time"/></param>
        /// <param name="metrics"><see cref="Org.Apache.Kafka.Common.Metrics.Metrics"/></param>
        public GroupMetadataManager(int brokerId, Org.Apache.Kafka.Server.Common.MetadataVersion interBrokerProtocolVersion, Kafka.Coordinator.Group.OffsetConfig config, Kafka.Server.ReplicaManager replicaManager, Org.Apache.Kafka.Common.Utils.Time time, Org.Apache.Kafka.Common.Metrics.Metrics metrics)
            : base(brokerId, interBrokerProtocolVersion, config, replicaManager, time, metrics)
        {
        }

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Kafka.Coordinator.Group.GroupMetadataManager"/> to <see cref="Kafka.Metrics.KafkaMetricsGroup"/>
        /// </summary>
        public static implicit operator Kafka.Metrics.KafkaMetricsGroup(Kafka.Coordinator.Group.GroupMetadataManager t) => t.Cast<Kafka.Metrics.KafkaMetricsGroup>();

        #endregion

        #region Fields

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupMetadataManager.html#LoadTimeSensor()"/> 
        /// </summary>
        public static string LoadTimeSensor
        {
            get { return SExecute<string>(LocalBridgeClazz, "LoadTimeSensor"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupMetadataManager.html#MetricsGroup()"/> 
        /// </summary>
        public static string MetricsGroup
        {
            get { return SExecute<string>(LocalBridgeClazz, "MetricsGroup"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupMetadataManager.html#groupMetadataKey(java.lang.String)"/>
        /// </summary>
        /// <param name="groupId"><see cref="string"/></param>
        /// <returns><see cref="byte"/></returns>
        public static byte[] GroupMetadataKey(string groupId)
        {
            return SExecuteArray<byte>(LocalBridgeClazz, "groupMetadataKey", groupId);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupMetadataManager.html#offsetCommitKey(java.lang.String,org.apache.kafka.common.TopicPartition)"/>
        /// </summary>
        /// <param name="groupId"><see cref="string"/></param>
        /// <param name="topicPartition"><see cref="Org.Apache.Kafka.Common.TopicPartition"/></param>
        /// <returns><see cref="byte"/></returns>
        public static byte[] OffsetCommitKey(string groupId, Org.Apache.Kafka.Common.TopicPartition topicPartition)
        {
            return SExecuteArray<byte>(LocalBridgeClazz, "offsetCommitKey", groupId, topicPartition);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupMetadataManager.html#offsetCommitValue(kafka.common.OffsetAndMetadata,org.apache.kafka.server.common.MetadataVersion)"/>
        /// </summary>
        /// <param name="offsetAndMetadata"><see cref="Kafka.Common.OffsetAndMetadata"/></param>
        /// <param name="metadataVersion"><see cref="Org.Apache.Kafka.Server.Common.MetadataVersion"/></param>
        /// <returns><see cref="byte"/></returns>
        public static byte[] OffsetCommitValue(Kafka.Common.OffsetAndMetadata offsetAndMetadata, Org.Apache.Kafka.Server.Common.MetadataVersion metadataVersion)
        {
            return SExecuteArray<byte>(LocalBridgeClazz, "offsetCommitValue", offsetAndMetadata, metadataVersion);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupMetadataManager.html#OffsetCommitsSensor()"/>
        /// </summary>

        /// <returns><see cref="string"/></returns>
        public static string OffsetCommitsSensor()
        {
            return SExecute<string>(LocalBridgeClazz, "OffsetCommitsSensor");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupMetadataManager.html#OffsetExpiredSensor()"/>
        /// </summary>

        /// <returns><see cref="string"/></returns>
        public static string OffsetExpiredSensor()
        {
            return SExecute<string>(LocalBridgeClazz, "OffsetExpiredSensor");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupMetadataManager.html#readOffsetMessageValue(java.nio.ByteBuffer)"/>
        /// </summary>
        /// <param name="buffer"><see cref="Java.Nio.ByteBuffer"/></param>
        /// <returns><see cref="Kafka.Common.OffsetAndMetadata"/></returns>
        public static Kafka.Common.OffsetAndMetadata ReadOffsetMessageValue(Java.Nio.ByteBuffer buffer)
        {
            return SExecute<Kafka.Common.OffsetAndMetadata>(LocalBridgeClazz, "readOffsetMessageValue", buffer);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupMetadataManager.html#readMessageKey(java.nio.ByteBuffer)"/>
        /// </summary>
        /// <param name="buffer"><see cref="Java.Nio.ByteBuffer"/></param>
        /// <returns><see cref="Kafka.Coordinator.Group.BaseKey"/></returns>
        public static Kafka.Coordinator.Group.BaseKey ReadMessageKey(Java.Nio.ByteBuffer buffer)
        {
            return SExecute<Kafka.Coordinator.Group.BaseKey>(LocalBridgeClazz, "readMessageKey", buffer);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupMetadataManager.html#readGroupMessageValue(java.lang.String,java.nio.ByteBuffer,org.apache.kafka.common.utils.Time)"/>
        /// </summary>
        /// <param name="groupId"><see cref="string"/></param>
        /// <param name="buffer"><see cref="Java.Nio.ByteBuffer"/></param>
        /// <param name="time"><see cref="Org.Apache.Kafka.Common.Utils.Time"/></param>
        /// <returns><see cref="Kafka.Coordinator.Group.GroupMetadata"/></returns>
        public static Kafka.Coordinator.Group.GroupMetadata ReadGroupMessageValue(string groupId, Java.Nio.ByteBuffer buffer, Org.Apache.Kafka.Common.Utils.Time time)
        {
            return SExecute<Kafka.Coordinator.Group.GroupMetadata>(LocalBridgeClazz, "readGroupMessageValue", groupId, buffer, time);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupMetadataManager.html#epochForPartitionId()"/> 
        /// </summary>
        public Java.Util.Concurrent.ConcurrentHashMap<object, int?> EpochForPartitionId
        {
            get { return IExecute<Java.Util.Concurrent.ConcurrentHashMap<object, int?>>("epochForPartitionId"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupMetadataManager.html#isDebugEnabled()"/> 
        /// </summary>
        public bool IsDebugEnabled
        {
            get { return IExecute<bool>("isDebugEnabled"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupMetadataManager.html#isLoading()"/> 
        /// </summary>
        public bool IsLoading
        {
            get { return IExecute<bool>("isLoading"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupMetadataManager.html#isTraceEnabled()"/> 
        /// </summary>
        public bool IsTraceEnabled
        {
            get { return IExecute<bool>("isTraceEnabled"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupMetadataManager.html#logger()"/> 
        /// </summary>
        public Com.Typesafe.Scalalogging.Logger Logger
        {
            get { return IExecute<Com.Typesafe.Scalalogging.Logger>("logger"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupMetadataManager.html#loggerName()"/> 
        /// </summary>
        public string LoggerName
        {
            get { return IExecute<string>("loggerName"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupMetadataManager.html#logIdent()"/> 
        /// </summary>
        public string LogIdent
        {
            get { return IExecute<string>("logIdent"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupMetadataManager.html#replicaManager()"/> 
        /// </summary>
        public Kafka.Server.ReplicaManager ReplicaManager
        {
            get { return IExecute<Kafka.Server.ReplicaManager>("replicaManager"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupMetadataManager.html#addLoadingPartition(int)"/>
        /// </summary>
        /// <param name="partition"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool AddLoadingPartition(int partition)
        {
            return IExecute<bool>("addLoadingPartition", partition);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupMetadataManager.html#groupNotExists(java.lang.String)"/>
        /// </summary>
        /// <param name="groupId"><see cref="string"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool GroupNotExists(string groupId)
        {
            return IExecute<bool>("groupNotExists", groupId);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupMetadataManager.html#isGroupLoading(java.lang.String)"/>
        /// </summary>
        /// <param name="groupId"><see cref="string"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsGroupLoading(string groupId)
        {
            return IExecute<bool>("isGroupLoading", groupId);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupMetadataManager.html#isGroupLocal(java.lang.String)"/>
        /// </summary>
        /// <param name="groupId"><see cref="string"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsGroupLocal(string groupId)
        {
            return IExecute<bool>("isGroupLocal", groupId);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupMetadataManager.html#isGroupOpenForProducer(long,java.lang.String)"/>
        /// </summary>
        /// <param name="producerId"><see cref="long"/></param>
        /// <param name="groupId"><see cref="string"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsGroupOpenForProducer(long producerId, string groupId)
        {
            return IExecute<bool>("isGroupOpenForProducer", producerId, groupId);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupMetadataManager.html#isPartitionLoading(int)"/>
        /// </summary>
        /// <param name="partition"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsPartitionLoading(int partition)
        {
            return IExecute<bool>("isPartitionLoading", partition);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupMetadataManager.html#isPartitionOwned(int)"/>
        /// </summary>
        /// <param name="partition"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsPartitionOwned(int partition)
        {
            return IExecute<bool>("isPartitionOwned", partition);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupMetadataManager.html#newMeter(com.yammer.metrics.core.MetricName,java.lang.String,java.util.concurrent.TimeUnit)"/>
        /// </summary>
        /// <param name="metricName"><see cref="Com.Yammer.Metrics.Core.MetricName"/></param>
        /// <param name="eventType"><see cref="string"/></param>
        /// <param name="timeUnit"><see cref="Java.Util.Concurrent.TimeUnit"/></param>
        /// <returns><see cref="Com.Yammer.Metrics.Core.Meter"/></returns>
        public Com.Yammer.Metrics.Core.Meter NewMeter(Com.Yammer.Metrics.Core.MetricName metricName, string eventType, Java.Util.Concurrent.TimeUnit timeUnit)
        {
            return IExecute<Com.Yammer.Metrics.Core.Meter>("newMeter", metricName, eventType, timeUnit);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupMetadataManager.html#partitionFor(java.lang.String)"/>
        /// </summary>
        /// <param name="groupId"><see cref="string"/></param>
        /// <returns><see cref="int"/></returns>
        public int PartitionFor(string groupId)
        {
            return IExecute<int>("partitionFor", groupId);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupMetadataManager.html#msgWithLogIdent(java.lang.String)"/>
        /// </summary>
        /// <param name="msg"><see cref="string"/></param>
        /// <returns><see cref="string"/></returns>
        public string MsgWithLogIdent(string msg)
        {
            return IExecute<string>("msgWithLogIdent", msg);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupMetadataManager.html#addGroup(kafka.coordinator.group.GroupMetadata)"/>
        /// </summary>
        /// <param name="group"><see cref="Kafka.Coordinator.Group.GroupMetadata"/></param>
        /// <returns><see cref="Kafka.Coordinator.Group.GroupMetadata"/></returns>
        public Kafka.Coordinator.Group.GroupMetadata AddGroup(Kafka.Coordinator.Group.GroupMetadata group)
        {
            return IExecute<Kafka.Coordinator.Group.GroupMetadata>("addGroup", group);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupMetadataManager.html#offsetCommitsSensor()"/>
        /// </summary>

        /// <returns><see cref="Org.Apache.Kafka.Common.Metrics.Sensor"/></returns>
        public Org.Apache.Kafka.Common.Metrics.Sensor OffsetCommitsSensor()
        {
            return IExecute<Org.Apache.Kafka.Common.Metrics.Sensor>("offsetCommitsSensor");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupMetadataManager.html#offsetExpiredSensor()"/>
        /// </summary>

        /// <returns><see cref="Org.Apache.Kafka.Common.Metrics.Sensor"/></returns>
        public Org.Apache.Kafka.Common.Metrics.Sensor OffsetExpiredSensor()
        {
            return IExecute<Org.Apache.Kafka.Common.Metrics.Sensor>("offsetExpiredSensor");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupMetadataManager.html#addOwnedPartition(int)"/>
        /// </summary>
        /// <param name="partition"><see cref="int"/></param>
        public void AddOwnedPartition(int partition)
        {
            IExecute("addOwnedPartition", partition);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupMetadataManager.html#cleanupGroupMetadata()"/>
        /// </summary>
        public void CleanupGroupMetadata()
        {
            IExecute("cleanupGroupMetadata");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupMetadataManager.html#shutdown()"/>
        /// </summary>
        public void Shutdown()
        {
            IExecute("shutdown");
        }

        #endregion

        #region Nested classes
        #region GroupMetadataMessageFormatter
        public partial class GroupMetadataMessageFormatter
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators
            /// <summary>
            /// Converter from <see cref="Kafka.Coordinator.Group.GroupMetadataManager.GroupMetadataMessageFormatter"/> to <see cref="Org.Apache.Kafka.Common.MessageFormatter"/>
            /// </summary>
            public static implicit operator Org.Apache.Kafka.Common.MessageFormatter(Kafka.Coordinator.Group.GroupMetadataManager.GroupMetadataMessageFormatter t) => t.Cast<Org.Apache.Kafka.Common.MessageFormatter>();

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupMetadataManager.GroupMetadataMessageFormatter.html#close()"/>
            /// </summary>
            public void Close()
            {
                IExecute("close");
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupMetadataManager.GroupMetadataMessageFormatter.html#configure(java.util.Map)"/>
            /// </summary>
            /// <param name="x$1"><see cref="Java.Util.Map"/></param>
            /// <typeparam name="X_1Extendsobject"></typeparam>
            public void Configure<X_1Extendsobject>(Java.Util.Map<string, X_1Extendsobject> x_1)
            {
                IExecute("configure", x_1);
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupMetadataManager.GroupMetadataMessageFormatter.html#writeTo(org.apache.kafka.clients.consumer.ConsumerRecord,java.io.PrintStream)"/>
            /// </summary>
            /// <param name="consumerRecord"><see cref="Org.Apache.Kafka.Clients.Consumer.ConsumerRecord"/></param>
            /// <param name="output"><see cref="Java.Io.PrintStream"/></param>
            public void WriteTo(Org.Apache.Kafka.Clients.Consumer.ConsumerRecord<byte[], byte[]> consumerRecord, Java.Io.PrintStream output)
            {
                IExecute("writeTo", consumerRecord, output);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region OffsetsMessageFormatter
        public partial class OffsetsMessageFormatter
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators
            /// <summary>
            /// Converter from <see cref="Kafka.Coordinator.Group.GroupMetadataManager.OffsetsMessageFormatter"/> to <see cref="Org.Apache.Kafka.Common.MessageFormatter"/>
            /// </summary>
            public static implicit operator Org.Apache.Kafka.Common.MessageFormatter(Kafka.Coordinator.Group.GroupMetadataManager.OffsetsMessageFormatter t) => t.Cast<Org.Apache.Kafka.Common.MessageFormatter>();

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupMetadataManager.OffsetsMessageFormatter.html#close()"/>
            /// </summary>
            public void Close()
            {
                IExecute("close");
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupMetadataManager.OffsetsMessageFormatter.html#configure(java.util.Map)"/>
            /// </summary>
            /// <param name="x$1"><see cref="Java.Util.Map"/></param>
            /// <typeparam name="X_1Extendsobject"></typeparam>
            public void Configure<X_1Extendsobject>(Java.Util.Map<string, X_1Extendsobject> x_1)
            {
                IExecute("configure", x_1);
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupMetadataManager.OffsetsMessageFormatter.html#writeTo(org.apache.kafka.clients.consumer.ConsumerRecord,java.io.PrintStream)"/>
            /// </summary>
            /// <param name="consumerRecord"><see cref="Org.Apache.Kafka.Clients.Consumer.ConsumerRecord"/></param>
            /// <param name="output"><see cref="Java.Io.PrintStream"/></param>
            public void WriteTo(Org.Apache.Kafka.Clients.Consumer.ConsumerRecord<byte[], byte[]> consumerRecord, Java.Io.PrintStream output)
            {
                IExecute("writeTo", consumerRecord, output);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}