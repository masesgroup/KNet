/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka_2.13-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Kafka.Coordinator.Group
{
    #region GroupCoordinator
    public partial class GroupCoordinator
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupCoordinator.html#%3Cinit%3E(int,kafka.coordinator.group.GroupConfig,kafka.coordinator.group.OffsetConfig,kafka.coordinator.group.GroupMetadataManager,kafka.server.DelayedOperationPurgatory,kafka.server.DelayedOperationPurgatory,org.apache.kafka.common.utils.Time,org.apache.kafka.common.metrics.Metrics)"/>
        /// </summary>
        /// <param name="brokerId"><see cref="int"/></param>
        /// <param name="groupConfig"><see cref="Kafka.Coordinator.Group.GroupConfig"/></param>
        /// <param name="offsetConfig"><see cref="Kafka.Coordinator.Group.OffsetConfig"/></param>
        /// <param name="groupManager"><see cref="Kafka.Coordinator.Group.GroupMetadataManager"/></param>
        /// <param name="heartbeatPurgatory"><see cref="Kafka.Server.DelayedOperationPurgatory"/></param>
        /// <param name="rebalancePurgatory"><see cref="Kafka.Server.DelayedOperationPurgatory"/></param>
        /// <param name="time"><see cref="Org.Apache.Kafka.Common.Utils.Time"/></param>
        /// <param name="metrics"><see cref="Org.Apache.Kafka.Common.Metrics.Metrics"/></param>
        public GroupCoordinator(int brokerId, Kafka.Coordinator.Group.GroupConfig groupConfig, Kafka.Coordinator.Group.OffsetConfig offsetConfig, Kafka.Coordinator.Group.GroupMetadataManager groupManager, Kafka.Server.DelayedOperationPurgatory heartbeatPurgatory, Kafka.Server.DelayedOperationPurgatory rebalancePurgatory, Org.Apache.Kafka.Common.Utils.Time time, Org.Apache.Kafka.Common.Metrics.Metrics metrics)
            : base(brokerId, groupConfig, offsetConfig, groupManager, heartbeatPurgatory, rebalancePurgatory, time, metrics)
        {
        }

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Kafka.Coordinator.Group.GroupCoordinator"/> to <see cref="Kafka.Utils.Logging"/>
        /// </summary>
        public static implicit operator Kafka.Utils.Logging(Kafka.Coordinator.Group.GroupCoordinator t) => t.Cast<Kafka.Utils.Logging>();

        #endregion

        #region Fields

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupCoordinator.html#DeadGroup()"/> 
        /// </summary>
        public static Kafka.Coordinator.Group.GroupSummary DeadGroup
        {
            get { return SExecute<Kafka.Coordinator.Group.GroupSummary>(LocalBridgeClazz, "DeadGroup"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupCoordinator.html#EmptyGroup()"/> 
        /// </summary>
        public static Kafka.Coordinator.Group.GroupSummary EmptyGroup
        {
            get { return SExecute<Kafka.Coordinator.Group.GroupSummary>(LocalBridgeClazz, "EmptyGroup"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupCoordinator.html#NewMemberJoinTimeoutMs()"/> 
        /// </summary>
        public static int NewMemberJoinTimeoutMs
        {
            get { return SExecute<int>(LocalBridgeClazz, "NewMemberJoinTimeoutMs"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupCoordinator.html#NoGeneration()"/> 
        /// </summary>
        public static int NoGeneration
        {
            get { return SExecute<int>(LocalBridgeClazz, "NoGeneration"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupCoordinator.html#NoLeader()"/> 
        /// </summary>
        public static string NoLeader
        {
            get { return SExecute<string>(LocalBridgeClazz, "NoLeader"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupCoordinator.html#NoProtocol()"/> 
        /// </summary>
        public static string NoProtocol
        {
            get { return SExecute<string>(LocalBridgeClazz, "NoProtocol"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupCoordinator.html#NoProtocolType()"/> 
        /// </summary>
        public static string NoProtocolType
        {
            get { return SExecute<string>(LocalBridgeClazz, "NoProtocolType"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupCoordinator.html#NoState()"/> 
        /// </summary>
        public static string NoState
        {
            get { return SExecute<string>(LocalBridgeClazz, "NoState"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupCoordinator.html#apply(kafka.server.KafkaConfig,kafka.server.ReplicaManager,kafka.server.DelayedOperationPurgatory,kafka.server.DelayedOperationPurgatory,org.apache.kafka.common.utils.Time,org.apache.kafka.common.metrics.Metrics)"/>
        /// </summary>
        /// <param name="config"><see cref="Kafka.Server.KafkaConfig"/></param>
        /// <param name="replicaManager"><see cref="Kafka.Server.ReplicaManager"/></param>
        /// <param name="heartbeatPurgatory"><see cref="Kafka.Server.DelayedOperationPurgatory"/></param>
        /// <param name="rebalancePurgatory"><see cref="Kafka.Server.DelayedOperationPurgatory"/></param>
        /// <param name="time"><see cref="Org.Apache.Kafka.Common.Utils.Time"/></param>
        /// <param name="metrics"><see cref="Org.Apache.Kafka.Common.Metrics.Metrics"/></param>
        /// <returns><see cref="Kafka.Coordinator.Group.GroupCoordinator"/></returns>
        public static Kafka.Coordinator.Group.GroupCoordinator Apply(Kafka.Server.KafkaConfig config, Kafka.Server.ReplicaManager replicaManager, Kafka.Server.DelayedOperationPurgatory heartbeatPurgatory, Kafka.Server.DelayedOperationPurgatory rebalancePurgatory, Org.Apache.Kafka.Common.Utils.Time time, Org.Apache.Kafka.Common.Metrics.Metrics metrics)
        {
            return SExecute<Kafka.Coordinator.Group.GroupCoordinator>(LocalBridgeClazz, "apply", config, replicaManager, heartbeatPurgatory, rebalancePurgatory, time, metrics);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupCoordinator.html#apply(kafka.server.KafkaConfig,kafka.server.ReplicaManager,org.apache.kafka.common.utils.Time,org.apache.kafka.common.metrics.Metrics)"/>
        /// </summary>
        /// <param name="config"><see cref="Kafka.Server.KafkaConfig"/></param>
        /// <param name="replicaManager"><see cref="Kafka.Server.ReplicaManager"/></param>
        /// <param name="time"><see cref="Org.Apache.Kafka.Common.Utils.Time"/></param>
        /// <param name="metrics"><see cref="Org.Apache.Kafka.Common.Metrics.Metrics"/></param>
        /// <returns><see cref="Kafka.Coordinator.Group.GroupCoordinator"/></returns>
        public static Kafka.Coordinator.Group.GroupCoordinator Apply(Kafka.Server.KafkaConfig config, Kafka.Server.ReplicaManager replicaManager, Org.Apache.Kafka.Common.Utils.Time time, Org.Apache.Kafka.Common.Metrics.Metrics metrics)
        {
            return SExecute<Kafka.Coordinator.Group.GroupCoordinator>(LocalBridgeClazz, "apply", config, replicaManager, time, metrics);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupCoordinator.html#brokerId()"/> 
        /// </summary>
        public int BrokerId
        {
            get { return IExecute<int>("brokerId"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupCoordinator.html#groupCompletedRebalanceSensor()"/> 
        /// </summary>
        public Org.Apache.Kafka.Common.Metrics.Sensor GroupCompletedRebalanceSensor
        {
            get { return IExecute<Org.Apache.Kafka.Common.Metrics.Sensor>("groupCompletedRebalanceSensor"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupCoordinator.html#groupConfig()"/> 
        /// </summary>
        public Kafka.Coordinator.Group.GroupConfig GroupConfig
        {
            get { return IExecute<Kafka.Coordinator.Group.GroupConfig>("groupConfig"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupCoordinator.html#groupManager()"/> 
        /// </summary>
        public Kafka.Coordinator.Group.GroupMetadataManager GroupManager
        {
            get { return IExecute<Kafka.Coordinator.Group.GroupMetadataManager>("groupManager"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupCoordinator.html#heartbeatPurgatory()"/> 
        /// </summary>
        public Kafka.Server.DelayedOperationPurgatory<Kafka.Coordinator.Group.DelayedHeartbeat> HeartbeatPurgatory
        {
            get { return IExecute<Kafka.Server.DelayedOperationPurgatory<Kafka.Coordinator.Group.DelayedHeartbeat>>("heartbeatPurgatory"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupCoordinator.html#isDebugEnabled()"/> 
        /// </summary>
        public bool IsDebugEnabled
        {
            get { return IExecute<bool>("isDebugEnabled"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupCoordinator.html#isTraceEnabled()"/> 
        /// </summary>
        public bool IsTraceEnabled
        {
            get { return IExecute<bool>("isTraceEnabled"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupCoordinator.html#logger()"/> 
        /// </summary>
        public Com.Typesafe.Scalalogging.Logger Logger
        {
            get { return IExecute<Com.Typesafe.Scalalogging.Logger>("logger"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupCoordinator.html#loggerName()"/> 
        /// </summary>
        public string LoggerName
        {
            get { return IExecute<string>("loggerName"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupCoordinator.html#logIdent()"/> 
        /// </summary>
        public string LogIdent
        {
            get { return IExecute<string>("logIdent"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupCoordinator.html#offsetConfig()"/> 
        /// </summary>
        public Kafka.Coordinator.Group.OffsetConfig OffsetConfig
        {
            get { return IExecute<Kafka.Coordinator.Group.OffsetConfig>("offsetConfig"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupCoordinator.html#offsetDeletionSensor()"/> 
        /// </summary>
        public Org.Apache.Kafka.Common.Metrics.Sensor OffsetDeletionSensor
        {
            get { return IExecute<Org.Apache.Kafka.Common.Metrics.Sensor>("offsetDeletionSensor"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupCoordinator.html#offsetsTopicConfigs()"/> 
        /// </summary>
        public Java.Util.Properties OffsetsTopicConfigs
        {
            get { return IExecute<Java.Util.Properties>("offsetsTopicConfigs"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupCoordinator.html#rebalancePurgatory()"/> 
        /// </summary>
        public Kafka.Server.DelayedOperationPurgatory<Kafka.Coordinator.Group.DelayedRebalance> RebalancePurgatory
        {
            get { return IExecute<Kafka.Server.DelayedOperationPurgatory<Kafka.Coordinator.Group.DelayedRebalance>>("rebalancePurgatory"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupCoordinator.html#shouldCompleteNonPendingHeartbeat(kafka.coordinator.group.GroupMetadata,java.lang.String)"/>
        /// </summary>
        /// <param name="group"><see cref="Kafka.Coordinator.Group.GroupMetadata"/></param>
        /// <param name="memberId"><see cref="string"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool ShouldCompleteNonPendingHeartbeat(Kafka.Coordinator.Group.GroupMetadata group, string memberId)
        {
            return IExecute<bool>("shouldCompleteNonPendingHeartbeat", group, memberId);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupCoordinator.html#partitionFor(java.lang.String)"/>
        /// </summary>
        /// <param name="group"><see cref="string"/></param>
        /// <returns><see cref="int"/></returns>
        public int PartitionFor(string group)
        {
            return IExecute<int>("partitionFor", group);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupCoordinator.html#msgWithLogIdent(java.lang.String)"/>
        /// </summary>
        /// <param name="msg"><see cref="string"/></param>
        /// <returns><see cref="string"/></returns>
        public string MsgWithLogIdent(string msg)
        {
            return IExecute<string>("msgWithLogIdent", msg);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupCoordinator.html#onCompleteJoin(kafka.coordinator.group.GroupMetadata)"/>
        /// </summary>
        /// <param name="group"><see cref="Kafka.Coordinator.Group.GroupMetadata"/></param>
        public void OnCompleteJoin(Kafka.Coordinator.Group.GroupMetadata group)
        {
            IExecute("onCompleteJoin", group);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupCoordinator.html#onElection(int,int)"/>
        /// </summary>
        /// <param name="offsetTopicPartitionId"><see cref="int"/></param>
        /// <param name="coordinatorEpoch"><see cref="int"/></param>
        public void OnElection(int offsetTopicPartitionId, int coordinatorEpoch)
        {
            IExecute("onElection", offsetTopicPartitionId, coordinatorEpoch);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupCoordinator.html#onExpireHeartbeat(kafka.coordinator.group.GroupMetadata,java.lang.String,boolean)"/>
        /// </summary>
        /// <param name="group"><see cref="Kafka.Coordinator.Group.GroupMetadata"/></param>
        /// <param name="memberId"><see cref="string"/></param>
        /// <param name="isPending"><see cref="bool"/></param>
        public void OnExpireHeartbeat(Kafka.Coordinator.Group.GroupMetadata group, string memberId, bool isPending)
        {
            IExecute("onExpireHeartbeat", group, memberId, isPending);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupCoordinator.html#onExpirePendingSync(kafka.coordinator.group.GroupMetadata,int)"/>
        /// </summary>
        /// <param name="group"><see cref="Kafka.Coordinator.Group.GroupMetadata"/></param>
        /// <param name="generationId"><see cref="int"/></param>
        public void OnExpirePendingSync(Kafka.Coordinator.Group.GroupMetadata group, int generationId)
        {
            IExecute("onExpirePendingSync", group, generationId);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupCoordinator.html#prepareRebalance(kafka.coordinator.group.GroupMetadata,java.lang.String)"/>
        /// </summary>
        /// <param name="group"><see cref="Kafka.Coordinator.Group.GroupMetadata"/></param>
        /// <param name="reason"><see cref="string"/></param>
        public void PrepareRebalance(Kafka.Coordinator.Group.GroupMetadata group, string reason)
        {
            IExecute("prepareRebalance", group, reason);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupCoordinator.html#shutdown()"/>
        /// </summary>
        public void Shutdown()
        {
            IExecute("shutdown");
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}