/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka_2.13-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Kafka.Coordinator.Group
{
    #region GroupMetadata
    public partial class GroupMetadata
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupMetadata.html#%3Cinit%3E(java.lang.String,kafka.coordinator.group.GroupState,org.apache.kafka.common.utils.Time)"/>
        /// </summary>
        /// <param name="groupId"><see cref="string"/></param>
        /// <param name="initialState"><see cref="Kafka.Coordinator.Group.GroupState"/></param>
        /// <param name="time"><see cref="Org.Apache.Kafka.Common.Utils.Time"/></param>
        public GroupMetadata(string groupId, Kafka.Coordinator.Group.GroupState initialState, Org.Apache.Kafka.Common.Utils.Time time)
            : base(groupId, initialState, time)
        {
        }

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Kafka.Coordinator.Group.GroupMetadata"/> to <see cref="Kafka.Utils.Logging"/>
        /// </summary>
        public static implicit operator Kafka.Utils.Logging(Kafka.Coordinator.Group.GroupMetadata t) => t.Cast<Kafka.Utils.Logging>();

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupMetadata.html#canRebalance()"/> 
        /// </summary>
        public bool CanRebalance
        {
            get { return IExecute<bool>("canRebalance"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupMetadata.html#currentState()"/> 
        /// </summary>
        public Kafka.Coordinator.Group.GroupState CurrentState
        {
            get { return IExecute<Kafka.Coordinator.Group.GroupState>("currentState"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupMetadata.html#currentStateTimestampOrDefault()"/> 
        /// </summary>
        public long CurrentStateTimestampOrDefault
        {
            get { return IExecute<long>("currentStateTimestampOrDefault"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupMetadata.html#generationId()"/> 
        /// </summary>
        public int GenerationId
        {
            get { return IExecute<int>("generationId"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupMetadata.html#groupId()"/> 
        /// </summary>
        public string GroupId
        {
            get { return IExecute<string>("groupId"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupMetadata.html#hasAllMembersJoined()"/> 
        /// </summary>
        public bool HasAllMembersJoined
        {
            get { return IExecute<bool>("hasAllMembersJoined"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupMetadata.html#hasOffsets()"/> 
        /// </summary>
        public bool HasOffsets
        {
            get { return IExecute<bool>("hasOffsets"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupMetadata.html#hasReceivedConsistentOffsetCommits()"/> 
        /// </summary>
        public bool HasReceivedConsistentOffsetCommits
        {
            get { return IExecute<bool>("hasReceivedConsistentOffsetCommits"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupMetadata.html#hasReceivedSyncFromAllMembers()"/> 
        /// </summary>
        public bool HasReceivedSyncFromAllMembers
        {
            get { return IExecute<bool>("hasReceivedSyncFromAllMembers"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupMetadata.html#isConsumerGroup()"/> 
        /// </summary>
        public bool IsConsumerGroup
        {
            get { return IExecute<bool>("isConsumerGroup"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupMetadata.html#isDebugEnabled()"/> 
        /// </summary>
        public bool IsDebugEnabled
        {
            get { return IExecute<bool>("isDebugEnabled"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupMetadata.html#isTraceEnabled()"/> 
        /// </summary>
        public bool IsTraceEnabled
        {
            get { return IExecute<bool>("isTraceEnabled"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupMetadata.html#leaderOrNull()"/> 
        /// </summary>
        public string LeaderOrNull
        {
            get { return IExecute<string>("leaderOrNull"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupMetadata.html#lock()"/> 
        /// </summary>
        public Java.Util.Concurrent.Locks.ReentrantLock Lock
        {
            get { return IExecute<Java.Util.Concurrent.Locks.ReentrantLock>("lock"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupMetadata.html#logger()"/> 
        /// </summary>
        public Com.Typesafe.Scalalogging.Logger Logger
        {
            get { return IExecute<Com.Typesafe.Scalalogging.Logger>("logger"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupMetadata.html#loggerName()"/> 
        /// </summary>
        public string LoggerName
        {
            get { return IExecute<string>("loggerName"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupMetadata.html#logIdent()"/> 
        /// </summary>
        public string LogIdent
        {
            get { return IExecute<string>("logIdent"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupMetadata.html#maybeElectNewJoinedLeader()"/> 
        /// </summary>
        public bool MaybeElectNewJoinedLeader
        {
            get { return IExecute<bool>("maybeElectNewJoinedLeader"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupMetadata.html#newMemberAdded()"/> 
        /// </summary>
        public bool NewMemberAdded
        {
            get { return IExecute<bool>("newMemberAdded"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupMetadata.html#numAwaiting()"/> 
        /// </summary>
        public int NumAwaiting
        {
            get { return IExecute<int>("numAwaiting"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupMetadata.html#numOffsets()"/> 
        /// </summary>
        public int NumOffsets
        {
            get { return IExecute<int>("numOffsets"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupMetadata.html#numPending()"/> 
        /// </summary>
        public int NumPending
        {
            get { return IExecute<int>("numPending"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupMetadata.html#overview()"/> 
        /// </summary>
        public Kafka.Coordinator.Group.GroupOverview Overview
        {
            get { return IExecute<Kafka.Coordinator.Group.GroupOverview>("overview"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupMetadata.html#rebalanceTimeoutMs()"/> 
        /// </summary>
        public int RebalanceTimeoutMs
        {
            get { return IExecute<int>("rebalanceTimeoutMs"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupMetadata.html#selectProtocol()"/> 
        /// </summary>
        public string SelectProtocol
        {
            get { return IExecute<string>("selectProtocol"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupMetadata.html#size()"/> 
        /// </summary>
        public int Size
        {
            get { return IExecute<int>("size"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupMetadata.html#summary()"/> 
        /// </summary>
        public Kafka.Coordinator.Group.GroupSummary Summary
        {
            get { return IExecute<Kafka.Coordinator.Group.GroupSummary>("summary"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupMetadata.html#addPendingMember(java.lang.String)"/>
        /// </summary>
        /// <param name="memberId"><see cref="string"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool AddPendingMember(string memberId)
        {
            return IExecute<bool>("addPendingMember", memberId);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupMetadata.html#addPendingSyncMember(java.lang.String)"/>
        /// </summary>
        /// <param name="memberId"><see cref="string"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool AddPendingSyncMember(string memberId)
        {
            return IExecute<bool>("addPendingSyncMember", memberId);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupMetadata.html#has(java.lang.String)"/>
        /// </summary>
        /// <param name="memberId"><see cref="string"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool Has(string memberId)
        {
            return IExecute<bool>("has", memberId);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupMetadata.html#hasPendingOffsetCommitsForTopicPartition(org.apache.kafka.common.TopicPartition)"/>
        /// </summary>
        /// <param name="topicPartition"><see cref="Org.Apache.Kafka.Common.TopicPartition"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool HasPendingOffsetCommitsForTopicPartition(Org.Apache.Kafka.Common.TopicPartition topicPartition)
        {
            return IExecute<bool>("hasPendingOffsetCommitsForTopicPartition", topicPartition);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupMetadata.html#hasPendingOffsetCommitsFromProducer(long)"/>
        /// </summary>
        /// <param name="producerId"><see cref="long"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool HasPendingOffsetCommitsFromProducer(long producerId)
        {
            return IExecute<bool>("hasPendingOffsetCommitsFromProducer", producerId);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupMetadata.html#hasStaticMember(java.lang.String)"/>
        /// </summary>
        /// <param name="groupInstanceId"><see cref="string"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool HasStaticMember(string groupInstanceId)
        {
            return IExecute<bool>("hasStaticMember", groupInstanceId);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupMetadata.html#is(kafka.coordinator.group.GroupState)"/>
        /// </summary>
        /// <param name="groupState"><see cref="Kafka.Coordinator.Group.GroupState"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool Is(Kafka.Coordinator.Group.GroupState groupState)
        {
            return IExecute<bool>("is", groupState);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupMetadata.html#isLeader(java.lang.String)"/>
        /// </summary>
        /// <param name="memberId"><see cref="string"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsLeader(string memberId)
        {
            return IExecute<bool>("isLeader", memberId);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupMetadata.html#isPendingMember(java.lang.String)"/>
        /// </summary>
        /// <param name="memberId"><see cref="string"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsPendingMember(string memberId)
        {
            return IExecute<bool>("isPendingMember", memberId);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupMetadata.html#isStaticMemberFenced(java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="groupInstanceId"><see cref="string"/></param>
        /// <param name="memberId"><see cref="string"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsStaticMemberFenced(string groupInstanceId, string memberId)
        {
            return IExecute<bool>("isStaticMemberFenced", groupInstanceId, memberId);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupMetadata.html#isSubscribedToTopic(java.lang.String)"/>
        /// </summary>
        /// <param name="topic"><see cref="string"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsSubscribedToTopic(string topic)
        {
            return IExecute<bool>("isSubscribedToTopic", topic);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupMetadata.html#maybeInvokeSyncCallback(kafka.coordinator.group.MemberMetadata,kafka.coordinator.group.SyncGroupResult)"/>
        /// </summary>
        /// <param name="member"><see cref="Kafka.Coordinator.Group.MemberMetadata"/></param>
        /// <param name="syncGroupResult"><see cref="Kafka.Coordinator.Group.SyncGroupResult"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool MaybeInvokeSyncCallback(Kafka.Coordinator.Group.MemberMetadata member, Kafka.Coordinator.Group.SyncGroupResult syncGroupResult)
        {
            return IExecute<bool>("maybeInvokeSyncCallback", member, syncGroupResult);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupMetadata.html#removePendingSyncMember(java.lang.String)"/>
        /// </summary>
        /// <param name="memberId"><see cref="string"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool RemovePendingSyncMember(string memberId)
        {
            return IExecute<bool>("removePendingSyncMember", memberId);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupMetadata.html#msgWithLogIdent(java.lang.String)"/>
        /// </summary>
        /// <param name="msg"><see cref="string"/></param>
        /// <returns><see cref="string"/></returns>
        public string MsgWithLogIdent(string msg)
        {
            return IExecute<string>("msgWithLogIdent", msg);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupMetadata.html#get(java.lang.String)"/>
        /// </summary>
        /// <param name="memberId"><see cref="string"/></param>
        /// <returns><see cref="Kafka.Coordinator.Group.MemberMetadata"/></returns>
        public Kafka.Coordinator.Group.MemberMetadata Get(string memberId)
        {
            return IExecute<Kafka.Coordinator.Group.MemberMetadata>("get", memberId);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupMetadata.html#replaceStaticMember(java.lang.String,java.lang.String,java.lang.String)"/>
        /// </summary>
        /// <param name="groupInstanceId"><see cref="string"/></param>
        /// <param name="oldMemberId"><see cref="string"/></param>
        /// <param name="newMemberId"><see cref="string"/></param>
        /// <returns><see cref="Kafka.Coordinator.Group.MemberMetadata"/></returns>
        public Kafka.Coordinator.Group.MemberMetadata ReplaceStaticMember(string groupInstanceId, string oldMemberId, string newMemberId)
        {
            return IExecute<Kafka.Coordinator.Group.MemberMetadata>("replaceStaticMember", groupInstanceId, oldMemberId, newMemberId);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupMetadata.html#clearPendingSyncMembers()"/>
        /// </summary>
        public void ClearPendingSyncMembers()
        {
            IExecute("clearPendingSyncMembers");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupMetadata.html#completePendingTxnOffsetCommit(long,boolean)"/>
        /// </summary>
        /// <param name="producerId"><see cref="long"/></param>
        /// <param name="isCommit"><see cref="bool"/></param>
        public void CompletePendingTxnOffsetCommit(long producerId, bool isCommit)
        {
            IExecute("completePendingTxnOffsetCommit", producerId, isCommit);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupMetadata.html#failPendingOffsetWrite(org.apache.kafka.common.TopicPartition,kafka.common.OffsetAndMetadata)"/>
        /// </summary>
        /// <param name="topicPartition"><see cref="Org.Apache.Kafka.Common.TopicPartition"/></param>
        /// <param name="offset"><see cref="Kafka.Common.OffsetAndMetadata"/></param>
        public void FailPendingOffsetWrite(Org.Apache.Kafka.Common.TopicPartition topicPartition, Kafka.Common.OffsetAndMetadata offset)
        {
            IExecute("failPendingOffsetWrite", topicPartition, offset);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupMetadata.html#failPendingTxnOffsetCommit(long,org.apache.kafka.common.TopicPartition)"/>
        /// </summary>
        /// <param name="producerId"><see cref="long"/></param>
        /// <param name="topicPartition"><see cref="Org.Apache.Kafka.Common.TopicPartition"/></param>
        public void FailPendingTxnOffsetCommit(long producerId, Org.Apache.Kafka.Common.TopicPartition topicPartition)
        {
            IExecute("failPendingTxnOffsetCommit", producerId, topicPartition);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupMetadata.html#initNextGeneration()"/>
        /// </summary>
        public void InitNextGeneration()
        {
            IExecute("initNextGeneration");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupMetadata.html#maybeInvokeJoinCallback(kafka.coordinator.group.MemberMetadata,kafka.coordinator.group.JoinGroupResult)"/>
        /// </summary>
        /// <param name="member"><see cref="Kafka.Coordinator.Group.MemberMetadata"/></param>
        /// <param name="joinGroupResult"><see cref="Kafka.Coordinator.Group.JoinGroupResult"/></param>
        public void MaybeInvokeJoinCallback(Kafka.Coordinator.Group.MemberMetadata member, Kafka.Coordinator.Group.JoinGroupResult joinGroupResult)
        {
            IExecute("maybeInvokeJoinCallback", member, joinGroupResult);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupMetadata.html#onOffsetCommitAppend(org.apache.kafka.common.TopicPartition,kafka.coordinator.group.CommitRecordMetadataAndOffset)"/>
        /// </summary>
        /// <param name="topicPartition"><see cref="Org.Apache.Kafka.Common.TopicPartition"/></param>
        /// <param name="offsetWithCommitRecordMetadata"><see cref="Kafka.Coordinator.Group.CommitRecordMetadataAndOffset"/></param>
        public void OnOffsetCommitAppend(Org.Apache.Kafka.Common.TopicPartition topicPartition, Kafka.Coordinator.Group.CommitRecordMetadataAndOffset offsetWithCommitRecordMetadata)
        {
            IExecute("onOffsetCommitAppend", topicPartition, offsetWithCommitRecordMetadata);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupMetadata.html#onTxnOffsetCommitAppend(long,org.apache.kafka.common.TopicPartition,kafka.coordinator.group.CommitRecordMetadataAndOffset)"/>
        /// </summary>
        /// <param name="producerId"><see cref="long"/></param>
        /// <param name="topicPartition"><see cref="Org.Apache.Kafka.Common.TopicPartition"/></param>
        /// <param name="commitRecordMetadataAndOffset"><see cref="Kafka.Coordinator.Group.CommitRecordMetadataAndOffset"/></param>
        public void OnTxnOffsetCommitAppend(long producerId, Org.Apache.Kafka.Common.TopicPartition topicPartition, Kafka.Coordinator.Group.CommitRecordMetadataAndOffset commitRecordMetadataAndOffset)
        {
            IExecute("onTxnOffsetCommitAppend", producerId, topicPartition, commitRecordMetadataAndOffset);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupMetadata.html#remove(java.lang.String)"/>
        /// </summary>
        /// <param name="memberId"><see cref="string"/></param>
        public void Remove(string memberId)
        {
            IExecute("remove", memberId);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/coordinator/group/GroupMetadata.html#transitionTo(kafka.coordinator.group.GroupState)"/>
        /// </summary>
        /// <param name="groupState"><see cref="Kafka.Coordinator.Group.GroupState"/></param>
        public void TransitionTo(Kafka.Coordinator.Group.GroupState groupState)
        {
            IExecute("transitionTo", groupState);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}