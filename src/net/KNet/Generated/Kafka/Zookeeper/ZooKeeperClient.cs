/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka_2.13-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Kafka.Zookeeper
{
    #region ZooKeeperClient
    public partial class ZooKeeperClient
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zookeeper/ZooKeeperClient.html#%3Cinit%3E(java.lang.String,int,int,int,org.apache.kafka.common.utils.Time,java.lang.String,java.lang.String,org.apache.zookeeper.client.ZKClientConfig,java.lang.String)"/>
        /// </summary>
        /// <param name="connectString"><see cref="string"/></param>
        /// <param name="sessionTimeoutMs"><see cref="int"/></param>
        /// <param name="connectionTimeoutMs"><see cref="int"/></param>
        /// <param name="maxInFlightRequests"><see cref="int"/></param>
        /// <param name="time"><see cref="Org.Apache.Kafka.Common.Utils.Time"/></param>
        /// <param name="metricGroup"><see cref="string"/></param>
        /// <param name="metricType"><see cref="string"/></param>
        /// <param name="clientConfig"><see cref="Org.Apache.Zookeeper.Client.ZKClientConfig"/></param>
        /// <param name="name"><see cref="string"/></param>
        public ZooKeeperClient(string connectString, int sessionTimeoutMs, int connectionTimeoutMs, int maxInFlightRequests, Org.Apache.Kafka.Common.Utils.Time time, string metricGroup, string metricType, Org.Apache.Zookeeper.Client.ZKClientConfig clientConfig, string name)
            : base(connectString, sessionTimeoutMs, connectionTimeoutMs, maxInFlightRequests, time, metricGroup, metricType, clientConfig, name)
        {
        }

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Kafka.Zookeeper.ZooKeeperClient"/> to <see cref="Kafka.Metrics.KafkaMetricsGroup"/>
        /// </summary>
        public static implicit operator Kafka.Metrics.KafkaMetricsGroup(Kafka.Zookeeper.ZooKeeperClient t) => t.Cast<Kafka.Metrics.KafkaMetricsGroup>();

        #endregion

        #region Fields

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zookeeper/ZooKeeperClient.html#RetryBackoffMs()"/> 
        /// </summary>
        public static int RetryBackoffMs
        {
            get { return SExecute<int>(LocalBridgeClazz, "RetryBackoffMs"); }
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zookeeper/ZooKeeperClient.html#clientConfig()"/> 
        /// </summary>
        public Org.Apache.Zookeeper.Client.ZKClientConfig ClientConfig
        {
            get { return IExecute<Org.Apache.Zookeeper.Client.ZKClientConfig>("clientConfig"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zookeeper/ZooKeeperClient.html#connectionState()"/> 
        /// </summary>
        public Org.Apache.Zookeeper.ZooKeeper.States ConnectionState
        {
            get { return IExecute<Org.Apache.Zookeeper.ZooKeeper.States>("connectionState"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zookeeper/ZooKeeperClient.html#currentZooKeeper()"/> 
        /// </summary>
        public Org.Apache.Zookeeper.ZooKeeper CurrentZooKeeper
        {
            get { return IExecute<Org.Apache.Zookeeper.ZooKeeper>("currentZooKeeper"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zookeeper/ZooKeeperClient.html#isDebugEnabled()"/> 
        /// </summary>
        public bool IsDebugEnabled
        {
            get { return IExecute<bool>("isDebugEnabled"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zookeeper/ZooKeeperClient.html#isTraceEnabled()"/> 
        /// </summary>
        public bool IsTraceEnabled
        {
            get { return IExecute<bool>("isTraceEnabled"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zookeeper/ZooKeeperClient.html#logger()"/> 
        /// </summary>
        public Com.Typesafe.Scalalogging.Logger Logger
        {
            get { return IExecute<Com.Typesafe.Scalalogging.Logger>("logger"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zookeeper/ZooKeeperClient.html#loggerName()"/> 
        /// </summary>
        public string LoggerName
        {
            get { return IExecute<string>("loggerName"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zookeeper/ZooKeeperClient.html#logIdent()"/> 
        /// </summary>
        public string LogIdent
        {
            get { return IExecute<string>("logIdent"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zookeeper/ZooKeeperClient.html#reinitializeScheduler()"/> 
        /// </summary>
        public Kafka.Utils.KafkaScheduler ReinitializeScheduler
        {
            get { return IExecute<Kafka.Utils.KafkaScheduler>("reinitializeScheduler"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zookeeper/ZooKeeperClient.html#sessionId()"/> 
        /// </summary>
        public long SessionId
        {
            get { return IExecute<long>("sessionId"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zookeeper/ZooKeeperClient.html#ZooKeeperClientWatcher()"/> 
        /// </summary>
        public Kafka.Zookeeper.ZooKeeperClient.ZooKeeperClientWatcher. ZooKeeperClientWatcher
        {
            get { return IExecute<Kafka.Zookeeper.ZooKeeperClient.ZooKeeperClientWatcher.>("ZooKeeperClientWatcher"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zookeeper/ZooKeeperClient.html#handleRequest(kafka.zookeeper.AsyncRequest)"/>
        /// </summary>
        /// <param name="request"><typeparamref name="Req"/></param>
        /// <typeparam name="Req"><see cref="Kafka.Zookeeper.AsyncRequest"/></typeparam>
        /// <returns><see cref="Kafka.Zookeeper.AsyncResponse"/></returns>
        public Kafka.Zookeeper.AsyncResponse HandleRequest<Req>(Req request) where Req: Kafka.Zookeeper.AsyncRequest
        {
            return IExecute<Kafka.Zookeeper.AsyncResponse>("handleRequest", request);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zookeeper/ZooKeeperClient.html#newMeter(com.yammer.metrics.core.MetricName,java.lang.String,java.util.concurrent.TimeUnit)"/>
        /// </summary>
        /// <param name="metricName"><see cref="Com.Yammer.Metrics.Core.MetricName"/></param>
        /// <param name="eventType"><see cref="string"/></param>
        /// <param name="timeUnit"><see cref="Java.Util.Concurrent.TimeUnit"/></param>
        /// <returns><see cref="Com.Yammer.Metrics.Core.Meter"/></returns>
        public Com.Yammer.Metrics.Core.Meter NewMeter(Com.Yammer.Metrics.Core.MetricName metricName, string eventType, Java.Util.Concurrent.TimeUnit timeUnit)
        {
            return IExecute<Com.Yammer.Metrics.Core.Meter>("newMeter", metricName, eventType, timeUnit);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zookeeper/ZooKeeperClient.html#msgWithLogIdent(java.lang.String)"/>
        /// </summary>
        /// <param name="msg"><see cref="string"/></param>
        /// <returns><see cref="string"/></returns>
        public string MsgWithLogIdent(string msg)
        {
            return IExecute<string>("msgWithLogIdent", msg);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zookeeper/ZooKeeperClient.html#close()"/>
        /// </summary>
        public void Close()
        {
            IExecute("close");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zookeeper/ZooKeeperClient.html#forceReinitialize()"/>
        /// </summary>
        public void ForceReinitialize()
        {
            IExecute("forceReinitialize");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zookeeper/ZooKeeperClient.html#registerStateChangeHandler(kafka.zookeeper.StateChangeHandler)"/>
        /// </summary>
        /// <param name="stateChangeHandler"><see cref="Kafka.Zookeeper.StateChangeHandler"/></param>
        public void RegisterStateChangeHandler(Kafka.Zookeeper.StateChangeHandler stateChangeHandler)
        {
            IExecute("registerStateChangeHandler", stateChangeHandler);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zookeeper/ZooKeeperClient.html#registerZNodeChangeHandler(kafka.zookeeper.ZNodeChangeHandler)"/>
        /// </summary>
        /// <param name="zNodeChangeHandler"><see cref="Kafka.Zookeeper.ZNodeChangeHandler"/></param>
        public void RegisterZNodeChangeHandler(Kafka.Zookeeper.ZNodeChangeHandler zNodeChangeHandler)
        {
            IExecute("registerZNodeChangeHandler", zNodeChangeHandler);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zookeeper/ZooKeeperClient.html#registerZNodeChildChangeHandler(kafka.zookeeper.ZNodeChildChangeHandler)"/>
        /// </summary>
        /// <param name="zNodeChildChangeHandler"><see cref="Kafka.Zookeeper.ZNodeChildChangeHandler"/></param>
        public void RegisterZNodeChildChangeHandler(Kafka.Zookeeper.ZNodeChildChangeHandler zNodeChildChangeHandler)
        {
            IExecute("registerZNodeChildChangeHandler", zNodeChildChangeHandler);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zookeeper/ZooKeeperClient.html#scheduleReinitialize(java.lang.String,java.lang.String,long)"/>
        /// </summary>
        /// <param name="name"><see cref="string"/></param>
        /// <param name="message"><see cref="string"/></param>
        /// <param name="delayMs"><see cref="long"/></param>
        public void ScheduleReinitialize(string name, string message, long delayMs)
        {
            IExecute("scheduleReinitialize", name, message, delayMs);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zookeeper/ZooKeeperClient.html#unregisterStateChangeHandler(java.lang.String)"/>
        /// </summary>
        /// <param name="name"><see cref="string"/></param>
        public void UnregisterStateChangeHandler(string name)
        {
            IExecute("unregisterStateChangeHandler", name);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zookeeper/ZooKeeperClient.html#unregisterZNodeChangeHandler(java.lang.String)"/>
        /// </summary>
        /// <param name="path"><see cref="string"/></param>
        public void UnregisterZNodeChangeHandler(string path)
        {
            IExecute("unregisterZNodeChangeHandler", path);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zookeeper/ZooKeeperClient.html#unregisterZNodeChildChangeHandler(java.lang.String)"/>
        /// </summary>
        /// <param name="path"><see cref="string"/></param>
        public void UnregisterZNodeChildChangeHandler(string path)
        {
            IExecute("unregisterZNodeChildChangeHandler", path);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/zookeeper/ZooKeeperClient.html#waitUntilConnected()"/>
        /// </summary>
        public void WaitUntilConnected()
        {
            IExecute("waitUntilConnected");
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}