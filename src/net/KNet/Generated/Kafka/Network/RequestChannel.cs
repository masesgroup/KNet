/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka_2.13-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Kafka.Network
{
    #region RequestChannel
    public partial class RequestChannel
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/RequestChannel.html#%3Cinit%3E(int,java.lang.String,org.apache.kafka.common.utils.Time,kafka.network.RequestChannel.Metrics)"/>
        /// </summary>
        /// <param name="queueSize"><see cref="int"/></param>
        /// <param name="metricNamePrefix"><see cref="string"/></param>
        /// <param name="time"><see cref="Org.Apache.Kafka.Common.Utils.Time"/></param>
        /// <param name="metrics"><see cref="Kafka.Network.RequestChannel.Metrics"/></param>
        public RequestChannel(int queueSize, string metricNamePrefix, Org.Apache.Kafka.Common.Utils.Time time, Kafka.Network.RequestChannel.Metrics metrics)
            : base(queueSize, metricNamePrefix, time, metrics)
        {
        }

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Kafka.Network.RequestChannel"/> to <see cref="Kafka.Metrics.KafkaMetricsGroup"/>
        /// </summary>
        public static implicit operator Kafka.Metrics.KafkaMetricsGroup(Kafka.Network.RequestChannel t) => t.Cast<Kafka.Metrics.KafkaMetricsGroup>();

        #endregion

        #region Fields

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/RequestChannel.html#isRequestLoggingEnabled()"/> 
        /// </summary>
        public static bool IsRequestLoggingEnabled
        {
            get { return SExecute<bool>(LocalBridgeClazz, "isRequestLoggingEnabled"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/RequestChannel.html#ProcessorMetricTag()"/> 
        /// </summary>
        public static string ProcessorMetricTag
        {
            get { return SExecute<string>(LocalBridgeClazz, "ProcessorMetricTag"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/RequestChannel.html#RequestQueueSizeMetric()"/> 
        /// </summary>
        public static string RequestQueueSizeMetric
        {
            get { return SExecute<string>(LocalBridgeClazz, "RequestQueueSizeMetric"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/RequestChannel.html#ResponseQueueSizeMetric()"/> 
        /// </summary>
        public static string ResponseQueueSizeMetric
        {
            get { return SExecute<string>(LocalBridgeClazz, "ResponseQueueSizeMetric"); }
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/RequestChannel.html#isDebugEnabled()"/> 
        /// </summary>
        public bool IsDebugEnabled
        {
            get { return IExecute<bool>("isDebugEnabled"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/RequestChannel.html#isTraceEnabled()"/> 
        /// </summary>
        public bool IsTraceEnabled
        {
            get { return IExecute<bool>("isTraceEnabled"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/RequestChannel.html#logger()"/> 
        /// </summary>
        public Com.Typesafe.Scalalogging.Logger Logger
        {
            get { return IExecute<Com.Typesafe.Scalalogging.Logger>("logger"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/RequestChannel.html#loggerName()"/> 
        /// </summary>
        public string LoggerName
        {
            get { return IExecute<string>("loggerName"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/RequestChannel.html#logIdent()"/> 
        /// </summary>
        public string LogIdent
        {
            get { return IExecute<string>("logIdent"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/RequestChannel.html#metricNamePrefix()"/> 
        /// </summary>
        public string MetricNamePrefix
        {
            get { return IExecute<string>("metricNamePrefix"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/RequestChannel.html#queueSize()"/> 
        /// </summary>
        public int QueueSize
        {
            get { return IExecute<int>("queueSize"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/RequestChannel.html#requestQueueSizeMetricName()"/> 
        /// </summary>
        public string RequestQueueSizeMetricName
        {
            get { return IExecute<string>("requestQueueSizeMetricName"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/RequestChannel.html#responseQueueSizeMetricName()"/> 
        /// </summary>
        public string ResponseQueueSizeMetricName
        {
            get { return IExecute<string>("responseQueueSizeMetricName"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/RequestChannel.html#newMeter(com.yammer.metrics.core.MetricName,java.lang.String,java.util.concurrent.TimeUnit)"/>
        /// </summary>
        /// <param name="metricName"><see cref="Com.Yammer.Metrics.Core.MetricName"/></param>
        /// <param name="eventType"><see cref="string"/></param>
        /// <param name="timeUnit"><see cref="Java.Util.Concurrent.TimeUnit"/></param>
        /// <returns><see cref="Com.Yammer.Metrics.Core.Meter"/></returns>
        public Com.Yammer.Metrics.Core.Meter NewMeter(Com.Yammer.Metrics.Core.MetricName metricName, string eventType, Java.Util.Concurrent.TimeUnit timeUnit)
        {
            return IExecute<Com.Yammer.Metrics.Core.Meter>("newMeter", metricName, eventType, timeUnit);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/RequestChannel.html#msgWithLogIdent(java.lang.String)"/>
        /// </summary>
        /// <param name="msg"><see cref="string"/></param>
        /// <returns><see cref="string"/></returns>
        public string MsgWithLogIdent(string msg)
        {
            return IExecute<string>("msgWithLogIdent", msg);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/RequestChannel.html#receiveRequest()"/>
        /// </summary>

        /// <returns><see cref="Kafka.Network.RequestChannel.BaseRequest"/></returns>
        public Kafka.Network.RequestChannel.BaseRequest ReceiveRequest()
        {
            return IExecute<Kafka.Network.RequestChannel.BaseRequest>("receiveRequest");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/RequestChannel.html#receiveRequest(long)"/>
        /// </summary>
        /// <param name="timeout"><see cref="long"/></param>
        /// <returns><see cref="Kafka.Network.RequestChannel.BaseRequest"/></returns>
        public Kafka.Network.RequestChannel.BaseRequest ReceiveRequest(long timeout)
        {
            return IExecute<Kafka.Network.RequestChannel.BaseRequest>("receiveRequest", timeout);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/RequestChannel.html#metrics()"/>
        /// </summary>

        /// <returns><see cref="Kafka.Network.RequestChannel.Metrics"/></returns>
        public Kafka.Network.RequestChannel.Metrics MetricsMethod()
        {
            return IExecute<Kafka.Network.RequestChannel.Metrics>("metrics");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/RequestChannel.html#addProcessor(kafka.network.Processor)"/>
        /// </summary>
        /// <param name="processor"><see cref="Kafka.Network.Processor"/></param>
        public void AddProcessor(Kafka.Network.Processor processor)
        {
            IExecute("addProcessor", processor);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/RequestChannel.html#clear()"/>
        /// </summary>
        public void Clear()
        {
            IExecute("clear");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/RequestChannel.html#closeConnection(kafka.network.RequestChannel.Request,java.util.Map)"/>
        /// </summary>
        /// <param name="request"><see cref="Kafka.Network.RequestChannel.Request"/></param>
        /// <param name="errorCounts"><see cref="Java.Util.Map"/></param>
        public void CloseConnection(Kafka.Network.RequestChannel.Request request, Java.Util.Map<Org.Apache.Kafka.Common.Protocol.Errors, int?> errorCounts)
        {
            IExecute("closeConnection", request, errorCounts);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/RequestChannel.html#endThrottling(kafka.network.RequestChannel.Request)"/>
        /// </summary>
        /// <param name="request"><see cref="Kafka.Network.RequestChannel.Request"/></param>
        public void EndThrottling(Kafka.Network.RequestChannel.Request request)
        {
            IExecute("endThrottling", request);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/RequestChannel.html#removeProcessor(int)"/>
        /// </summary>
        /// <param name="processorId"><see cref="int"/></param>
        public void RemoveProcessor(int processorId)
        {
            IExecute("removeProcessor", processorId);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/RequestChannel.html#sendNoOpResponse(kafka.network.RequestChannel.Request)"/>
        /// </summary>
        /// <param name="request"><see cref="Kafka.Network.RequestChannel.Request"/></param>
        public void SendNoOpResponse(Kafka.Network.RequestChannel.Request request)
        {
            IExecute("sendNoOpResponse", request);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/RequestChannel.html#sendRequest(kafka.network.RequestChannel.Request)"/>
        /// </summary>
        /// <param name="request"><see cref="Kafka.Network.RequestChannel.Request"/></param>
        public void SendRequest(Kafka.Network.RequestChannel.Request request)
        {
            IExecute("sendRequest", request);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/RequestChannel.html#sendResponse(kafka.network.RequestChannel.Response)"/>
        /// </summary>
        /// <param name="response"><see cref="Kafka.Network.RequestChannel.Response"/></param>
        public void SendResponseMethod(Kafka.Network.RequestChannel.Response response)
        {
            IExecute("sendResponse", response);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/RequestChannel.html#sendShutdownRequest()"/>
        /// </summary>
        public void SendShutdownRequest()
        {
            IExecute("sendShutdownRequest");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/RequestChannel.html#shutdown()"/>
        /// </summary>
        public void Shutdown()
        {
            IExecute("shutdown");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/RequestChannel.html#startThrottling(kafka.network.RequestChannel.Request)"/>
        /// </summary>
        /// <param name="request"><see cref="Kafka.Network.RequestChannel.Request"/></param>
        public void StartThrottling(Kafka.Network.RequestChannel.Request request)
        {
            IExecute("startThrottling", request);
        }

        #endregion

        #region Nested classes
        #region BaseRequest
        public partial class BaseRequest
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region CloseConnectionResponse
        public partial class CloseConnectionResponse
        {
            #region Constructors
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/RequestChannel.CloseConnectionResponse.html#%3Cinit%3E(kafka.network.RequestChannel.Request)"/>
            /// </summary>
            /// <param name="request"><see cref="Kafka.Network.RequestChannel.Request"/></param>
            public CloseConnectionResponse(Kafka.Network.RequestChannel.Request request)
                : base(request)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region EndThrottlingResponse
        public partial class EndThrottlingResponse
        {
            #region Constructors
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/RequestChannel.EndThrottlingResponse.html#%3Cinit%3E(kafka.network.RequestChannel.Request)"/>
            /// </summary>
            /// <param name="request"><see cref="Kafka.Network.RequestChannel.Request"/></param>
            public EndThrottlingResponse(Kafka.Network.RequestChannel.Request request)
                : base(request)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region Metrics
        public partial class Metrics
        {
            #region Constructors
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/RequestChannel.Metrics.html#%3Cinit%3E(org.apache.kafka.common.message.ApiMessageType.ListenerType)"/>
            /// </summary>
            /// <param name="scope"><see cref="Org.Apache.Kafka.Common.Message.ApiMessageType.ListenerType"/></param>
            public Metrics(Org.Apache.Kafka.Common.Message.ApiMessageType.ListenerType scope)
                : base(scope)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/RequestChannel.Metrics.html#apply(java.lang.String)"/>
            /// </summary>
            /// <param name="metricName"><see cref="string"/></param>
            /// <returns><see cref="Kafka.Network.RequestMetrics"/></returns>
            public Kafka.Network.RequestMetrics Apply(string metricName)
            {
                return IExecute<Kafka.Network.RequestMetrics>("apply", metricName);
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/RequestChannel.Metrics.html#close()"/>
            /// </summary>
            public void Close()
            {
                IExecute("close");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region NoOpResponse
        public partial class NoOpResponse
        {
            #region Constructors
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/RequestChannel.NoOpResponse.html#%3Cinit%3E(kafka.network.RequestChannel.Request)"/>
            /// </summary>
            /// <param name="request"><see cref="Kafka.Network.RequestChannel.Request"/></param>
            public NoOpResponse(Kafka.Network.RequestChannel.Request request)
                : base(request)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region Request
        public partial class Request
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/RequestChannel.Request.html#apiLocalCompleteTimeNanos()"/> 
            /// </summary>
            public long ApiLocalCompleteTimeNanos
            {
                get { return IExecute<long>("apiLocalCompleteTimeNanos"); }
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/RequestChannel.Request.html#apiThrottleTimeMs()"/> 
            /// </summary>
            public long ApiThrottleTimeMs
            {
                get { return IExecute<long>("apiThrottleTimeMs"); }
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/RequestChannel.Request.html#buffer()"/> 
            /// </summary>
            public Java.Nio.ByteBuffer Buffer
            {
                get { return IExecute<Java.Nio.ByteBuffer>("buffer"); }
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/RequestChannel.Request.html#context()"/> 
            /// </summary>
            public Org.Apache.Kafka.Common.Requests.RequestContext Context
            {
                get { return IExecute<Org.Apache.Kafka.Common.Requests.RequestContext>("context"); }
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/RequestChannel.Request.html#header()"/> 
            /// </summary>
            public Org.Apache.Kafka.Common.Requests.RequestHeader Header
            {
                get { return IExecute<Org.Apache.Kafka.Common.Requests.RequestHeader>("header"); }
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/RequestChannel.Request.html#headerForLoggingOrThrottling()"/> 
            /// </summary>
            public Org.Apache.Kafka.Common.Requests.RequestHeader HeaderForLoggingOrThrottling
            {
                get { return IExecute<Org.Apache.Kafka.Common.Requests.RequestHeader>("headerForLoggingOrThrottling"); }
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/RequestChannel.Request.html#isForwarded()"/> 
            /// </summary>
            public bool IsForwarded
            {
                get { return IExecute<bool>("isForwarded"); }
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/RequestChannel.Request.html#loggableRequest()"/> 
            /// </summary>
            public Org.Apache.Kafka.Common.Requests.AbstractRequest LoggableRequest
            {
                get { return IExecute<Org.Apache.Kafka.Common.Requests.AbstractRequest>("loggableRequest"); }
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/RequestChannel.Request.html#memoryPool()"/> 
            /// </summary>
            public Org.Apache.Kafka.Common.Memory.MemoryPool MemoryPool
            {
                get { return IExecute<Org.Apache.Kafka.Common.Memory.MemoryPool>("memoryPool"); }
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/RequestChannel.Request.html#messageConversionsTimeNanos()"/> 
            /// </summary>
            public long MessageConversionsTimeNanos
            {
                get { return IExecute<long>("messageConversionsTimeNanos"); }
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/RequestChannel.Request.html#processor()"/> 
            /// </summary>
            public int Processor
            {
                get { return IExecute<int>("processor"); }
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/RequestChannel.Request.html#requestDequeueTimeNanos()"/> 
            /// </summary>
            public long RequestDequeueTimeNanos
            {
                get { return IExecute<long>("requestDequeueTimeNanos"); }
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/RequestChannel.Request.html#requestThreadTimeNanos()"/> 
            /// </summary>
            public long RequestThreadTimeNanos
            {
                get { return IExecute<long>("requestThreadTimeNanos"); }
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/RequestChannel.Request.html#responseCompleteTimeNanos()"/> 
            /// </summary>
            public long ResponseCompleteTimeNanos
            {
                get { return IExecute<long>("responseCompleteTimeNanos"); }
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/RequestChannel.Request.html#responseDequeueTimeNanos()"/> 
            /// </summary>
            public long ResponseDequeueTimeNanos
            {
                get { return IExecute<long>("responseDequeueTimeNanos"); }
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/RequestChannel.Request.html#sizeInBytes()"/> 
            /// </summary>
            public int SizeInBytes
            {
                get { return IExecute<int>("sizeInBytes"); }
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/RequestChannel.Request.html#sizeOfBodyInBytes()"/> 
            /// </summary>
            public int SizeOfBodyInBytes
            {
                get { return IExecute<int>("sizeOfBodyInBytes"); }
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/RequestChannel.Request.html#startTimeNanos()"/> 
            /// </summary>
            public long StartTimeNanos
            {
                get { return IExecute<long>("startTimeNanos"); }
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/RequestChannel.Request.html#temporaryMemoryBytes()"/> 
            /// </summary>
            public long TemporaryMemoryBytes
            {
                get { return IExecute<long>("temporaryMemoryBytes"); }
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/RequestChannel.Request.html#requestDesc(boolean)"/>
            /// </summary>
            /// <param name="details"><see cref="bool"/></param>
            /// <returns><see cref="string"/></returns>
            public string RequestDesc(bool details)
            {
                return IExecute<string>("requestDesc", details);
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/RequestChannel.Request.html#session()"/>
            /// </summary>

            /// <returns><see cref="Kafka.Network.RequestChannel.Session"/></returns>
            public Kafka.Network.RequestChannel.Session SessionMethod()
            {
                return IExecute<Kafka.Network.RequestChannel.Session>("session");
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/RequestChannel.Request.html#buildResponseSend(org.apache.kafka.common.requests.AbstractResponse)"/>
            /// </summary>
            /// <param name="abstractResponse"><see cref="Org.Apache.Kafka.Common.Requests.AbstractResponse"/></param>
            /// <returns><see cref="Org.Apache.Kafka.Common.Network.Send"/></returns>
            public Org.Apache.Kafka.Common.Network.Send BuildResponseSend(Org.Apache.Kafka.Common.Requests.AbstractResponse abstractResponse)
            {
                return IExecute<Org.Apache.Kafka.Common.Network.Send>("buildResponseSend", abstractResponse);
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/RequestChannel.Request.html#releaseBuffer()"/>
            /// </summary>
            public void ReleaseBuffer()
            {
                IExecute("releaseBuffer");
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/RequestChannel.Request.html#updateRequestMetrics(long,kafka.network.RequestChannel.Response)"/>
            /// </summary>
            /// <param name="networkThreadTimeNanos"><see cref="long"/></param>
            /// <param name="response"><see cref="Kafka.Network.RequestChannel.Response"/></param>
            public void UpdateRequestMetrics(long networkThreadTimeNanos, Kafka.Network.RequestChannel.Response response)
            {
                IExecute("updateRequestMetrics", networkThreadTimeNanos, response);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region Response
        public partial class Response
        {
            #region Constructors
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/RequestChannel.Response.html#%3Cinit%3E(kafka.network.RequestChannel.Request)"/>
            /// </summary>
            /// <param name="request"><see cref="Kafka.Network.RequestChannel.Request"/></param>
            public Response(Kafka.Network.RequestChannel.Request request)
                : base(request)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/RequestChannel.Response.html#processor()"/> 
            /// </summary>
            public int Processor
            {
                get { return IExecute<int>("processor"); }
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/RequestChannel.Response.html#request()"/>
            /// </summary>

            /// <returns><see cref="Kafka.Network.RequestChannel.Request"/></returns>
            public Kafka.Network.RequestChannel.Request RequestMethod()
            {
                return IExecute<Kafka.Network.RequestChannel.Request>("request");
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region SendResponse
        public partial class SendResponse
        {
            #region Constructors

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/RequestChannel.SendResponse.html#responseSend()"/> 
            /// </summary>
            public Org.Apache.Kafka.Common.Network.Send ResponseSend
            {
                get { return IExecute<Org.Apache.Kafka.Common.Network.Send>("responseSend"); }
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region Session
        public partial class Session
        {
            #region Constructors
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/RequestChannel.Session.html#%3Cinit%3E(org.apache.kafka.common.security.auth.KafkaPrincipal,java.net.InetAddress)"/>
            /// </summary>
            /// <param name="principal"><see cref="Org.Apache.Kafka.Common.Security.Auth.KafkaPrincipal"/></param>
            /// <param name="clientAddress"><see cref="Java.Net.InetAddress"/></param>
            public Session(Org.Apache.Kafka.Common.Security.Auth.KafkaPrincipal principal, Java.Net.InetAddress clientAddress)
                : base(principal, clientAddress)
            {
            }

            #endregion

            #region Class/Interface conversion operators
            /// <summary>
            /// Converter from <see cref="Kafka.Network.RequestChannel.Session"/> to <see cref="Java.Io.Serializable"/>
            /// </summary>
            public static implicit operator Java.Io.Serializable(Kafka.Network.RequestChannel.Session t) => t.Cast<Java.Io.Serializable>();

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/RequestChannel.Session.html#clientAddress()"/> 
            /// </summary>
            public Java.Net.InetAddress ClientAddress
            {
                get { return IExecute<Java.Net.InetAddress>("clientAddress"); }
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/RequestChannel.Session.html#principal()"/> 
            /// </summary>
            public Org.Apache.Kafka.Common.Security.Auth.KafkaPrincipal Principal
            {
                get { return IExecute<Org.Apache.Kafka.Common.Security.Auth.KafkaPrincipal>("principal"); }
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/RequestChannel.Session.html#productArity()"/> 
            /// </summary>
            public int ProductArity
            {
                get { return IExecute<int>("productArity"); }
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/RequestChannel.Session.html#productPrefix()"/> 
            /// </summary>
            public string ProductPrefix
            {
                get { return IExecute<string>("productPrefix"); }
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/RequestChannel.Session.html#sanitizedUser()"/> 
            /// </summary>
            public string SanitizedUser
            {
                get { return IExecute<string>("sanitizedUser"); }
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/RequestChannel.Session.html#canEqual(java.lang.Object)"/>
            /// </summary>
            /// <param name="x$1"><see cref="object"/></param>
            /// <returns><see cref="bool"/></returns>
            public bool CanEqual(object x_1)
            {
                return IExecute<bool>("canEqual", x_1);
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/RequestChannel.Session.html#productElement(int)"/>
            /// </summary>
            /// <param name="x$1"><see cref="int"/></param>
            /// <returns><see cref="object"/></returns>
            public object ProductElement(int x_1)
            {
                return IExecute("productElement", x_1);
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/RequestChannel.Session.html#productElementName(int)"/>
            /// </summary>
            /// <param name="x$1"><see cref="int"/></param>
            /// <returns><see cref="string"/></returns>
            public string ProductElementName(int x_1)
            {
                return IExecute<string>("productElementName", x_1);
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/RequestChannel.Session.html#copy(org.apache.kafka.common.security.auth.KafkaPrincipal,java.net.InetAddress)"/>
            /// </summary>
            /// <param name="principal"><see cref="Org.Apache.Kafka.Common.Security.Auth.KafkaPrincipal"/></param>
            /// <param name="clientAddress"><see cref="Java.Net.InetAddress"/></param>
            /// <returns><see cref="Kafka.Network.RequestChannel.Session"/></returns>
            public Kafka.Network.RequestChannel.Session Copy(Org.Apache.Kafka.Common.Security.Auth.KafkaPrincipal principal, Java.Net.InetAddress clientAddress)
            {
                return IExecute<Kafka.Network.RequestChannel.Session>("copy", principal, clientAddress);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

        #region StartThrottlingResponse
        public partial class StartThrottlingResponse
        {
            #region Constructors
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/RequestChannel.StartThrottlingResponse.html#%3Cinit%3E(kafka.network.RequestChannel.Request)"/>
            /// </summary>
            /// <param name="request"><see cref="Kafka.Network.RequestChannel.Request"/></param>
            public StartThrottlingResponse(Kafka.Network.RequestChannel.Request request)
                : base(request)
            {
            }

            #endregion

            #region Class/Interface conversion operators

            #endregion

            #region Fields

            #endregion

            #region Static methods

            #endregion

            #region Instance methods

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}