/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka_2.13-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Kafka.Network
{
    #region Acceptor
    public partial class Acceptor
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/Acceptor.html#%3Cinit%3E(kafka.network.SocketServer,kafka.cluster.EndPoint,kafka.server.KafkaConfig,int,kafka.network.ConnectionQuotas,org.apache.kafka.common.utils.Time,boolean,kafka.network.RequestChannel,org.apache.kafka.common.metrics.Metrics,kafka.security.CredentialProvider,org.apache.kafka.common.utils.LogContext,org.apache.kafka.common.memory.MemoryPool,kafka.server.ApiVersionManager)"/>
        /// </summary>
        /// <param name="socketServer"><see cref="Kafka.Network.SocketServer"/></param>
        /// <param name="endPoint"><see cref="Kafka.Cluster.EndPoint"/></param>
        /// <param name="config"><see cref="Kafka.Server.KafkaConfig"/></param>
        /// <param name="nodeId"><see cref="int"/></param>
        /// <param name="connectionQuotas"><see cref="Kafka.Network.ConnectionQuotas"/></param>
        /// <param name="time"><see cref="Org.Apache.Kafka.Common.Utils.Time"/></param>
        /// <param name="isPrivilegedListener"><see cref="bool"/></param>
        /// <param name="requestChannel"><see cref="Kafka.Network.RequestChannel"/></param>
        /// <param name="metrics"><see cref="Org.Apache.Kafka.Common.Metrics.Metrics"/></param>
        /// <param name="credentialProvider"><see cref="Kafka.Security.CredentialProvider"/></param>
        /// <param name="logContext"><see cref="Org.Apache.Kafka.Common.Utils.LogContext"/></param>
        /// <param name="memoryPool"><see cref="Org.Apache.Kafka.Common.Memory.MemoryPool"/></param>
        /// <param name="apiVersionManager"><see cref="Kafka.Server.ApiVersionManager"/></param>
        public Acceptor(Kafka.Network.SocketServer socketServer, Kafka.Cluster.EndPoint endPoint, Kafka.Server.KafkaConfig config, int nodeId, Kafka.Network.ConnectionQuotas connectionQuotas, Org.Apache.Kafka.Common.Utils.Time time, bool isPrivilegedListener, Kafka.Network.RequestChannel requestChannel, Org.Apache.Kafka.Common.Metrics.Metrics metrics, Kafka.Security.CredentialProvider credentialProvider, Org.Apache.Kafka.Common.Utils.LogContext logContext, Org.Apache.Kafka.Common.Memory.MemoryPool memoryPool, Kafka.Server.ApiVersionManager apiVersionManager)
            : base(socketServer, endPoint, config, nodeId, connectionQuotas, time, isPrivilegedListener, requestChannel, metrics, credentialProvider, logContext, memoryPool, apiVersionManager)
        {
        }

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Kafka.Network.Acceptor"/> to <see cref="Java.Lang.Runnable"/>
        /// </summary>
        public static implicit operator Java.Lang.Runnable(Kafka.Network.Acceptor t) => t.Cast<Java.Lang.Runnable>();
        /// <summary>
        /// Converter from <see cref="Kafka.Network.Acceptor"/> to <see cref="Kafka.Metrics.KafkaMetricsGroup"/>
        /// </summary>
        public static implicit operator Kafka.Metrics.KafkaMetricsGroup(Kafka.Network.Acceptor t) => t.Cast<Kafka.Metrics.KafkaMetricsGroup>();

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/Acceptor.html#config()"/> 
        /// </summary>
        public Kafka.Server.KafkaConfig Config
        {
            get { return IExecute<Kafka.Server.KafkaConfig>("config"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/Acceptor.html#connectionQuotas()"/> 
        /// </summary>
        public Kafka.Network.ConnectionQuotas ConnectionQuotas
        {
            get { return IExecute<Kafka.Network.ConnectionQuotas>("connectionQuotas"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/Acceptor.html#endPoint()"/> 
        /// </summary>
        public Kafka.Cluster.EndPoint EndPoint
        {
            get { return IExecute<Kafka.Cluster.EndPoint>("endPoint"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/Acceptor.html#isDebugEnabled()"/> 
        /// </summary>
        public bool IsDebugEnabled
        {
            get { return IExecute<bool>("isDebugEnabled"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/Acceptor.html#isTraceEnabled()"/> 
        /// </summary>
        public bool IsTraceEnabled
        {
            get { return IExecute<bool>("isTraceEnabled"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/Acceptor.html#logger()"/> 
        /// </summary>
        public Com.Typesafe.Scalalogging.Logger Logger
        {
            get { return IExecute<Com.Typesafe.Scalalogging.Logger>("logger"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/Acceptor.html#loggerName()"/> 
        /// </summary>
        public string LoggerName
        {
            get { return IExecute<string>("loggerName"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/Acceptor.html#logIdent()"/> 
        /// </summary>
        public string LogIdent
        {
            get { return IExecute<string>("logIdent"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/Acceptor.html#metricPrefix()"/> 
        /// </summary>
        public string MetricPrefix
        {
            get { return IExecute<string>("metricPrefix"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/Acceptor.html#serverChannel()"/> 
        /// </summary>
        public Java.Nio.Channels.ServerSocketChannel ServerChannel
        {
            get { return IExecute<Java.Nio.Channels.ServerSocketChannel>("serverChannel"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/Acceptor.html#shouldRun()"/> 
        /// </summary>
        public Java.Util.Concurrent.Atomic.AtomicBoolean ShouldRun
        {
            get { return IExecute<Java.Util.Concurrent.Atomic.AtomicBoolean>("shouldRun"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/Acceptor.html#socketServer()"/> 
        /// </summary>
        public Kafka.Network.SocketServer SocketServer
        {
            get { return IExecute<Kafka.Network.SocketServer>("socketServer"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/Acceptor.html#startFuture()"/> 
        /// </summary>
        public Java.Util.Concurrent.CompletableFuture<Java.Lang.Void> StartFuture
        {
            get { return IExecute<Java.Util.Concurrent.CompletableFuture<Java.Lang.Void>>("startFuture"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/Acceptor.html#thread()"/> 
        /// </summary>
        public Org.Apache.Kafka.Common.Utils.KafkaThread Thread
        {
            get { return IExecute<Org.Apache.Kafka.Common.Utils.KafkaThread>("thread"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/Acceptor.html#threadPrefix()"/> 
        /// </summary>
        public string ThreadPrefix
        {
            get { return IExecute<string>("threadPrefix"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/Acceptor.html#newMeter(com.yammer.metrics.core.MetricName,java.lang.String,java.util.concurrent.TimeUnit)"/>
        /// </summary>
        /// <param name="metricName"><see cref="Com.Yammer.Metrics.Core.MetricName"/></param>
        /// <param name="eventType"><see cref="string"/></param>
        /// <param name="timeUnit"><see cref="Java.Util.Concurrent.TimeUnit"/></param>
        /// <returns><see cref="Com.Yammer.Metrics.Core.Meter"/></returns>
        public Com.Yammer.Metrics.Core.Meter NewMeter(Com.Yammer.Metrics.Core.MetricName metricName, string eventType, Java.Util.Concurrent.TimeUnit timeUnit)
        {
            return IExecute<Com.Yammer.Metrics.Core.Meter>("newMeter", metricName, eventType, timeUnit);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/Acceptor.html#msgWithLogIdent(java.lang.String)"/>
        /// </summary>
        /// <param name="msg"><see cref="string"/></param>
        /// <returns><see cref="string"/></returns>
        public string MsgWithLogIdent(string msg)
        {
            return IExecute<string>("msgWithLogIdent", msg);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/Acceptor.html#DelayedCloseSocket()"/>
        /// </summary>

        /// <returns><see cref="Kafka.Network.Acceptor.DelayedCloseSocket."/></returns>
        public Kafka.Network.Acceptor.DelayedCloseSocket. DelayedCloseSocketMethod()
        {
            return IExecute<Kafka.Network.Acceptor.DelayedCloseSocket.>("DelayedCloseSocket");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/Acceptor.html#newProcessor(int,org.apache.kafka.common.network.ListenerName,org.apache.kafka.common.security.auth.SecurityProtocol)"/>
        /// </summary>
        /// <param name="id"><see cref="int"/></param>
        /// <param name="listenerName"><see cref="Org.Apache.Kafka.Common.Network.ListenerName"/></param>
        /// <param name="securityProtocol"><see cref="Org.Apache.Kafka.Common.Security.Auth.SecurityProtocol"/></param>
        /// <returns><see cref="Kafka.Network.Processor"/></returns>
        public Kafka.Network.Processor NewProcessor(int id, Org.Apache.Kafka.Common.Network.ListenerName listenerName, Org.Apache.Kafka.Common.Security.Auth.SecurityProtocol securityProtocol)
        {
            return IExecute<Kafka.Network.Processor>("newProcessor", id, listenerName, securityProtocol);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/Acceptor.html#removeProcessors(int)"/>
        /// </summary>
        /// <param name="removeCount"><see cref="int"/></param>
        public void RemoveProcessors(int removeCount)
        {
            IExecute("removeProcessors", removeCount);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/Acceptor.html#addProcessors(int)"/>
        /// </summary>
        /// <param name="toCreate"><see cref="int"/></param>
        public void AddProcessors(int toCreate)
        {
            IExecute("addProcessors", toCreate);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/Acceptor.html#beginShutdown()"/>
        /// </summary>
        public void BeginShutdown()
        {
            IExecute("beginShutdown");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/Acceptor.html#close()"/>
        /// </summary>
        public void Close()
        {
            IExecute("close");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/Acceptor.html#configureAcceptedSocketChannel(java.nio.channels.SocketChannel)"/>
        /// </summary>
        /// <param name="socketChannel"><see cref="Java.Nio.Channels.SocketChannel"/></param>
        public void ConfigureAcceptedSocketChannel(Java.Nio.Channels.SocketChannel socketChannel)
        {
            IExecute("configureAcceptedSocketChannel", socketChannel);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/Acceptor.html#run()"/>
        /// </summary>
        public void Run()
        {
            IExecute("run");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/Acceptor.html#wakeup()"/>
        /// </summary>
        public void Wakeup()
        {
            IExecute("wakeup");
        }

        #endregion

        #region Nested classes
        #region DelayedCloseSocket
        public partial class DelayedCloseSocket
        {
            #region Constructors
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/Acceptor.DelayedCloseSocket.html#%3Cinit%3E(kafka.network.Acceptor,java.nio.channels.SocketChannel,long)"/>
            /// </summary>
            /// <param name="$outer"><see cref="Kafka.Network.Acceptor"/></param>
            /// <param name="socket"><see cref="Java.Nio.Channels.SocketChannel"/></param>
            /// <param name="endThrottleTimeMs"><see cref="long"/></param>
            public DelayedCloseSocket(Kafka.Network.Acceptor _outer, Java.Nio.Channels.SocketChannel socket, long endThrottleTimeMs)
                : base(_outer, socket, endThrottleTimeMs)
            {
            }

            #endregion

            #region Class/Interface conversion operators
            /// <summary>
            /// Converter from <see cref="Kafka.Network.Acceptor.DelayedCloseSocket"/> to <see cref="Java.Io.Serializable"/>
            /// </summary>
            public static implicit operator Java.Io.Serializable(Kafka.Network.Acceptor.DelayedCloseSocket t) => t.Cast<Java.Io.Serializable>();

            #endregion

            #region Fields
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/Acceptor.DelayedCloseSocket.html#$outer"/>
            /// </summary>
            public Kafka.Network.Acceptor $outer { get { return IGetField<Kafka.Network.Acceptor>("$outer"); } }

            #endregion

            #region Static methods

            #endregion

            #region Instance methods
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/Acceptor.DelayedCloseSocket.html#endThrottleTimeMs()"/> 
            /// </summary>
            public long EndThrottleTimeMs
            {
                get { return IExecute<long>("endThrottleTimeMs"); }
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/Acceptor.DelayedCloseSocket.html#productArity()"/> 
            /// </summary>
            public int ProductArity
            {
                get { return IExecute<int>("productArity"); }
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/Acceptor.DelayedCloseSocket.html#productPrefix()"/> 
            /// </summary>
            public string ProductPrefix
            {
                get { return IExecute<string>("productPrefix"); }
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/Acceptor.DelayedCloseSocket.html#socket()"/> 
            /// </summary>
            public Java.Nio.Channels.SocketChannel Socket
            {
                get { return IExecute<Java.Nio.Channels.SocketChannel>("socket"); }
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/Acceptor.DelayedCloseSocket.html#canEqual(java.lang.Object)"/>
            /// </summary>
            /// <param name="x$1"><see cref="object"/></param>
            /// <returns><see cref="bool"/></returns>
            public bool CanEqual(object x_1)
            {
                return IExecute<bool>("canEqual", x_1);
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/Acceptor.DelayedCloseSocket.html#compare(java.lang.Object)"/>
            /// </summary>
            /// <param name="that"><see cref="object"/></param>
            /// <returns><see cref="int"/></returns>
            public int Compare(object that)
            {
                return IExecute<int>("compare", that);
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/Acceptor.DelayedCloseSocket.html#compare(kafka.network.Acceptor.DelayedCloseSocket)"/>
            /// </summary>
            /// <param name="that"><see cref="Kafka.Network.Acceptor.DelayedCloseSocket"/></param>
            /// <returns><see cref="int"/></returns>
            public int Compare(Kafka.Network.Acceptor.DelayedCloseSocket that)
            {
                return IExecute<int>("compare", that);
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/Acceptor.DelayedCloseSocket.html#compareTo(java.lang.Object)"/>
            /// </summary>
            /// <param name="that"><see cref="object"/></param>
            /// <returns><see cref="int"/></returns>
            public int CompareTo(object that)
            {
                return IExecute<int>("compareTo", that);
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/Acceptor.DelayedCloseSocket.html#productElement(int)"/>
            /// </summary>
            /// <param name="x$1"><see cref="int"/></param>
            /// <returns><see cref="object"/></returns>
            public object ProductElement(int x_1)
            {
                return IExecute("productElement", x_1);
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/Acceptor.DelayedCloseSocket.html#productElementName(int)"/>
            /// </summary>
            /// <param name="x$1"><see cref="int"/></param>
            /// <returns><see cref="string"/></returns>
            public string ProductElementName(int x_1)
            {
                return IExecute<string>("productElementName", x_1);
            }
            /// <summary>
            /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/Acceptor.DelayedCloseSocket.html#copy(java.nio.channels.SocketChannel,long)"/>
            /// </summary>
            /// <param name="socket"><see cref="Java.Nio.Channels.SocketChannel"/></param>
            /// <param name="endThrottleTimeMs"><see cref="long"/></param>
            /// <returns><see cref="Kafka.Network.Acceptor.DelayedCloseSocket"/></returns>
            public Kafka.Network.Acceptor.DelayedCloseSocket Copy(Java.Nio.Channels.SocketChannel socket, long endThrottleTimeMs)
            {
                return IExecute<Kafka.Network.Acceptor.DelayedCloseSocket>("copy", socket, endThrottleTimeMs);
            }

            #endregion

            #region Nested classes

            #endregion

            // TODO: complete the class
        }
        #endregion

    
        #endregion

        // TODO: complete the class
    }
    #endregion
}