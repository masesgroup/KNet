/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka_2.13-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Kafka.Network
{
    #region SocketServer
    public partial class SocketServer
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/SocketServer.html#%3Cinit%3E(kafka.server.KafkaConfig,org.apache.kafka.common.metrics.Metrics,org.apache.kafka.common.utils.Time,kafka.security.CredentialProvider,kafka.server.ApiVersionManager)"/>
        /// </summary>
        /// <param name="config"><see cref="Kafka.Server.KafkaConfig"/></param>
        /// <param name="metrics"><see cref="Org.Apache.Kafka.Common.Metrics.Metrics"/></param>
        /// <param name="time"><see cref="Org.Apache.Kafka.Common.Utils.Time"/></param>
        /// <param name="credentialProvider"><see cref="Kafka.Security.CredentialProvider"/></param>
        /// <param name="apiVersionManager"><see cref="Kafka.Server.ApiVersionManager"/></param>
        public SocketServer(Kafka.Server.KafkaConfig config, Org.Apache.Kafka.Common.Metrics.Metrics metrics, Org.Apache.Kafka.Common.Utils.Time time, Kafka.Security.CredentialProvider credentialProvider, Kafka.Server.ApiVersionManager apiVersionManager)
            : base(config, metrics, time, credentialProvider, apiVersionManager)
        {
        }

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Kafka.Network.SocketServer"/> to <see cref="Kafka.Metrics.KafkaMetricsGroup"/>
        /// </summary>
        public static implicit operator Kafka.Metrics.KafkaMetricsGroup(Kafka.Network.SocketServer t) => t.Cast<Kafka.Metrics.KafkaMetricsGroup>();
        /// <summary>
        /// Converter from <see cref="Kafka.Network.SocketServer"/> to <see cref="Kafka.Server.BrokerReconfigurable"/>
        /// </summary>
        public static implicit operator Kafka.Server.BrokerReconfigurable(Kafka.Network.SocketServer t) => t.Cast<Kafka.Server.BrokerReconfigurable>();

        #endregion

        #region Fields

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/SocketServer.html#MetricsGroup()"/> 
        /// </summary>
        public static string MetricsGroup
        {
            get { return SExecute<string>(LocalBridgeClazz, "MetricsGroup"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/SocketServer.html#chainFuture(java.util.concurrent.CompletableFuture,java.util.concurrent.CompletableFuture)"/>
        /// </summary>
        /// <param name="sourceFuture"><see cref="Java.Util.Concurrent.CompletableFuture"/></param>
        /// <param name="destinationFuture"><see cref="Java.Util.Concurrent.CompletableFuture"/></param>
        public static void ChainFuture(Java.Util.Concurrent.CompletableFuture<Java.Lang.Void> sourceFuture, Java.Util.Concurrent.CompletableFuture<Java.Lang.Void> destinationFuture)
        {
            SExecute(LocalBridgeClazz, "chainFuture", sourceFuture, destinationFuture);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/SocketServer.html#closeSocket(java.nio.channels.SocketChannel,kafka.utils.Logging)"/>
        /// </summary>
        /// <param name="channel"><see cref="Java.Nio.Channels.SocketChannel"/></param>
        /// <param name="logging"><see cref="Kafka.Utils.Logging"/></param>
        public static void CloseSocket(Java.Nio.Channels.SocketChannel channel, Kafka.Utils.Logging logging)
        {
            SExecute(LocalBridgeClazz, "closeSocket", channel, logging);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/SocketServer.html#apiVersionManager()"/> 
        /// </summary>
        public Kafka.Server.ApiVersionManager ApiVersionManager
        {
            get { return IExecute<Kafka.Server.ApiVersionManager>("apiVersionManager"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/SocketServer.html#config()"/> 
        /// </summary>
        public Kafka.Server.KafkaConfig Config
        {
            get { return IExecute<Kafka.Server.KafkaConfig>("config"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/SocketServer.html#connectionQuotas()"/> 
        /// </summary>
        public Kafka.Network.ConnectionQuotas ConnectionQuotas
        {
            get { return IExecute<Kafka.Network.ConnectionQuotas>("connectionQuotas"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/SocketServer.html#credentialProvider()"/> 
        /// </summary>
        public Kafka.Security.CredentialProvider CredentialProvider
        {
            get { return IExecute<Kafka.Security.CredentialProvider>("credentialProvider"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/SocketServer.html#dataPlaneAcceptors()"/> 
        /// </summary>
        public Java.Util.Concurrent.ConcurrentHashMap<Kafka.Cluster.EndPoint, Kafka.Network.DataPlaneAcceptor> DataPlaneAcceptors
        {
            get { return IExecute<Java.Util.Concurrent.ConcurrentHashMap<Kafka.Cluster.EndPoint, Kafka.Network.DataPlaneAcceptor>>("dataPlaneAcceptors"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/SocketServer.html#dataPlaneRequestChannel()"/> 
        /// </summary>
        public Kafka.Network.RequestChannel DataPlaneRequestChannel
        {
            get { return IExecute<Kafka.Network.RequestChannel>("dataPlaneRequestChannel"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/SocketServer.html#isDebugEnabled()"/> 
        /// </summary>
        public bool IsDebugEnabled
        {
            get { return IExecute<bool>("isDebugEnabled"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/SocketServer.html#isTraceEnabled()"/> 
        /// </summary>
        public bool IsTraceEnabled
        {
            get { return IExecute<bool>("isTraceEnabled"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/SocketServer.html#logger()"/> 
        /// </summary>
        public Com.Typesafe.Scalalogging.Logger Logger
        {
            get { return IExecute<Com.Typesafe.Scalalogging.Logger>("logger"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/SocketServer.html#loggerName()"/> 
        /// </summary>
        public string LoggerName
        {
            get { return IExecute<string>("loggerName"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/SocketServer.html#logIdent()"/> 
        /// </summary>
        public string LogIdent
        {
            get { return IExecute<string>("logIdent"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/SocketServer.html#metrics()"/> 
        /// </summary>
        public Org.Apache.Kafka.Common.Metrics.Metrics Metrics
        {
            get { return IExecute<Org.Apache.Kafka.Common.Metrics.Metrics>("metrics"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/SocketServer.html#nextProcessorId()"/> 
        /// </summary>
        public int NextProcessorId
        {
            get { return IExecute<int>("nextProcessorId"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/SocketServer.html#nodeId()"/> 
        /// </summary>
        public int NodeId
        {
            get { return IExecute<int>("nodeId"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/SocketServer.html#time()"/> 
        /// </summary>
        public Org.Apache.Kafka.Common.Utils.Time Time
        {
            get { return IExecute<Org.Apache.Kafka.Common.Utils.Time>("time"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/SocketServer.html#newMeter(com.yammer.metrics.core.MetricName,java.lang.String,java.util.concurrent.TimeUnit)"/>
        /// </summary>
        /// <param name="metricName"><see cref="Com.Yammer.Metrics.Core.MetricName"/></param>
        /// <param name="eventType"><see cref="string"/></param>
        /// <param name="timeUnit"><see cref="Java.Util.Concurrent.TimeUnit"/></param>
        /// <returns><see cref="Com.Yammer.Metrics.Core.Meter"/></returns>
        public Com.Yammer.Metrics.Core.Meter NewMeter(Com.Yammer.Metrics.Core.MetricName metricName, string eventType, Java.Util.Concurrent.TimeUnit timeUnit)
        {
            return IExecute<Com.Yammer.Metrics.Core.Meter>("newMeter", metricName, eventType, timeUnit);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/SocketServer.html#boundPort(org.apache.kafka.common.network.ListenerName)"/>
        /// </summary>
        /// <param name="listenerName"><see cref="Org.Apache.Kafka.Common.Network.ListenerName"/></param>
        /// <returns><see cref="int"/></returns>
        public int BoundPort(Org.Apache.Kafka.Common.Network.ListenerName listenerName)
        {
            return IExecute<int>("boundPort", listenerName);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/SocketServer.html#connectionCount(java.net.InetAddress)"/>
        /// </summary>
        /// <param name="address"><see cref="Java.Net.InetAddress"/></param>
        /// <returns><see cref="int"/></returns>
        public int ConnectionCount(Java.Net.InetAddress address)
        {
            return IExecute<int>("connectionCount", address);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/SocketServer.html#msgWithLogIdent(java.lang.String)"/>
        /// </summary>
        /// <param name="msg"><see cref="string"/></param>
        /// <returns><see cref="string"/></returns>
        public string MsgWithLogIdent(string msg)
        {
            return IExecute<string>("msgWithLogIdent", msg);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/SocketServer.html#createDataPlaneAcceptor(kafka.cluster.EndPoint,boolean,kafka.network.RequestChannel)"/>
        /// </summary>
        /// <param name="endPoint"><see cref="Kafka.Cluster.EndPoint"/></param>
        /// <param name="isPrivilegedListener"><see cref="bool"/></param>
        /// <param name="requestChannel"><see cref="Kafka.Network.RequestChannel"/></param>
        /// <returns><see cref="Kafka.Network.DataPlaneAcceptor"/></returns>
        public Kafka.Network.DataPlaneAcceptor CreateDataPlaneAcceptor(Kafka.Cluster.EndPoint endPoint, bool isPrivilegedListener, Kafka.Network.RequestChannel requestChannel)
        {
            return IExecute<Kafka.Network.DataPlaneAcceptor>("createDataPlaneAcceptor", endPoint, isPrivilegedListener, requestChannel);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/SocketServer.html#createDataPlaneAcceptorAndProcessors(kafka.cluster.EndPoint)"/>
        /// </summary>
        /// <param name="endpoint"><see cref="Kafka.Cluster.EndPoint"/></param>
        public void CreateDataPlaneAcceptorAndProcessors(Kafka.Cluster.EndPoint endpoint)
        {
            IExecute("createDataPlaneAcceptorAndProcessors", endpoint);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/SocketServer.html#stopProcessingRequests()"/>
        /// </summary>
        public void StopProcessingRequests()
        {
            IExecute("stopProcessingRequests");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/SocketServer.html#reconfigure(kafka.server.KafkaConfig,kafka.server.KafkaConfig)"/>
        /// </summary>
        /// <param name="oldConfig"><see cref="Kafka.Server.KafkaConfig"/></param>
        /// <param name="newConfig"><see cref="Kafka.Server.KafkaConfig"/></param>
        public void Reconfigure(Kafka.Server.KafkaConfig oldConfig, Kafka.Server.KafkaConfig newConfig)
        {
            IExecute("reconfigure", oldConfig, newConfig);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/SocketServer.html#shutdown()"/>
        /// </summary>
        public void Shutdown()
        {
            IExecute("shutdown");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/network/SocketServer.html#validateReconfiguration(kafka.server.KafkaConfig)"/>
        /// </summary>
        /// <param name="newConfig"><see cref="Kafka.Server.KafkaConfig"/></param>
        public void ValidateReconfiguration(Kafka.Server.KafkaConfig newConfig)
        {
            IExecute("validateReconfiguration", newConfig);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}