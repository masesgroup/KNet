/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka_2.13-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Kafka.Cluster
{
    #region Partition
    public partial class Partition
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/cluster/Partition.html#%3Cinit%3E(org.apache.kafka.common.TopicPartition,long,org.apache.kafka.server.common.MetadataVersion,int,org.apache.kafka.common.utils.Time,kafka.cluster.AlterPartitionListener,kafka.cluster.DelayedOperations,kafka.server.MetadataCache,kafka.log.LogManager,kafka.server.AlterPartitionManager)"/>
        /// </summary>
        /// <param name="topicPartition"><see cref="Org.Apache.Kafka.Common.TopicPartition"/></param>
        /// <param name="replicaLagTimeMaxMs"><see cref="long"/></param>
        /// <param name="interBrokerProtocolVersion"><see cref="Org.Apache.Kafka.Server.Common.MetadataVersion"/></param>
        /// <param name="localBrokerId"><see cref="int"/></param>
        /// <param name="time"><see cref="Org.Apache.Kafka.Common.Utils.Time"/></param>
        /// <param name="alterPartitionListener"><see cref="Kafka.Cluster.AlterPartitionListener"/></param>
        /// <param name="delayedOperations"><see cref="Kafka.Cluster.DelayedOperations"/></param>
        /// <param name="metadataCache"><see cref="Kafka.Server.MetadataCache"/></param>
        /// <param name="logManager"><see cref="Kafka.Log.LogManager"/></param>
        /// <param name="alterIsrManager"><see cref="Kafka.Server.AlterPartitionManager"/></param>
        public Partition(Org.Apache.Kafka.Common.TopicPartition topicPartition, long replicaLagTimeMaxMs, Org.Apache.Kafka.Server.Common.MetadataVersion interBrokerProtocolVersion, int localBrokerId, Org.Apache.Kafka.Common.Utils.Time time, Kafka.Cluster.AlterPartitionListener alterPartitionListener, Kafka.Cluster.DelayedOperations delayedOperations, Kafka.Server.MetadataCache metadataCache, Kafka.Log.LogManager logManager, Kafka.Server.AlterPartitionManager alterIsrManager)
            : base(topicPartition, replicaLagTimeMaxMs, interBrokerProtocolVersion, localBrokerId, time, alterPartitionListener, delayedOperations, metadataCache, logManager, alterIsrManager)
        {
        }

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Kafka.Cluster.Partition"/> to <see cref="Kafka.Metrics.KafkaMetricsGroup"/>
        /// </summary>
        public static implicit operator Kafka.Metrics.KafkaMetricsGroup(Kafka.Cluster.Partition t) => t.Cast<Kafka.Metrics.KafkaMetricsGroup>();

        #endregion

        #region Fields

        #endregion

        #region Static methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/cluster/Partition.html#apply(org.apache.kafka.common.TopicPartition,org.apache.kafka.common.utils.Time,kafka.server.ReplicaManager)"/>
        /// </summary>
        /// <param name="topicPartition"><see cref="Org.Apache.Kafka.Common.TopicPartition"/></param>
        /// <param name="time"><see cref="Org.Apache.Kafka.Common.Utils.Time"/></param>
        /// <param name="replicaManager"><see cref="Kafka.Server.ReplicaManager"/></param>
        /// <returns><see cref="Kafka.Cluster.Partition"/></returns>
        public static Kafka.Cluster.Partition Apply(Org.Apache.Kafka.Common.TopicPartition topicPartition, Org.Apache.Kafka.Common.Utils.Time time, Kafka.Server.ReplicaManager replicaManager)
        {
            return SExecute<Kafka.Cluster.Partition>(LocalBridgeClazz, "apply", topicPartition, time, replicaManager);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/cluster/Partition.html#removeMetrics(org.apache.kafka.common.TopicPartition)"/>
        /// </summary>
        /// <param name="topicPartition"><see cref="Org.Apache.Kafka.Common.TopicPartition"/></param>
        public static void RemoveMetrics(Org.Apache.Kafka.Common.TopicPartition topicPartition)
        {
            SExecute(LocalBridgeClazz, "removeMetrics", topicPartition);
        }

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/cluster/Partition.html#activeProducerState()"/> 
        /// </summary>
        public Org.Apache.Kafka.Common.Message.DescribeProducersResponseData.PartitionResponse ActiveProducerState
        {
            get { return IExecute<Org.Apache.Kafka.Common.Message.DescribeProducersResponseData.PartitionResponse>("activeProducerState"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/cluster/Partition.html#assignmentState()"/> 
        /// </summary>
        public Kafka.Cluster.AssignmentState AssignmentState
        {
            get { return IExecute<Kafka.Cluster.AssignmentState>("assignmentState"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/cluster/Partition.html#futureLocalLogOrException()"/> 
        /// </summary>
        public Kafka.Log.UnifiedLog FutureLocalLogOrException
        {
            get { return IExecute<Kafka.Log.UnifiedLog>("futureLocalLogOrException"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/cluster/Partition.html#isAddingLocalReplica()"/> 
        /// </summary>
        public bool IsAddingLocalReplica
        {
            get { return IExecute<bool>("isAddingLocalReplica"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/cluster/Partition.html#isAtMinIsr()"/> 
        /// </summary>
        public bool IsAtMinIsr
        {
            get { return IExecute<bool>("isAtMinIsr"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/cluster/Partition.html#isDebugEnabled()"/> 
        /// </summary>
        public bool IsDebugEnabled
        {
            get { return IExecute<bool>("isDebugEnabled"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/cluster/Partition.html#isLeader()"/> 
        /// </summary>
        public bool IsLeader
        {
            get { return IExecute<bool>("isLeader"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/cluster/Partition.html#isReassigning()"/> 
        /// </summary>
        public bool IsReassigning
        {
            get { return IExecute<bool>("isReassigning"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/cluster/Partition.html#isTraceEnabled()"/> 
        /// </summary>
        public bool IsTraceEnabled
        {
            get { return IExecute<bool>("isTraceEnabled"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/cluster/Partition.html#isUnderMinIsr()"/> 
        /// </summary>
        public bool IsUnderMinIsr
        {
            get { return IExecute<bool>("isUnderMinIsr"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/cluster/Partition.html#isUnderReplicated()"/> 
        /// </summary>
        public bool IsUnderReplicated
        {
            get { return IExecute<bool>("isUnderReplicated"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/cluster/Partition.html#getLeaderEpoch()"/> 
        /// </summary>
        public int LeaderEpoch
        {
            get { return IExecute<int>("getLeaderEpoch"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/cluster/Partition.html#localLogOrException()"/> 
        /// </summary>
        public Kafka.Log.UnifiedLog LocalLogOrException
        {
            get { return IExecute<Kafka.Log.UnifiedLog>("localLogOrException"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/cluster/Partition.html#logger()"/> 
        /// </summary>
        public Com.Typesafe.Scalalogging.Logger Logger
        {
            get { return IExecute<Com.Typesafe.Scalalogging.Logger>("logger"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/cluster/Partition.html#loggerName()"/> 
        /// </summary>
        public string LoggerName
        {
            get { return IExecute<string>("loggerName"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/cluster/Partition.html#logIdent()"/> 
        /// </summary>
        public string LogIdent
        {
            get { return IExecute<string>("logIdent"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/cluster/Partition.html#logStartOffset()"/> 
        /// </summary>
        public long LogStartOffset
        {
            get { return IExecute<long>("logStartOffset"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/cluster/Partition.html#lowWatermarkIfLeader()"/> 
        /// </summary>
        public long LowWatermarkIfLeader
        {
            get { return IExecute<long>("lowWatermarkIfLeader"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/cluster/Partition.html#maybeReplaceCurrentWithFutureReplica()"/> 
        /// </summary>
        public bool MaybeReplaceCurrentWithFutureReplica
        {
            get { return IExecute<bool>("maybeReplaceCurrentWithFutureReplica"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/cluster/Partition.html#getPartitionEpoch()"/> 
        /// </summary>
        public int PartitionEpoch
        {
            get { return IExecute<int>("getPartitionEpoch"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/cluster/Partition.html#partitionId()"/> 
        /// </summary>
        public int PartitionId
        {
            get { return IExecute<int>("partitionId"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/cluster/Partition.html#partitionState()"/> 
        /// </summary>
        public Kafka.Cluster.PartitionState PartitionState
        {
            get { return IExecute<Kafka.Cluster.PartitionState>("partitionState"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/cluster/Partition.html#replicaLagTimeMaxMs()"/> 
        /// </summary>
        public long ReplicaLagTimeMaxMs
        {
            get { return IExecute<long>("replicaLagTimeMaxMs"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/cluster/Partition.html#topic()"/> 
        /// </summary>
        public string Topic
        {
            get { return IExecute<string>("topic"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/cluster/Partition.html#topicPartition()"/> 
        /// </summary>
        public Org.Apache.Kafka.Common.TopicPartition TopicPartition
        {
            get { return IExecute<Org.Apache.Kafka.Common.TopicPartition>("topicPartition"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/cluster/Partition.html#futureReplicaDirChanged(java.lang.String)"/>
        /// </summary>
        /// <param name="newDestinationDir"><see cref="string"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool FutureReplicaDirChanged(string newDestinationDir)
        {
            return IExecute<bool>("futureReplicaDirChanged", newDestinationDir);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/cluster/Partition.html#hasLateTransaction(long)"/>
        /// </summary>
        /// <param name="currentTimeMs"><see cref="long"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool HasLateTransaction(long currentTimeMs)
        {
            return IExecute<bool>("hasLateTransaction", currentTimeMs);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/cluster/Partition.html#isAddingReplica(int)"/>
        /// </summary>
        /// <param name="replicaId"><see cref="int"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsAddingReplica(int replicaId)
        {
            return IExecute<bool>("isAddingReplica", replicaId);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/cluster/Partition.html#maybeCreateFutureReplica(java.lang.String,kafka.server.checkpoints.OffsetCheckpoints)"/>
        /// </summary>
        /// <param name="logDir"><see cref="string"/></param>
        /// <param name="highWatermarkCheckpoints"><see cref="Kafka.Server.Checkpoints.OffsetCheckpoints"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool MaybeCreateFutureReplica(string logDir, Kafka.Server.Checkpoints.OffsetCheckpoints highWatermarkCheckpoints)
        {
            return IExecute<bool>("maybeCreateFutureReplica", logDir, highWatermarkCheckpoints);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/cluster/Partition.html#newMeter(com.yammer.metrics.core.MetricName,java.lang.String,java.util.concurrent.TimeUnit)"/>
        /// </summary>
        /// <param name="metricName"><see cref="Com.Yammer.Metrics.Core.MetricName"/></param>
        /// <param name="eventType"><see cref="string"/></param>
        /// <param name="timeUnit"><see cref="Java.Util.Concurrent.TimeUnit"/></param>
        /// <returns><see cref="Com.Yammer.Metrics.Core.Meter"/></returns>
        public Com.Yammer.Metrics.Core.Meter NewMeter(Com.Yammer.Metrics.Core.MetricName metricName, string eventType, Java.Util.Concurrent.TimeUnit timeUnit)
        {
            return IExecute<Com.Yammer.Metrics.Core.Meter>("newMeter", metricName, eventType, timeUnit);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/cluster/Partition.html#msgWithLogIdent(java.lang.String)"/>
        /// </summary>
        /// <param name="msg"><see cref="string"/></param>
        /// <returns><see cref="string"/></returns>
        public string MsgWithLogIdent(string msg)
        {
            return IExecute<string>("msgWithLogIdent", msg);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/cluster/Partition.html#appendRecordsToLeader(org.apache.kafka.common.record.MemoryRecords,kafka.log.AppendOrigin,int,kafka.server.RequestLocal)"/>
        /// </summary>
        /// <param name="records"><see cref="Org.Apache.Kafka.Common.Record.MemoryRecords"/></param>
        /// <param name="origin"><see cref="Kafka.Log.AppendOrigin"/></param>
        /// <param name="requiredAcks"><see cref="int"/></param>
        /// <param name="requestLocal"><see cref="Kafka.Server.RequestLocal"/></param>
        /// <returns><see cref="Kafka.Log.LogAppendInfo"/></returns>
        public Kafka.Log.LogAppendInfo AppendRecordsToLeader(Org.Apache.Kafka.Common.Record.MemoryRecords records, Kafka.Log.AppendOrigin origin, int requiredAcks, Kafka.Server.RequestLocal requestLocal)
        {
            return IExecute<Kafka.Log.LogAppendInfo>("appendRecordsToLeader", records, origin, requiredAcks, requestLocal);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/cluster/Partition.html#fetchOffsetSnapshot(java.util.Optional,boolean)"/>
        /// </summary>
        /// <param name="currentLeaderEpoch"><see cref="Java.Util.Optional"/></param>
        /// <param name="fetchOnlyFromLeader"><see cref="bool"/></param>
        /// <returns><see cref="Kafka.Log.LogOffsetSnapshot"/></returns>
        public Kafka.Log.LogOffsetSnapshot FetchOffsetSnapshot(Java.Util.Optional<int?> currentLeaderEpoch, bool fetchOnlyFromLeader)
        {
            return IExecute<Kafka.Log.LogOffsetSnapshot>("fetchOffsetSnapshot", currentLeaderEpoch, fetchOnlyFromLeader);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/cluster/Partition.html#fetchRecords(kafka.server.FetchParams,org.apache.kafka.common.requests.FetchRequest.PartitionData,long,int,boolean,boolean)"/>
        /// </summary>
        /// <param name="fetchParams"><see cref="Kafka.Server.FetchParams"/></param>
        /// <param name="fetchPartitionData"><see cref="Org.Apache.Kafka.Common.Requests.FetchRequest.PartitionData"/></param>
        /// <param name="fetchTimeMs"><see cref="long"/></param>
        /// <param name="maxBytes"><see cref="int"/></param>
        /// <param name="minOneMessage"><see cref="bool"/></param>
        /// <param name="updateFetchState"><see cref="bool"/></param>
        /// <returns><see cref="Kafka.Log.LogReadInfo"/></returns>
        public Kafka.Log.LogReadInfo FetchRecords(Kafka.Server.FetchParams fetchParams, Org.Apache.Kafka.Common.Requests.FetchRequest.PartitionData fetchPartitionData, long fetchTimeMs, int maxBytes, bool minOneMessage, bool updateFetchState)
        {
            return IExecute<Kafka.Log.LogReadInfo>("fetchRecords", fetchParams, fetchPartitionData, fetchTimeMs, maxBytes, minOneMessage, updateFetchState);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/cluster/Partition.html#deleteRecordsOnLeader(long)"/>
        /// </summary>
        /// <param name="offset"><see cref="long"/></param>
        /// <returns><see cref="Kafka.Server.LogDeleteRecordsResult"/></returns>
        public Kafka.Server.LogDeleteRecordsResult DeleteRecordsOnLeader(long offset)
        {
            return IExecute<Kafka.Server.LogDeleteRecordsResult>("deleteRecordsOnLeader", offset);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/cluster/Partition.html#lastOffsetForLeaderEpoch(java.util.Optional,int,boolean)"/>
        /// </summary>
        /// <param name="currentLeaderEpoch"><see cref="Java.Util.Optional"/></param>
        /// <param name="leaderEpoch"><see cref="int"/></param>
        /// <param name="fetchOnlyFromLeader"><see cref="bool"/></param>
        /// <returns><see cref="Org.Apache.Kafka.Common.Message.OffsetForLeaderEpochResponseData.EpochEndOffset"/></returns>
        public Org.Apache.Kafka.Common.Message.OffsetForLeaderEpochResponseData.EpochEndOffset LastOffsetForLeaderEpoch(Java.Util.Optional<int?> currentLeaderEpoch, int leaderEpoch, bool fetchOnlyFromLeader)
        {
            return IExecute<Org.Apache.Kafka.Common.Message.OffsetForLeaderEpochResponseData.EpochEndOffset>("lastOffsetForLeaderEpoch", currentLeaderEpoch, leaderEpoch, fetchOnlyFromLeader);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/cluster/Partition.html#delete()"/>
        /// </summary>
        public void Delete()
        {
            IExecute("delete");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/cluster/Partition.html#maybeShrinkIsr()"/>
        /// </summary>
        public void MaybeShrinkIsr()
        {
            IExecute("maybeShrinkIsr");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/cluster/Partition.html#removeFutureLocalReplica(boolean)"/>
        /// </summary>
        /// <param name="deleteFromLogDir"><see cref="bool"/></param>
        public void RemoveFutureLocalReplica(bool deleteFromLogDir)
        {
            IExecute("removeFutureLocalReplica", deleteFromLogDir);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/cluster/Partition.html#setLog(kafka.log.UnifiedLog,boolean)"/>
        /// </summary>
        /// <param name="log"><see cref="Kafka.Log.UnifiedLog"/></param>
        /// <param name="isFutureLog"><see cref="bool"/></param>
        public void SetLog(Kafka.Log.UnifiedLog log, bool isFutureLog)
        {
            IExecute("setLog", log, isFutureLog);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/cluster/Partition.html#truncateFullyAndStartAt(long,boolean)"/>
        /// </summary>
        /// <param name="newOffset"><see cref="long"/></param>
        /// <param name="isFuture"><see cref="bool"/></param>
        public void TruncateFullyAndStartAt(long newOffset, bool isFuture)
        {
            IExecute("truncateFullyAndStartAt", newOffset, isFuture);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/cluster/Partition.html#truncateTo(long,boolean)"/>
        /// </summary>
        /// <param name="offset"><see cref="long"/></param>
        /// <param name="isFuture"><see cref="bool"/></param>
        public void TruncateTo(long offset, bool isFuture)
        {
            IExecute("truncateTo", offset, isFuture);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/cluster/Partition.html#updateFollowerFetchState(kafka.cluster.Replica,kafka.server.LogOffsetMetadata,long,long,long)"/>
        /// </summary>
        /// <param name="replica"><see cref="Kafka.Cluster.Replica"/></param>
        /// <param name="followerFetchOffsetMetadata"><see cref="Kafka.Server.LogOffsetMetadata"/></param>
        /// <param name="followerStartOffset"><see cref="long"/></param>
        /// <param name="followerFetchTimeMs"><see cref="long"/></param>
        /// <param name="leaderEndOffset"><see cref="long"/></param>
        public void UpdateFollowerFetchState(Kafka.Cluster.Replica replica, Kafka.Server.LogOffsetMetadata followerFetchOffsetMetadata, long followerStartOffset, long followerFetchTimeMs, long leaderEndOffset)
        {
            IExecute("updateFollowerFetchState", replica, followerFetchOffsetMetadata, followerStartOffset, followerFetchTimeMs, leaderEndOffset);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}