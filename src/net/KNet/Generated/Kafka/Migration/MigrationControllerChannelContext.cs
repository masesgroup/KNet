/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka_2.13-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Kafka.Migration
{
    #region MigrationControllerChannelContext
    public partial class MigrationControllerChannelContext
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/migration/MigrationControllerChannelContext.html#%3Cinit%3E(org.apache.kafka.image.MetadataImage)"/>
        /// </summary>
        /// <param name="image"><see cref="Org.Apache.Kafka.Image.MetadataImage"/></param>
        public MigrationControllerChannelContext(Org.Apache.Kafka.Image.MetadataImage image)
            : base(image)
        {
        }

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Kafka.Migration.MigrationControllerChannelContext"/> to <see cref="Kafka.Controller.ControllerChannelContext"/>
        /// </summary>
        public static implicit operator Kafka.Controller.ControllerChannelContext(Kafka.Migration.MigrationControllerChannelContext t) => t.Cast<Kafka.Controller.ControllerChannelContext>();

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/migration/MigrationControllerChannelContext.html#image()"/> 
        /// </summary>
        public Org.Apache.Kafka.Image.MetadataImage Image
        {
            get { return IExecute<Org.Apache.Kafka.Image.MetadataImage>("image"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/migration/MigrationControllerChannelContext.html#isReplicaOnline(int,org.apache.kafka.common.TopicPartition)"/>
        /// </summary>
        /// <param name="brokerId"><see cref="int"/></param>
        /// <param name="partition"><see cref="Org.Apache.Kafka.Common.TopicPartition"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsReplicaOnline(int brokerId, Org.Apache.Kafka.Common.TopicPartition partition)
        {
            return IExecute<bool>("isReplicaOnline", brokerId, partition);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/migration/MigrationControllerChannelContext.html#isTopicDeletionInProgress(java.lang.String)"/>
        /// </summary>
        /// <param name="topicName"><see cref="string"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsTopicDeletionInProgress(string topicName)
        {
            return IExecute<bool>("isTopicDeletionInProgress", topicName);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/migration/MigrationControllerChannelContext.html#isTopicQueuedUpForDeletion(java.lang.String)"/>
        /// </summary>
        /// <param name="topic"><see cref="string"/></param>
        /// <returns><see cref="bool"/></returns>
        public bool IsTopicQueuedUpForDeletion(string topic)
        {
            return IExecute<bool>("isTopicQueuedUpForDeletion", topic);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/migration/MigrationControllerChannelContext.html#leaderEpoch(org.apache.kafka.common.TopicPartition)"/>
        /// </summary>
        /// <param name="topicPartition"><see cref="Org.Apache.Kafka.Common.TopicPartition"/></param>
        /// <returns><see cref="int"/></returns>
        public int LeaderEpoch(Org.Apache.Kafka.Common.TopicPartition topicPartition)
        {
            return IExecute<int>("leaderEpoch", topicPartition);
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}