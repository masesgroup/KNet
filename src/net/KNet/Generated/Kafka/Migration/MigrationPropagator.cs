/*
*  Copyright 2023 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 1.5.5.0)
*  using kafka_2.13-3.4.0.jar as reference
*/

using MASES.JCOBridge.C2JBridge;

namespace Kafka.Migration
{
    #region MigrationPropagator
    public partial class MigrationPropagator
    {
        #region Constructors
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/migration/MigrationPropagator.html#%3Cinit%3E(int,kafka.server.KafkaConfig)"/>
        /// </summary>
        /// <param name="nodeId"><see cref="int"/></param>
        /// <param name="config"><see cref="Kafka.Server.KafkaConfig"/></param>
        public MigrationPropagator(int nodeId, Kafka.Server.KafkaConfig config)
            : base(nodeId, config)
        {
        }

        #endregion

        #region Class/Interface conversion operators
        /// <summary>
        /// Converter from <see cref="Kafka.Migration.MigrationPropagator"/> to <see cref="Org.Apache.Kafka.Metadata.Migration.LegacyPropagator"/>
        /// </summary>
        public static implicit operator Org.Apache.Kafka.Metadata.Migration.LegacyPropagator(Kafka.Migration.MigrationPropagator t) => t.Cast<Org.Apache.Kafka.Metadata.Migration.LegacyPropagator>();

        #endregion

        #region Fields

        #endregion

        #region Static methods

        #endregion

        #region Instance methods
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/migration/MigrationPropagator.html#channelManager()"/> 
        /// </summary>
        public Kafka.Controller.ControllerChannelManager ChannelManager
        {
            get { return IExecute<Kafka.Controller.ControllerChannelManager>("channelManager"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/migration/MigrationPropagator.html#requestBatch()"/> 
        /// </summary>
        public Kafka.Migration.MigrationPropagatorBatch RequestBatch
        {
            get { return IExecute<Kafka.Migration.MigrationPropagatorBatch>("requestBatch"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/migration/MigrationPropagator.html#stateChangeLogger()"/> 
        /// </summary>
        public Kafka.Controller.StateChangeLogger StateChangeLogger
        {
            get { return IExecute<Kafka.Controller.StateChangeLogger>("stateChangeLogger"); }
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/migration/MigrationPropagator.html#clear()"/>
        /// </summary>
        public void Clear()
        {
            IExecute("clear");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/migration/MigrationPropagator.html#publishMetadata(org.apache.kafka.image.MetadataImage)"/>
        /// </summary>
        /// <param name="image"><see cref="Org.Apache.Kafka.Image.MetadataImage"/></param>
        public void PublishMetadata(Org.Apache.Kafka.Image.MetadataImage image)
        {
            IExecute("publishMetadata", image);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/migration/MigrationPropagator.html#sendRPCsToBrokersFromMetadataDelta(org.apache.kafka.image.MetadataDelta,org.apache.kafka.image.MetadataImage,int)"/>
        /// </summary>
        /// <param name="delta"><see cref="Org.Apache.Kafka.Image.MetadataDelta"/></param>
        /// <param name="image"><see cref="Org.Apache.Kafka.Image.MetadataImage"/></param>
        /// <param name="zkControllerEpoch"><see cref="int"/></param>
        public void SendRPCsToBrokersFromMetadataDelta(Org.Apache.Kafka.Image.MetadataDelta delta, Org.Apache.Kafka.Image.MetadataImage image, int zkControllerEpoch)
        {
            IExecute("sendRPCsToBrokersFromMetadataDelta", delta, image, zkControllerEpoch);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/migration/MigrationPropagator.html#sendRPCsToBrokersFromMetadataImage(org.apache.kafka.image.MetadataImage,int)"/>
        /// </summary>
        /// <param name="image"><see cref="Org.Apache.Kafka.Image.MetadataImage"/></param>
        /// <param name="zkControllerEpoch"><see cref="int"/></param>
        public void SendRPCsToBrokersFromMetadataImage(Org.Apache.Kafka.Image.MetadataImage image, int zkControllerEpoch)
        {
            IExecute("sendRPCsToBrokersFromMetadataImage", image, zkControllerEpoch);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/migration/MigrationPropagator.html#setMetadataVersion(org.apache.kafka.server.common.MetadataVersion)"/>
        /// </summary>
        /// <param name="newMetadataVersion"><see cref="Org.Apache.Kafka.Server.Common.MetadataVersion"/></param>
        public void SetMetadataVersion(Org.Apache.Kafka.Server.Common.MetadataVersion newMetadataVersion)
        {
            IExecute("setMetadataVersion", newMetadataVersion);
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/migration/MigrationPropagator.html#shutdown()"/>
        /// </summary>
        public void Shutdown()
        {
            IExecute("shutdown");
        }
        /// <summary>
        /// <see href="https://www.javadoc.io/static/org.apache.kafka/kafka_2.13/3.4.0/kafka/migration/MigrationPropagator.html#startup()"/>
        /// </summary>
        public void Startup()
        {
            IExecute("startup");
        }

        #endregion

        #region Nested classes

        #endregion

        // TODO: complete the class
    }
    #endregion
}