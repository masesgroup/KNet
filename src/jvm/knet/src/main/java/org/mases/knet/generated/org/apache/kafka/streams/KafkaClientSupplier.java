/*
*  Copyright 2024 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.5.9.0)
*/

package org.mases.knet.generated.org.apache.kafka.streams;

public final class KafkaClientSupplier implements org.mases.jcobridge.IJCListener, org.apache.kafka.streams.KafkaClientSupplier {
    final org.mases.jcobridge.JCListener _internalListener;

    public KafkaClientSupplier(String key) throws org.mases.jcobridge.JCNativeException {
        super();
        _internalListener = new org.mases.jcobridge.JCListener(key);
    }

    public synchronized void release() {
       _internalListener.release();
    }
    
    public synchronized void raiseEvent(String eventName) {
       _internalListener.raiseEvent(eventName);
    }
    
    public synchronized void raiseEvent(String eventName, Object e) {
       _internalListener.raiseEvent(eventName, e);
    }
    
    public synchronized void raiseEvent(String eventName, Object e, Object... objects) {
       _internalListener.raiseEvent(eventName, e, objects);
    }
    
    public Object getEventData() {
       return _internalListener.getEventData();
    }
    
    public boolean hasExtraData() {
       return _internalListener.hasExtraData();
    }
    
    public int extraDataLength() {
       return _internalListener.extraDataLength();
    }
    
    public Object[] extraData() {
       return _internalListener.extraData();
    }
    
    public Object getReturnData() {
       return _internalListener.getReturnData();
    }
    
    public void setReturnData(Object retData) {
       _internalListener.setReturnData(retData);
    }

    //@Override
    public org.apache.kafka.clients.consumer.Consumer getConsumer(java.util.Map arg0) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("getConsumer", eventDataExchange, arg0); if (!eventDataExchange.getHasOverride()) throw new UnsupportedOperationException("The method shall be implemented in .NET side since does not have a default implementation within the JVM"); Object retVal = eventDataExchange.getReturnData(); return (org.apache.kafka.clients.consumer.Consumer)retVal;
    }
    //@Override
    public org.apache.kafka.clients.consumer.Consumer getGlobalConsumer(java.util.Map arg0) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("getGlobalConsumer", eventDataExchange, arg0); if (!eventDataExchange.getHasOverride()) throw new UnsupportedOperationException("The method shall be implemented in .NET side since does not have a default implementation within the JVM"); Object retVal = eventDataExchange.getReturnData(); return (org.apache.kafka.clients.consumer.Consumer)retVal;
    }
    //@Override
    public org.apache.kafka.clients.consumer.Consumer getRestoreConsumer(java.util.Map arg0) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("getRestoreConsumer", eventDataExchange, arg0); if (!eventDataExchange.getHasOverride()) throw new UnsupportedOperationException("The method shall be implemented in .NET side since does not have a default implementation within the JVM"); Object retVal = eventDataExchange.getReturnData(); return (org.apache.kafka.clients.consumer.Consumer)retVal;
    }
    //@Override
    public org.apache.kafka.clients.producer.Producer getProducer(java.util.Map arg0) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("getProducer", eventDataExchange, arg0); if (!eventDataExchange.getHasOverride()) throw new UnsupportedOperationException("The method shall be implemented in .NET side since does not have a default implementation within the JVM"); Object retVal = eventDataExchange.getReturnData(); return (org.apache.kafka.clients.producer.Producer)retVal;
    }
    //@Override
    public org.apache.kafka.clients.admin.Admin getAdmin(java.util.Map arg0) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("getAdmin", eventDataExchange, arg0); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = org.apache.kafka.streams.KafkaClientSupplier.super.getAdmin(arg0); else retVal = eventDataExchange.getReturnData(); return (org.apache.kafka.clients.admin.Admin)retVal;
    }
    //@Override
    public org.apache.kafka.clients.admin.Admin getAdminDefault(java.util.Map arg0) {
        return org.apache.kafka.streams.KafkaClientSupplier.super.getAdmin(arg0);
    }

}