/*
*  Copyright (c) 2021-2025 MASES s.r.l.
*
*  Licensed under the Apache License, Version 2.0 (the "License");
*  you may not use this file except in compliance with the License.
*  You may obtain a copy of the License at
*
*  http://www.apache.org/licenses/LICENSE-2.0
*
*  Unless required by applicable law or agreed to in writing, software
*  distributed under the License is distributed on an "AS IS" BASIS,
*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*  See the License for the specific language governing permissions and
*  limitations under the License.
*
*  Refer to LICENSE for more information.
*/

/*
*  This file is generated by MASES.JNetReflector (ver. 2.6.2.0)
*/

package org.mases.knet.generated.org.apache.kafka.common.serialization;

public final class Deserializer implements org.mases.jcobridge.IJCListener, org.apache.kafka.common.serialization.Deserializer {
    final org.mases.jcobridge.JCListener _internalListener;

    public Deserializer(String key) throws org.mases.jcobridge.JCNativeException {
        super();
        _internalListener = new org.mases.jcobridge.JCListener(key);
    }

    public synchronized void release() {
       _internalListener.release();
    }
    
    public synchronized void raiseEvent(String eventName) {
       _internalListener.raiseEvent(eventName);
    }
    
    public synchronized void raiseEvent(String eventName, Object e) {
       _internalListener.raiseEvent(eventName, e);
    }
    
    public synchronized void raiseEvent(String eventName, Object e, Object... objects) {
       _internalListener.raiseEvent(eventName, e, objects);
    }
    
    public Object getEventData() {
       return _internalListener.getEventData();
    }
    
    public boolean hasExtraData() {
       return _internalListener.hasExtraData();
    }
    
    public int extraDataLength() {
       return _internalListener.extraDataLength();
    }
    
    public Object[] extraData() {
       return _internalListener.extraData();
    }
    
    public Object getReturnData() {
       return _internalListener.getReturnData();
    }
    
    public void setReturnData(Object retData) {
       _internalListener.setReturnData(retData);
    }

    //@Override
    public java.lang.Object deserialize(java.lang.String arg0, byte[] arg1) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("deserialize", eventDataExchange, arg0, arg1); if (!eventDataExchange.getHasOverride()) throw new UnsupportedOperationException("The method shall be implemented in .NET side since does not have a default implementation within the JVM"); Object retVal = eventDataExchange.getReturnData(); return (java.lang.Object)retVal;
    }
    //@Override
    public java.lang.Object deserialize(java.lang.String arg0, org.apache.kafka.common.header.Headers arg1, byte[] arg2) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("deserialize3", eventDataExchange, arg0, arg1, arg2); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = org.apache.kafka.common.serialization.Deserializer.super.deserialize(arg0, arg1, arg2); else retVal = eventDataExchange.getReturnData(); return (java.lang.Object)retVal;
    }
    //@Override
    public java.lang.Object deserializeDefault(java.lang.String arg0, org.apache.kafka.common.header.Headers arg1, byte[] arg2) {
        return org.apache.kafka.common.serialization.Deserializer.super.deserialize(arg0, arg1, arg2);
    }
    //@Override
    public java.lang.Object deserialize(java.lang.String arg0, org.apache.kafka.common.header.Headers arg1, java.nio.ByteBuffer arg2) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("deserialize3_2", eventDataExchange, arg0, arg1, arg2); Object retVal; if (!eventDataExchange.getHasOverride()) retVal = org.apache.kafka.common.serialization.Deserializer.super.deserialize(arg0, arg1, arg2); else retVal = eventDataExchange.getReturnData(); return (java.lang.Object)retVal;
    }
    //@Override
    public java.lang.Object deserializeDefault(java.lang.String arg0, org.apache.kafka.common.header.Headers arg1, java.nio.ByteBuffer arg2) {
        return org.apache.kafka.common.serialization.Deserializer.super.deserialize(arg0, arg1, arg2);
    }
    //@Override
    public void close() {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("close", eventDataExchange); if (!eventDataExchange.getHasOverride()) org.apache.kafka.common.serialization.Deserializer.super.close();
    }
    //@Override
    public void closeDefault() {
        org.apache.kafka.common.serialization.Deserializer.super.close();
    }
    //@Override
    public void configure(java.util.Map arg0, boolean arg1) {
        org.mases.jnet.developed.JNetEventResult eventDataExchange = new org.mases.jnet.developed.JNetEventResult();
        raiseEvent("configure", eventDataExchange, arg0, arg1); if (!eventDataExchange.getHasOverride()) org.apache.kafka.common.serialization.Deserializer.super.configure(arg0, arg1);
    }
    //@Override
    public void configureDefault(java.util.Map arg0, boolean arg1) {
        org.apache.kafka.common.serialization.Deserializer.super.configure(arg0, arg1);
    }

}