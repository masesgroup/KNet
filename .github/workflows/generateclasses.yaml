# This is a basic workflow to help you get started with Actions

name: CI_GENERATECLASSES

# Controls when the action will run. Triggers the workflow on push
# events but only for the master branch
on:
  workflow_dispatch:
    inputs:
      GeneratePR:
        description: 'Generate the PR at the end'
        required: true
        default: false
        type: boolean
      UseLatestJNetReflector:
        description: 'Shall use latest unpublished version of JNetReflector'
        required: true
        default: false
        type: boolean
      ContinueOnLatestJNetReflectorError:
        description: 'Shall continue execution in case of failure of build from latest reflection done with JNetReflector'
        required: true
        default: false
        type: boolean

# This workflow contains one job called "build_documentation"
jobs:
  build_classes:
    # The type of runner that the job will run on
    runs-on: windows-2022

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Runs a set of commands using the runners shell
      # Support longpaths
      - name: Support long paths
        run: git config --system core.longpaths true
      
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        with:
          fetch-depth: '1'
          submodules: 'true'

      - uses: actions/checkout@v4
        if: ${{ inputs.UseLatestJNetReflector == true }}
        with:
          repository: masesgroup/JNet
          path: JNet

      - name: Pre compile
        run: dotnet build --no-incremental --configuration Release /p:Platform="Any CPU" /p:NoWarn="0108%3B1030%3B0618" src\net\KNet\KNet.csproj
        env:
          GITHUB_SIMPLIFIED_GENERATION: true
          
      - name: Set up Apache Maven Central
        uses: actions/setup-java@v4
        with: # running setup-java again overwrites the settings.xml
          distribution: temurin
          java-version: 11
          cache: 'maven'
          server-id: ossrh # Value of the distributionManagement/repository/id field of the pom.xml
          server-username: MAVEN_USERNAME # env variable for username in deploy
          server-password: MAVEN_CENTRAL_TOKEN # env variable for token in deploy
          gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }} # Value of the GPG private key to import
          gpg-passphrase: MAVEN_GPG_PASSPHRASE # env variable for GPG private key passphrase

      - name: Create Jars
        run: mvn "-DmavenSkipMain=true" --file ./src/jvm/knet/pom.xml --no-transfer-progress package
        env:
          MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
          MAVEN_CENTRAL_TOKEN: ${{ secrets.MAVEN_CENTRAL_TOKEN }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}

      - name: Clear C# generated files
        run: Remove-Item .\src\net\KNet\Generated\* -Recurse -Force -Exclude README.md

      - name: Clear Java generated files
        run: Remove-Item .\src\jvm\knet\src\main\java\org\mases\knet\generated\* -Recurse -Force -Exclude README.md

      - name: Prebuild JNetReflector
        if: ${{ inputs.UseLatestJNetReflector == true }}
        run: dotnet build --no-incremental --configuration Release JNet\src\net\JNetReflector\JNetReflector.csproj

      - name: Create Jars of JNetReflector
        if: ${{ inputs.UseLatestJNetReflector == true }}
        run: mvn "-Djcobridgepath=../../../binReflector/net8.0/JCOBridge.jar" --file ./JNet/src/jvm/jnet/pom.xml --no-transfer-progress package
        env:
          MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
          MAVEN_CENTRAL_TOKEN: ${{ secrets.MAVEN_CENTRAL_TOKEN }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}

      - name: Build JNetReflector
        if: ${{ inputs.UseLatestJNetReflector == true }}
        run: dotnet build --no-incremental --configuration Release JNet\src\net\JNetReflector\JNetReflector.csproj

      - name: Download latest published version of JNetReflector
        run: dotnet tool update --version 2.5.10 -g MASES.JNetReflector
        if: ${{ inputs.UseLatestJNetReflector == false }}

      - name: Build classes with unpublished JNetReflector
        if: ${{ inputs.UseLatestJNetReflector == true }}
        shell: cmd
        run: |
          cd JNet\binReflector\net8.0
          MASES.JNetReflector.exe -TraceLevel 1 -TraceTo %GITHUB_WORKSPACE%\JNetReflector.txt -OriginRootPath %GITHUB_WORKSPACE%\jars -DestinationRootPath %GITHUB_WORKSPACE%\src\ -ConfigurationFile %GITHUB_WORKSPACE%\src\configuration.json
        env:
          JCOBRIDGE_LicensePath: ${{ secrets.JCOBRIDGE_ONLINE }}

      - name: Build classes with latest published version of JNetReflector
        if: ${{ inputs.UseLatestJNetReflector == false }}
        shell: cmd
        run: jnetreflector -TraceLevel 1 -TraceTo %GITHUB_WORKSPACE%\JNetReflector.txt -OriginRootPath %GITHUB_WORKSPACE%\jars -DestinationRootPath %GITHUB_WORKSPACE%\src\ -ConfigurationFile %GITHUB_WORKSPACE%\src\configuration.json
        env:
          JCOBRIDGE_LicensePath: ${{ secrets.JCOBRIDGE_ONLINE }}

      - uses: actions/upload-artifact@v4
        with:
          name: JNetReflector report
          path: .\JNetReflector.txt

      - name: Try compilation of Jars
        continue-on-error: ${{ inputs.ContinueOnLatestJNetReflectorError == true }}
        if: ${{ inputs.UseLatestJNetReflector == true }}
        run: mvn --file ./src/jvm/knet/pom.xml --no-transfer-progress package

      - name: Try compilation of C#
        continue-on-error: ${{ inputs.ContinueOnLatestJNetReflectorError == true }}
        if: ${{ inputs.UseLatestJNetReflector == true }}
        run: dotnet build --no-incremental --configuration Release /p:Platform="Any CPU" /p:NoWarn="0108%3B1030%3B0618" src\net\KNet\KNet.csproj

      - name: Request a PR to commit changes made with unpublished version of JNetReflector
        if: ${{ github.repository_owner == 'masesgroup' && inputs.GeneratePR == true && inputs.UseLatestJNetReflector == true }} #do not push any changes outside main repo or GeneratePR is false
        uses: peter-evans/create-pull-request@v7
        with:
          branch-suffix: short-commit-hash
          add-paths: src/*.*
          commit-message: Update generated classes using last unpublished version of JNetReflector
          title: Changes by GitHub action
          body: |
            Automated changes by GitHub action, fix #92
          reviewers: masesdevelopers
          assignees: masesdevelopers
          labels: java, .NET, enhancement 

      - name: Extract commit SHA
        if: ${{ github.repository_owner == 'masesgroup' && inputs.GeneratePR == true && inputs.UseLatestJNetReflector == false }}
        run: |
          echo "GITHUB_COMMIT_MESSAGE=$(echo $GITHUB_SHA | cut -c 1-7)" >> $GITHUB_ENV
        shell: bash

      - name: Request a PR to commit changes made with latest published version of JNetReflector
        if: ${{ github.repository_owner == 'masesgroup' && inputs.GeneratePR == true && inputs.UseLatestJNetReflector == false }} #do not push any changes outside main repo or GeneratePR is false
        uses: peter-evans/create-pull-request@v7
        with:
          branch-suffix: short-commit-hash
          add-paths: src/*.*
          commit-message: Update generated classes after commit ${{ env.GITHUB_COMMIT_MESSAGE }}
          title: Changes by GitHub action
          body: |
            Automated changes by GitHub action, fix #92
          reviewers: masesdevelopers
          assignees: masesdevelopers
          labels: java, .NET, enhancement 
