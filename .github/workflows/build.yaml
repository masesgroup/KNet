# This is a basic workflow to help you get started with Actions

name: CI_BUILD

# Controls when the action will run. Triggers the workflow on push
# events but only for the master branch
on:
  push:
    # only trigger on branches, not on tags
    branches: '**'
    
# This workflow contains two jobs called "check_changes", "build_windows"
jobs:
  # Verify if a build is needed
  check_changes:
    name: Check changed files
    outputs:
      run_build_windows: ${{ steps.check_files.outputs.run_build_windows }}
    runs-on: ubuntu-latest
    steps:
      - id: get_changed_files
        uses: jitterbit/get-changed-files@v1
        with:
          format: 'csv'
      - id: check_files
        run: |
          mapfile -d ',' -t added_modified_files < <(printf '%s,' '${{ steps.get_changed_files.outputs.added_modified }}')
          for added_modified_file in "${added_modified_files[@]}"; do
              if [[ $added_modified_file == ".github/workflows/build.yaml"* ]]; then
                echo "$added_modified_file is myself."
                echo "::set-output name=run_build_windows::true"
                break
              fi
              if [[ $added_modified_file == "src/"* ]]; then
                echo "$added_modified_file file is under the directory 'src/'."
                echo "::set-output name=run_build_windows::true"
                break
              fi
          done
      - name: Get run_build_windows
        run: echo "The selected run_build_windows is ${{ steps.check_files.outputs.run_build_windows }}"

  build_container_linux:
    needs: check_changes
    if: "always() && needs.check_changes.outputs.run_build_windows == 'true'"
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:    
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          fetch-depth: '1'
          submodules: 'true'

      - name: Cache local Maven repository
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Pre compile
        run: dotnet build --no-incremental --configuration Release /p:Platform="Any CPU" src/net/KNet/KNet.csproj
        
      - name: Set up Apache Maven Central
        uses: actions/setup-java@v1
        with: # running setup-java again overwrites the settings.xml
          java-version: 11
          server-id: ossrh # Value of the distributionManagement/repository/id field of the pom.xml
          server-username: MAVEN_USERNAME # env variable for username in deploy
          server-password: MAVEN_CENTRAL_TOKEN # env variable for token in deploy
          gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }} # Value of the GPG private key to import
          gpg-passphrase: MAVEN_GPG_PASSPHRASE # env variable for GPG private key passphrase

      - name: Install local file to be used within Javadoc plugin of generated POM
        run: mvn install:install-file -DgroupId=JCOBridge -DartifactId=JCOBridge -Dversion=2.4.14 -Dpackaging=jar -Dfile=./bin/net6.0/JCOBridge.jar
        shell: bash

      - name: Create Jars
        run: mvn --file ./src/java/knet/pom.xml --no-transfer-progress package
        env:
          MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
          MAVEN_CENTRAL_TOKEN: ${{ secrets.MAVEN_CENTRAL_TOKEN }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}
        
      - name: Build Docker Image
        run: docker build -t mases.knetcli -f Dockerfile.linux .

      - name: Save Docker Image
        run: docker save mases.knetcli:latest > container.linux.tar

      - name: Compress Docker Image
        run: gzip container.linux.tar

      - uses: actions/upload-artifact@v2
        with:
          name: container.linux.tar.gz
          path: ./container.linux.tar.gz

      - name: Tag Docker Image
        run: docker tag mases.knetcli ghcr.io/${{ github.repository_owner }}/mases.knetcli:latest

      - name: Push Docker Image
        run: docker image push ghcr.io/${{ github.repository_owner }}/mases.knetcli:latest

  # Now run "build_windows"
  build_windows:
    needs: check_changes
    if: "always() && needs.check_changes.outputs.run_build_windows == 'true'"
    # The type of runner that the job will run on
    runs-on: windows-2022

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:   
      # Runs a set of commands using the runners shell
      # Support longpaths
      - name: Support long paths
        run: git config --system core.longpaths true
      
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          fetch-depth: '1'
          submodules: 'true'

      - name: Cache local Maven repository
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Pre compile templates
        run: dotnet build --no-incremental --configuration Release /p:Platform="Any CPU" src\net\KNetTemplates.sln

      - name: Pre compile
        run: dotnet build --no-incremental --configuration Release /p:Platform="Any CPU" src\net\KNet\KNet.csproj

      - name: Set up Apache Maven Central
        uses: actions/setup-java@v1
        with: # running setup-java again overwrites the settings.xml
          java-version: 11
          server-id: ossrh # Value of the distributionManagement/repository/id field of the pom.xml
          server-username: MAVEN_USERNAME # env variable for username in deploy
          server-password: MAVEN_CENTRAL_TOKEN # env variable for token in deploy
          gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }} # Value of the GPG private key to import
          gpg-passphrase: MAVEN_GPG_PASSPHRASE # env variable for GPG private key passphrase

      - name: Install local file to be used within Javadoc plugin of generated POM
        run: mvn install:install-file -DgroupId=JCOBridge -DartifactId=JCOBridge -Dversion=2.4.14 -Dpackaging=jar -Dfile=./bin/net6.0/JCOBridge.jar
        shell: bash

      - name: Create Jars
        run: mvn --file ./src/java/knet/pom.xml --no-transfer-progress package
        env:
          MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
          MAVEN_CENTRAL_TOKEN: ${{ secrets.MAVEN_CENTRAL_TOKEN }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}

      - name: Compile command line
        run: dotnet build --no-incremental --configuration Release /p:Platform="Any CPU" src\net\KNetCLI\KNetCLI.csproj

      - uses: nuget/setup-nuget@v1
        with:
          nuget-version: '5.x'
          
      - run: nuget pack src\net\KNetCLI\KNetCLI.nuspec -OutputDirectory .\bin

      - name: Recompile to create nuget packages
        run: dotnet build --no-incremental --configuration Release /p:Platform="Any CPU" src\net\KNet.sln

      - name: Clear documentation folder 
        run: Remove-Item .\docs\* -Recurse -Force -Exclude _config.yml

      - name: Build documentation
        run: |
          choco install docfx
          cd src\net\Documentation
          docfx

#       - name: Build Docker Image
#         run: docker build -t mases.knetcli -f Dockerfile.windows .
#
#       - name: Save Docker Image
#         run: docker save -o container.windows.zip mases.knetcli
# 
#       - uses: actions/upload-artifact@v2
#         with:
#           name: container.windows.zip
#           path: .\container.windows.zip

      - uses: actions/upload-artifact@v2
        with:
          name: KNet
          path: .\bin\*nupkg

      - name: Extract commit SHA
        run: |
          echo "GITHUB_COMMIT_MESSAGE=$(echo $GITHUB_SHA | cut -c 1-7)" >> $GITHUB_ENV
        shell: bash

      - name: Commit changes
        if: ${{ github.repository_owner == 'masesgroup'}} #do not push any changes outside main repo
        uses: EndBug/add-and-commit@v5
        with:
          author_name: github-actions
          author_email: 41898282+github-actions[bot]@users.noreply.github.com
          add: '.\docs\*.*'
          message: Update documentation after commit ${{ env.GITHUB_COMMIT_MESSAGE }}
 
