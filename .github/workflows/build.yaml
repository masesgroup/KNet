# This is a basic workflow to help you get started with Actions

name: CI_BUILD

# Controls when the action will run. Triggers the workflow on push
# events but only for the master branch
on:
  push:
    # only trigger on branches, not on tags
    branches: '**'

# This workflow contains two jobs called "check_changes", "build_windows"
jobs:
  # Verify if a build is needed
  check_changes:
    name: Check changed files
    outputs:
      run_build_windows: ${{ steps.check_files.outputs.run_build_windows }}
    runs-on: ubuntu-latest
    steps:
      - id: get_changed_files
        uses: masesgroup/retrieve-changed-files@v3
        with:
          format: 'csv'
      - id: check_files
        run: |
          mapfile -d ',' -t added_modified_files < <(printf '%s,' '${{ steps.get_changed_files.outputs.added_modified }}')
          for added_modified_file in "${added_modified_files[@]}"; do
              if [[ $added_modified_file == ".github/workflows/build.yaml"* ]]; then
                echo "$added_modified_file is myself."
                echo "run_build_windows=true" >> $GITHUB_OUTPUT
                break
              fi
              if [[ $added_modified_file == "src/"* ]]; then
                echo "$added_modified_file file is under the directory 'src/'."
                echo "run_build_windows=true" >> $GITHUB_OUTPUT
                break
              fi
              if [[ $added_modified_file == "DockerfileKNet.linux"* ]]; then
                echo "$added_modified_file file changed"
                echo "run_build_windows=true" >> $GITHUB_OUTPUT
                break
              fi
              if [[ $added_modified_file == "DockerfileKNetConnect.linux"* ]]; then
                echo "$added_modified_file file changed"
                echo "run_build_windows=true" >> $GITHUB_OUTPUT
                break
              fi
          done
      - name: Get run_build_windows
        run: echo "The selected run_build_windows is ${{ steps.check_files.outputs.run_build_windows }}"

  build_container_linux:
    needs: check_changes
    if: "always() && needs.check_changes.outputs.run_build_windows == 'true'"
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:    
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        with:
          fetch-depth: '1'
          submodules: 'true'

      - name: Pre compile
        run: dotnet build --no-incremental --configuration Release /p:Platform="Any CPU" /p:NoWarn="0108%3B1030" src/net/KNet/KNet.csproj
        
      - name: Set up Apache Maven Central
        uses: actions/setup-java@v3
        with: # running setup-java again overwrites the settings.xml
          distribution: temurin
          java-version: 11
          cache: 'maven'
          server-id: ossrh # Value of the distributionManagement/repository/id field of the pom.xml
          server-username: MAVEN_USERNAME # env variable for username in deploy
          server-password: MAVEN_CENTRAL_TOKEN # env variable for token in deploy
          gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }} # Value of the GPG private key to import
          gpg-passphrase: MAVEN_GPG_PASSPHRASE # env variable for GPG private key passphrase

      - name: Install local file to be used within Javadoc plugin of generated POM
        run: mvn install:install-file -DgroupId=JCOBridge -DartifactId=JCOBridge -Dversion=2.5.8 -Dpackaging=jar -Dfile=../../../bin/net6.0/JCOBridge.jar -f ./src/java/knet/pom.xml
        shell: bash

      - name: Create Jars
        run: mvn --file ./src/java/knet/pom.xml --no-transfer-progress package
        env:
          MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
          MAVEN_CENTRAL_TOKEN: ${{ secrets.MAVEN_CENTRAL_TOKEN }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}
        
      - name: Build KNet Docker Image
        run: docker build -t mases.knet -f DockerfileKNet.linux .

      - name: Save Docker Image
        run: docker image save -o mases.knet.linux.tar mases.knet
        
      - name: Compress KNet Docker Image
        run: gzip mases.knet.linux.tar
          
      - name: Build KNetConnect Docker Image
        run: docker build -t mases.knetconnect -f DockerfileKNetConnect.linux .

      - name: Save KNetConnect Docker Image
        run: docker image save -o mases.knetconnect.linux.tar mases.knetconnect
        
      - name: Compress KNetConnect Docker Image
        run: gzip mases.knetconnect.linux.tar
        
      - uses: actions/upload-artifact@v3
        with:
          name: Docker Images
          path: ./*.tar.gz

  # Now run "build_windows"
  build_windows:
    needs: check_changes
    if: "always() && needs.check_changes.outputs.run_build_windows == 'true'"
    # The type of runner that the job will run on
    runs-on: windows-2022

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:   
      # Runs a set of commands using the runners shell
      # Support longpaths
      - name: Support long paths
        run: git config --system core.longpaths true
      
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        with:
          fetch-depth: '1'
          submodules: 'true'

      - name: Pre compile tests
        run: dotnet build --no-incremental --configuration Release /p:Platform="Any CPU" /p:NoWarn="0108%3B1030" tests\KNetTest.sln

      - name: Pre compile
        run: dotnet build --no-incremental --configuration Release /p:Platform="Any CPU" /p:NoWarn="0108%3B1030" src\net\KNet\KNet.csproj

      - name: Set up Apache Maven Central
        uses: actions/setup-java@v3
        with: # running setup-java again overwrites the settings.xml
          distribution: temurin
          java-version: 11
          cache: 'maven'
          server-id: ossrh # Value of the distributionManagement/repository/id field of the pom.xml
          server-username: MAVEN_USERNAME # env variable for username in deploy
          server-password: MAVEN_CENTRAL_TOKEN # env variable for token in deploy
          gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }} # Value of the GPG private key to import
          gpg-passphrase: MAVEN_GPG_PASSPHRASE # env variable for GPG private key passphrase

      - name: Install local file to be used within Javadoc plugin of generated POM
        run: mvn install:install-file -DgroupId=JCOBridge -DartifactId=JCOBridge -Dversion=2.5.8 -Dpackaging=jar -Dfile=../../../bin/net6.0/JCOBridge.jar -f ./src/java/knet/pom.xml
        shell: bash

      - name: Create Jars
        run: mvn --file ./src/java/knet/pom.xml --no-transfer-progress package
        env:
          MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
          MAVEN_CENTRAL_TOKEN: ${{ secrets.MAVEN_CENTRAL_TOKEN }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}

      - name: Compile command line
        run: dotnet build --no-incremental --configuration Release /p:Platform="Any CPU" /p:NoWarn="0108%3B1030" src\net\KNetCLI\KNetCLI.csproj

      - name: Compile KNet Connect
        run: dotnet build --no-incremental --configuration Release /p:Platform="Any CPU" /p:NoWarn="0108%3B1030" src\net\KNetConnect\KNetConnect.csproj

      - name: Compile KNetPS
        run: dotnet build --no-incremental --configuration Release /p:Platform="Any CPU" /p:NoWarn="0108%3B1030" src\net\KNetPS\KNetPS.csproj

      - uses: nuget/setup-nuget@v1.2.0
        with:
          nuget-version: '5.x'
          
      - run: nuget pack src\net\KNetCLI\KNetCLI.nuspec -OutputDirectory .\bin
      - run: nuget pack src\net\KNetConnect\KNetConnect.nuspec -OutputDirectory .\bin

      - name: Recompile to create nuget packages
        run: dotnet build --no-incremental --configuration Release /p:Platform="Any CPU" /p:NoWarn="0108%3B1030" src\net\KNet.sln

      - name: Prepare PowerShell package
        run: |
          Copy-Item .\src\net\KNetPS\MASES.KNetPS.psd1 -Destination .\MASES.KNetPS\MASES.KNetPS.psd1 -Force
          Copy-Item .\src\net\KNetPS\MASES.KNetPS.psm1 -Destination .\MASES.KNetPS\MASES.KNetPS.psm1 -Force
          New-FileCatalog -Path .\MASES.KNetPS\ -CatalogFilePath .\MASES.KNetPS\MASES.KNetPS.cat
        shell: pwsh
     
      - name: Create PowerShell package
        run: |
          $env:DOTNET_CLI_UI_LANGUAGE="en_US"
          Register-PSRepository -Name Local_Nuget_Feed -SourceLocation $env:GITHUB_WORKSPACE\bin -PublishLocation $env:GITHUB_WORKSPACE\bin -InstallationPolicy Trusted
          Publish-Module -Path .\MASES.KNetPS -Repository Local_Nuget_Feed -NuGetApiKey 'ABC123'
        shell: pwsh

      - uses: actions/upload-artifact@v3
        with:
          name: KNet
          path: .\bin\*nupkg

      - name: Clear documentation folder 
        run: Remove-Item .\docs\* -Recurse -Force -Exclude _config.yml,CNAME

      - name: Build documentation
        if: ${{ github.repository_owner == 'masesgroup'}} #if outside main repo do not build docs, it will be checked during pullrequest or build on main branch
        run: |
          choco install docfx
          cd src\documentation
          docfx

      - name: Extract commit SHA
        run: |
          echo "GITHUB_COMMIT_MESSAGE=$(echo $GITHUB_SHA | cut -c 1-7)" >> $GITHUB_ENV
        shell: bash

      - name: Request a PR to commit changes
        if: ${{ github.repository_owner == 'masesgroup'}} #do not push any changes outside main repo
        uses: peter-evans/create-pull-request@v5
        with:
          branch-suffix: short-commit-hash
          add-paths: docs/*.*
          commit-message: Update documentation after commit ${{ env.GITHUB_COMMIT_MESSAGE }}
          title: Changes by GitHub action
          body: Automated changes by GitHub action
          reviewers: masesdevelopers
          assignees: masesdevelopers
          labels: documentation, enhancement 

     #
     # - name: Commit changes
     #   if: ${{ github.repository_owner == 'masesgroup'}} #do not push any changes outside main repo
     #   uses: EndBug/add-and-commit@v9
     #   with:
     #     author_name: github-actions
     #     author_email: 41898282+github-actions[bot]@users.noreply.github.com
     #     add: '.\docs\*.*'
     #     message: Update documentation after commit ${{ env.GITHUB_COMMIT_MESSAGE }}
 
