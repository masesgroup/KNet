# This is a basic workflow to help you get started with Actions

name: CI_BUILD

# Controls when the action will run. Triggers the workflow on push
# events but only for the master branch
on:
  push:
    # only trigger on branches, not on tags
    branches: '**'

# This workflow contains two jobs called "check_changes", "build_windows"
jobs:
  # Verify if a build is needed
  check_changes:
    name: Check changed files
    outputs:
      run_build_windows: ${{ steps.check_files.outputs.run_build_windows }}
    runs-on: ubuntu-latest
    steps:
      - id: get_changed_files
        uses: masesgroup/retrieve-changed-files@v3
        with:
          format: 'csv'
      - id: check_files
        run: |
          mapfile -d ',' -t added_modified_files < <(printf '%s,' '${{ steps.get_changed_files.outputs.added_modified }}')
          for added_modified_file in "${added_modified_files[@]}"; do
              if [[ $added_modified_file == ".github/workflows/build.yaml"* ]]; then
                echo "$added_modified_file is myself."
                echo "run_build_windows=true" >> $GITHUB_OUTPUT
                break
              fi
              if [[ $added_modified_file == "src/container/"* ]]; then
                echo "$added_modified_file file is under the directory 'src/'."
                echo "run_build_windows=true" >> $GITHUB_OUTPUT
                break
              fi
              if [[ $added_modified_file == "src/jvm/"* ]]; then
                echo "$added_modified_file file is under the directory 'src/'."
                echo "run_build_windows=true" >> $GITHUB_OUTPUT
                break
              fi
              if [[ $added_modified_file == "src/net/"* ]]; then
                echo "$added_modified_file file is under the directory 'src/'."
                echo "run_build_windows=true" >> $GITHUB_OUTPUT
                break
              fi
              if [[ $added_modified_file == "tests/"* ]]; then
                echo "$added_modified_file file is under the directory 'src/'."
                echo "run_build_windows=true" >> $GITHUB_OUTPUT
                break
              fi
          done
      - name: Get run_build_windows
        run: echo "The selected run_build_windows is ${{ steps.check_files.outputs.run_build_windows }}"

  build_container_linux:
    needs: check_changes
    if: "always() && needs.check_changes.outputs.run_build_windows == 'true'"
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:    
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        with:
          fetch-depth: '1'
          submodules: 'true'

      - name: Pre compile
        run: dotnet build --no-incremental --configuration Release /p:Platform="Any CPU" /p:NoWarn="0108%3B1030%3B0618" src/net/KNet/KNet.csproj
        
      - name: Set up Apache Maven Central
        uses: actions/setup-java@v4
        with: # running setup-java again overwrites the settings.xml
          distribution: temurin
          java-version: 11
          cache: 'maven'
          server-id: ossrh # Value of the distributionManagement/repository/id field of the pom.xml
          server-username: MAVEN_USERNAME # env variable for username in deploy
          server-password: MAVEN_CENTRAL_TOKEN # env variable for token in deploy
          gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }} # Value of the GPG private key to import
          gpg-passphrase: MAVEN_GPG_PASSPHRASE # env variable for GPG private key passphrase

      - name: Create Jars
        run: mvn --file ./src/jvm/knet/pom.xml --no-transfer-progress package
        env:
          MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
          MAVEN_CENTRAL_TOKEN: ${{ secrets.MAVEN_CENTRAL_TOKEN }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}
        
      - name: Build KNet Docker Image
        run: docker build -t knet -f ./src/container/DockerfileKNet.linux .

      - name: Save Docker Image
        run: docker image save -o knet.linux.tar knet
        
      - name: Compress KNet Docker Image
        run: gzip knet.linux.tar

      - uses: actions/upload-artifact@v4
        with:
          name: Docker Images
          path: ./*.tar.gz

  # Now run "build_windows"
  build_windows:
    needs: check_changes
    if: "always() && needs.check_changes.outputs.run_build_windows == 'true'"
    # The type of runner that the job will run on
    runs-on: windows-2022

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:   
      # Runs a set of commands using the runners shell
      # Support longpaths
      - name: Support long paths
        run: git config --system core.longpaths true
      
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        with:
          fetch-depth: '1'
          submodules: 'true'

      - name: Pre compile
        run: dotnet build --no-incremental --configuration Release /p:Platform="Any CPU" /p:NoWarn="0108%3B1030%3B0618" src\net\KNet\KNet.csproj
        env:
          GITHUB_SIMPLIFIED_GENERATION: true

      - name: Set up Apache Maven Central
        uses: actions/setup-java@v4
        with: # running setup-java again overwrites the settings.xml
          distribution: temurin
          java-version: 11
          cache: 'maven'
          server-id: ossrh # Value of the distributionManagement/repository/id field of the pom.xml
          server-username: MAVEN_USERNAME # env variable for username in deploy
          server-password: MAVEN_CENTRAL_TOKEN # env variable for token in deploy
          gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }} # Value of the GPG private key to import
          gpg-passphrase: MAVEN_GPG_PASSPHRASE # env variable for GPG private key passphrase

      - name: Create Jars
        run: mvn --file ./src/jvm/knet/pom.xml --no-transfer-progress package
        env:
          MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
          MAVEN_CENTRAL_TOKEN: ${{ secrets.MAVEN_CENTRAL_TOKEN }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}

      - name: Compile command line
        run: dotnet build --no-incremental --configuration Release /p:Platform="Any CPU" /p:NoWarn="0108%3B1030%3B0618" src\net\KNetCLI\KNetCLI.csproj

      - name: Compile KNet Connect
        run: dotnet build --no-incremental --configuration Release /p:Platform="Any CPU" /p:NoWarn="0108%3B1030%3B0618" src\net\KNetConnect\KNetConnect.csproj

      - name: Compile KNetPS
        run: dotnet build --no-incremental --configuration Release /p:Platform="Any CPU" /p:NoWarn="0108%3B1030%3B0618" src\net\KNetPS\KNetPS.csproj

      - uses: nuget/setup-nuget@v2.0.0
        with:
          nuget-version: '5.x'
          
      - run: nuget pack src\net\KNetCLI\KNetCLI.nuspec -OutputDirectory .\bin
      - run: nuget pack src\net\KNetConnect\KNetConnect.nuspec -OutputDirectory .\bin

      - name: Recompile to create nuget packages
        run: dotnet build --no-incremental --configuration Release /p:Platform="Any CPU" /p:NoWarn="0108%3B1030%3B0618" src\net\KNet.sln
          
      - name: Prepare PowerShell package
        run: |
          Copy-Item .\src\net\KNetPS\MASES.KNetPS.psd1 -Destination .\MASES.KNetPS\MASES.KNetPS.psd1 -Force
          Copy-Item .\src\net\KNetPS\MASES.KNetPS.psm1 -Destination .\MASES.KNetPS\MASES.KNetPS.psm1 -Force
        shell: pwsh
     
      - name: Create PowerShell package
        run: |
          $env:DOTNET_CLI_UI_LANGUAGE="en_US"
          Register-PSRepository -Name Local_Nuget_Feed -SourceLocation $env:GITHUB_WORKSPACE\bin -PublishLocation $env:GITHUB_WORKSPACE\bin -InstallationPolicy Trusted
          Publish-Module -Path .\MASES.KNetPS -Repository Local_Nuget_Feed -NuGetApiKey 'ABC123'
        shell: pwsh

      - uses: actions/upload-artifact@v4
        with:
          name: KNet
          path: .\bin\*nupkg

      - name: Compile tests
        run: dotnet build --no-incremental --configuration Release /p:Platform="Any CPU" /p:NoWarn="0108%3B1030%3B0618" tests\net\KNetTest.sln
        env:
          GITHUB_TEST_PREPARATION: true

      - name: Prepare configuration files
        run: |
          Copy-Item src\container\config_container\zookeeper.properties -Destination bin\net462\zookeeper.properties -Force
          Copy-Item src\container\config_container\server.properties -Destination bin\net462\server.properties -Force
          Copy-Item src\config\log4j.properties -Destination bin\net462\log4j.properties -Force
          Copy-Item src\container\config_container\zookeeper.properties -Destination bin\net6.0\zookeeper.properties -Force
          Copy-Item src\container\config_container\server.properties -Destination bin\net6.0\server.properties -Force
          Copy-Item src\config\log4j.properties -Destination bin\net6.0\log4j.properties -Force
          Copy-Item src\container\config_container\zookeeper.properties -Destination bin\net8.0\zookeeper.properties -Force
          Copy-Item src\container\config_container\server.properties -Destination bin\net8.0\server.properties -Force
          Copy-Item src\config\log4j.properties -Destination bin\net8.0\log4j.properties -Force

      - name: Save KNet net462 bin in cache
        uses: actions/cache/save@v4
        with:
          enableCrossOsArchive: true
          path: ./bin/net462/
          key: KNet_net462_bin_${{ github.sha }}
          
      - name: Save KNet net6.0 bin in cache
        uses: actions/cache/save@v4
        with:
          enableCrossOsArchive: true
          path: ./bin/net6.0/
          key: KNet_net6.0_bin_${{ github.sha }}
          
      - name: Save KNet net8.0 bin in cache
        uses: actions/cache/save@v4
        with:
          enableCrossOsArchive: true
          path: ./bin/net8.0/
          key: KNet_net8.0_bin_${{ github.sha }}

      - name: Save KNet net462 binCLI in cache
        uses: actions/cache/save@v4
        with:
          enableCrossOsArchive: true
          path: ./binCLI/net462/
          key: KNet_net462_binCLI_${{ github.sha }}
          
      - name: Save KNet net6.0 binCLI in cache
        uses: actions/cache/save@v4
        with:
          enableCrossOsArchive: true
          path: ./binCLI/net6.0/
          key: KNet_net6.0_binCLI_${{ github.sha }}
          
      - name: Save KNet net8.0 binCLI in cache
        uses: actions/cache/save@v4
        with:
          enableCrossOsArchive: true
          path: ./binCLI/net8.0/
          key: KNet_net8.0_binCLI_${{ github.sha }}

  build_container_knettest:
    needs: check_changes
    if: "always() && needs.check_changes.outputs.run_build_windows == 'true'"
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:    
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        with:
          fetch-depth: '1'
          submodules: 'true'

      - name: Pre compile
        run: dotnet build --no-incremental --configuration Release /p:Platform="Any CPU" /p:NoWarn="0108%3B1030%3B0618" src/net/KNet/KNet.csproj
        env:
          GITHUB_SIMPLIFIED_GENERATION: true
          
      - name: Set up Apache Maven Central
        uses: actions/setup-java@v4
        with: # running setup-java again overwrites the settings.xml
          distribution: temurin
          java-version: 11
          cache: 'maven'
          server-id: ossrh # Value of the distributionManagement/repository/id field of the pom.xml
          server-username: MAVEN_USERNAME # env variable for username in deploy
          server-password: MAVEN_CENTRAL_TOKEN # env variable for token in deploy
          gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }} # Value of the GPG private key to import
          gpg-passphrase: MAVEN_GPG_PASSPHRASE # env variable for GPG private key passphrase

      - name: Create Jars
        run: mvn --file ./src/jvm/knet/pom.xml --no-transfer-progress package
        env:
          MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
          MAVEN_CENTRAL_TOKEN: ${{ secrets.MAVEN_CENTRAL_TOKEN }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}
        
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository_owner }}/knettest

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          file: ./src/container/DockerfileKNet.linux
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  execute_KNetTest_linux:
    needs: [build_windows, build_container_knettest]
    services:
      kafka:
        # Private registry image
        image: ghcr.io/${{ github.repository_owner }}/knettest:${{ github.ref_name }}
        credentials:
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
        ports:
          - 9092:9092
        env:
          KNET_DOCKER_RUNNING_MODE: server
          JCOBRIDGE_LicensePath: ${{ secrets.JCOBRIDGE_ONLINE }}
          
    strategy:
      fail-fast: false
      matrix:
        os: [ 'ubuntu-latest' ] #, 'macos-latest', 'macos-13' , 'windows-latest' ]
        framework: [ 'net6.0', 'net8.0' ]
        buffered: [ 'runBuffered', '']
        extraValue: [ '', 'withBigBigExtraValue' ]
        jdk_vendor: [ 'temurin', 'zulu', 'oracle'] #removed 'microsoft', 'corretto', to reduce matrix size
        jdk_version: [ '11', '17', '21' ] # only LTS versions
        exclude:
          - jdk_vendor: oracle
            jdk_version: 11
        
    runs-on: ${{ matrix.os }}
    steps:
      - name: Restore KNet ${{ matrix.framework }} bin from cache
        uses: actions/cache/restore@v4
        with:
          fail-on-cache-miss: true
          enableCrossOsArchive: true
          path: ./bin/${{ matrix.framework }}/
          key: KNet_${{ matrix.framework }}_bin_${{ github.sha }}
 
      - name: Set up JDK distribution
        uses: actions/setup-java@v4
        with: # running setup-java again overwrites the settings.xml
          distribution: ${{ matrix.jdk_vendor }}
          java-version: ${{ matrix.jdk_version }}
 
      - name: Executing KNetTest on ${{ matrix.os }} with ${{ matrix.jdk_vendor }} ${{ matrix.jdk_version }}
        if: ${{ matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest' || matrix.os == 'macos-13' }}
        run: dotnet ./bin/${{ matrix.framework }}/KNetTest.dll localhost:9092 useConsumeCallback randomizeTopicName ${{ matrix.buffered }} ${{ matrix.extraValue }}
        env:
          JCOBRIDGE_LicensePath: ${{ secrets.JCOBRIDGE_ONLINE }}
 
      - name: Executing KNetTestSerDes on ${{ matrix.os }} with ${{ matrix.jdk_vendor }} ${{ matrix.jdk_version }}
        shell: pwsh
        run: dotnet ${{ github.workspace }}/bin/${{ matrix.framework }}/KNetTestSerDes.dll
        env:
          JCOBRIDGE_LicensePath: ${{ secrets.JCOBRIDGE_ONLINE }}
 
      # Following shall be disabled since not supported from GitHub
      #
      #- name: Executing KNetTest on Windows with ${{ matrix.jdk_vendor }} ${{ matrix.jdk_version }}
      #  if: ${{ matrix.os == 'windows-latest' && matrix.framework != 'net462' }}
      #  run: dotnet .\bin\${{ matrix.framework }}\KNetTest.dll localhost:9092 randomizeTopicName ${{ matrix.buffered }} ${{ matrix.extraValue }}
      #  env:
      #    JCOBRIDGE_LicensePath: ${{ secrets.JCOBRIDGE_ONLINE }}
      #    
      #- name: Executing KNetTest on Windows with ${{ matrix.jdk_vendor }} ${{ matrix.jdk_version }}
      #  if: ${{ matrix.os == 'windows-latest' && matrix.framework == 'net462' }}
      #  run: .\bin\${{ matrix.framework }}\KNetTest.exe localhost:9092 randomizeTopicName ${{ matrix.buffered }} ${{ matrix.extraValue }}
      #  env:
      #    JCOBRIDGE_LicensePath: ${{ secrets.JCOBRIDGE_ONLINE }}
      
  execute_KNetTest_other:
    needs: [build_windows]
    strategy:
      fail-fast: false
      matrix:
        os: [ 'macos-latest', 'macos-13' , 'windows-latest' ]
        framework: [ 'net462', 'net6.0', 'net8.0' ]
        buffered: [ 'runBuffered', '']
        extraValue: [ '', 'withBigBigExtraValue' ]
        jdk_vendor: [ 'temurin', 'zulu', 'oracle'] #removed 'microsoft', 'corretto', to reduce matrix size
        jdk_version: [ '11', '17', '21' ] # only LTS versions
        exclude:
          - os: macos-latest
            framework: net462
          - os: macos-latest
            framework: net6.0
          - os: macos-13
            framework: net462
          - os: macos-13
            framework: net6.0
          - jdk_vendor: oracle
            jdk_version: 11
        
    runs-on: ${{ matrix.os }}
    steps:
      - name: Restore KNet ${{ matrix.framework }} bin from cache
        uses: actions/cache/restore@v4
        with:
          fail-on-cache-miss: true
          enableCrossOsArchive: true
          path: ./bin/${{ matrix.framework }}/
          key: KNet_${{ matrix.framework }}_bin_${{ github.sha }}

      - name: Restore KNetCLI ${{ matrix.framework }} binCLI from cache
        uses: actions/cache/restore@v4
        with:
          fail-on-cache-miss: true
          enableCrossOsArchive: true
          path: ./binCLI/${{ matrix.framework }}/
          key: KNet_${{ matrix.framework }}_binCLI_${{ github.sha }}

      - name: Set up JDK distribution
        uses: actions/setup-java@v4
        with: # running setup-java again overwrites the settings.xml
          distribution: ${{ matrix.jdk_vendor }}
          java-version: ${{ matrix.jdk_version }}

      - name: Start Kafka on ${{ matrix.os }} with ${{ matrix.jdk_vendor }} ${{ matrix.jdk_version }}
        if: ${{ matrix.os != 'windows-latest' }}
        shell: pwsh
        run: |
          New-Item -Path "${{ github.workspace }}/binCLI/" -Name "logfiles"
          Start-Process -FilePath dotnet -ArgumentList ( '${{ github.workspace }}/binCLI/${{ matrix.framework }}/MASES.KNetCLI.dll', 'zookeeperstart', '-LogPath', '${{ github.workspace }}/binCLI/logfiles/', '-Log4JConfiguration', '${{ github.workspace }}/bin/${{ matrix.framework }}/log4j.properties', '${{ github.workspace }}/bin/${{ matrix.framework }}/zookeeper.properties', '-RSE', '${{ github.workspace }}/binCLI/logfiles/zookeeper_err.log', '-RSO', '${{ github.workspace }}/binCLI/logfiles/zookeeper_out.log' )
          Start-Process -FilePath dotnet -ArgumentList ( '${{ github.workspace }}/binCLI/${{ matrix.framework }}/MASES.KNetCLI.dll', 'kafkastart', '-LogPath', '${{ github.workspace }}/binCLI/logfiles/', '-Log4JConfiguration', '${{ github.workspace }}/bin/${{ matrix.framework }}/log4j.properties', '${{ github.workspace }}/bin/${{ matrix.framework }}/server.properties', '-RSE', '${{ github.workspace }}/binCLI/logfiles/kafka_err.log', '-RSO', '${{ github.workspace }}/binCLI/logfiles/kafka_out.log' )
        env:
          JCOBRIDGE_LicensePath: ${{ secrets.JCOBRIDGE_ONLINE }}

      - name: Start Kafka on ${{ matrix.os }} with ${{ matrix.jdk_vendor }} ${{ matrix.jdk_version }}
        if: ${{ matrix.os == 'windows-latest' }}
        shell: pwsh
        run: |
          New-Item -Path "${{ github.workspace }}/binCLI/" -Name "logfiles"
          Start-Process -FilePath ${{ github.workspace }}\binCLI\${{ matrix.framework }}\MASES.KNetCLI.exe -ArgumentList ( 'zookeeperstart', '-LogPath', '${{ github.workspace }}/binCLI/logfiles/', '-Log4JConfiguration', '${{ github.workspace }}/bin/${{ matrix.framework }}/log4j.properties', '${{ github.workspace }}/bin/${{ matrix.framework }}/zookeeper.properties', '-RSE', '${{ github.workspace }}/binCLI/logfiles/zookeeper_err.log', '-RSO', '${{ github.workspace }}/binCLI/logfiles/zookeeper_out.log' )
          Start-Process -FilePath ${{ github.workspace }}\binCLI\${{ matrix.framework }}\MASES.KNetCLI.exe -ArgumentList ( 'kafkastart', '-LogPath', '${{ github.workspace }}/binCLI/logfiles/', '-Log4JConfiguration', '${{ github.workspace }}/bin/${{ matrix.framework }}/log4j.properties', '${{ github.workspace }}/bin/${{ matrix.framework }}/server.properties', '-RSE', '${{ github.workspace }}/binCLI/logfiles/kafka_err.log', '-RSO', '${{ github.workspace }}/binCLI/logfiles/kafka_out.log' )
        env:
          JCOBRIDGE_LicensePath: ${{ secrets.JCOBRIDGE_ONLINE }}

      - name: Executing KNetTest on ${{ matrix.os }} with ${{ matrix.jdk_vendor }} ${{ matrix.jdk_version }}
        if: ${{ matrix.os != 'windows-latest' }}
        shell: pwsh
        run: dotnet ${{ github.workspace }}/bin/${{ matrix.framework }}/KNetTest.dll localhost:9092 useConsumeCallback randomizeTopicName ${{ matrix.buffered }} ${{ matrix.extraValue }}
        env:
          JCOBRIDGE_LicensePath: ${{ secrets.JCOBRIDGE_ONLINE }}
          
      - name: Executing KNetTest on ${{ matrix.os }} with ${{ matrix.jdk_vendor }} ${{ matrix.jdk_version }}
        if: ${{ matrix.os == 'windows-latest' }}
        shell: pwsh
        run: ${{ github.workspace }}/bin/${{ matrix.framework }}/KNetTest.exe localhost:9092 useConsumeCallback randomizeTopicName ${{ matrix.buffered }} ${{ matrix.extraValue }}
        env:
          JCOBRIDGE_LicensePath: ${{ secrets.JCOBRIDGE_ONLINE }}

      - name: Executing KNetTestSerDes on ${{ matrix.os }} with ${{ matrix.jdk_vendor }} ${{ matrix.jdk_version }}
        if: ${{ matrix.os != 'windows-latest' }}
        shell: pwsh
        run: dotnet ${{ github.workspace }}/bin/${{ matrix.framework }}/KNetTestSerDes.dll
        env:
          JCOBRIDGE_LicensePath: ${{ secrets.JCOBRIDGE_ONLINE }}

      - name: Executing KNetTestSerDes on ${{ matrix.os }} with ${{ matrix.jdk_vendor }} ${{ matrix.jdk_version }}
        if: ${{ matrix.os == 'windows-latest' }}
        shell: pwsh
        run: ${{ github.workspace }}\bin\${{ matrix.framework }}\KNetTestSerDes.exe
        env:
          JCOBRIDGE_LicensePath: ${{ secrets.JCOBRIDGE_ONLINE }}

      - uses: actions/upload-artifact@v4
        if: "always()"
        with:
          name: KNet_Server_${{ matrix.framework }}_${{ matrix.os }}_${{ matrix.jdk_vendor }}_${{ matrix.jdk_version }}
          path: ${{ github.workspace }}/binCLI/logfiles/
          retention-days: 7

  final_cleanup:
    needs: [ execute_KNetTest_linux, execute_KNetTest_other ]
    if: "always()"
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        with:
          fetch-depth: '1'

      - name: Clear caches
        run: |
          gh extension install actions/gh-actions-cache
          echo "Fetching list of cache key"
          cacheKeysForPR=$(gh actions-cache list --key KNet )
          ## Setting this to not fail the workflow while deleting cache keys.
          set +e
          echo "Deleting caches..."
          for cacheKey in $cacheKeysForPR
          do
              gh actions-cache delete $cacheKey --confirm
          done
          echo "Done"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
